// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import 'utils/dependencies.dart';

typedef VALUE = Uint8List;
// === xdr source ============================================================

//  struct SCPBallot
//  {
//      uint32 counter; // n
//      Value value;    // x
//  };

//  ===========================================================================
class SCPBallot extends XdrEncodable {
  late UINT32 counter;
  late VALUE value;

  SCPBallot(
    this.counter,
    this.value,
  );

  SCPBallot.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.counter = intFromXdr(stream);
    this.value = opaqueFromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    counter.toXdr(stream);
    value.toXdr(stream);
  }
}

class SCPStatementType extends XdrEncodable {
  static const PREPARE = 0;
  static const CONFIRM = 1;
  static const EXTERNALIZE = 2;
  static const NOMINATE = 3;
  late int value;

  SCPStatementType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  SCPStatementType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct SCPNomination
//  {
//      Hash quorumSetHash; // D
//      Value votes<>;      // X
//      Value accepted<>;   // Y
//  };

//  ===========================================================================
class SCPNomination extends XdrEncodable {
  late HASH quorumSetHash;
  late List<VALUE> votes;
  late List<VALUE> accepted;

  SCPNomination(
    this.quorumSetHash,
    this.votes,
    this.accepted,
  );

  SCPNomination.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.quorumSetHash = HASH.fromXdr(stream);
    length = intFromXdr(stream);
    votes = <VALUE>[];
    while (length > 0) {
      votes.add(opaqueFromXdr(stream));
      length--;
    }

    length = intFromXdr(stream);
    accepted = <VALUE>[];
    while (length > 0) {
      accepted.add(opaqueFromXdr(stream));
      length--;
    }
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    quorumSetHash.toXdr(stream);
    votes.length.toXdr(stream);
    votes.forEach((element) {
      element.toXdr(stream);
    });
    accepted.length.toXdr(stream);
    accepted.forEach((element) {
      element.toXdr(stream);
    });
  }
}
// === xdr source ============================================================

//  struct SCPStatement
//  {
//      NodeID nodeID;    // v
//      uint64 slotIndex; // i
//
//      union switch (SCPStatementType type)
//      {
//      case PREPARE:
//          struct
//          {
//              Hash quorumSetHash;       // D
//              SCPBallot ballot;         // b
//              SCPBallot* prepared;      // p
//              SCPBallot* preparedPrime; // p'
//              uint32 nC;                // c.n
//              uint32 nH;                // h.n
//          } prepare;
//      case CONFIRM:
//          struct
//          {
//              SCPBallot ballot;   // b
//              uint32 nPrepared;   // p.n
//              uint32 nCommit;     // c.n
//              uint32 nH;          // h.n
//              Hash quorumSetHash; // D
//          } confirm;
//      case EXTERNALIZE:
//          struct
//          {
//              SCPBallot commit;         // c
//              uint32 nH;                // h.n
//              Hash commitQuorumSetHash; // D used before EXTERNALIZE
//          } externalize;
//      case NOMINATE:
//          SCPNomination nominate;
//      }
//      pledges;
//  };

//  ===========================================================================
class SCPStatement extends XdrEncodable {
  late NODEID nodeID;
  late UINT64 slotIndex;
  late SCPStatementPledges pledges;

  SCPStatement(
    this.nodeID,
    this.slotIndex,
    this.pledges,
  );

  SCPStatement.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.nodeID = PublicKey.fromXdr(stream);
    this.slotIndex = longFromXdr(stream);
    this.pledges = SCPStatementPledges.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    nodeID.toXdr(stream);
    slotIndex.toXdr(stream);
    pledges.toXdr(stream);
  }
}

abstract class SCPStatementPledges extends XdrEncodable {
  late SCPStatementType discriminant;

  SCPStatementPledges(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SCPStatementPledges fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case SCPStatementType.PREPARE:
        return SCPStatementPledgesPrepare.fromXdr(stream);
      case SCPStatementType.CONFIRM:
        return SCPStatementPledgesConfirm.fromXdr(stream);
      case SCPStatementType.EXTERNALIZE:
        return SCPStatementPledgesExternalize.fromXdr(stream);
      case SCPStatementType.NOMINATE:
        return SCPStatementPledgesNominate.fromXdr(stream);
    }

    return SCPStatementPledgesPrepare.fromXdr(stream);
  }
}

class SCPStatementPledgesPrepare extends SCPStatementPledges {
  SCPStatementPledgesPrepare(this.prepare)
      : super(SCPStatementType(SCPStatementType.PREPARE));
  late SCPStatementPreparePrepare prepare;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    prepare.toXdr(stream);
  }

  SCPStatementPledgesPrepare.fromXdr(XdrDataInputStream stream)
      : super(SCPStatementType(SCPStatementType.PREPARE)) {
    this.prepare = SCPStatementPreparePrepare.fromXdr(stream);
  }
}

class SCPStatementPledgesConfirm extends SCPStatementPledges {
  SCPStatementPledgesConfirm(this.confirm)
      : super(SCPStatementType(SCPStatementType.CONFIRM));
  late SCPStatementConfirmConfirm confirm;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    confirm.toXdr(stream);
  }

  SCPStatementPledgesConfirm.fromXdr(XdrDataInputStream stream)
      : super(SCPStatementType(SCPStatementType.CONFIRM)) {
    this.confirm = SCPStatementConfirmConfirm.fromXdr(stream);
  }
}

class SCPStatementPledgesExternalize extends SCPStatementPledges {
  SCPStatementPledgesExternalize(this.externalize)
      : super(SCPStatementType(SCPStatementType.EXTERNALIZE));
  late SCPStatementExternalizeExternalize externalize;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    externalize.toXdr(stream);
  }

  SCPStatementPledgesExternalize.fromXdr(XdrDataInputStream stream)
      : super(SCPStatementType(SCPStatementType.EXTERNALIZE)) {
    this.externalize = SCPStatementExternalizeExternalize.fromXdr(stream);
  }
}

class SCPStatementPledgesNominate extends SCPStatementPledges {
  SCPStatementPledgesNominate(this.nominate)
      : super(SCPStatementType(SCPStatementType.NOMINATE));
  late SCPNomination nominate;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    nominate.toXdr(stream);
  }

  SCPStatementPledgesNominate.fromXdr(XdrDataInputStream stream)
      : super(SCPStatementType(SCPStatementType.NOMINATE)) {
    this.nominate = SCPNomination.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              Hash quorumSetHash;       // D
//              SCPBallot ballot;         // b
//              SCPBallot* prepared;      // p
//              SCPBallot* preparedPrime; // p'
//              uint32 nC;                // c.n
//              uint32 nH;                // h.n
//          }

//  ===========================================================================
class SCPStatementPreparePrepare extends XdrEncodable {
  late HASH quorumSetHash;
  late SCPBallot ballot;
  late SCPBallot? prepared;
  late SCPBallot? preparedPrime;
  late UINT32 nC;
  late UINT32 nH;

  SCPStatementPreparePrepare(
    this.quorumSetHash,
    this.ballot,
    this.prepared,
    this.preparedPrime,
    this.nC,
    this.nH,
  );

  SCPStatementPreparePrepare.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.quorumSetHash = HASH.fromXdr(stream);
    this.ballot = SCPBallot.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.prepared = SCPBallot.fromXdr(stream);
    } else {
      this.prepared = null;
    }
    if (boolFromXdr(stream)) {
      this.preparedPrime = SCPBallot.fromXdr(stream);
    } else {
      this.preparedPrime = null;
    }
    this.nC = intFromXdr(stream);
    this.nH = intFromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    quorumSetHash.toXdr(stream);
    ballot.toXdr(stream);
    if (prepared != null) {
      true.toXdr(stream);
      prepared?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    if (preparedPrime != null) {
      true.toXdr(stream);
      preparedPrime?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    nC.toXdr(stream);
    nH.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              SCPBallot ballot;   // b
//              uint32 nPrepared;   // p.n
//              uint32 nCommit;     // c.n
//              uint32 nH;          // h.n
//              Hash quorumSetHash; // D
//          }

//  ===========================================================================
class SCPStatementConfirmConfirm extends XdrEncodable {
  late SCPBallot ballot;
  late UINT32 nPrepared;
  late UINT32 nCommit;
  late UINT32 nH;
  late HASH quorumSetHash;

  SCPStatementConfirmConfirm(
    this.ballot,
    this.nPrepared,
    this.nCommit,
    this.nH,
    this.quorumSetHash,
  );

  SCPStatementConfirmConfirm.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ballot = SCPBallot.fromXdr(stream);
    this.nPrepared = intFromXdr(stream);
    this.nCommit = intFromXdr(stream);
    this.nH = intFromXdr(stream);
    this.quorumSetHash = HASH.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ballot.toXdr(stream);
    nPrepared.toXdr(stream);
    nCommit.toXdr(stream);
    nH.toXdr(stream);
    quorumSetHash.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              SCPBallot commit;         // c
//              uint32 nH;                // h.n
//              Hash commitQuorumSetHash; // D used before EXTERNALIZE
//          }

//  ===========================================================================
class SCPStatementExternalizeExternalize extends XdrEncodable {
  late SCPBallot commit;
  late UINT32 nH;
  late HASH commitQuorumSetHash;

  SCPStatementExternalizeExternalize(
    this.commit,
    this.nH,
    this.commitQuorumSetHash,
  );

  SCPStatementExternalizeExternalize.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.commit = SCPBallot.fromXdr(stream);
    this.nH = intFromXdr(stream);
    this.commitQuorumSetHash = HASH.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    commit.toXdr(stream);
    nH.toXdr(stream);
    commitQuorumSetHash.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct SCPEnvelope
//  {
//      SCPStatement statement;
//      Signature signature;
//  };

//  ===========================================================================
class SCPEnvelope extends XdrEncodable {
  late SCPStatement statement;
  late SIGNATURE signature;

  SCPEnvelope(
    this.statement,
    this.signature,
  );

  SCPEnvelope.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.statement = SCPStatement.fromXdr(stream);
    this.signature = opaqueFromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    statement.toXdr(stream);
    signature.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct SCPQuorumSet
//  {
//      uint32 threshold;
//      PublicKey validators<>;
//      SCPQuorumSet innerSets<>;
//  };

//  ===========================================================================
class SCPQuorumSet extends XdrEncodable {
  late UINT32 threshold;
  late List<PublicKey> validators;
  late List<SCPQuorumSet> innerSets;

  SCPQuorumSet(
    this.threshold,
    this.validators,
    this.innerSets,
  );

  SCPQuorumSet.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.threshold = intFromXdr(stream);
    length = intFromXdr(stream);
    validators = <PublicKey>[];
    while (length > 0) {
      validators.add(PublicKey.fromXdr(stream));
      length--;
    }

    length = intFromXdr(stream);
    innerSets = <SCPQuorumSet>[];
    while (length > 0) {
      innerSets.add(SCPQuorumSet.fromXdr(stream));
      length--;
    }
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    threshold.toXdr(stream);
    validators.length.toXdr(stream);
    validators.forEach((element) {
      element.toXdr(stream);
    });
    innerSets.length.toXdr(stream);
    innerSets.forEach((element) {
      element.toXdr(stream);
    });
  }
}
// === xdr source ============================================================

//  struct AccountKYCEntry
//  {
//      AccountID accountID;
//      longstring KYCData;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AccountKYCEntry extends XdrEncodable {
  late ACCOUNTID accountID;
  late LONGSTRING KYCData;
  late AccountKYCEntryExt ext;

  AccountKYCEntry(
    this.accountID,
    this.KYCData,
    this.ext,
  );

  AccountKYCEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.accountID = PublicKey.fromXdr(stream);
    this.KYCData = stringFromXdr(stream);
    this.ext = AccountKYCEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    KYCData.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AccountKYCEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AccountKYCEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AccountKYCEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AccountKYCEntryExtEmptyVersion.fromXdr(stream);
    }

    return AccountKYCEntryExtEmptyVersion.fromXdr(stream);
  }
}

class AccountKYCEntryExtEmptyVersion extends AccountKYCEntryExt {
  AccountKYCEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AccountKYCEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct AccountLimitsEntry
//  {
//      AccountID accountID;
//      Limits limits;
//
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AccountLimitsEntry extends XdrEncodable {
  late ACCOUNTID accountID;
  late Limits limits;
  late AccountLimitsEntryExt ext;

  AccountLimitsEntry(
    this.accountID,
    this.limits,
    this.ext,
  );

  AccountLimitsEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.accountID = PublicKey.fromXdr(stream);
    this.limits = Limits.fromXdr(stream);
    this.ext = AccountLimitsEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    limits.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AccountLimitsEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AccountLimitsEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AccountLimitsEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AccountLimitsEntryExtEmptyVersion.fromXdr(stream);
    }

    return AccountLimitsEntryExtEmptyVersion.fromXdr(stream);
  }
}

class AccountLimitsEntryExtEmptyVersion extends AccountLimitsEntryExt {
  AccountLimitsEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AccountLimitsEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct AccountRoleEntry
//  {
//      uint64 id;
//
//      uint64 ruleIDs<>;
//
//      longstring details;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AccountRoleEntry extends XdrEncodable {
  late UINT64 id;
  late List<UINT64> ruleIDs;
  late LONGSTRING details;
  late AccountRoleEntryExt ext;

  AccountRoleEntry(
    this.id,
    this.ruleIDs,
    this.details,
    this.ext,
  );

  AccountRoleEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    length = intFromXdr(stream);
    ruleIDs = <UINT64>[];
    while (length > 0) {
      ruleIDs.add(longFromXdr(stream));
      length--;
    }

    this.details = stringFromXdr(stream);
    this.ext = AccountRoleEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ruleIDs.length.toXdr(stream);
    ruleIDs.forEach((element) {
      element.toXdr(stream);
    });
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AccountRoleEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AccountRoleEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AccountRoleEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AccountRoleEntryExtEmptyVersion.fromXdr(stream);
    }

    return AccountRoleEntryExtEmptyVersion.fromXdr(stream);
  }
}

class AccountRoleEntryExtEmptyVersion extends AccountRoleEntryExt {
  AccountRoleEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AccountRoleEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct AccountRuleEntry
//  {
//      uint64 id;
//
//      AccountRuleResource resource;
//      AccountRuleAction action;
//
//      bool forbids;
//
//      longstring details;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AccountRuleEntry extends XdrEncodable {
  late UINT64 id;
  late AccountRuleResource resource;
  late AccountRuleAction action;
  late bool forbids;
  late LONGSTRING details;
  late AccountRuleEntryExt ext;

  AccountRuleEntry(
    this.id,
    this.resource,
    this.action,
    this.forbids,
    this.details,
    this.ext,
  );

  AccountRuleEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.resource = AccountRuleResource.fromXdr(stream);
    this.action = AccountRuleAction.fromXdr(stream);
    this.forbids = boolFromXdr(stream);
    this.details = stringFromXdr(stream);
    this.ext = AccountRuleEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    resource.toXdr(stream);
    action.toXdr(stream);
    forbids.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AccountRuleEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AccountRuleEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AccountRuleEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AccountRuleEntryExtEmptyVersion.fromXdr(stream);
    }

    return AccountRuleEntryExtEmptyVersion.fromXdr(stream);
  }
}

class AccountRuleEntryExtEmptyVersion extends AccountRuleEntryExt {
  AccountRuleEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AccountRuleEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct AccountSpecificRuleEntry
//  {
//      uint64 id;
//
//      LedgerKey ledgerKey;
//      AccountID* accountID;
//      bool forbids;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AccountSpecificRuleEntry extends XdrEncodable {
  late UINT64 id;
  late LedgerKey ledgerKey;
  late ACCOUNTID? accountID;
  late bool forbids;
  late AccountSpecificRuleEntryExt ext;

  AccountSpecificRuleEntry(
    this.id,
    this.ledgerKey,
    this.accountID,
    this.forbids,
    this.ext,
  );

  AccountSpecificRuleEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.ledgerKey = LedgerKey.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.accountID = PublicKey.fromXdr(stream);
    } else {
      this.accountID = null;
    }
    this.forbids = boolFromXdr(stream);
    this.ext = AccountSpecificRuleEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ledgerKey.toXdr(stream);
    if (accountID != null) {
      true.toXdr(stream);
      accountID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    forbids.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AccountSpecificRuleEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AccountSpecificRuleEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AccountSpecificRuleEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AccountSpecificRuleEntryExtEmptyVersion.fromXdr(stream);
    }

    return AccountSpecificRuleEntryExtEmptyVersion.fromXdr(stream);
  }
}

class AccountSpecificRuleEntryExtEmptyVersion
    extends AccountSpecificRuleEntryExt {
  AccountSpecificRuleEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AccountSpecificRuleEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct Limits
//  {
//      int64 dailyOut;
//      int64 weeklyOut;
//      int64 monthlyOut;
//      int64 annualOut;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class Limits extends XdrEncodable {
  late INT64 dailyOut;
  late INT64 weeklyOut;
  late INT64 monthlyOut;
  late INT64 annualOut;
  late LimitsExt ext;

  Limits(
    this.dailyOut,
    this.weeklyOut,
    this.monthlyOut,
    this.annualOut,
    this.ext,
  );

  Limits.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.dailyOut = longFromXdr(stream);
    this.weeklyOut = longFromXdr(stream);
    this.monthlyOut = longFromXdr(stream);
    this.annualOut = longFromXdr(stream);
    this.ext = LimitsExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    dailyOut.toXdr(stream);
    weeklyOut.toXdr(stream);
    monthlyOut.toXdr(stream);
    annualOut.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LimitsExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LimitsExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LimitsExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LimitsExtEmptyVersion.fromXdr(stream);
    }

    return LimitsExtEmptyVersion.fromXdr(stream);
  }
}

class LimitsExtEmptyVersion extends LimitsExt {
  LimitsExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LimitsExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct AccountEntry
//  {
//      AccountID accountID;      // master public key for this account
//
//      // Referral marketing
//      AccountID* referrer; // parent account
//
//      // sequenctial ID - unique identifier of the account, used by ingesting applications to
//      // identify account, while keeping size of index small
//      uint64 sequentialID;
//
//  	uint64 roleID;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AccountEntry extends XdrEncodable {
  late ACCOUNTID accountID;
  late ACCOUNTID? referrer;
  late UINT64 sequentialID;
  late UINT64 roleID;
  late AccountEntryExt ext;

  AccountEntry(
    this.accountID,
    this.referrer,
    this.sequentialID,
    this.roleID,
    this.ext,
  );

  AccountEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.accountID = PublicKey.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.referrer = PublicKey.fromXdr(stream);
    } else {
      this.referrer = null;
    }
    this.sequentialID = longFromXdr(stream);
    this.roleID = longFromXdr(stream);
    this.ext = AccountEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    if (referrer != null) {
      true.toXdr(stream);
      referrer?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    sequentialID.toXdr(stream);
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AccountEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AccountEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AccountEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AccountEntryExtEmptyVersion.fromXdr(stream);
    }

    return AccountEntryExtEmptyVersion.fromXdr(stream);
  }
}

class AccountEntryExtEmptyVersion extends AccountEntryExt {
  AccountEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AccountEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class AssetPairPolicy extends XdrEncodable {
  static const TRADEABLE_SECONDARY_MARKET = 1;
  static const PHYSICAL_PRICE_RESTRICTION = 2;
  static const CURRENT_PRICE_RESTRICTION = 4;
  late int value;

  AssetPairPolicy(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  AssetPairPolicy.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: `AssetPairEntry` is used in system to group different assets into pairs and set particular policies and properties for them
//  struct AssetPairEntry
//  {
//      //: Code of base asset of the asset pair
//      AssetCode base;
//      //: Code of quote asset of the asset pair
//      AssetCode quote;
//
//      //: defines an asset pair price as quote asset divided by base asset (i.e., amount of quote asset per 1 base asset)
//      int64 currentPrice;
//      //: Price of the asset pair assigned on creation. Can only be updated by application
//      //: the `ManageAssetPair` operation with action `UPDATE_PRICE`
//      int64 physicalPrice;
//
//      //: Price of the asset pair assigned on creation. Can only be updated by application
//      //: the `ManageAssetPair` operation with action `UPDATE_PRICE`
//      int64 physicalPriceCorrection;
//
//      //: Max price step in percent. User is allowed to set offer only if both of
//      //: `price < (1 - maxPriceStep) * currentPrice` and `price > (1 + maxPriceStep) * currentPrice` are `true`
//      int64 maxPriceStep;
//
//      //: Bitmask of asset policies set by creator or corrected by `ManageAssetPair` operations
//      int32 policies;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AssetPairEntry extends XdrEncodable {
  late ASSETCODE base;
  late ASSETCODE quote;
  late INT64 currentPrice;
  late INT64 physicalPrice;
  late INT64 physicalPriceCorrection;
  late INT64 maxPriceStep;
  late INT32 policies;
  late AssetPairEntryExt ext;

  AssetPairEntry(
    this.base,
    this.quote,
    this.currentPrice,
    this.physicalPrice,
    this.physicalPriceCorrection,
    this.maxPriceStep,
    this.policies,
    this.ext,
  );

  AssetPairEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.base = stringFromXdr(stream);
    this.quote = stringFromXdr(stream);
    this.currentPrice = longFromXdr(stream);
    this.physicalPrice = longFromXdr(stream);
    this.physicalPriceCorrection = longFromXdr(stream);
    this.maxPriceStep = longFromXdr(stream);
    this.policies = intFromXdr(stream);
    this.ext = AssetPairEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    base.toXdr(stream);
    quote.toXdr(stream);
    currentPrice.toXdr(stream);
    physicalPrice.toXdr(stream);
    physicalPriceCorrection.toXdr(stream);
    maxPriceStep.toXdr(stream);
    policies.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AssetPairEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AssetPairEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AssetPairEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AssetPairEntryExtEmptyVersion.fromXdr(stream);
    }

    return AssetPairEntryExtEmptyVersion.fromXdr(stream);
  }
}

class AssetPairEntryExtEmptyVersion extends AssetPairEntryExt {
  AssetPairEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AssetPairEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class AssetPolicy extends XdrEncodable {
  static const TRANSFERABLE = 1;
  static const BASE_ASSET = 2;
  static const STATS_QUOTE_ASSET = 4;
  static const WITHDRAWABLE = 8;
  static const ISSUANCE_MANUAL_REVIEW_REQUIRED = 16;
  static const CAN_BE_BASE_IN_ATOMIC_SWAP = 32;
  static const CAN_BE_QUOTE_IN_ATOMIC_SWAP = 64;
  static const SWAPPABLE = 128;
  late int value;

  AssetPolicy(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  AssetPolicy.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct AssetEntry
//  {
//      //: Code of the asset
//      AssetCode code;
//      //: Owner(creator) of the asset
//  	AccountID owner;
//  	//: Account responsible for preissuance of the asset
//  	AccountID preissuedAssetSigner;
//      //: Arbitrary stringified JSON object that can be used to attach data to asset
//  	longstring details;
//  	//: Maximal amount of tokens that can be issued
//  	uint64 maxIssuanceAmount;
//  	//: Amount of tokens available for issuance
//  	uint64 availableForIssueance;
//  	//: Amount of tokens issued already
//  	uint64 issued;
//  	//: Amount of tokens to be issued which is locked. `pendingIssuance+issued <= maxIssuanceAmount`
//  	uint64 pendingIssuance;
//  	//: Policies of the asset
//      uint32 policies;
//      //: Used to restrict usage. Used in account rules
//      uint64 type;
//      //: Number of decimal places. Must be <= 6
//      uint32 trailingDigitsCount;
//
//      //: Reserved for future use
//      EmptyExt ext;
//  };

//  ===========================================================================
class AssetEntry extends XdrEncodable {
  late ASSETCODE code;
  late ACCOUNTID owner;
  late ACCOUNTID preissuedAssetSigner;
  late LONGSTRING details;
  late UINT64 maxIssuanceAmount;
  late UINT64 availableForIssueance;
  late UINT64 issued;
  late UINT64 pendingIssuance;
  late UINT32 policies;
  late UINT64 type;
  late UINT32 trailingDigitsCount;
  late EmptyExt ext;

  AssetEntry(
    this.code,
    this.owner,
    this.preissuedAssetSigner,
    this.details,
    this.maxIssuanceAmount,
    this.availableForIssueance,
    this.issued,
    this.pendingIssuance,
    this.policies,
    this.type,
    this.trailingDigitsCount,
    this.ext,
  );

  AssetEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.code = stringFromXdr(stream);
    this.owner = PublicKey.fromXdr(stream);
    this.preissuedAssetSigner = PublicKey.fromXdr(stream);
    this.details = stringFromXdr(stream);
    this.maxIssuanceAmount = longFromXdr(stream);
    this.availableForIssueance = longFromXdr(stream);
    this.issued = longFromXdr(stream);
    this.pendingIssuance = longFromXdr(stream);
    this.policies = intFromXdr(stream);
    this.type = longFromXdr(stream);
    this.trailingDigitsCount = intFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    code.toXdr(stream);
    owner.toXdr(stream);
    preissuedAssetSigner.toXdr(stream);
    details.toXdr(stream);
    maxIssuanceAmount.toXdr(stream);
    availableForIssueance.toXdr(stream);
    issued.toXdr(stream);
    pendingIssuance.toXdr(stream);
    policies.toXdr(stream);
    type.toXdr(stream);
    trailingDigitsCount.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  //: AtomicSwapAskQuoteAsset represents asset with price which can be used to buy base asset
//  struct AtomicSwapAskQuoteAsset
//  {
//      //: Code of quote asset
//      AssetCode quoteAsset;
//      //: amount of quote asset which is needed to buy one base asset
//      uint64 price;
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AtomicSwapAskQuoteAsset extends XdrEncodable {
  late ASSETCODE quoteAsset;
  late UINT64 price;
  late AtomicSwapAskQuoteAssetExt ext;

  AtomicSwapAskQuoteAsset(
    this.quoteAsset,
    this.price,
    this.ext,
  );

  AtomicSwapAskQuoteAsset.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.quoteAsset = stringFromXdr(stream);
    this.price = longFromXdr(stream);
    this.ext = AtomicSwapAskQuoteAssetExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    quoteAsset.toXdr(stream);
    price.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AtomicSwapAskQuoteAssetExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AtomicSwapAskQuoteAssetExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AtomicSwapAskQuoteAssetExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AtomicSwapAskQuoteAssetExtEmptyVersion.fromXdr(stream);
    }

    return AtomicSwapAskQuoteAssetExtEmptyVersion.fromXdr(stream);
  }
}

class AtomicSwapAskQuoteAssetExtEmptyVersion
    extends AtomicSwapAskQuoteAssetExt {
  AtomicSwapAskQuoteAssetExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AtomicSwapAskQuoteAssetExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct AtomicSwapAskEntry
//  {
//      uint64 id;
//      AccountID ownerID;
//      AssetCode baseAsset;
//      BalanceID baseBalance;
//      uint64 amount;
//      uint64 lockedAmount;
//      uint64 createdAt;
//
//      bool isCancelled;
//
//      longstring details;
//
//      AtomicSwapAskQuoteAsset quoteAssets<>;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AtomicSwapAskEntry extends XdrEncodable {
  late UINT64 id;
  late ACCOUNTID ownerID;
  late ASSETCODE baseAsset;
  late BALANCEID baseBalance;
  late UINT64 amount;
  late UINT64 lockedAmount;
  late UINT64 createdAt;
  late bool isCancelled;
  late LONGSTRING details;
  late List<AtomicSwapAskQuoteAsset> quoteAssets;
  late AtomicSwapAskEntryExt ext;

  AtomicSwapAskEntry(
    this.id,
    this.ownerID,
    this.baseAsset,
    this.baseBalance,
    this.amount,
    this.lockedAmount,
    this.createdAt,
    this.isCancelled,
    this.details,
    this.quoteAssets,
    this.ext,
  );

  AtomicSwapAskEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.ownerID = PublicKey.fromXdr(stream);
    this.baseAsset = stringFromXdr(stream);
    this.baseBalance = PublicKey.fromXdr(stream);
    this.amount = longFromXdr(stream);
    this.lockedAmount = longFromXdr(stream);
    this.createdAt = longFromXdr(stream);
    this.isCancelled = boolFromXdr(stream);
    this.details = stringFromXdr(stream);
    length = intFromXdr(stream);
    quoteAssets = <AtomicSwapAskQuoteAsset>[];
    while (length > 0) {
      quoteAssets.add(AtomicSwapAskQuoteAsset.fromXdr(stream));
      length--;
    }

    this.ext = AtomicSwapAskEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ownerID.toXdr(stream);
    baseAsset.toXdr(stream);
    baseBalance.toXdr(stream);
    amount.toXdr(stream);
    lockedAmount.toXdr(stream);
    createdAt.toXdr(stream);
    isCancelled.toXdr(stream);
    details.toXdr(stream);
    quoteAssets.length.toXdr(stream);
    quoteAssets.forEach((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}

abstract class AtomicSwapAskEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AtomicSwapAskEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AtomicSwapAskEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AtomicSwapAskEntryExtEmptyVersion.fromXdr(stream);
    }

    return AtomicSwapAskEntryExtEmptyVersion.fromXdr(stream);
  }
}

class AtomicSwapAskEntryExtEmptyVersion extends AtomicSwapAskEntryExt {
  AtomicSwapAskEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AtomicSwapAskEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct BalanceEntry
//  {
//      BalanceID balanceID;
//  	// sequential ID - unique identifier of the balance, used by ingesting applications to
//  	// identify account, while keeping size of index small
//      uint64 sequentialID;
//      AssetCode asset;
//      AccountID accountID;
//      uint64 amount;
//      uint64 locked;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class BalanceEntry extends XdrEncodable {
  late BALANCEID balanceID;
  late UINT64 sequentialID;
  late ASSETCODE asset;
  late ACCOUNTID accountID;
  late UINT64 amount;
  late UINT64 locked;
  late BalanceEntryExt ext;

  BalanceEntry(
    this.balanceID,
    this.sequentialID,
    this.asset,
    this.accountID,
    this.amount,
    this.locked,
    this.ext,
  );

  BalanceEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.balanceID = PublicKey.fromXdr(stream);
    this.sequentialID = longFromXdr(stream);
    this.asset = stringFromXdr(stream);
    this.accountID = PublicKey.fromXdr(stream);
    this.amount = longFromXdr(stream);
    this.locked = longFromXdr(stream);
    this.ext = BalanceEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    balanceID.toXdr(stream);
    sequentialID.toXdr(stream);
    asset.toXdr(stream);
    accountID.toXdr(stream);
    amount.toXdr(stream);
    locked.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class BalanceEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  BalanceEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static BalanceEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return BalanceEntryExtEmptyVersion.fromXdr(stream);
    }

    return BalanceEntryExtEmptyVersion.fromXdr(stream);
  }
}

class BalanceEntryExtEmptyVersion extends BalanceEntryExt {
  BalanceEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  BalanceEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ContractState extends XdrEncodable {
  static const NO_CONFIRMATIONS = 0;
  static const CUSTOMER_CONFIRMED = 1;
  static const CONTRACTOR_CONFIRMED = 2;
  static const DISPUTING = 4;
  static const REVERTING_RESOLVE = 8;
  static const NOT_REVERTING_RESOLVE = 16;
  late int value;

  ContractState(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ContractState.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct ContractEntry
//  {
//      uint64 contractID;
//
//      AccountID contractor;
//      AccountID customer;
//      AccountID escrow;
//
//      uint64 startTime;
//      uint64 endTime;
//      uint64 invoiceRequestsIDs<>;
//      longstring initialDetails;
//
//      uint32 state;
//      longstring customerDetails;
//
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ContractEntry extends XdrEncodable {
  late UINT64 contractID;
  late ACCOUNTID contractor;
  late ACCOUNTID customer;
  late ACCOUNTID escrow;
  late UINT64 startTime;
  late UINT64 endTime;
  late List<UINT64> invoiceRequestsIDs;
  late LONGSTRING initialDetails;
  late UINT32 state;
  late LONGSTRING customerDetails;
  late ContractEntryExt ext;

  ContractEntry(
    this.contractID,
    this.contractor,
    this.customer,
    this.escrow,
    this.startTime,
    this.endTime,
    this.invoiceRequestsIDs,
    this.initialDetails,
    this.state,
    this.customerDetails,
    this.ext,
  );

  ContractEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.contractID = longFromXdr(stream);
    this.contractor = PublicKey.fromXdr(stream);
    this.customer = PublicKey.fromXdr(stream);
    this.escrow = PublicKey.fromXdr(stream);
    this.startTime = longFromXdr(stream);
    this.endTime = longFromXdr(stream);
    length = intFromXdr(stream);
    invoiceRequestsIDs = <UINT64>[];
    while (length > 0) {
      invoiceRequestsIDs.add(longFromXdr(stream));
      length--;
    }

    this.initialDetails = stringFromXdr(stream);
    this.state = intFromXdr(stream);
    this.customerDetails = stringFromXdr(stream);
    this.ext = ContractEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    contractID.toXdr(stream);
    contractor.toXdr(stream);
    customer.toXdr(stream);
    escrow.toXdr(stream);
    startTime.toXdr(stream);
    endTime.toXdr(stream);
    invoiceRequestsIDs.length.toXdr(stream);
    invoiceRequestsIDs.forEach((element) {
      element.toXdr(stream);
    });
    initialDetails.toXdr(stream);
    state.toXdr(stream);
    customerDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ContractEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ContractEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ContractEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ContractEntryExtEmptyVersion.fromXdr(stream);
    }

    return ContractEntryExtEmptyVersion.fromXdr(stream);
  }
}

class ContractEntryExtEmptyVersion extends ContractEntryExt {
  ContractEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ContractEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct DataEntry
//  {
//      //: ID of the data entry
//      uint64 id;
//      //: Numeric type, used for access control
//      uint64 type;
//      //: Value stored
//      longstring value;
//
//      //: Creator of the entry
//      AccountID owner;
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class DataEntry extends XdrEncodable {
  late UINT64 id;
  late UINT64 type;
  late LONGSTRING value;
  late ACCOUNTID owner;
  late EmptyExt ext;

  DataEntry(
    this.id,
    this.type,
    this.value,
    this.owner,
    this.ext,
  );

  DataEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.type = longFromXdr(stream);
    this.value = stringFromXdr(stream);
    this.owner = PublicKey.fromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    type.toXdr(stream);
    value.toXdr(stream);
    owner.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct DeferredPaymentEntry
//  {
//      //: ID of the deferred payment entry
//      uint64 id;
//
//      uint64 amount;
//
//      longstring details;
//
//      //: Creator of the entry
//      AccountID source;
//      BalanceID sourceBalance;
//
//      AccountID destination;
//
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class DeferredPaymentEntry extends XdrEncodable {
  late UINT64 id;
  late UINT64 amount;
  late LONGSTRING details;
  late ACCOUNTID source;
  late BALANCEID sourceBalance;
  late ACCOUNTID destination;
  late EmptyExt ext;

  DeferredPaymentEntry(
    this.id,
    this.amount,
    this.details,
    this.source,
    this.sourceBalance,
    this.destination,
    this.ext,
  );

  DeferredPaymentEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.amount = longFromXdr(stream);
    this.details = stringFromXdr(stream);
    this.source = PublicKey.fromXdr(stream);
    this.sourceBalance = PublicKey.fromXdr(stream);
    this.destination = PublicKey.fromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    amount.toXdr(stream);
    details.toXdr(stream);
    source.toXdr(stream);
    sourceBalance.toXdr(stream);
    destination.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct ExternalSystemAccountIDPoolEntry
//  {
//      uint64 poolEntryID;
//      int32 externalSystemType;
//      longstring data;
//      AccountID* accountID;
//      uint64 expiresAt;
//      uint64 bindedAt;
//      uint64 parent;
//      bool isDeleted;
//
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//         void;
//      }
//      ext;
//  };

//  ===========================================================================
class ExternalSystemAccountIDPoolEntry extends XdrEncodable {
  late UINT64 poolEntryID;
  late INT32 externalSystemType;
  late LONGSTRING data;
  late ACCOUNTID? accountID;
  late UINT64 expiresAt;
  late UINT64 bindedAt;
  late UINT64 parent;
  late bool isDeleted;
  late ExternalSystemAccountIDPoolEntryExt ext;

  ExternalSystemAccountIDPoolEntry(
    this.poolEntryID,
    this.externalSystemType,
    this.data,
    this.accountID,
    this.expiresAt,
    this.bindedAt,
    this.parent,
    this.isDeleted,
    this.ext,
  );

  ExternalSystemAccountIDPoolEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.poolEntryID = longFromXdr(stream);
    this.externalSystemType = intFromXdr(stream);
    this.data = stringFromXdr(stream);
    if (boolFromXdr(stream)) {
      this.accountID = PublicKey.fromXdr(stream);
    } else {
      this.accountID = null;
    }
    this.expiresAt = longFromXdr(stream);
    this.bindedAt = longFromXdr(stream);
    this.parent = longFromXdr(stream);
    this.isDeleted = boolFromXdr(stream);
    this.ext = ExternalSystemAccountIDPoolEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    poolEntryID.toXdr(stream);
    externalSystemType.toXdr(stream);
    data.toXdr(stream);
    if (accountID != null) {
      true.toXdr(stream);
      accountID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    expiresAt.toXdr(stream);
    bindedAt.toXdr(stream);
    parent.toXdr(stream);
    isDeleted.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ExternalSystemAccountIDPoolEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ExternalSystemAccountIDPoolEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ExternalSystemAccountIDPoolEntryExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ExternalSystemAccountIDPoolEntryExtEmptyVersion.fromXdr(stream);
    }

    return ExternalSystemAccountIDPoolEntryExtEmptyVersion.fromXdr(stream);
  }
}

class ExternalSystemAccountIDPoolEntryExtEmptyVersion
    extends ExternalSystemAccountIDPoolEntryExt {
  ExternalSystemAccountIDPoolEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ExternalSystemAccountIDPoolEntryExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct ExternalSystemAccountID
//  {
//      AccountID accountID;
//      int32 externalSystemType;
//  	longstring data;
//
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ExternalSystemAccountID extends XdrEncodable {
  late ACCOUNTID accountID;
  late INT32 externalSystemType;
  late LONGSTRING data;
  late ExternalSystemAccountIDExt ext;

  ExternalSystemAccountID(
    this.accountID,
    this.externalSystemType,
    this.data,
    this.ext,
  );

  ExternalSystemAccountID.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.accountID = PublicKey.fromXdr(stream);
    this.externalSystemType = intFromXdr(stream);
    this.data = stringFromXdr(stream);
    this.ext = ExternalSystemAccountIDExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    externalSystemType.toXdr(stream);
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ExternalSystemAccountIDExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ExternalSystemAccountIDExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ExternalSystemAccountIDExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ExternalSystemAccountIDExtEmptyVersion.fromXdr(stream);
    }

    return ExternalSystemAccountIDExtEmptyVersion.fromXdr(stream);
  }
}

class ExternalSystemAccountIDExtEmptyVersion
    extends ExternalSystemAccountIDExt {
  ExternalSystemAccountIDExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ExternalSystemAccountIDExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class FeeType extends XdrEncodable {
  static const PAYMENT_FEE = 0;
  static const OFFER_FEE = 1;
  static const WITHDRAWAL_FEE = 2;
  static const ISSUANCE_FEE = 3;
  static const INVEST_FEE = 4;
  static const CAPITAL_DEPLOYMENT_FEE = 5;
  static const OPERATION_FEE = 6;
  static const PAYOUT_FEE = 7;
  static const ATOMIC_SWAP_SALE_FEE = 8;
  static const ATOMIC_SWAP_PURCHASE_FEE = 9;
  static const SWAP_FEE = 10;
  late int value;

  FeeType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  FeeType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

class EmissionFeeType extends XdrEncodable {
  static const PRIMARY_MARKET = 1;
  static const SECONDARY_MARKET = 2;
  late int value;

  EmissionFeeType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  EmissionFeeType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

class PaymentFeeType extends XdrEncodable {
  static const OUTGOING = 1;
  static const INCOMING = 2;
  late int value;

  PaymentFeeType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  PaymentFeeType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: `FeeEntry` is used in the system configuration to set fees for different assets, operations (according to FeeType), particular account roles, particular accounts,
//  //: or globally (only if both parameters particular account role and paticular account are not specified).
//  struct FeeEntry
//  {
//      //: Type of a particular fee depending on the operation (e.g., PAYMENT_FEE for payment operation, WITHDRAWAL_FEE for withdrawal operation, etc.)
//      FeeType feeType;
//      //: Code of an asset used in the operation for which the fee will be charged
//      AssetCode asset;
//
//      //: Fixed amount of fee that will be charged for the operation
//      int64 fixedFee;
//      //: Percent from the operation amount that will be charged for the corresponding operation
//      int64 percentFee;
//
//      //: (optional) Account for which a fee is set in the system
//      AccountID* accountID;
//      //: (optional) Account for which a fee is set in the system
//      uint64*    accountRole;
//      //: Defines a `subtype` of a fee if such exists (e.g., `OUTGOING` or `INCOMING` for `PAYMENT_FEE`)
//      int64 subtype;
//
//      //: Defines the lower bound of operation amount for which this fee is applicable
//      int64 lowerBound;
//      //: Defines the upper bound of operation amount for which this fee is applicable
//      int64 upperBound;
//
//      //: Hash of `type:<feeType>asset:<asset>subtype:<subtype>`
//      //: (Add `accountID:<accountID>` or `accountRole:<accountRole>` if corresponding fields are defined)
//      Hash hash;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class FeeEntry extends XdrEncodable {
  late FeeType feeType;
  late ASSETCODE asset;
  late INT64 fixedFee;
  late INT64 percentFee;
  late ACCOUNTID? accountID;
  late UINT64? accountRole;
  late INT64 subtype;
  late INT64 lowerBound;
  late INT64 upperBound;
  late HASH hash;
  late FeeEntryExt ext;

  FeeEntry(
    this.feeType,
    this.asset,
    this.fixedFee,
    this.percentFee,
    this.accountID,
    this.accountRole,
    this.subtype,
    this.lowerBound,
    this.upperBound,
    this.hash,
    this.ext,
  );

  FeeEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.feeType = FeeType.fromXdr(stream);
    this.asset = stringFromXdr(stream);
    this.fixedFee = longFromXdr(stream);
    this.percentFee = longFromXdr(stream);
    if (boolFromXdr(stream)) {
      this.accountID = PublicKey.fromXdr(stream);
    } else {
      this.accountID = null;
    }
    if (boolFromXdr(stream)) {
      this.accountRole = longFromXdr(stream);
    } else {
      this.accountRole = null;
    }
    this.subtype = longFromXdr(stream);
    this.lowerBound = longFromXdr(stream);
    this.upperBound = longFromXdr(stream);
    this.hash = HASH.fromXdr(stream);
    this.ext = FeeEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    feeType.toXdr(stream);
    asset.toXdr(stream);
    fixedFee.toXdr(stream);
    percentFee.toXdr(stream);
    if (accountID != null) {
      true.toXdr(stream);
      accountID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    if (accountRole != null) {
      true.toXdr(stream);
      accountRole?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    subtype.toXdr(stream);
    lowerBound.toXdr(stream);
    upperBound.toXdr(stream);
    hash.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class FeeEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  FeeEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static FeeEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return FeeEntryExtEmptyVersion.fromXdr(stream);
    }

    return FeeEntryExtEmptyVersion.fromXdr(stream);
  }
}

class FeeEntryExtEmptyVersion extends FeeEntryExt {
  FeeEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  FeeEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class KeyValueEntryType extends XdrEncodable {
  static const UINT32 = 1;
  static const STRING = 2;
  static const UINT64 = 3;
  late int value;

  KeyValueEntryType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  KeyValueEntryType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class KeyValueEntryValue extends XdrEncodable {
  late KeyValueEntryType discriminant;

  KeyValueEntryValue(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static KeyValueEntryValue fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case KeyValueEntryType.UINT32:
        return KeyValueEntryValueUint32.fromXdr(stream);
      case KeyValueEntryType.STRING:
        return KeyValueEntryValueString.fromXdr(stream);
      case KeyValueEntryType.UINT64:
        return KeyValueEntryValueUint64.fromXdr(stream);
    }

    return KeyValueEntryValueUint32.fromXdr(stream);
  }
}

class KeyValueEntryValueUint32 extends KeyValueEntryValue {
  KeyValueEntryValueUint32(this.ui32Value)
      : super(KeyValueEntryType(KeyValueEntryType.UINT32));
  late UINT32 ui32Value;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ui32Value.toXdr(stream);
  }

  KeyValueEntryValueUint32.fromXdr(XdrDataInputStream stream)
      : super(KeyValueEntryType(KeyValueEntryType.UINT32)) {
    var length = 0;
    this.ui32Value = intFromXdr(stream);
  }
}

class KeyValueEntryValueString extends KeyValueEntryValue {
  KeyValueEntryValueString(this.stringValue)
      : super(KeyValueEntryType(KeyValueEntryType.STRING));
  late String stringValue;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    stringValue.toXdr(stream);
  }

  KeyValueEntryValueString.fromXdr(XdrDataInputStream stream)
      : super(KeyValueEntryType(KeyValueEntryType.STRING)) {
    var length = 0;
    this.stringValue = stringFromXdr(stream);
  }
}

class KeyValueEntryValueUint64 extends KeyValueEntryValue {
  KeyValueEntryValueUint64(this.ui64Value)
      : super(KeyValueEntryType(KeyValueEntryType.UINT64));
  late UINT64 ui64Value;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ui64Value.toXdr(stream);
  }

  KeyValueEntryValueUint64.fromXdr(XdrDataInputStream stream)
      : super(KeyValueEntryType(KeyValueEntryType.UINT64)) {
    var length = 0;
    this.ui64Value = longFromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: `KeyValueEntry` is an entry used to store key mapped values
//      struct KeyValueEntry
//      {
//          //: String value that must be unique among other keys for kev-value pairs
//          longstring key;
//
//          //: Value that corresponds to particular key (depending on `KeyValueEntryType`,
//          //: the value can be either uint32, or uint64, or string)
//          KeyValueEntryValue value;
//
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//              case EMPTY_VERSION:
//                  void;
//          }
//          ext;
//      };

//  ===========================================================================
class KeyValueEntry extends XdrEncodable {
  late LONGSTRING key;
  late KeyValueEntryValue value;
  late KeyValueEntryExt ext;

  KeyValueEntry(
    this.key,
    this.value,
    this.ext,
  );

  KeyValueEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.key = stringFromXdr(stream);
    this.value = KeyValueEntryValue.fromXdr(stream);
    this.ext = KeyValueEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    key.toXdr(stream);
    value.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class KeyValueEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  KeyValueEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static KeyValueEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return KeyValueEntryExtEmptyVersion.fromXdr(stream);
    }

    return KeyValueEntryExtEmptyVersion.fromXdr(stream);
  }
}

class KeyValueEntryExtEmptyVersion extends KeyValueEntryExt {
  KeyValueEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  KeyValueEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct LicenseEntry
//  {
//      uint64 adminCount;
//      uint64 dueDate;
//      Hash ledgerHash;
//      Hash prevLicenseHash;
//      DecoratedSignature signatures<>;
//
//       // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LicenseEntry extends XdrEncodable {
  late UINT64 adminCount;
  late UINT64 dueDate;
  late HASH ledgerHash;
  late HASH prevLicenseHash;
  late List<DecoratedSignature> signatures;
  late LicenseEntryExt ext;

  LicenseEntry(
    this.adminCount,
    this.dueDate,
    this.ledgerHash,
    this.prevLicenseHash,
    this.signatures,
    this.ext,
  );

  LicenseEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.adminCount = longFromXdr(stream);
    this.dueDate = longFromXdr(stream);
    this.ledgerHash = HASH.fromXdr(stream);
    this.prevLicenseHash = HASH.fromXdr(stream);
    length = intFromXdr(stream);
    signatures = <DecoratedSignature>[];
    while (length > 0) {
      signatures.add(DecoratedSignature.fromXdr(stream));
      length--;
    }

    this.ext = LicenseEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    adminCount.toXdr(stream);
    dueDate.toXdr(stream);
    ledgerHash.toXdr(stream);
    prevLicenseHash.toXdr(stream);
    signatures.length.toXdr(stream);
    signatures.forEach((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}

abstract class LicenseEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LicenseEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LicenseEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LicenseEntryExtEmptyVersion.fromXdr(stream);
    }

    return LicenseEntryExtEmptyVersion.fromXdr(stream);
  }
}

class LicenseEntryExtEmptyVersion extends LicenseEntryExt {
  LicenseEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LicenseEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class StatsOpType extends XdrEncodable {
  static const PAYMENT_OUT = 1;
  static const WITHDRAW = 2;
  static const SPEND = 3;
  static const DEPOSIT = 4;
  static const PAYOUT = 5;
  late int value;

  StatsOpType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  StatsOpType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: `LimitsV2Entry` is used in the system configuration to set limits (daily, weekly, montly, annual)
//  //: for different assets, operations (according to StatsOpType), particular account roles, particular accounts,
//  //: or globally (only if both parameters particular account role and paticular account are not specified),
//  struct LimitsV2Entry
//  {
//      //: ID of limits entry
//      uint64      id;
//      //: (optional) ID of an account role that will be imposed with limits
//      uint64*     accountRole;
//      //: (optional) ID of an account that will be imposed with limits
//      AccountID*  accountID;
//      //: Operation type that will be imposed with limits. See `enum StatsOpType`
//      StatsOpType statsOpType;
//      //: Asset that will be imposed with limits
//      AssetCode   assetCode;
//      //: `isConvertNeeded` indicates whether or not the asset conversion is needed for the limits entry.
//      //: If this field is `true`, limits are applied to all balances of an account (to every asset that account owns).
//      //: Otherwise, limits from particular limits entry are applied only to  balances with `AssetCode` provided by entry.
//      bool        isConvertNeeded;
//
//      //: daily out limit
//      uint64 dailyOut;
//      //: weekly out limit
//      uint64 weeklyOut;
//      //: monthly out limit
//      uint64 monthlyOut;
//      //: annual out limit
//      uint64 annualOut;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LimitsV2Entry extends XdrEncodable {
  late UINT64 id;
  late UINT64? accountRole;
  late ACCOUNTID? accountID;
  late StatsOpType statsOpType;
  late ASSETCODE assetCode;
  late bool isConvertNeeded;
  late UINT64 dailyOut;
  late UINT64 weeklyOut;
  late UINT64 monthlyOut;
  late UINT64 annualOut;
  late LimitsV2EntryExt ext;

  LimitsV2Entry(
    this.id,
    this.accountRole,
    this.accountID,
    this.statsOpType,
    this.assetCode,
    this.isConvertNeeded,
    this.dailyOut,
    this.weeklyOut,
    this.monthlyOut,
    this.annualOut,
    this.ext,
  );

  LimitsV2Entry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    if (boolFromXdr(stream)) {
      this.accountRole = longFromXdr(stream);
    } else {
      this.accountRole = null;
    }
    if (boolFromXdr(stream)) {
      this.accountID = PublicKey.fromXdr(stream);
    } else {
      this.accountID = null;
    }
    this.statsOpType = StatsOpType.fromXdr(stream);
    this.assetCode = stringFromXdr(stream);
    this.isConvertNeeded = boolFromXdr(stream);
    this.dailyOut = longFromXdr(stream);
    this.weeklyOut = longFromXdr(stream);
    this.monthlyOut = longFromXdr(stream);
    this.annualOut = longFromXdr(stream);
    this.ext = LimitsV2EntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    if (accountRole != null) {
      true.toXdr(stream);
      accountRole?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    if (accountID != null) {
      true.toXdr(stream);
      accountID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    statsOpType.toXdr(stream);
    assetCode.toXdr(stream);
    isConvertNeeded.toXdr(stream);
    dailyOut.toXdr(stream);
    weeklyOut.toXdr(stream);
    monthlyOut.toXdr(stream);
    annualOut.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LimitsV2EntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LimitsV2EntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LimitsV2EntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LimitsV2EntryExtEmptyVersion.fromXdr(stream);
    }

    return LimitsV2EntryExtEmptyVersion.fromXdr(stream);
  }
}

class LimitsV2EntryExtEmptyVersion extends LimitsV2EntryExt {
  LimitsV2EntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LimitsV2EntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct OfferEntry
//  {
//      uint64 offerID;
//  	uint64 orderBookID;
//  	AccountID ownerID;
//  	bool isBuy;
//      AssetCode base; // A
//      AssetCode quote;  // B
//  	BalanceID baseBalance;
//  	BalanceID quoteBalance;
//      int64 baseAmount;
//  	int64 quoteAmount;
//  	uint64 createdAt;
//  	int64 fee;
//
//      int64 percentFee;
//
//  	// price of A in terms of B
//      int64 price;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class OfferEntry extends XdrEncodable {
  late UINT64 offerID;
  late UINT64 orderBookID;
  late ACCOUNTID ownerID;
  late bool isBuy;
  late ASSETCODE base;
  late ASSETCODE quote;
  late BALANCEID baseBalance;
  late BALANCEID quoteBalance;
  late INT64 baseAmount;
  late INT64 quoteAmount;
  late UINT64 createdAt;
  late INT64 fee;
  late INT64 percentFee;
  late INT64 price;
  late OfferEntryExt ext;

  OfferEntry(
    this.offerID,
    this.orderBookID,
    this.ownerID,
    this.isBuy,
    this.base,
    this.quote,
    this.baseBalance,
    this.quoteBalance,
    this.baseAmount,
    this.quoteAmount,
    this.createdAt,
    this.fee,
    this.percentFee,
    this.price,
    this.ext,
  );

  OfferEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.offerID = longFromXdr(stream);
    this.orderBookID = longFromXdr(stream);
    this.ownerID = PublicKey.fromXdr(stream);
    this.isBuy = boolFromXdr(stream);
    this.base = stringFromXdr(stream);
    this.quote = stringFromXdr(stream);
    this.baseBalance = PublicKey.fromXdr(stream);
    this.quoteBalance = PublicKey.fromXdr(stream);
    this.baseAmount = longFromXdr(stream);
    this.quoteAmount = longFromXdr(stream);
    this.createdAt = longFromXdr(stream);
    this.fee = longFromXdr(stream);
    this.percentFee = longFromXdr(stream);
    this.price = longFromXdr(stream);
    this.ext = OfferEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    offerID.toXdr(stream);
    orderBookID.toXdr(stream);
    ownerID.toXdr(stream);
    isBuy.toXdr(stream);
    base.toXdr(stream);
    quote.toXdr(stream);
    baseBalance.toXdr(stream);
    quoteBalance.toXdr(stream);
    baseAmount.toXdr(stream);
    quoteAmount.toXdr(stream);
    createdAt.toXdr(stream);
    fee.toXdr(stream);
    percentFee.toXdr(stream);
    price.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class OfferEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  OfferEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static OfferEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return OfferEntryExtEmptyVersion.fromXdr(stream);
    }

    return OfferEntryExtEmptyVersion.fromXdr(stream);
  }
}

class OfferEntryExtEmptyVersion extends OfferEntryExt {
  OfferEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  OfferEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct PendingStatisticsEntry
//  {
//      uint64 statisticsID;
//      uint64 requestID;
//      uint64 amount;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PendingStatisticsEntry extends XdrEncodable {
  late UINT64 statisticsID;
  late UINT64 requestID;
  late UINT64 amount;
  late PendingStatisticsEntryExt ext;

  PendingStatisticsEntry(
    this.statisticsID,
    this.requestID,
    this.amount,
    this.ext,
  );

  PendingStatisticsEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.statisticsID = longFromXdr(stream);
    this.requestID = longFromXdr(stream);
    this.amount = longFromXdr(stream);
    this.ext = PendingStatisticsEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    statisticsID.toXdr(stream);
    requestID.toXdr(stream);
    amount.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class PendingStatisticsEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  PendingStatisticsEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static PendingStatisticsEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return PendingStatisticsEntryExtEmptyVersion.fromXdr(stream);
    }

    return PendingStatisticsEntryExtEmptyVersion.fromXdr(stream);
  }
}

class PendingStatisticsEntryExtEmptyVersion extends PendingStatisticsEntryExt {
  PendingStatisticsEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  PendingStatisticsEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class PollType extends XdrEncodable {
  static const SINGLE_CHOICE = 0;
  late int value;

  PollType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  PollType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class PollData extends XdrEncodable {
  late PollType discriminant;

  PollData(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static PollData fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case PollType.SINGLE_CHOICE:
        return PollDataSingleChoice.fromXdr(stream);
    }

    return PollDataSingleChoice.fromXdr(stream);
  }
}

class PollDataSingleChoice extends PollData {
  PollDataSingleChoice(this.ext) : super(PollType(PollType.SINGLE_CHOICE));
  late EmptyExt ext;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ext.toXdr(stream);
  }

  PollDataSingleChoice.fromXdr(XdrDataInputStream stream)
      : super(PollType(PollType.SINGLE_CHOICE)) {
    this.ext = EmptyExt.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct PollEntry
//  {
//      uint64 id;
//      uint32 permissionType;
//
//      uint32 numberOfChoices;
//      PollData data;
//
//      uint64 startTime;
//      uint64 endTime;
//
//      AccountID ownerID;
//      AccountID resultProviderID;
//
//      bool voteConfirmationRequired;
//
//      longstring details;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class PollEntry extends XdrEncodable {
  late UINT64 id;
  late UINT32 permissionType;
  late UINT32 numberOfChoices;
  late PollData data;
  late UINT64 startTime;
  late UINT64 endTime;
  late ACCOUNTID ownerID;
  late ACCOUNTID resultProviderID;
  late bool voteConfirmationRequired;
  late LONGSTRING details;
  late EmptyExt ext;

  PollEntry(
    this.id,
    this.permissionType,
    this.numberOfChoices,
    this.data,
    this.startTime,
    this.endTime,
    this.ownerID,
    this.resultProviderID,
    this.voteConfirmationRequired,
    this.details,
    this.ext,
  );

  PollEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.permissionType = intFromXdr(stream);
    this.numberOfChoices = intFromXdr(stream);
    this.data = PollData.fromXdr(stream);
    this.startTime = longFromXdr(stream);
    this.endTime = longFromXdr(stream);
    this.ownerID = PublicKey.fromXdr(stream);
    this.resultProviderID = PublicKey.fromXdr(stream);
    this.voteConfirmationRequired = boolFromXdr(stream);
    this.details = stringFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    permissionType.toXdr(stream);
    numberOfChoices.toXdr(stream);
    data.toXdr(stream);
    startTime.toXdr(stream);
    endTime.toXdr(stream);
    ownerID.toXdr(stream);
    resultProviderID.toXdr(stream);
    voteConfirmationRequired.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct ReferenceEntry
//  {
//  	AccountID sender;
//      string64 reference;
//
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ReferenceEntry extends XdrEncodable {
  late ACCOUNTID sender;
  late STRING64 reference;
  late ReferenceEntryExt ext;

  ReferenceEntry(
    this.sender,
    this.reference,
    this.ext,
  );

  ReferenceEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.sender = PublicKey.fromXdr(stream);
    this.reference = stringFromXdr(stream);
    this.ext = ReferenceEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    sender.toXdr(stream);
    reference.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ReferenceEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ReferenceEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ReferenceEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ReferenceEntryExtEmptyVersion.fromXdr(stream);
    }

    return ReferenceEntryExtEmptyVersion.fromXdr(stream);
  }
}

class ReferenceEntryExtEmptyVersion extends ReferenceEntryExt {
  ReferenceEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ReferenceEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ReviewableRequestType extends XdrEncodable {
  static const NONE = 0;
  static const ANY = 1;
  static const CREATE_PRE_ISSUANCE = 2;
  static const CREATE_ISSUANCE = 3;
  static const CREATE_WITHDRAW = 4;
  static const CREATE_SALE = 5;
  static const UPDATE_LIMITS = 6;
  static const CREATE_AML_ALERT = 7;
  static const CHANGE_ROLE = 8;
  static const UPDATE_SALE_DETAILS = 9;
  static const CREATE_ASSET = 10;
  static const CREATE_INVOICE = 11;
  static const MANAGE_CONTRACT = 12;
  static const UPDATE_ASSET = 13;
  static const CREATE_POLL = 14;
  static const CREATE_ATOMIC_SWAP_ASK = 16;
  static const CREATE_ATOMIC_SWAP_BID = 17;
  static const KYC_RECOVERY = 18;
  static const MANAGE_OFFER = 19;
  static const CREATE_PAYMENT = 20;
  static const PERFORM_REDEMPTION = 21;
  static const DATA_CREATION = 22;
  static const DATA_UPDATE = 23;
  static const DATA_REMOVE = 24;
  static const CREATE_DEFERRED_PAYMENT = 25;
  static const CLOSE_DEFERRED_PAYMENT = 26;
  late int value;

  ReviewableRequestType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ReviewableRequestType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct TasksExt {
//      // Tasks are represented by a bitmask
//      uint32 allTasks;
//      uint32 pendingTasks;
//
//      // External details vector consists of comments written by request reviewers
//      longstring externalDetails<>;
//
//      // Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class TasksExt extends XdrEncodable {
  late UINT32 allTasks;
  late UINT32 pendingTasks;
  late List<LONGSTRING> externalDetails;
  late TasksExtExt ext;

  TasksExt(
    this.allTasks,
    this.pendingTasks,
    this.externalDetails,
    this.ext,
  );

  TasksExt.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.allTasks = intFromXdr(stream);
    this.pendingTasks = intFromXdr(stream);
    length = intFromXdr(stream);
    externalDetails = <LONGSTRING>[];
    while (length > 0) {
      externalDetails.add(stringFromXdr(stream));
      length--;
    }

    this.ext = TasksExtExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    allTasks.toXdr(stream);
    pendingTasks.toXdr(stream);
    externalDetails.length.toXdr(stream);
    externalDetails.forEach((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}

abstract class TasksExtExt extends XdrEncodable {
  late LedgerVersion discriminant;

  TasksExtExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static TasksExtExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return TasksExtExtEmptyVersion.fromXdr(stream);
    }

    return TasksExtExtEmptyVersion.fromXdr(stream);
  }
}

class TasksExtExtEmptyVersion extends TasksExtExt {
  TasksExtExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  TasksExtExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct ReviewableRequestEntry {
//  	uint64 requestID;
//  	Hash hash; // hash of the request body
//  	AccountID requestor;
//  	longstring rejectReason;
//  	AccountID reviewer;
//  	string64* reference; // reference for request which will act as an unique key for the request (will reject request with the same reference from same requestor)
//  	int64 createdAt; // when request was created
//
//  	union switch (ReviewableRequestType type) {
//  		case CREATE_ASSET:
//  			AssetCreationRequest assetCreationRequest;
//  		case UPDATE_ASSET:
//  			AssetUpdateRequest assetUpdateRequest;
//  		case CREATE_PRE_ISSUANCE:
//  			PreIssuanceRequest preIssuanceRequest;
//  		case CREATE_ISSUANCE:
//  			IssuanceRequest issuanceRequest;
//  		case CREATE_WITHDRAW:
//  			WithdrawalRequest withdrawalRequest;
//  		case CREATE_SALE:
//  			SaleCreationRequest saleCreationRequest;
//          case UPDATE_LIMITS:
//              LimitsUpdateRequest limitsUpdateRequest;
//          case CREATE_AML_ALERT:
//              AMLAlertRequest amlAlertRequest;
//          case CHANGE_ROLE:
//              ChangeRoleRequest changeRoleRequest;
//          case UPDATE_SALE_DETAILS:
//              UpdateSaleDetailsRequest updateSaleDetailsRequest;
//          case CREATE_INVOICE:
//              InvoiceRequest invoiceRequest;
//          case MANAGE_CONTRACT:
//              ContractRequest contractRequest;
//          case CREATE_ATOMIC_SWAP_ASK:
//              CreateAtomicSwapAskRequest createAtomicSwapAskRequest;
//          case CREATE_ATOMIC_SWAP_BID:
//              CreateAtomicSwapBidRequest createAtomicSwapBidRequest;
//          case CREATE_POLL:
//              CreatePollRequest createPollRequest;
//          case KYC_RECOVERY:
//              KYCRecoveryRequest kycRecoveryRequest;
//  		case MANAGE_OFFER:
//  			ManageOfferRequest manageOfferRequest;
//  		case CREATE_PAYMENT:
//  			CreatePaymentRequest createPaymentRequest;
//          case PERFORM_REDEMPTION:
//              RedemptionRequest redemptionRequest;
//          case DATA_CREATION:
//              DataCreationRequest dataCreationRequest;
//          case DATA_UPDATE:
//              DataUpdateRequest dataUpdateRequest;
//          case DATA_REMOVE:
//              DataRemoveRequest dataRemoveRequest;
//          case CREATE_DEFERRED_PAYMENT:
//              CreateDeferredPaymentRequest createDeferredPaymentRequest;
//          case CLOSE_DEFERRED_PAYMENT:
//              CloseDeferredPaymentRequest closeDeferredPaymentRequest;
//
//  	} body;
//
//  	TasksExt tasks;
//
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//  	}
//      ext;
//  };

//  ===========================================================================
class ReviewableRequestEntry extends XdrEncodable {
  late UINT64 requestID;
  late HASH hash;
  late ACCOUNTID requestor;
  late LONGSTRING rejectReason;
  late ACCOUNTID reviewer;
  late STRING64? reference;
  late INT64 createdAt;
  late ReviewableRequestEntryBody body;
  late TasksExt tasks;
  late ReviewableRequestEntryExt ext;

  ReviewableRequestEntry(
    this.requestID,
    this.hash,
    this.requestor,
    this.rejectReason,
    this.reviewer,
    this.reference,
    this.createdAt,
    this.body,
    this.tasks,
    this.ext,
  );

  ReviewableRequestEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.hash = HASH.fromXdr(stream);
    this.requestor = PublicKey.fromXdr(stream);
    this.rejectReason = stringFromXdr(stream);
    this.reviewer = PublicKey.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.reference = stringFromXdr(stream);
    } else {
      this.reference = null;
    }
    this.createdAt = longFromXdr(stream);
    this.body = ReviewableRequestEntryBody.fromXdr(stream);
    this.tasks = TasksExt.fromXdr(stream);
    this.ext = ReviewableRequestEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    hash.toXdr(stream);
    requestor.toXdr(stream);
    rejectReason.toXdr(stream);
    reviewer.toXdr(stream);
    if (reference != null) {
      true.toXdr(stream);
      reference?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    createdAt.toXdr(stream);
    body.toXdr(stream);
    tasks.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ReviewableRequestEntryBody extends XdrEncodable {
  late ReviewableRequestType discriminant;

  ReviewableRequestEntryBody(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ReviewableRequestEntryBody fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ReviewableRequestType.CREATE_ASSET:
        return ReviewableRequestEntryBodyCreateAsset.fromXdr(stream);
      case ReviewableRequestType.UPDATE_ASSET:
        return ReviewableRequestEntryBodyUpdateAsset.fromXdr(stream);
      case ReviewableRequestType.CREATE_PRE_ISSUANCE:
        return ReviewableRequestEntryBodyCreatePreIssuance.fromXdr(stream);
      case ReviewableRequestType.CREATE_ISSUANCE:
        return ReviewableRequestEntryBodyCreateIssuance.fromXdr(stream);
      case ReviewableRequestType.CREATE_WITHDRAW:
        return ReviewableRequestEntryBodyCreateWithdraw.fromXdr(stream);
      case ReviewableRequestType.CREATE_SALE:
        return ReviewableRequestEntryBodyCreateSale.fromXdr(stream);
      case ReviewableRequestType.UPDATE_LIMITS:
        return ReviewableRequestEntryBodyUpdateLimits.fromXdr(stream);
      case ReviewableRequestType.CREATE_AML_ALERT:
        return ReviewableRequestEntryBodyCreateAmlAlert.fromXdr(stream);
      case ReviewableRequestType.CHANGE_ROLE:
        return ReviewableRequestEntryBodyChangeRole.fromXdr(stream);
      case ReviewableRequestType.UPDATE_SALE_DETAILS:
        return ReviewableRequestEntryBodyUpdateSaleDetails.fromXdr(stream);
      case ReviewableRequestType.CREATE_INVOICE:
        return ReviewableRequestEntryBodyCreateInvoice.fromXdr(stream);
      case ReviewableRequestType.MANAGE_CONTRACT:
        return ReviewableRequestEntryBodyManageContract.fromXdr(stream);
      case ReviewableRequestType.CREATE_ATOMIC_SWAP_ASK:
        return ReviewableRequestEntryBodyCreateAtomicSwapAsk.fromXdr(stream);
      case ReviewableRequestType.CREATE_ATOMIC_SWAP_BID:
        return ReviewableRequestEntryBodyCreateAtomicSwapBid.fromXdr(stream);
      case ReviewableRequestType.CREATE_POLL:
        return ReviewableRequestEntryBodyCreatePoll.fromXdr(stream);
      case ReviewableRequestType.KYC_RECOVERY:
        return ReviewableRequestEntryBodyKycRecovery.fromXdr(stream);
      case ReviewableRequestType.MANAGE_OFFER:
        return ReviewableRequestEntryBodyManageOffer.fromXdr(stream);
      case ReviewableRequestType.CREATE_PAYMENT:
        return ReviewableRequestEntryBodyCreatePayment.fromXdr(stream);
      case ReviewableRequestType.PERFORM_REDEMPTION:
        return ReviewableRequestEntryBodyPerformRedemption.fromXdr(stream);
      case ReviewableRequestType.DATA_CREATION:
        return ReviewableRequestEntryBodyDataCreation.fromXdr(stream);
      case ReviewableRequestType.DATA_UPDATE:
        return ReviewableRequestEntryBodyDataUpdate.fromXdr(stream);
      case ReviewableRequestType.DATA_REMOVE:
        return ReviewableRequestEntryBodyDataRemove.fromXdr(stream);
      case ReviewableRequestType.CREATE_DEFERRED_PAYMENT:
        return ReviewableRequestEntryBodyCreateDeferredPayment.fromXdr(stream);
      case ReviewableRequestType.CLOSE_DEFERRED_PAYMENT:
        return ReviewableRequestEntryBodyCloseDeferredPayment.fromXdr(stream);
    }

    return ReviewableRequestEntryBodyCreateAsset.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateAsset extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateAsset(this.assetCreationRequest)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_ASSET));
  late AssetCreationRequest assetCreationRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    assetCreationRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyCreateAsset.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_ASSET)) {
    this.assetCreationRequest = AssetCreationRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyUpdateAsset extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyUpdateAsset(this.assetUpdateRequest)
      : super(ReviewableRequestType(ReviewableRequestType.UPDATE_ASSET));
  late AssetUpdateRequest assetUpdateRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    assetUpdateRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyUpdateAsset.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.UPDATE_ASSET)) {
    this.assetUpdateRequest = AssetUpdateRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreatePreIssuance
    extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreatePreIssuance(this.preIssuanceRequest)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_PRE_ISSUANCE));
  late PreIssuanceRequest preIssuanceRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    preIssuanceRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyCreatePreIssuance.fromXdr(XdrDataInputStream stream)
      : super(
            ReviewableRequestType(ReviewableRequestType.CREATE_PRE_ISSUANCE)) {
    this.preIssuanceRequest = PreIssuanceRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateIssuance
    extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateIssuance(this.issuanceRequest)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_ISSUANCE));
  late IssuanceRequest issuanceRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    issuanceRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyCreateIssuance.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_ISSUANCE)) {
    this.issuanceRequest = IssuanceRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateWithdraw
    extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateWithdraw(this.withdrawalRequest)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_WITHDRAW));
  late WithdrawalRequest withdrawalRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    withdrawalRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyCreateWithdraw.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_WITHDRAW)) {
    this.withdrawalRequest = WithdrawalRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateSale extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateSale(this.saleCreationRequest)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_SALE));
  late SaleCreationRequest saleCreationRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    saleCreationRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyCreateSale.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_SALE)) {
    this.saleCreationRequest = SaleCreationRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyUpdateLimits
    extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyUpdateLimits(this.limitsUpdateRequest)
      : super(ReviewableRequestType(ReviewableRequestType.UPDATE_LIMITS));
  late LimitsUpdateRequest limitsUpdateRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    limitsUpdateRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyUpdateLimits.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.UPDATE_LIMITS)) {
    this.limitsUpdateRequest = LimitsUpdateRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateAmlAlert
    extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateAmlAlert(this.amlAlertRequest)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_AML_ALERT));
  late AMLAlertRequest amlAlertRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    amlAlertRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyCreateAmlAlert.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_AML_ALERT)) {
    this.amlAlertRequest = AMLAlertRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyChangeRole extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyChangeRole(this.changeRoleRequest)
      : super(ReviewableRequestType(ReviewableRequestType.CHANGE_ROLE));
  late ChangeRoleRequest changeRoleRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    changeRoleRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyChangeRole.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CHANGE_ROLE)) {
    this.changeRoleRequest = ChangeRoleRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyUpdateSaleDetails
    extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyUpdateSaleDetails(this.updateSaleDetailsRequest)
      : super(ReviewableRequestType(ReviewableRequestType.UPDATE_SALE_DETAILS));
  late UpdateSaleDetailsRequest updateSaleDetailsRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateSaleDetailsRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyUpdateSaleDetails.fromXdr(XdrDataInputStream stream)
      : super(
            ReviewableRequestType(ReviewableRequestType.UPDATE_SALE_DETAILS)) {
    this.updateSaleDetailsRequest = UpdateSaleDetailsRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateInvoice
    extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateInvoice(this.invoiceRequest)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_INVOICE));
  late InvoiceRequest invoiceRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    invoiceRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyCreateInvoice.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_INVOICE)) {
    this.invoiceRequest = InvoiceRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyManageContract
    extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyManageContract(this.contractRequest)
      : super(ReviewableRequestType(ReviewableRequestType.MANAGE_CONTRACT));
  late ContractRequest contractRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    contractRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyManageContract.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.MANAGE_CONTRACT)) {
    this.contractRequest = ContractRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateAtomicSwapAsk
    extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateAtomicSwapAsk(this.createAtomicSwapAskRequest)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_ATOMIC_SWAP_ASK));
  late CreateAtomicSwapAskRequest createAtomicSwapAskRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapAskRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyCreateAtomicSwapAsk.fromXdr(
      XdrDataInputStream stream)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_ATOMIC_SWAP_ASK)) {
    this.createAtomicSwapAskRequest =
        CreateAtomicSwapAskRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateAtomicSwapBid
    extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateAtomicSwapBid(this.createAtomicSwapBidRequest)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_ATOMIC_SWAP_BID));
  late CreateAtomicSwapBidRequest createAtomicSwapBidRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapBidRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyCreateAtomicSwapBid.fromXdr(
      XdrDataInputStream stream)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_ATOMIC_SWAP_BID)) {
    this.createAtomicSwapBidRequest =
        CreateAtomicSwapBidRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreatePoll extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreatePoll(this.createPollRequest)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_POLL));
  late CreatePollRequest createPollRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPollRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyCreatePoll.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_POLL)) {
    this.createPollRequest = CreatePollRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyKycRecovery extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyKycRecovery(this.kycRecoveryRequest)
      : super(ReviewableRequestType(ReviewableRequestType.KYC_RECOVERY));
  late KYCRecoveryRequest kycRecoveryRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    kycRecoveryRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyKycRecovery.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.KYC_RECOVERY)) {
    this.kycRecoveryRequest = KYCRecoveryRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyManageOffer extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyManageOffer(this.manageOfferRequest)
      : super(ReviewableRequestType(ReviewableRequestType.MANAGE_OFFER));
  late ManageOfferRequest manageOfferRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageOfferRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyManageOffer.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.MANAGE_OFFER)) {
    this.manageOfferRequest = ManageOfferRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreatePayment
    extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreatePayment(this.createPaymentRequest)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_PAYMENT));
  late CreatePaymentRequest createPaymentRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPaymentRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyCreatePayment.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_PAYMENT)) {
    this.createPaymentRequest = CreatePaymentRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyPerformRedemption
    extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyPerformRedemption(this.redemptionRequest)
      : super(ReviewableRequestType(ReviewableRequestType.PERFORM_REDEMPTION));
  late RedemptionRequest redemptionRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    redemptionRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyPerformRedemption.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.PERFORM_REDEMPTION)) {
    this.redemptionRequest = RedemptionRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyDataCreation
    extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyDataCreation(this.dataCreationRequest)
      : super(ReviewableRequestType(ReviewableRequestType.DATA_CREATION));
  late DataCreationRequest dataCreationRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dataCreationRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyDataCreation.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.DATA_CREATION)) {
    this.dataCreationRequest = DataCreationRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyDataUpdate extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyDataUpdate(this.dataUpdateRequest)
      : super(ReviewableRequestType(ReviewableRequestType.DATA_UPDATE));
  late DataUpdateRequest dataUpdateRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dataUpdateRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyDataUpdate.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.DATA_UPDATE)) {
    this.dataUpdateRequest = DataUpdateRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyDataRemove extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyDataRemove(this.dataRemoveRequest)
      : super(ReviewableRequestType(ReviewableRequestType.DATA_REMOVE));
  late DataRemoveRequest dataRemoveRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dataRemoveRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyDataRemove.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.DATA_REMOVE)) {
    this.dataRemoveRequest = DataRemoveRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateDeferredPayment
    extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateDeferredPayment(
      this.createDeferredPaymentRequest)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_DEFERRED_PAYMENT));
  late CreateDeferredPaymentRequest createDeferredPaymentRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDeferredPaymentRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyCreateDeferredPayment.fromXdr(
      XdrDataInputStream stream)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_DEFERRED_PAYMENT)) {
    this.createDeferredPaymentRequest =
        CreateDeferredPaymentRequest.fromXdr(stream);
  }
}

class ReviewableRequestEntryBodyCloseDeferredPayment
    extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCloseDeferredPayment(
      this.closeDeferredPaymentRequest)
      : super(ReviewableRequestType(
            ReviewableRequestType.CLOSE_DEFERRED_PAYMENT));
  late CloseDeferredPaymentRequest closeDeferredPaymentRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    closeDeferredPaymentRequest.toXdr(stream);
  }

  ReviewableRequestEntryBodyCloseDeferredPayment.fromXdr(
      XdrDataInputStream stream)
      : super(ReviewableRequestType(
            ReviewableRequestType.CLOSE_DEFERRED_PAYMENT)) {
    this.closeDeferredPaymentRequest =
        CloseDeferredPaymentRequest.fromXdr(stream);
  }
}

abstract class ReviewableRequestEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ReviewableRequestEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ReviewableRequestEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ReviewableRequestEntryExtEmptyVersion.fromXdr(stream);
    }

    return ReviewableRequestEntryExtEmptyVersion.fromXdr(stream);
  }
}

class ReviewableRequestEntryExtEmptyVersion extends ReviewableRequestEntryExt {
  ReviewableRequestEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ReviewableRequestEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class SaleType extends XdrEncodable {
  static const BASIC_SALE = 1;
  static const CROWD_FUNDING = 2;
  static const FIXED_PRICE = 3;
  static const IMMEDIATE = 4;
  late int value;

  SaleType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  SaleType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct FixedPriceSale {
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class FixedPriceSale extends XdrEncodable {
  late FixedPriceSaleExt ext;

  FixedPriceSale(
    this.ext,
  );

  FixedPriceSale.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = FixedPriceSaleExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class FixedPriceSaleExt extends XdrEncodable {
  late LedgerVersion discriminant;

  FixedPriceSaleExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static FixedPriceSaleExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return FixedPriceSaleExtEmptyVersion.fromXdr(stream);
    }

    return FixedPriceSaleExtEmptyVersion.fromXdr(stream);
  }
}

class FixedPriceSaleExtEmptyVersion extends FixedPriceSaleExt {
  FixedPriceSaleExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  FixedPriceSaleExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct CrowdFundingSale {
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CrowdFundingSale extends XdrEncodable {
  late CrowdFundingSaleExt ext;

  CrowdFundingSale(
    this.ext,
  );

  CrowdFundingSale.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = CrowdFundingSaleExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class CrowdFundingSaleExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CrowdFundingSaleExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CrowdFundingSaleExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CrowdFundingSaleExtEmptyVersion.fromXdr(stream);
    }

    return CrowdFundingSaleExtEmptyVersion.fromXdr(stream);
  }
}

class CrowdFundingSaleExtEmptyVersion extends CrowdFundingSaleExt {
  CrowdFundingSaleExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CrowdFundingSaleExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct BasicSale {
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class BasicSale extends XdrEncodable {
  late BasicSaleExt ext;

  BasicSale(
    this.ext,
  );

  BasicSale.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = BasicSaleExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class BasicSaleExt extends XdrEncodable {
  late LedgerVersion discriminant;

  BasicSaleExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static BasicSaleExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return BasicSaleExtEmptyVersion.fromXdr(stream);
    }

    return BasicSaleExtEmptyVersion.fromXdr(stream);
  }
}

class BasicSaleExtEmptyVersion extends BasicSaleExt {
  BasicSaleExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  BasicSaleExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct ImmediateSale {
//      EmptyExt ext;
//  };

//  ===========================================================================
class ImmediateSale extends XdrEncodable {
  late EmptyExt ext;

  ImmediateSale(
    this.ext,
  );

  ImmediateSale.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class SaleTypeExt extends XdrEncodable {
  late SaleType discriminant;

  SaleTypeExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SaleTypeExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case SaleType.BASIC_SALE:
        return SaleTypeExtBasicSale.fromXdr(stream);
      case SaleType.CROWD_FUNDING:
        return SaleTypeExtCrowdFunding.fromXdr(stream);
      case SaleType.FIXED_PRICE:
        return SaleTypeExtFixedPrice.fromXdr(stream);
      case SaleType.IMMEDIATE:
        return SaleTypeExtImmediate.fromXdr(stream);
    }

    return SaleTypeExtBasicSale.fromXdr(stream);
  }
}

class SaleTypeExtBasicSale extends SaleTypeExt {
  SaleTypeExtBasicSale(this.basicSale) : super(SaleType(SaleType.BASIC_SALE));
  late BasicSale basicSale;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    basicSale.toXdr(stream);
  }

  SaleTypeExtBasicSale.fromXdr(XdrDataInputStream stream)
      : super(SaleType(SaleType.BASIC_SALE)) {
    this.basicSale = BasicSale.fromXdr(stream);
  }
}

class SaleTypeExtCrowdFunding extends SaleTypeExt {
  SaleTypeExtCrowdFunding(this.crowdFundingSale)
      : super(SaleType(SaleType.CROWD_FUNDING));
  late CrowdFundingSale crowdFundingSale;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    crowdFundingSale.toXdr(stream);
  }

  SaleTypeExtCrowdFunding.fromXdr(XdrDataInputStream stream)
      : super(SaleType(SaleType.CROWD_FUNDING)) {
    this.crowdFundingSale = CrowdFundingSale.fromXdr(stream);
  }
}

class SaleTypeExtFixedPrice extends SaleTypeExt {
  SaleTypeExtFixedPrice(this.fixedPriceSale)
      : super(SaleType(SaleType.FIXED_PRICE));
  late FixedPriceSale fixedPriceSale;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    fixedPriceSale.toXdr(stream);
  }

  SaleTypeExtFixedPrice.fromXdr(XdrDataInputStream stream)
      : super(SaleType(SaleType.FIXED_PRICE)) {
    this.fixedPriceSale = FixedPriceSale.fromXdr(stream);
  }
}

class SaleTypeExtImmediate extends SaleTypeExt {
  SaleTypeExtImmediate(this.immediateSale)
      : super(SaleType(SaleType.IMMEDIATE));
  late ImmediateSale immediateSale;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    immediateSale.toXdr(stream);
  }

  SaleTypeExtImmediate.fromXdr(XdrDataInputStream stream)
      : super(SaleType(SaleType.IMMEDIATE)) {
    this.immediateSale = ImmediateSale.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct SaleQuoteAsset {
//  	AssetCode quoteAsset; // asset in which participation will be accepted
//  	uint64 price; // price for 1 baseAsset in terms of quote asset
//  	BalanceID quoteBalance;
//  	uint64 currentCap; // current capitalization
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SaleQuoteAsset extends XdrEncodable {
  late ASSETCODE quoteAsset;
  late UINT64 price;
  late BALANCEID quoteBalance;
  late UINT64 currentCap;
  late SaleQuoteAssetExt ext;

  SaleQuoteAsset(
    this.quoteAsset,
    this.price,
    this.quoteBalance,
    this.currentCap,
    this.ext,
  );

  SaleQuoteAsset.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.quoteAsset = stringFromXdr(stream);
    this.price = longFromXdr(stream);
    this.quoteBalance = PublicKey.fromXdr(stream);
    this.currentCap = longFromXdr(stream);
    this.ext = SaleQuoteAssetExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    quoteAsset.toXdr(stream);
    price.toXdr(stream);
    quoteBalance.toXdr(stream);
    currentCap.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class SaleQuoteAssetExt extends XdrEncodable {
  late LedgerVersion discriminant;

  SaleQuoteAssetExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SaleQuoteAssetExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return SaleQuoteAssetExtEmptyVersion.fromXdr(stream);
    }

    return SaleQuoteAssetExtEmptyVersion.fromXdr(stream);
  }
}

class SaleQuoteAssetExtEmptyVersion extends SaleQuoteAssetExt {
  SaleQuoteAssetExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  SaleQuoteAssetExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct SaleEntry
//  {
//  	uint64 saleID;
//  	uint64 saleType;
//  	AccountID ownerID;
//      AssetCode baseAsset; // asset for which sale will be performed
//  	uint64 startTime; // start time of the sale
//  	uint64 endTime; // close time of the sale
//  	AssetCode defaultQuoteAsset; // asset for soft and hard cap
//  	uint64 softCap; // minimum amount of quote asset to be received at which sale will be considered a successful
//  	uint64 hardCap; // max amount of quote asset to be received
//  	uint64 currentCapInBase;
//  	uint64 maxAmountToBeSold;
//  	longstring details; // sale specific details
//  	SaleQuoteAsset quoteAssets<100>;
//
//  	BalanceID baseBalance;
//      SaleTypeExt saleTypeExt;
//
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      case ADD_SALE_WHITELISTS:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SaleEntry extends XdrEncodable {
  late UINT64 saleID;
  late UINT64 saleType;
  late ACCOUNTID ownerID;
  late ASSETCODE baseAsset;
  late UINT64 startTime;
  late UINT64 endTime;
  late ASSETCODE defaultQuoteAsset;
  late UINT64 softCap;
  late UINT64 hardCap;
  late UINT64 currentCapInBase;
  late UINT64 maxAmountToBeSold;
  late LONGSTRING details;
  late List<SaleQuoteAsset> quoteAssets;
  late BALANCEID baseBalance;
  late SaleTypeExt saleTypeExt;
  late SaleEntryExt ext;

  SaleEntry(
    this.saleID,
    this.saleType,
    this.ownerID,
    this.baseAsset,
    this.startTime,
    this.endTime,
    this.defaultQuoteAsset,
    this.softCap,
    this.hardCap,
    this.currentCapInBase,
    this.maxAmountToBeSold,
    this.details,
    this.quoteAssets,
    this.baseBalance,
    this.saleTypeExt,
    this.ext,
  );

  SaleEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.saleID = longFromXdr(stream);
    this.saleType = longFromXdr(stream);
    this.ownerID = PublicKey.fromXdr(stream);
    this.baseAsset = stringFromXdr(stream);
    this.startTime = longFromXdr(stream);
    this.endTime = longFromXdr(stream);
    this.defaultQuoteAsset = stringFromXdr(stream);
    this.softCap = longFromXdr(stream);
    this.hardCap = longFromXdr(stream);
    this.currentCapInBase = longFromXdr(stream);
    this.maxAmountToBeSold = longFromXdr(stream);
    this.details = stringFromXdr(stream);
    length = intFromXdr(stream);
    quoteAssets = <SaleQuoteAsset>[];
    while (length > 0) {
      quoteAssets.add(SaleQuoteAsset.fromXdr(stream));
      length--;
    }

    this.baseBalance = PublicKey.fromXdr(stream);
    this.saleTypeExt = SaleTypeExt.fromXdr(stream);
    this.ext = SaleEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    saleType.toXdr(stream);
    ownerID.toXdr(stream);
    baseAsset.toXdr(stream);
    startTime.toXdr(stream);
    endTime.toXdr(stream);
    defaultQuoteAsset.toXdr(stream);
    softCap.toXdr(stream);
    hardCap.toXdr(stream);
    currentCapInBase.toXdr(stream);
    maxAmountToBeSold.toXdr(stream);
    details.toXdr(stream);
    quoteAssets.length.toXdr(stream);
    quoteAssets.forEach((element) {
      element.toXdr(stream);
    });
    baseBalance.toXdr(stream);
    saleTypeExt.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class SaleEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  SaleEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SaleEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return SaleEntryExtEmptyVersion.fromXdr(stream);
      case LedgerVersion.ADD_SALE_WHITELISTS:
        return SaleEntryExtAddSaleWhitelists.fromXdr(stream);
    }

    return SaleEntryExtEmptyVersion.fromXdr(stream);
  }
}

class SaleEntryExtEmptyVersion extends SaleEntryExt {
  SaleEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  SaleEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class SaleEntryExtAddSaleWhitelists extends SaleEntryExt {
  SaleEntryExtAddSaleWhitelists()
      : super(LedgerVersion(LedgerVersion.ADD_SALE_WHITELISTS));

  SaleEntryExtAddSaleWhitelists.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.ADD_SALE_WHITELISTS)) {}
}
// === xdr source ============================================================

//  struct SignerRoleEntry
//  {
//      uint64 id;
//      uint64 ruleIDs<>;
//
//      AccountID ownerID;
//
//      longstring details;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SignerRoleEntry extends XdrEncodable {
  late UINT64 id;
  late List<UINT64> ruleIDs;
  late ACCOUNTID ownerID;
  late LONGSTRING details;
  late SignerRoleEntryExt ext;

  SignerRoleEntry(
    this.id,
    this.ruleIDs,
    this.ownerID,
    this.details,
    this.ext,
  );

  SignerRoleEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    length = intFromXdr(stream);
    ruleIDs = <UINT64>[];
    while (length > 0) {
      ruleIDs.add(longFromXdr(stream));
      length--;
    }

    this.ownerID = PublicKey.fromXdr(stream);
    this.details = stringFromXdr(stream);
    this.ext = SignerRoleEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ruleIDs.length.toXdr(stream);
    ruleIDs.forEach((element) {
      element.toXdr(stream);
    });
    ownerID.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class SignerRoleEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  SignerRoleEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SignerRoleEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return SignerRoleEntryExtEmptyVersion.fromXdr(stream);
    }

    return SignerRoleEntryExtEmptyVersion.fromXdr(stream);
  }
}

class SignerRoleEntryExtEmptyVersion extends SignerRoleEntryExt {
  SignerRoleEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  SignerRoleEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct SignerRuleEntry
//  {
//      uint64 id;
//
//      SignerRuleResource resource;
//      SignerRuleAction action;
//
//      bool forbids;
//      bool isDefault; // default rules will be in each role
//
//      longstring details;
//
//      AccountID ownerID;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SignerRuleEntry extends XdrEncodable {
  late UINT64 id;
  late SignerRuleResource resource;
  late SignerRuleAction action;
  late bool forbids;
  late bool isDefault;
  late LONGSTRING details;
  late ACCOUNTID ownerID;
  late SignerRuleEntryExt ext;

  SignerRuleEntry(
    this.id,
    this.resource,
    this.action,
    this.forbids,
    this.isDefault,
    this.details,
    this.ownerID,
    this.ext,
  );

  SignerRuleEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.resource = SignerRuleResource.fromXdr(stream);
    this.action = SignerRuleAction.fromXdr(stream);
    this.forbids = boolFromXdr(stream);
    this.isDefault = boolFromXdr(stream);
    this.details = stringFromXdr(stream);
    this.ownerID = PublicKey.fromXdr(stream);
    this.ext = SignerRuleEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    resource.toXdr(stream);
    action.toXdr(stream);
    forbids.toXdr(stream);
    isDefault.toXdr(stream);
    details.toXdr(stream);
    ownerID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class SignerRuleEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  SignerRuleEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SignerRuleEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return SignerRuleEntryExtEmptyVersion.fromXdr(stream);
    }

    return SignerRuleEntryExtEmptyVersion.fromXdr(stream);
  }
}

class SignerRuleEntryExtEmptyVersion extends SignerRuleEntryExt {
  SignerRuleEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  SignerRuleEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct SignerEntry
//  {
//      PublicKey pubKey;
//      AccountID accountID; // account to which signer had attached
//
//      uint32 weight; // threshold for all SignerRules equals 1000
//  	uint32 identity;
//
//  	longstring details;
//
//  	uint64 roleID;
//
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SignerEntry extends XdrEncodable {
  late PublicKey pubKey;
  late ACCOUNTID accountID;
  late UINT32 weight;
  late UINT32 identity;
  late LONGSTRING details;
  late UINT64 roleID;
  late SignerEntryExt ext;

  SignerEntry(
    this.pubKey,
    this.accountID,
    this.weight,
    this.identity,
    this.details,
    this.roleID,
    this.ext,
  );

  SignerEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.pubKey = PublicKey.fromXdr(stream);
    this.accountID = PublicKey.fromXdr(stream);
    this.weight = intFromXdr(stream);
    this.identity = intFromXdr(stream);
    this.details = stringFromXdr(stream);
    this.roleID = longFromXdr(stream);
    this.ext = SignerEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    pubKey.toXdr(stream);
    accountID.toXdr(stream);
    weight.toXdr(stream);
    identity.toXdr(stream);
    details.toXdr(stream);
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class SignerEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  SignerEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SignerEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return SignerEntryExtEmptyVersion.fromXdr(stream);
    }

    return SignerEntryExtEmptyVersion.fromXdr(stream);
  }
}

class SignerEntryExtEmptyVersion extends SignerEntryExt {
  SignerEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  SignerEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct StampEntry
//  {
//      Hash ledgerHash;
//      Hash licenseHash;
//
//       // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class StampEntry extends XdrEncodable {
  late HASH ledgerHash;
  late HASH licenseHash;
  late StampEntryExt ext;

  StampEntry(
    this.ledgerHash,
    this.licenseHash,
    this.ext,
  );

  StampEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ledgerHash = HASH.fromXdr(stream);
    this.licenseHash = HASH.fromXdr(stream);
    this.ext = StampEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ledgerHash.toXdr(stream);
    licenseHash.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class StampEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  StampEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static StampEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return StampEntryExtEmptyVersion.fromXdr(stream);
    }

    return StampEntryExtEmptyVersion.fromXdr(stream);
  }
}

class StampEntryExtEmptyVersion extends StampEntryExt {
  StampEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  StampEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct StatisticsV2Entry
//  {
//      uint64      id;
//  	AccountID   accountID;
//  	StatsOpType statsOpType;
//      AssetCode   assetCode;
//      bool        isConvertNeeded;
//
//  	uint64 dailyOutcome;
//  	uint64 weeklyOutcome;
//  	uint64 monthlyOutcome;
//  	uint64 annualOutcome;
//
//  	int64 updatedAt;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class StatisticsV2Entry extends XdrEncodable {
  late UINT64 id;
  late ACCOUNTID accountID;
  late StatsOpType statsOpType;
  late ASSETCODE assetCode;
  late bool isConvertNeeded;
  late UINT64 dailyOutcome;
  late UINT64 weeklyOutcome;
  late UINT64 monthlyOutcome;
  late UINT64 annualOutcome;
  late INT64 updatedAt;
  late StatisticsV2EntryExt ext;

  StatisticsV2Entry(
    this.id,
    this.accountID,
    this.statsOpType,
    this.assetCode,
    this.isConvertNeeded,
    this.dailyOutcome,
    this.weeklyOutcome,
    this.monthlyOutcome,
    this.annualOutcome,
    this.updatedAt,
    this.ext,
  );

  StatisticsV2Entry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.accountID = PublicKey.fromXdr(stream);
    this.statsOpType = StatsOpType.fromXdr(stream);
    this.assetCode = stringFromXdr(stream);
    this.isConvertNeeded = boolFromXdr(stream);
    this.dailyOutcome = longFromXdr(stream);
    this.weeklyOutcome = longFromXdr(stream);
    this.monthlyOutcome = longFromXdr(stream);
    this.annualOutcome = longFromXdr(stream);
    this.updatedAt = longFromXdr(stream);
    this.ext = StatisticsV2EntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    accountID.toXdr(stream);
    statsOpType.toXdr(stream);
    assetCode.toXdr(stream);
    isConvertNeeded.toXdr(stream);
    dailyOutcome.toXdr(stream);
    weeklyOutcome.toXdr(stream);
    monthlyOutcome.toXdr(stream);
    annualOutcome.toXdr(stream);
    updatedAt.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class StatisticsV2EntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  StatisticsV2EntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static StatisticsV2EntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return StatisticsV2EntryExtEmptyVersion.fromXdr(stream);
    }

    return StatisticsV2EntryExtEmptyVersion.fromXdr(stream);
  }
}

class StatisticsV2EntryExtEmptyVersion extends StatisticsV2EntryExt {
  StatisticsV2EntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  StatisticsV2EntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct StatisticsEntry
//  {
//  	AccountID accountID;
//
//  	uint64 dailyOutcome;
//  	uint64 weeklyOutcome;
//  	uint64 monthlyOutcome;
//  	uint64 annualOutcome;
//
//  	int64 updatedAt;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class StatisticsEntry extends XdrEncodable {
  late ACCOUNTID accountID;
  late UINT64 dailyOutcome;
  late UINT64 weeklyOutcome;
  late UINT64 monthlyOutcome;
  late UINT64 annualOutcome;
  late INT64 updatedAt;
  late StatisticsEntryExt ext;

  StatisticsEntry(
    this.accountID,
    this.dailyOutcome,
    this.weeklyOutcome,
    this.monthlyOutcome,
    this.annualOutcome,
    this.updatedAt,
    this.ext,
  );

  StatisticsEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.accountID = PublicKey.fromXdr(stream);
    this.dailyOutcome = longFromXdr(stream);
    this.weeklyOutcome = longFromXdr(stream);
    this.monthlyOutcome = longFromXdr(stream);
    this.annualOutcome = longFromXdr(stream);
    this.updatedAt = longFromXdr(stream);
    this.ext = StatisticsEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    dailyOutcome.toXdr(stream);
    weeklyOutcome.toXdr(stream);
    monthlyOutcome.toXdr(stream);
    annualOutcome.toXdr(stream);
    updatedAt.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class StatisticsEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  StatisticsEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static StatisticsEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return StatisticsEntryExtEmptyVersion.fromXdr(stream);
    }

    return StatisticsEntryExtEmptyVersion.fromXdr(stream);
  }
}

class StatisticsEntryExtEmptyVersion extends StatisticsEntryExt {
  StatisticsEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  StatisticsEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct SwapEntry
//  {
//      uint64 id;
//
//      Hash secretHash;
//
//      AccountID source;
//      BalanceID sourceBalance;
//
//      BalanceID destinationBalance;
//
//      longstring details;
//
//      uint64 amount;
//
//      int64 createdAt;
//      int64 lockTime;
//
//  	uint64 fee;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class SwapEntry extends XdrEncodable {
  late UINT64 id;
  late HASH secretHash;
  late ACCOUNTID source;
  late BALANCEID sourceBalance;
  late BALANCEID destinationBalance;
  late LONGSTRING details;
  late UINT64 amount;
  late INT64 createdAt;
  late INT64 lockTime;
  late UINT64 fee;
  late EmptyExt ext;

  SwapEntry(
    this.id,
    this.secretHash,
    this.source,
    this.sourceBalance,
    this.destinationBalance,
    this.details,
    this.amount,
    this.createdAt,
    this.lockTime,
    this.fee,
    this.ext,
  );

  SwapEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.secretHash = HASH.fromXdr(stream);
    this.source = PublicKey.fromXdr(stream);
    this.sourceBalance = PublicKey.fromXdr(stream);
    this.destinationBalance = PublicKey.fromXdr(stream);
    this.details = stringFromXdr(stream);
    this.amount = longFromXdr(stream);
    this.createdAt = longFromXdr(stream);
    this.lockTime = longFromXdr(stream);
    this.fee = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    secretHash.toXdr(stream);
    source.toXdr(stream);
    sourceBalance.toXdr(stream);
    destinationBalance.toXdr(stream);
    details.toXdr(stream);
    amount.toXdr(stream);
    createdAt.toXdr(stream);
    lockTime.toXdr(stream);
    fee.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct SingleChoiceVote
//  {
//      uint32 choice;
//      EmptyExt ext;
//  };

//  ===========================================================================
class SingleChoiceVote extends XdrEncodable {
  late UINT32 choice;
  late EmptyExt ext;

  SingleChoiceVote(
    this.choice,
    this.ext,
  );

  SingleChoiceVote.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.choice = intFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    choice.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class VoteData extends XdrEncodable {
  late PollType discriminant;

  VoteData(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static VoteData fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case PollType.SINGLE_CHOICE:
        return VoteDataSingleChoice.fromXdr(stream);
    }

    return VoteDataSingleChoice.fromXdr(stream);
  }
}

class VoteDataSingleChoice extends VoteData {
  VoteDataSingleChoice(this.single) : super(PollType(PollType.SINGLE_CHOICE));
  late SingleChoiceVote single;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    single.toXdr(stream);
  }

  VoteDataSingleChoice.fromXdr(XdrDataInputStream stream)
      : super(PollType(PollType.SINGLE_CHOICE)) {
    this.single = SingleChoiceVote.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct VoteEntry
//  {
//      uint64 pollID;
//
//      AccountID voterID;
//
//      VoteData data;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class VoteEntry extends XdrEncodable {
  late UINT64 pollID;
  late ACCOUNTID voterID;
  late VoteData data;
  late EmptyExt ext;

  VoteEntry(
    this.pollID,
    this.voterID,
    this.data,
    this.ext,
  );

  VoteEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.pollID = longFromXdr(stream);
    this.voterID = PublicKey.fromXdr(stream);
    this.data = VoteData.fromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    voterID.toXdr(stream);
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

class ThresholdIndexes extends XdrEncodable {
  static const MASTER_WEIGHT = 0;
  static const LOW = 1;
  static const MED = 2;
  static const HIGH = 3;
  late int value;

  ThresholdIndexes(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ThresholdIndexes.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct LedgerEntry
//  {
//      uint32 lastModifiedLedgerSeq; // ledger the LedgerEntry was last changed
//
//      union switch (LedgerEntryType type)
//      {
//      case ACCOUNT:
//          AccountEntry account;
//      case SIGNER:
//          SignerEntry signer;
//      case FEE:
//          FeeEntry feeState;
//      case BALANCE:
//          BalanceEntry balance;
//      case ASSET:
//          AssetEntry asset;
//      case REFERENCE_ENTRY:
//          ReferenceEntry reference;
//      case STATISTICS:
//          StatisticsEntry stats;
//      case ACCOUNT_LIMITS:
//          AccountLimitsEntry accountLimits;
//  	case ASSET_PAIR:
//  		AssetPairEntry assetPair;
//  	case OFFER_ENTRY:
//  		OfferEntry offer;
//  	case REVIEWABLE_REQUEST:
//  		ReviewableRequestEntry reviewableRequest;
//  	case EXTERNAL_SYSTEM_ACCOUNT_ID:
//  		ExternalSystemAccountID externalSystemAccountID;
//  	case SALE:
//  		SaleEntry sale;
//  	case KEY_VALUE:
//  	    KeyValueEntry keyValue;
//  	case ACCOUNT_KYC:
//          AccountKYCEntry accountKYC;
//      case EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY:
//          ExternalSystemAccountIDPoolEntry externalSystemAccountIDPoolEntry;
//      case LIMITS_V2:
//          LimitsV2Entry limitsV2;
//      case STATISTICS_V2:
//          StatisticsV2Entry statisticsV2;
//      case PENDING_STATISTICS:
//          PendingStatisticsEntry pendingStatistics;
//      case CONTRACT:
//          ContractEntry contract;
//      case ATOMIC_SWAP_ASK:
//          AtomicSwapAskEntry atomicSwapAsk;
//      case ACCOUNT_ROLE:
//          AccountRoleEntry accountRole;
//      case ACCOUNT_RULE:
//          AccountRuleEntry accountRule;
//      case SIGNER_RULE:
//          SignerRuleEntry signerRule;
//      case SIGNER_ROLE:
//          SignerRoleEntry signerRole;
//      case LICENSE:
//          LicenseEntry license;
//      case STAMP:
//          StampEntry stamp;
//      case POLL:
//          PollEntry poll;
//      case VOTE:
//          VoteEntry vote;
//      case ACCOUNT_SPECIFIC_RULE:
//          AccountSpecificRuleEntry accountSpecificRule;
//      case SWAP:
//          SwapEntry swap;
//      case DATA:
//          DataEntry data;
//      case DEFERRED_PAYMENT:
//          DeferredPaymentEntry deferredPayment;
//      }
//      data;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LedgerEntry extends XdrEncodable {
  late UINT32 lastModifiedLedgerSeq;
  late LedgerEntryData data;
  late LedgerEntryExt ext;

  LedgerEntry(
    this.lastModifiedLedgerSeq,
    this.data,
    this.ext,
  );

  LedgerEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.lastModifiedLedgerSeq = intFromXdr(stream);
    this.data = LedgerEntryData.fromXdr(stream);
    this.ext = LedgerEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    lastModifiedLedgerSeq.toXdr(stream);
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerEntryData extends XdrEncodable {
  late LedgerEntryType discriminant;

  LedgerEntryData(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerEntryData fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerEntryType.ACCOUNT:
        return LedgerEntryDataAccount.fromXdr(stream);
      case LedgerEntryType.SIGNER:
        return LedgerEntryDataSigner.fromXdr(stream);
      case LedgerEntryType.FEE:
        return LedgerEntryDataFee.fromXdr(stream);
      case LedgerEntryType.BALANCE:
        return LedgerEntryDataBalance.fromXdr(stream);
      case LedgerEntryType.ASSET:
        return LedgerEntryDataAsset.fromXdr(stream);
      case LedgerEntryType.REFERENCE_ENTRY:
        return LedgerEntryDataReferenceEntry.fromXdr(stream);
      case LedgerEntryType.STATISTICS:
        return LedgerEntryDataStatistics.fromXdr(stream);
      case LedgerEntryType.ACCOUNT_LIMITS:
        return LedgerEntryDataAccountLimits.fromXdr(stream);
      case LedgerEntryType.ASSET_PAIR:
        return LedgerEntryDataAssetPair.fromXdr(stream);
      case LedgerEntryType.OFFER_ENTRY:
        return LedgerEntryDataOfferEntry.fromXdr(stream);
      case LedgerEntryType.REVIEWABLE_REQUEST:
        return LedgerEntryDataReviewableRequest.fromXdr(stream);
      case LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID:
        return LedgerEntryDataExternalSystemAccountId.fromXdr(stream);
      case LedgerEntryType.SALE:
        return LedgerEntryDataSale.fromXdr(stream);
      case LedgerEntryType.KEY_VALUE:
        return LedgerEntryDataKeyValue.fromXdr(stream);
      case LedgerEntryType.ACCOUNT_KYC:
        return LedgerEntryDataAccountKyc.fromXdr(stream);
      case LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY:
        return LedgerEntryDataExternalSystemAccountIdPoolEntry.fromXdr(stream);
      case LedgerEntryType.LIMITS_V2:
        return LedgerEntryDataLimitsV2.fromXdr(stream);
      case LedgerEntryType.STATISTICS_V2:
        return LedgerEntryDataStatisticsV2.fromXdr(stream);
      case LedgerEntryType.PENDING_STATISTICS:
        return LedgerEntryDataPendingStatistics.fromXdr(stream);
      case LedgerEntryType.CONTRACT:
        return LedgerEntryDataContract.fromXdr(stream);
      case LedgerEntryType.ATOMIC_SWAP_ASK:
        return LedgerEntryDataAtomicSwapAsk.fromXdr(stream);
      case LedgerEntryType.ACCOUNT_ROLE:
        return LedgerEntryDataAccountRole.fromXdr(stream);
      case LedgerEntryType.ACCOUNT_RULE:
        return LedgerEntryDataAccountRule.fromXdr(stream);
      case LedgerEntryType.SIGNER_RULE:
        return LedgerEntryDataSignerRule.fromXdr(stream);
      case LedgerEntryType.SIGNER_ROLE:
        return LedgerEntryDataSignerRole.fromXdr(stream);
      case LedgerEntryType.LICENSE:
        return LedgerEntryDataLicense.fromXdr(stream);
      case LedgerEntryType.STAMP:
        return LedgerEntryDataStamp.fromXdr(stream);
      case LedgerEntryType.POLL:
        return LedgerEntryDataPoll.fromXdr(stream);
      case LedgerEntryType.VOTE:
        return LedgerEntryDataVote.fromXdr(stream);
      case LedgerEntryType.ACCOUNT_SPECIFIC_RULE:
        return LedgerEntryDataAccountSpecificRule.fromXdr(stream);
      case LedgerEntryType.SWAP:
        return LedgerEntryDataSwap.fromXdr(stream);
      case LedgerEntryType.DATA:
        return LedgerEntryDataDataData.fromXdr(stream);
      case LedgerEntryType.DEFERRED_PAYMENT:
        return LedgerEntryDataDeferredPayment.fromXdr(stream);
    }

    return LedgerEntryDataAccount.fromXdr(stream);
  }
}

class LedgerEntryDataAccount extends LedgerEntryData {
  LedgerEntryDataAccount(this.account)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT));
  late AccountEntry account;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    account.toXdr(stream);
  }

  LedgerEntryDataAccount.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT)) {
    this.account = AccountEntry.fromXdr(stream);
  }
}

class LedgerEntryDataSigner extends LedgerEntryData {
  LedgerEntryDataSigner(this.signer)
      : super(LedgerEntryType(LedgerEntryType.SIGNER));
  late SignerEntry signer;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signer.toXdr(stream);
  }

  LedgerEntryDataSigner.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SIGNER)) {
    this.signer = SignerEntry.fromXdr(stream);
  }
}

class LedgerEntryDataFee extends LedgerEntryData {
  LedgerEntryDataFee(this.feeState)
      : super(LedgerEntryType(LedgerEntryType.FEE));
  late FeeEntry feeState;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    feeState.toXdr(stream);
  }

  LedgerEntryDataFee.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.FEE)) {
    this.feeState = FeeEntry.fromXdr(stream);
  }
}

class LedgerEntryDataBalance extends LedgerEntryData {
  LedgerEntryDataBalance(this.balance)
      : super(LedgerEntryType(LedgerEntryType.BALANCE));
  late BalanceEntry balance;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    balance.toXdr(stream);
  }

  LedgerEntryDataBalance.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.BALANCE)) {
    this.balance = BalanceEntry.fromXdr(stream);
  }
}

class LedgerEntryDataAsset extends LedgerEntryData {
  LedgerEntryDataAsset(this.asset)
      : super(LedgerEntryType(LedgerEntryType.ASSET));
  late AssetEntry asset;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    asset.toXdr(stream);
  }

  LedgerEntryDataAsset.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ASSET)) {
    this.asset = AssetEntry.fromXdr(stream);
  }
}

class LedgerEntryDataReferenceEntry extends LedgerEntryData {
  LedgerEntryDataReferenceEntry(this.reference)
      : super(LedgerEntryType(LedgerEntryType.REFERENCE_ENTRY));
  late ReferenceEntry reference;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reference.toXdr(stream);
  }

  LedgerEntryDataReferenceEntry.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.REFERENCE_ENTRY)) {
    this.reference = ReferenceEntry.fromXdr(stream);
  }
}

class LedgerEntryDataStatistics extends LedgerEntryData {
  LedgerEntryDataStatistics(this.stats)
      : super(LedgerEntryType(LedgerEntryType.STATISTICS));
  late StatisticsEntry stats;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    stats.toXdr(stream);
  }

  LedgerEntryDataStatistics.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.STATISTICS)) {
    this.stats = StatisticsEntry.fromXdr(stream);
  }
}

class LedgerEntryDataAccountLimits extends LedgerEntryData {
  LedgerEntryDataAccountLimits(this.accountLimits)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_LIMITS));
  late AccountLimitsEntry accountLimits;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountLimits.toXdr(stream);
  }

  LedgerEntryDataAccountLimits.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_LIMITS)) {
    this.accountLimits = AccountLimitsEntry.fromXdr(stream);
  }
}

class LedgerEntryDataAssetPair extends LedgerEntryData {
  LedgerEntryDataAssetPair(this.assetPair)
      : super(LedgerEntryType(LedgerEntryType.ASSET_PAIR));
  late AssetPairEntry assetPair;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    assetPair.toXdr(stream);
  }

  LedgerEntryDataAssetPair.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ASSET_PAIR)) {
    this.assetPair = AssetPairEntry.fromXdr(stream);
  }
}

class LedgerEntryDataOfferEntry extends LedgerEntryData {
  LedgerEntryDataOfferEntry(this.offer)
      : super(LedgerEntryType(LedgerEntryType.OFFER_ENTRY));
  late OfferEntry offer;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    offer.toXdr(stream);
  }

  LedgerEntryDataOfferEntry.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.OFFER_ENTRY)) {
    this.offer = OfferEntry.fromXdr(stream);
  }
}

class LedgerEntryDataReviewableRequest extends LedgerEntryData {
  LedgerEntryDataReviewableRequest(this.reviewableRequest)
      : super(LedgerEntryType(LedgerEntryType.REVIEWABLE_REQUEST));
  late ReviewableRequestEntry reviewableRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reviewableRequest.toXdr(stream);
  }

  LedgerEntryDataReviewableRequest.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.REVIEWABLE_REQUEST)) {
    this.reviewableRequest = ReviewableRequestEntry.fromXdr(stream);
  }
}

class LedgerEntryDataExternalSystemAccountId extends LedgerEntryData {
  LedgerEntryDataExternalSystemAccountId(this.externalSystemAccountID)
      : super(LedgerEntryType(LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID));
  late ExternalSystemAccountID externalSystemAccountID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    externalSystemAccountID.toXdr(stream);
  }

  LedgerEntryDataExternalSystemAccountId.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID)) {
    this.externalSystemAccountID = ExternalSystemAccountID.fromXdr(stream);
  }
}

class LedgerEntryDataSale extends LedgerEntryData {
  LedgerEntryDataSale(this.sale) : super(LedgerEntryType(LedgerEntryType.SALE));
  late SaleEntry sale;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    sale.toXdr(stream);
  }

  LedgerEntryDataSale.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SALE)) {
    this.sale = SaleEntry.fromXdr(stream);
  }
}

class LedgerEntryDataKeyValue extends LedgerEntryData {
  LedgerEntryDataKeyValue(this.keyValue)
      : super(LedgerEntryType(LedgerEntryType.KEY_VALUE));
  late KeyValueEntry keyValue;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    keyValue.toXdr(stream);
  }

  LedgerEntryDataKeyValue.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.KEY_VALUE)) {
    this.keyValue = KeyValueEntry.fromXdr(stream);
  }
}

class LedgerEntryDataAccountKyc extends LedgerEntryData {
  LedgerEntryDataAccountKyc(this.accountKYC)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_KYC));
  late AccountKYCEntry accountKYC;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountKYC.toXdr(stream);
  }

  LedgerEntryDataAccountKyc.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_KYC)) {
    this.accountKYC = AccountKYCEntry.fromXdr(stream);
  }
}

class LedgerEntryDataExternalSystemAccountIdPoolEntry extends LedgerEntryData {
  LedgerEntryDataExternalSystemAccountIdPoolEntry(
      this.externalSystemAccountIDPoolEntry)
      : super(LedgerEntryType(
            LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY));
  late ExternalSystemAccountIDPoolEntry externalSystemAccountIDPoolEntry;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    externalSystemAccountIDPoolEntry.toXdr(stream);
  }

  LedgerEntryDataExternalSystemAccountIdPoolEntry.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerEntryType(
            LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY)) {
    this.externalSystemAccountIDPoolEntry =
        ExternalSystemAccountIDPoolEntry.fromXdr(stream);
  }
}

class LedgerEntryDataLimitsV2 extends LedgerEntryData {
  LedgerEntryDataLimitsV2(this.limitsV2)
      : super(LedgerEntryType(LedgerEntryType.LIMITS_V2));
  late LimitsV2Entry limitsV2;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    limitsV2.toXdr(stream);
  }

  LedgerEntryDataLimitsV2.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.LIMITS_V2)) {
    this.limitsV2 = LimitsV2Entry.fromXdr(stream);
  }
}

class LedgerEntryDataStatisticsV2 extends LedgerEntryData {
  LedgerEntryDataStatisticsV2(this.statisticsV2)
      : super(LedgerEntryType(LedgerEntryType.STATISTICS_V2));
  late StatisticsV2Entry statisticsV2;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    statisticsV2.toXdr(stream);
  }

  LedgerEntryDataStatisticsV2.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.STATISTICS_V2)) {
    this.statisticsV2 = StatisticsV2Entry.fromXdr(stream);
  }
}

class LedgerEntryDataPendingStatistics extends LedgerEntryData {
  LedgerEntryDataPendingStatistics(this.pendingStatistics)
      : super(LedgerEntryType(LedgerEntryType.PENDING_STATISTICS));
  late PendingStatisticsEntry pendingStatistics;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    pendingStatistics.toXdr(stream);
  }

  LedgerEntryDataPendingStatistics.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.PENDING_STATISTICS)) {
    this.pendingStatistics = PendingStatisticsEntry.fromXdr(stream);
  }
}

class LedgerEntryDataContract extends LedgerEntryData {
  LedgerEntryDataContract(this.contract)
      : super(LedgerEntryType(LedgerEntryType.CONTRACT));
  late ContractEntry contract;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    contract.toXdr(stream);
  }

  LedgerEntryDataContract.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.CONTRACT)) {
    this.contract = ContractEntry.fromXdr(stream);
  }
}

class LedgerEntryDataAtomicSwapAsk extends LedgerEntryData {
  LedgerEntryDataAtomicSwapAsk(this.atomicSwapAsk)
      : super(LedgerEntryType(LedgerEntryType.ATOMIC_SWAP_ASK));
  late AtomicSwapAskEntry atomicSwapAsk;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    atomicSwapAsk.toXdr(stream);
  }

  LedgerEntryDataAtomicSwapAsk.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ATOMIC_SWAP_ASK)) {
    this.atomicSwapAsk = AtomicSwapAskEntry.fromXdr(stream);
  }
}

class LedgerEntryDataAccountRole extends LedgerEntryData {
  LedgerEntryDataAccountRole(this.accountRole)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_ROLE));
  late AccountRoleEntry accountRole;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountRole.toXdr(stream);
  }

  LedgerEntryDataAccountRole.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_ROLE)) {
    this.accountRole = AccountRoleEntry.fromXdr(stream);
  }
}

class LedgerEntryDataAccountRule extends LedgerEntryData {
  LedgerEntryDataAccountRule(this.accountRule)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_RULE));
  late AccountRuleEntry accountRule;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountRule.toXdr(stream);
  }

  LedgerEntryDataAccountRule.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_RULE)) {
    this.accountRule = AccountRuleEntry.fromXdr(stream);
  }
}

class LedgerEntryDataSignerRule extends LedgerEntryData {
  LedgerEntryDataSignerRule(this.signerRule)
      : super(LedgerEntryType(LedgerEntryType.SIGNER_RULE));
  late SignerRuleEntry signerRule;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signerRule.toXdr(stream);
  }

  LedgerEntryDataSignerRule.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SIGNER_RULE)) {
    this.signerRule = SignerRuleEntry.fromXdr(stream);
  }
}

class LedgerEntryDataSignerRole extends LedgerEntryData {
  LedgerEntryDataSignerRole(this.signerRole)
      : super(LedgerEntryType(LedgerEntryType.SIGNER_ROLE));
  late SignerRoleEntry signerRole;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signerRole.toXdr(stream);
  }

  LedgerEntryDataSignerRole.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SIGNER_ROLE)) {
    this.signerRole = SignerRoleEntry.fromXdr(stream);
  }
}

class LedgerEntryDataLicense extends LedgerEntryData {
  LedgerEntryDataLicense(this.license)
      : super(LedgerEntryType(LedgerEntryType.LICENSE));
  late LicenseEntry license;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    license.toXdr(stream);
  }

  LedgerEntryDataLicense.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.LICENSE)) {
    this.license = LicenseEntry.fromXdr(stream);
  }
}

class LedgerEntryDataStamp extends LedgerEntryData {
  LedgerEntryDataStamp(this.stamp)
      : super(LedgerEntryType(LedgerEntryType.STAMP));
  late StampEntry stamp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    stamp.toXdr(stream);
  }

  LedgerEntryDataStamp.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.STAMP)) {
    this.stamp = StampEntry.fromXdr(stream);
  }
}

class LedgerEntryDataPoll extends LedgerEntryData {
  LedgerEntryDataPoll(this.poll) : super(LedgerEntryType(LedgerEntryType.POLL));
  late PollEntry poll;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    poll.toXdr(stream);
  }

  LedgerEntryDataPoll.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.POLL)) {
    this.poll = PollEntry.fromXdr(stream);
  }
}

class LedgerEntryDataVote extends LedgerEntryData {
  LedgerEntryDataVote(this.vote) : super(LedgerEntryType(LedgerEntryType.VOTE));
  late VoteEntry vote;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    vote.toXdr(stream);
  }

  LedgerEntryDataVote.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.VOTE)) {
    this.vote = VoteEntry.fromXdr(stream);
  }
}

class LedgerEntryDataAccountSpecificRule extends LedgerEntryData {
  LedgerEntryDataAccountSpecificRule(this.accountSpecificRule)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_SPECIFIC_RULE));
  late AccountSpecificRuleEntry accountSpecificRule;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountSpecificRule.toXdr(stream);
  }

  LedgerEntryDataAccountSpecificRule.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_SPECIFIC_RULE)) {
    this.accountSpecificRule = AccountSpecificRuleEntry.fromXdr(stream);
  }
}

class LedgerEntryDataSwap extends LedgerEntryData {
  LedgerEntryDataSwap(this.swap) : super(LedgerEntryType(LedgerEntryType.SWAP));
  late SwapEntry swap;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    swap.toXdr(stream);
  }

  LedgerEntryDataSwap.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SWAP)) {
    this.swap = SwapEntry.fromXdr(stream);
  }
}

class LedgerEntryDataDataData extends LedgerEntryData {
  LedgerEntryDataDataData(this.data)
      : super(LedgerEntryType(LedgerEntryType.DATA));
  late DataEntry data;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    data.toXdr(stream);
  }

  LedgerEntryDataDataData.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.DATA)) {
    this.data = DataEntry.fromXdr(stream);
  }
}

class LedgerEntryDataDeferredPayment extends LedgerEntryData {
  LedgerEntryDataDeferredPayment(this.deferredPayment)
      : super(LedgerEntryType(LedgerEntryType.DEFERRED_PAYMENT));
  late DeferredPaymentEntry deferredPayment;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    deferredPayment.toXdr(stream);
  }

  LedgerEntryDataDeferredPayment.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.DEFERRED_PAYMENT)) {
    this.deferredPayment = DeferredPaymentEntry.fromXdr(stream);
  }
}

abstract class LedgerEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerEntryExtEmptyVersion.fromXdr(stream);
    }

    return LedgerEntryExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerEntryExtEmptyVersion extends LedgerEntryExt {
  LedgerEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class EnvelopeType extends XdrEncodable {
  static const SCP = 1;
  static const TX = 2;
  static const AUTH = 3;
  late int value;

  EnvelopeType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  EnvelopeType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class LedgerKey extends XdrEncodable {
  late LedgerEntryType discriminant;

  LedgerKey(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKey fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerEntryType.ACCOUNT:
        return LedgerKeyAccount.fromXdr(stream);
      case LedgerEntryType.SIGNER:
        return LedgerKeySigner.fromXdr(stream);
      case LedgerEntryType.FEE:
        return LedgerKeyFee.fromXdr(stream);
      case LedgerEntryType.BALANCE:
        return LedgerKeyBalance.fromXdr(stream);
      case LedgerEntryType.ASSET:
        return LedgerKeyAsset.fromXdr(stream);
      case LedgerEntryType.REFERENCE_ENTRY:
        return LedgerKeyReferenceEntry.fromXdr(stream);
      case LedgerEntryType.STATISTICS:
        return LedgerKeyStatistics.fromXdr(stream);
      case LedgerEntryType.ACCOUNT_LIMITS:
        return LedgerKeyAccountLimits.fromXdr(stream);
      case LedgerEntryType.ASSET_PAIR:
        return LedgerKeyAssetPair.fromXdr(stream);
      case LedgerEntryType.OFFER_ENTRY:
        return LedgerKeyOfferEntry.fromXdr(stream);
      case LedgerEntryType.REVIEWABLE_REQUEST:
        return LedgerKeyReviewableRequest.fromXdr(stream);
      case LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID:
        return LedgerKeyExternalSystemAccountId.fromXdr(stream);
      case LedgerEntryType.SALE:
        return LedgerKeySale.fromXdr(stream);
      case LedgerEntryType.KEY_VALUE:
        return LedgerKeyKeyValue.fromXdr(stream);
      case LedgerEntryType.ACCOUNT_KYC:
        return LedgerKeyAccountKyc.fromXdr(stream);
      case LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY:
        return LedgerKeyExternalSystemAccountIdPoolEntry.fromXdr(stream);
      case LedgerEntryType.LIMITS_V2:
        return LedgerKeyLimitsV2.fromXdr(stream);
      case LedgerEntryType.STATISTICS_V2:
        return LedgerKeyStatisticsV2.fromXdr(stream);
      case LedgerEntryType.PENDING_STATISTICS:
        return LedgerKeyPendingStatistics.fromXdr(stream);
      case LedgerEntryType.CONTRACT:
        return LedgerKeyContract.fromXdr(stream);
      case LedgerEntryType.ATOMIC_SWAP_ASK:
        return LedgerKeyAtomicSwapAsk.fromXdr(stream);
      case LedgerEntryType.ACCOUNT_ROLE:
        return LedgerKeyAccountRole.fromXdr(stream);
      case LedgerEntryType.ACCOUNT_RULE:
        return LedgerKeyAccountRule.fromXdr(stream);
      case LedgerEntryType.SIGNER_ROLE:
        return LedgerKeySignerRole.fromXdr(stream);
      case LedgerEntryType.SIGNER_RULE:
        return LedgerKeySignerRule.fromXdr(stream);
      case LedgerEntryType.STAMP:
        return LedgerKeyStamp.fromXdr(stream);
      case LedgerEntryType.LICENSE:
        return LedgerKeyLicense.fromXdr(stream);
      case LedgerEntryType.POLL:
        return LedgerKeyPoll.fromXdr(stream);
      case LedgerEntryType.VOTE:
        return LedgerKeyVote.fromXdr(stream);
      case LedgerEntryType.ACCOUNT_SPECIFIC_RULE:
        return LedgerKeyAccountSpecificRule.fromXdr(stream);
      case LedgerEntryType.SWAP:
        return LedgerKeySwap.fromXdr(stream);
      case LedgerEntryType.DATA:
        return LedgerKeyData.fromXdr(stream);
      case LedgerEntryType.DEFERRED_PAYMENT:
        return LedgerKeyDeferredPayment.fromXdr(stream);
    }

    return LedgerKeyAccount.fromXdr(stream);
  }
}

class LedgerKeyAccount extends LedgerKey {
  LedgerKeyAccount(this.account)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT));
  late LedgerKeyAccountAccount account;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    account.toXdr(stream);
  }

  LedgerKeyAccount.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT)) {
    this.account = LedgerKeyAccountAccount.fromXdr(stream);
  }
}

class LedgerKeySigner extends LedgerKey {
  LedgerKeySigner(this.signer) : super(LedgerEntryType(LedgerEntryType.SIGNER));
  late LedgerKeySignerSigner signer;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signer.toXdr(stream);
  }

  LedgerKeySigner.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SIGNER)) {
    this.signer = LedgerKeySignerSigner.fromXdr(stream);
  }
}

class LedgerKeyFee extends LedgerKey {
  LedgerKeyFee(this.feeState) : super(LedgerEntryType(LedgerEntryType.FEE));
  late LedgerKeyFeeStateFeeState feeState;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    feeState.toXdr(stream);
  }

  LedgerKeyFee.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.FEE)) {
    this.feeState = LedgerKeyFeeStateFeeState.fromXdr(stream);
  }
}

class LedgerKeyBalance extends LedgerKey {
  LedgerKeyBalance(this.balance)
      : super(LedgerEntryType(LedgerEntryType.BALANCE));
  late LedgerKeyBalanceBalance balance;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    balance.toXdr(stream);
  }

  LedgerKeyBalance.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.BALANCE)) {
    this.balance = LedgerKeyBalanceBalance.fromXdr(stream);
  }
}

class LedgerKeyAsset extends LedgerKey {
  LedgerKeyAsset(this.asset) : super(LedgerEntryType(LedgerEntryType.ASSET));
  late LedgerKeyAssetAsset asset;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    asset.toXdr(stream);
  }

  LedgerKeyAsset.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ASSET)) {
    this.asset = LedgerKeyAssetAsset.fromXdr(stream);
  }
}

class LedgerKeyReferenceEntry extends LedgerKey {
  LedgerKeyReferenceEntry(this.reference)
      : super(LedgerEntryType(LedgerEntryType.REFERENCE_ENTRY));
  late LedgerKeyReferenceReference reference;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reference.toXdr(stream);
  }

  LedgerKeyReferenceEntry.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.REFERENCE_ENTRY)) {
    this.reference = LedgerKeyReferenceReference.fromXdr(stream);
  }
}

class LedgerKeyStatistics extends LedgerKey {
  LedgerKeyStatistics(this.stats)
      : super(LedgerEntryType(LedgerEntryType.STATISTICS));
  late LedgerKeyStatsStats stats;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    stats.toXdr(stream);
  }

  LedgerKeyStatistics.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.STATISTICS)) {
    this.stats = LedgerKeyStatsStats.fromXdr(stream);
  }
}

class LedgerKeyAccountLimits extends LedgerKey {
  LedgerKeyAccountLimits(this.accountLimits)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_LIMITS));
  late LedgerKeyAccountLimitsAccountLimits accountLimits;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountLimits.toXdr(stream);
  }

  LedgerKeyAccountLimits.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_LIMITS)) {
    this.accountLimits = LedgerKeyAccountLimitsAccountLimits.fromXdr(stream);
  }
}

class LedgerKeyAssetPair extends LedgerKey {
  LedgerKeyAssetPair(this.assetPair)
      : super(LedgerEntryType(LedgerEntryType.ASSET_PAIR));
  late LedgerKeyAssetPairAssetPair assetPair;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    assetPair.toXdr(stream);
  }

  LedgerKeyAssetPair.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ASSET_PAIR)) {
    this.assetPair = LedgerKeyAssetPairAssetPair.fromXdr(stream);
  }
}

class LedgerKeyOfferEntry extends LedgerKey {
  LedgerKeyOfferEntry(this.offer)
      : super(LedgerEntryType(LedgerEntryType.OFFER_ENTRY));
  late LedgerKeyOfferOffer offer;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    offer.toXdr(stream);
  }

  LedgerKeyOfferEntry.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.OFFER_ENTRY)) {
    this.offer = LedgerKeyOfferOffer.fromXdr(stream);
  }
}

class LedgerKeyReviewableRequest extends LedgerKey {
  LedgerKeyReviewableRequest(this.reviewableRequest)
      : super(LedgerEntryType(LedgerEntryType.REVIEWABLE_REQUEST));
  late LedgerKeyReviewableRequestReviewableRequest reviewableRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reviewableRequest.toXdr(stream);
  }

  LedgerKeyReviewableRequest.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.REVIEWABLE_REQUEST)) {
    this.reviewableRequest =
        LedgerKeyReviewableRequestReviewableRequest.fromXdr(stream);
  }
}

class LedgerKeyExternalSystemAccountId extends LedgerKey {
  LedgerKeyExternalSystemAccountId(this.externalSystemAccountID)
      : super(LedgerEntryType(LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID));
  late LedgerKeyExternalSystemAccountIDExternalSystemAccountID
      externalSystemAccountID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    externalSystemAccountID.toXdr(stream);
  }

  LedgerKeyExternalSystemAccountId.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID)) {
    this.externalSystemAccountID =
        LedgerKeyExternalSystemAccountIDExternalSystemAccountID.fromXdr(stream);
  }
}

class LedgerKeySale extends LedgerKey {
  LedgerKeySale(this.sale) : super(LedgerEntryType(LedgerEntryType.SALE));
  late LedgerKeySaleSale sale;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    sale.toXdr(stream);
  }

  LedgerKeySale.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SALE)) {
    this.sale = LedgerKeySaleSale.fromXdr(stream);
  }
}

class LedgerKeyKeyValue extends LedgerKey {
  LedgerKeyKeyValue(this.keyValue)
      : super(LedgerEntryType(LedgerEntryType.KEY_VALUE));
  late LedgerKeyKeyValueKeyValue keyValue;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    keyValue.toXdr(stream);
  }

  LedgerKeyKeyValue.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.KEY_VALUE)) {
    this.keyValue = LedgerKeyKeyValueKeyValue.fromXdr(stream);
  }
}

class LedgerKeyAccountKyc extends LedgerKey {
  LedgerKeyAccountKyc(this.accountKYC)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_KYC));
  late LedgerKeyAccountKYCAccountKYC accountKYC;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountKYC.toXdr(stream);
  }

  LedgerKeyAccountKyc.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_KYC)) {
    this.accountKYC = LedgerKeyAccountKYCAccountKYC.fromXdr(stream);
  }
}

class LedgerKeyExternalSystemAccountIdPoolEntry extends LedgerKey {
  LedgerKeyExternalSystemAccountIdPoolEntry(
      this.externalSystemAccountIDPoolEntry)
      : super(LedgerEntryType(
            LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY));
  late LedgerKeyExternalSystemAccountIDPoolEntryExternalSystemAccountIDPoolEntry
      externalSystemAccountIDPoolEntry;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    externalSystemAccountIDPoolEntry.toXdr(stream);
  }

  LedgerKeyExternalSystemAccountIdPoolEntry.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(
            LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY)) {
    this.externalSystemAccountIDPoolEntry =
        LedgerKeyExternalSystemAccountIDPoolEntryExternalSystemAccountIDPoolEntry
            .fromXdr(stream);
  }
}

class LedgerKeyLimitsV2 extends LedgerKey {
  LedgerKeyLimitsV2(this.limitsV2)
      : super(LedgerEntryType(LedgerEntryType.LIMITS_V2));
  late LedgerKeyLimitsV2LimitsV2 limitsV2;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    limitsV2.toXdr(stream);
  }

  LedgerKeyLimitsV2.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.LIMITS_V2)) {
    this.limitsV2 = LedgerKeyLimitsV2LimitsV2.fromXdr(stream);
  }
}

class LedgerKeyStatisticsV2 extends LedgerKey {
  LedgerKeyStatisticsV2(this.statisticsV2)
      : super(LedgerEntryType(LedgerEntryType.STATISTICS_V2));
  late LedgerKeyStatisticsV2StatisticsV2 statisticsV2;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    statisticsV2.toXdr(stream);
  }

  LedgerKeyStatisticsV2.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.STATISTICS_V2)) {
    this.statisticsV2 = LedgerKeyStatisticsV2StatisticsV2.fromXdr(stream);
  }
}

class LedgerKeyPendingStatistics extends LedgerKey {
  LedgerKeyPendingStatistics(this.pendingStatistics)
      : super(LedgerEntryType(LedgerEntryType.PENDING_STATISTICS));
  late LedgerKeyPendingStatisticsPendingStatistics pendingStatistics;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    pendingStatistics.toXdr(stream);
  }

  LedgerKeyPendingStatistics.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.PENDING_STATISTICS)) {
    this.pendingStatistics =
        LedgerKeyPendingStatisticsPendingStatistics.fromXdr(stream);
  }
}

class LedgerKeyContract extends LedgerKey {
  LedgerKeyContract(this.contract)
      : super(LedgerEntryType(LedgerEntryType.CONTRACT));
  late LedgerKeyContractContract contract;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    contract.toXdr(stream);
  }

  LedgerKeyContract.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.CONTRACT)) {
    this.contract = LedgerKeyContractContract.fromXdr(stream);
  }
}

class LedgerKeyAtomicSwapAsk extends LedgerKey {
  LedgerKeyAtomicSwapAsk(this.atomicSwapAsk)
      : super(LedgerEntryType(LedgerEntryType.ATOMIC_SWAP_ASK));
  late LedgerKeyAtomicSwapAskAtomicSwapAsk atomicSwapAsk;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    atomicSwapAsk.toXdr(stream);
  }

  LedgerKeyAtomicSwapAsk.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ATOMIC_SWAP_ASK)) {
    this.atomicSwapAsk = LedgerKeyAtomicSwapAskAtomicSwapAsk.fromXdr(stream);
  }
}

class LedgerKeyAccountRole extends LedgerKey {
  LedgerKeyAccountRole(this.accountRole)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_ROLE));
  late LedgerKeyAccountRoleAccountRole accountRole;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountRole.toXdr(stream);
  }

  LedgerKeyAccountRole.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_ROLE)) {
    this.accountRole = LedgerKeyAccountRoleAccountRole.fromXdr(stream);
  }
}

class LedgerKeyAccountRule extends LedgerKey {
  LedgerKeyAccountRule(this.accountRule)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_RULE));
  late LedgerKeyAccountRuleAccountRule accountRule;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountRule.toXdr(stream);
  }

  LedgerKeyAccountRule.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_RULE)) {
    this.accountRule = LedgerKeyAccountRuleAccountRule.fromXdr(stream);
  }
}

class LedgerKeySignerRole extends LedgerKey {
  LedgerKeySignerRole(this.signerRole)
      : super(LedgerEntryType(LedgerEntryType.SIGNER_ROLE));
  late LedgerKeySignerRoleSignerRole signerRole;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signerRole.toXdr(stream);
  }

  LedgerKeySignerRole.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SIGNER_ROLE)) {
    this.signerRole = LedgerKeySignerRoleSignerRole.fromXdr(stream);
  }
}

class LedgerKeySignerRule extends LedgerKey {
  LedgerKeySignerRule(this.signerRule)
      : super(LedgerEntryType(LedgerEntryType.SIGNER_RULE));
  late LedgerKeySignerRuleSignerRule signerRule;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signerRule.toXdr(stream);
  }

  LedgerKeySignerRule.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SIGNER_RULE)) {
    this.signerRule = LedgerKeySignerRuleSignerRule.fromXdr(stream);
  }
}

class LedgerKeyStamp extends LedgerKey {
  LedgerKeyStamp(this.stamp) : super(LedgerEntryType(LedgerEntryType.STAMP));
  late LedgerKeyStampStamp stamp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    stamp.toXdr(stream);
  }

  LedgerKeyStamp.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.STAMP)) {
    this.stamp = LedgerKeyStampStamp.fromXdr(stream);
  }
}

class LedgerKeyLicense extends LedgerKey {
  LedgerKeyLicense(this.license)
      : super(LedgerEntryType(LedgerEntryType.LICENSE));
  late LedgerKeyLicenseLicense license;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    license.toXdr(stream);
  }

  LedgerKeyLicense.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.LICENSE)) {
    this.license = LedgerKeyLicenseLicense.fromXdr(stream);
  }
}

class LedgerKeyPoll extends LedgerKey {
  LedgerKeyPoll(this.poll) : super(LedgerEntryType(LedgerEntryType.POLL));
  late LedgerKeyPollPoll poll;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    poll.toXdr(stream);
  }

  LedgerKeyPoll.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.POLL)) {
    this.poll = LedgerKeyPollPoll.fromXdr(stream);
  }
}

class LedgerKeyVote extends LedgerKey {
  LedgerKeyVote(this.vote) : super(LedgerEntryType(LedgerEntryType.VOTE));
  late LedgerKeyVoteVote vote;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    vote.toXdr(stream);
  }

  LedgerKeyVote.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.VOTE)) {
    this.vote = LedgerKeyVoteVote.fromXdr(stream);
  }
}

class LedgerKeyAccountSpecificRule extends LedgerKey {
  LedgerKeyAccountSpecificRule(this.accountSpecificRule)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_SPECIFIC_RULE));
  late LedgerKeyAccountSpecificRuleAccountSpecificRule accountSpecificRule;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountSpecificRule.toXdr(stream);
  }

  LedgerKeyAccountSpecificRule.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_SPECIFIC_RULE)) {
    this.accountSpecificRule =
        LedgerKeyAccountSpecificRuleAccountSpecificRule.fromXdr(stream);
  }
}

class LedgerKeySwap extends LedgerKey {
  LedgerKeySwap(this.swap) : super(LedgerEntryType(LedgerEntryType.SWAP));
  late LedgerKeySwapSwap swap;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    swap.toXdr(stream);
  }

  LedgerKeySwap.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SWAP)) {
    this.swap = LedgerKeySwapSwap.fromXdr(stream);
  }
}

class LedgerKeyData extends LedgerKey {
  LedgerKeyData(this.data) : super(LedgerEntryType(LedgerEntryType.DATA));
  late LedgerKeyDataData data;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    data.toXdr(stream);
  }

  LedgerKeyData.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.DATA)) {
    this.data = LedgerKeyDataData.fromXdr(stream);
  }
}

class LedgerKeyDeferredPayment extends LedgerKey {
  LedgerKeyDeferredPayment(this.deferredPayment)
      : super(LedgerEntryType(LedgerEntryType.DEFERRED_PAYMENT));
  late LedgerKeyDeferredPaymentDeferredPayment deferredPayment;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    deferredPayment.toXdr(stream);
  }

  LedgerKeyDeferredPayment.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.DEFERRED_PAYMENT)) {
    this.deferredPayment =
        LedgerKeyDeferredPaymentDeferredPayment.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          AccountID accountID;
//          union switch (LedgerVersion v)
//         {
//         case EMPTY_VERSION:
//            void;
//         }
//         ext;
//      }

//  ===========================================================================
class LedgerKeyAccountAccount extends XdrEncodable {
  late ACCOUNTID accountID;
  late LedgerKeyAccountExt ext;

  LedgerKeyAccountAccount(
    this.accountID,
    this.ext,
  );

  LedgerKeyAccountAccount.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.accountID = PublicKey.fromXdr(stream);
    this.ext = LedgerKeyAccountExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyAccountExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyAccountExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyAccountExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyAccountExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyAccountExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyAccountExtEmptyVersion extends LedgerKeyAccountExt {
  LedgerKeyAccountExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyAccountExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct
//      {
//          PublicKey pubKey;
//          AccountID accountID;
//
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeySignerSigner extends XdrEncodable {
  late PublicKey pubKey;
  late ACCOUNTID accountID;
  late LedgerKeySignerExt ext;

  LedgerKeySignerSigner(
    this.pubKey,
    this.accountID,
    this.ext,
  );

  LedgerKeySignerSigner.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.pubKey = PublicKey.fromXdr(stream);
    this.accountID = PublicKey.fromXdr(stream);
    this.ext = LedgerKeySignerExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    pubKey.toXdr(stream);
    accountID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeySignerExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeySignerExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeySignerExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeySignerExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeySignerExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeySignerExtEmptyVersion extends LedgerKeySignerExt {
  LedgerKeySignerExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeySignerExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          Hash hash;
//          int64 lowerBound;
//          int64 upperBound;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyFeeStateFeeState extends XdrEncodable {
  late HASH hash;
  late INT64 lowerBound;
  late INT64 upperBound;
  late LedgerKeyFeeStateExt ext;

  LedgerKeyFeeStateFeeState(
    this.hash,
    this.lowerBound,
    this.upperBound,
    this.ext,
  );

  LedgerKeyFeeStateFeeState.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.hash = HASH.fromXdr(stream);
    this.lowerBound = longFromXdr(stream);
    this.upperBound = longFromXdr(stream);
    this.ext = LedgerKeyFeeStateExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    hash.toXdr(stream);
    lowerBound.toXdr(stream);
    upperBound.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyFeeStateExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyFeeStateExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyFeeStateExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyFeeStateExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyFeeStateExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyFeeStateExtEmptyVersion extends LedgerKeyFeeStateExt {
  LedgerKeyFeeStateExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyFeeStateExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct
//      {
//          BalanceID balanceID;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyBalanceBalance extends XdrEncodable {
  late BALANCEID balanceID;
  late LedgerKeyBalanceExt ext;

  LedgerKeyBalanceBalance(
    this.balanceID,
    this.ext,
  );

  LedgerKeyBalanceBalance.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.balanceID = PublicKey.fromXdr(stream);
    this.ext = LedgerKeyBalanceExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    balanceID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyBalanceExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyBalanceExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyBalanceExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyBalanceExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyBalanceExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyBalanceExtEmptyVersion extends LedgerKeyBalanceExt {
  LedgerKeyBalanceExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyBalanceExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct
//      {
//          AssetCode code;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyAssetAsset extends XdrEncodable {
  late ASSETCODE code;
  late LedgerKeyAssetExt ext;

  LedgerKeyAssetAsset(
    this.code,
    this.ext,
  );

  LedgerKeyAssetAsset.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.code = stringFromXdr(stream);
    this.ext = LedgerKeyAssetExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    code.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyAssetExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyAssetExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyAssetExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyAssetExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyAssetExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyAssetExtEmptyVersion extends LedgerKeyAssetExt {
  LedgerKeyAssetExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyAssetExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct
//      {
//  		AccountID sender;
//  		string64 reference;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      }

//  ===========================================================================
class LedgerKeyReferenceReference extends XdrEncodable {
  late ACCOUNTID sender;
  late STRING64 reference;
  late LedgerKeyReferenceExt ext;

  LedgerKeyReferenceReference(
    this.sender,
    this.reference,
    this.ext,
  );

  LedgerKeyReferenceReference.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.sender = PublicKey.fromXdr(stream);
    this.reference = stringFromXdr(stream);
    this.ext = LedgerKeyReferenceExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    sender.toXdr(stream);
    reference.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyReferenceExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyReferenceExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyReferenceExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyReferenceExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyReferenceExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyReferenceExtEmptyVersion extends LedgerKeyReferenceExt {
  LedgerKeyReferenceExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyReferenceExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          AccountID accountID;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      }

//  ===========================================================================
class LedgerKeyStatsStats extends XdrEncodable {
  late ACCOUNTID accountID;
  late LedgerKeyStatsExt ext;

  LedgerKeyStatsStats(
    this.accountID,
    this.ext,
  );

  LedgerKeyStatsStats.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.accountID = PublicKey.fromXdr(stream);
    this.ext = LedgerKeyStatsExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyStatsExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyStatsExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyStatsExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyStatsExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyStatsExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyStatsExtEmptyVersion extends LedgerKeyStatsExt {
  LedgerKeyStatsExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyStatsExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          AccountID accountID;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      }

//  ===========================================================================
class LedgerKeyAccountLimitsAccountLimits extends XdrEncodable {
  late ACCOUNTID accountID;
  late LedgerKeyAccountLimitsExt ext;

  LedgerKeyAccountLimitsAccountLimits(
    this.accountID,
    this.ext,
  );

  LedgerKeyAccountLimitsAccountLimits.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.accountID = PublicKey.fromXdr(stream);
    this.ext = LedgerKeyAccountLimitsExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyAccountLimitsExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyAccountLimitsExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyAccountLimitsExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyAccountLimitsExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyAccountLimitsExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyAccountLimitsExtEmptyVersion extends LedgerKeyAccountLimitsExt {
  LedgerKeyAccountLimitsExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyAccountLimitsExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          AssetCode base;
//          AssetCode quote;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyAssetPairAssetPair extends XdrEncodable {
  late ASSETCODE base;
  late ASSETCODE quote;
  late LedgerKeyAssetPairExt ext;

  LedgerKeyAssetPairAssetPair(
    this.base,
    this.quote,
    this.ext,
  );

  LedgerKeyAssetPairAssetPair.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.base = stringFromXdr(stream);
    this.quote = stringFromXdr(stream);
    this.ext = LedgerKeyAssetPairExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    base.toXdr(stream);
    quote.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyAssetPairExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyAssetPairExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyAssetPairExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyAssetPairExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyAssetPairExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyAssetPairExtEmptyVersion extends LedgerKeyAssetPairExt {
  LedgerKeyAssetPairExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyAssetPairExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          uint64 offerID;
//          AccountID ownerID;
//      }

//  ===========================================================================
class LedgerKeyOfferOffer extends XdrEncodable {
  late UINT64 offerID;
  late ACCOUNTID ownerID;

  LedgerKeyOfferOffer(
    this.offerID,
    this.ownerID,
  );

  LedgerKeyOfferOffer.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.offerID = longFromXdr(stream);
    this.ownerID = PublicKey.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    offerID.toXdr(stream);
    ownerID.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          uint64 requestID;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyReviewableRequestReviewableRequest extends XdrEncodable {
  late UINT64 requestID;
  late LedgerKeyReviewableRequestExt ext;

  LedgerKeyReviewableRequestReviewableRequest(
    this.requestID,
    this.ext,
  );

  LedgerKeyReviewableRequestReviewableRequest.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.ext = LedgerKeyReviewableRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyReviewableRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyReviewableRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyReviewableRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyReviewableRequestExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyReviewableRequestExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyReviewableRequestExtEmptyVersion
    extends LedgerKeyReviewableRequestExt {
  LedgerKeyReviewableRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyReviewableRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//  		AccountID accountID;
//  		int32 externalSystemType;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//  	}

//  ===========================================================================
class LedgerKeyExternalSystemAccountIDExternalSystemAccountID
    extends XdrEncodable {
  late ACCOUNTID accountID;
  late INT32 externalSystemType;
  late LedgerKeyExternalSystemAccountIDExt ext;

  LedgerKeyExternalSystemAccountIDExternalSystemAccountID(
    this.accountID,
    this.externalSystemType,
    this.ext,
  );

  LedgerKeyExternalSystemAccountIDExternalSystemAccountID.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.accountID = PublicKey.fromXdr(stream);
    this.externalSystemType = intFromXdr(stream);
    this.ext = LedgerKeyExternalSystemAccountIDExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    externalSystemType.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyExternalSystemAccountIDExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyExternalSystemAccountIDExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyExternalSystemAccountIDExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyExternalSystemAccountIDExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyExternalSystemAccountIDExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyExternalSystemAccountIDExtEmptyVersion
    extends LedgerKeyExternalSystemAccountIDExt {
  LedgerKeyExternalSystemAccountIDExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyExternalSystemAccountIDExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          uint64 saleID;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeySaleSale extends XdrEncodable {
  late UINT64 saleID;
  late LedgerKeySaleExt ext;

  LedgerKeySaleSale(
    this.saleID,
    this.ext,
  );

  LedgerKeySaleSale.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.saleID = longFromXdr(stream);
    this.ext = LedgerKeySaleExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeySaleExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeySaleExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeySaleExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeySaleExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeySaleExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeySaleExtEmptyVersion extends LedgerKeySaleExt {
  LedgerKeySaleExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeySaleExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          longstring key;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyKeyValueKeyValue extends XdrEncodable {
  late LONGSTRING key;
  late LedgerKeyKeyValueExt ext;

  LedgerKeyKeyValueKeyValue(
    this.key,
    this.ext,
  );

  LedgerKeyKeyValueKeyValue.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.key = stringFromXdr(stream);
    this.ext = LedgerKeyKeyValueExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    key.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyKeyValueExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyKeyValueExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyKeyValueExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyKeyValueExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyKeyValueExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyKeyValueExtEmptyVersion extends LedgerKeyKeyValueExt {
  LedgerKeyKeyValueExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyKeyValueExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          AccountID accountID;
//          union switch(LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyAccountKYCAccountKYC extends XdrEncodable {
  late ACCOUNTID accountID;
  late LedgerKeyAccountKYCExt ext;

  LedgerKeyAccountKYCAccountKYC(
    this.accountID,
    this.ext,
  );

  LedgerKeyAccountKYCAccountKYC.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.accountID = PublicKey.fromXdr(stream);
    this.ext = LedgerKeyAccountKYCExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyAccountKYCExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyAccountKYCExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyAccountKYCExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyAccountKYCExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyAccountKYCExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyAccountKYCExtEmptyVersion extends LedgerKeyAccountKYCExt {
  LedgerKeyAccountKYCExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyAccountKYCExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//  		uint64 poolEntryID;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//  	}

//  ===========================================================================
class LedgerKeyExternalSystemAccountIDPoolEntryExternalSystemAccountIDPoolEntry
    extends XdrEncodable {
  late UINT64 poolEntryID;
  late LedgerKeyExternalSystemAccountIDPoolEntryExt ext;

  LedgerKeyExternalSystemAccountIDPoolEntryExternalSystemAccountIDPoolEntry(
    this.poolEntryID,
    this.ext,
  );

  LedgerKeyExternalSystemAccountIDPoolEntryExternalSystemAccountIDPoolEntry.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.poolEntryID = longFromXdr(stream);
    this.ext = LedgerKeyExternalSystemAccountIDPoolEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    poolEntryID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyExternalSystemAccountIDPoolEntryExt
    extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyExternalSystemAccountIDPoolEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyExternalSystemAccountIDPoolEntryExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyExternalSystemAccountIDPoolEntryExtEmptyVersion.fromXdr(
            stream);
    }

    return LedgerKeyExternalSystemAccountIDPoolEntryExtEmptyVersion.fromXdr(
        stream);
  }
}

class LedgerKeyExternalSystemAccountIDPoolEntryExtEmptyVersion
    extends LedgerKeyExternalSystemAccountIDPoolEntryExt {
  LedgerKeyExternalSystemAccountIDPoolEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyExternalSystemAccountIDPoolEntryExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          } ext;
//      }

//  ===========================================================================
class LedgerKeyLimitsV2LimitsV2 extends XdrEncodable {
  late UINT64 id;
  late LedgerKeyLimitsV2Ext ext;

  LedgerKeyLimitsV2LimitsV2(
    this.id,
    this.ext,
  );

  LedgerKeyLimitsV2LimitsV2.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.ext = LedgerKeyLimitsV2Ext.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyLimitsV2Ext extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyLimitsV2Ext(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyLimitsV2Ext fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyLimitsV2ExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyLimitsV2ExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyLimitsV2ExtEmptyVersion extends LedgerKeyLimitsV2Ext {
  LedgerKeyLimitsV2ExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyLimitsV2ExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyStatisticsV2StatisticsV2 extends XdrEncodable {
  late UINT64 id;
  late LedgerKeyStatisticsV2Ext ext;

  LedgerKeyStatisticsV2StatisticsV2(
    this.id,
    this.ext,
  );

  LedgerKeyStatisticsV2StatisticsV2.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.ext = LedgerKeyStatisticsV2Ext.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyStatisticsV2Ext extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyStatisticsV2Ext(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyStatisticsV2Ext fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyStatisticsV2ExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyStatisticsV2ExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyStatisticsV2ExtEmptyVersion extends LedgerKeyStatisticsV2Ext {
  LedgerKeyStatisticsV2ExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyStatisticsV2ExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          uint64 statisticsID;
//          uint64 requestID;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyPendingStatisticsPendingStatistics extends XdrEncodable {
  late UINT64 statisticsID;
  late UINT64 requestID;
  late LedgerKeyPendingStatisticsExt ext;

  LedgerKeyPendingStatisticsPendingStatistics(
    this.statisticsID,
    this.requestID,
    this.ext,
  );

  LedgerKeyPendingStatisticsPendingStatistics.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.statisticsID = longFromXdr(stream);
    this.requestID = longFromXdr(stream);
    this.ext = LedgerKeyPendingStatisticsExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    statisticsID.toXdr(stream);
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyPendingStatisticsExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyPendingStatisticsExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyPendingStatisticsExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyPendingStatisticsExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyPendingStatisticsExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyPendingStatisticsExtEmptyVersion
    extends LedgerKeyPendingStatisticsExt {
  LedgerKeyPendingStatisticsExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyPendingStatisticsExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          uint64 contractID;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyContractContract extends XdrEncodable {
  late UINT64 contractID;
  late LedgerKeyContractExt ext;

  LedgerKeyContractContract(
    this.contractID,
    this.ext,
  );

  LedgerKeyContractContract.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.contractID = longFromXdr(stream);
    this.ext = LedgerKeyContractExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    contractID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyContractExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyContractExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyContractExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyContractExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyContractExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyContractExtEmptyVersion extends LedgerKeyContractExt {
  LedgerKeyContractExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyContractExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyAtomicSwapAskAtomicSwapAsk extends XdrEncodable {
  late UINT64 id;
  late LedgerKeyAtomicSwapAskExt ext;

  LedgerKeyAtomicSwapAskAtomicSwapAsk(
    this.id,
    this.ext,
  );

  LedgerKeyAtomicSwapAskAtomicSwapAsk.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.ext = LedgerKeyAtomicSwapAskExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyAtomicSwapAskExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyAtomicSwapAskExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyAtomicSwapAskExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyAtomicSwapAskExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyAtomicSwapAskExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyAtomicSwapAskExtEmptyVersion extends LedgerKeyAtomicSwapAskExt {
  LedgerKeyAtomicSwapAskExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyAtomicSwapAskExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyAccountRoleAccountRole extends XdrEncodable {
  late UINT64 id;
  late LedgerKeyAccountRoleExt ext;

  LedgerKeyAccountRoleAccountRole(
    this.id,
    this.ext,
  );

  LedgerKeyAccountRoleAccountRole.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.ext = LedgerKeyAccountRoleExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyAccountRoleExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyAccountRoleExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyAccountRoleExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyAccountRoleExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyAccountRoleExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyAccountRoleExtEmptyVersion extends LedgerKeyAccountRoleExt {
  LedgerKeyAccountRoleExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyAccountRoleExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyAccountRuleAccountRule extends XdrEncodable {
  late UINT64 id;
  late LedgerKeyAccountRuleExt ext;

  LedgerKeyAccountRuleAccountRule(
    this.id,
    this.ext,
  );

  LedgerKeyAccountRuleAccountRule.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.ext = LedgerKeyAccountRuleExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyAccountRuleExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyAccountRuleExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyAccountRuleExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyAccountRuleExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyAccountRuleExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyAccountRuleExtEmptyVersion extends LedgerKeyAccountRuleExt {
  LedgerKeyAccountRuleExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyAccountRuleExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeySignerRoleSignerRole extends XdrEncodable {
  late UINT64 id;
  late LedgerKeySignerRoleExt ext;

  LedgerKeySignerRoleSignerRole(
    this.id,
    this.ext,
  );

  LedgerKeySignerRoleSignerRole.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.ext = LedgerKeySignerRoleExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeySignerRoleExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeySignerRoleExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeySignerRoleExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeySignerRoleExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeySignerRoleExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeySignerRoleExtEmptyVersion extends LedgerKeySignerRoleExt {
  LedgerKeySignerRoleExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeySignerRoleExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeySignerRuleSignerRule extends XdrEncodable {
  late UINT64 id;
  late LedgerKeySignerRuleExt ext;

  LedgerKeySignerRuleSignerRule(
    this.id,
    this.ext,
  );

  LedgerKeySignerRuleSignerRule.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.ext = LedgerKeySignerRuleExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeySignerRuleExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeySignerRuleExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeySignerRuleExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeySignerRuleExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeySignerRuleExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeySignerRuleExtEmptyVersion extends LedgerKeySignerRuleExt {
  LedgerKeySignerRuleExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeySignerRuleExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          Hash ledgerHash;
//          Hash licenseHash;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyStampStamp extends XdrEncodable {
  late HASH ledgerHash;
  late HASH licenseHash;
  late LedgerKeyStampExt ext;

  LedgerKeyStampStamp(
    this.ledgerHash,
    this.licenseHash,
    this.ext,
  );

  LedgerKeyStampStamp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ledgerHash = HASH.fromXdr(stream);
    this.licenseHash = HASH.fromXdr(stream);
    this.ext = LedgerKeyStampExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ledgerHash.toXdr(stream);
    licenseHash.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyStampExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyStampExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyStampExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyStampExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyStampExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyStampExtEmptyVersion extends LedgerKeyStampExt {
  LedgerKeyStampExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyStampExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          Hash licenseHash;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          } ext;
//      }

//  ===========================================================================
class LedgerKeyLicenseLicense extends XdrEncodable {
  late HASH licenseHash;
  late LedgerKeyLicenseExt ext;

  LedgerKeyLicenseLicense(
    this.licenseHash,
    this.ext,
  );

  LedgerKeyLicenseLicense.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.licenseHash = HASH.fromXdr(stream);
    this.ext = LedgerKeyLicenseExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    licenseHash.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerKeyLicenseExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerKeyLicenseExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerKeyLicenseExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerKeyLicenseExtEmptyVersion.fromXdr(stream);
    }

    return LedgerKeyLicenseExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerKeyLicenseExtEmptyVersion extends LedgerKeyLicenseExt {
  LedgerKeyLicenseExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerKeyLicenseExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class LedgerKeyPollPoll extends XdrEncodable {
  late UINT64 id;
  late EmptyExt ext;

  LedgerKeyPollPoll(
    this.id,
    this.ext,
  );

  LedgerKeyPollPoll.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          uint64 pollID;
//          AccountID voterID;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class LedgerKeyVoteVote extends XdrEncodable {
  late UINT64 pollID;
  late ACCOUNTID voterID;
  late EmptyExt ext;

  LedgerKeyVoteVote(
    this.pollID,
    this.voterID,
    this.ext,
  );

  LedgerKeyVoteVote.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.pollID = longFromXdr(stream);
    this.voterID = PublicKey.fromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    voterID.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class LedgerKeyAccountSpecificRuleAccountSpecificRule extends XdrEncodable {
  late UINT64 id;
  late EmptyExt ext;

  LedgerKeyAccountSpecificRuleAccountSpecificRule(
    this.id,
    this.ext,
  );

  LedgerKeyAccountSpecificRuleAccountSpecificRule.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          uint64 id;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class LedgerKeySwapSwap extends XdrEncodable {
  late UINT64 id;
  late EmptyExt ext;

  LedgerKeySwapSwap(
    this.id,
    this.ext,
  );

  LedgerKeySwapSwap.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class LedgerKeyDataData extends XdrEncodable {
  late UINT64 id;
  late EmptyExt ext;

  LedgerKeyDataData(
    this.id,
    this.ext,
  );

  LedgerKeyDataData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class LedgerKeyDeferredPaymentDeferredPayment extends XdrEncodable {
  late UINT64 id;
  late EmptyExt ext;

  LedgerKeyDeferredPaymentDeferredPayment(
    this.id,
    this.ext,
  );

  LedgerKeyDeferredPaymentDeferredPayment.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}

typedef UPGRADETYPE = Uint8List;
// === xdr source ============================================================

//  struct StellarValue
//  {
//      Hash txSetHash;   // transaction set to apply to previous ledger
//      uint64 closeTime; // network close time
//
//      // upgrades to apply to the previous ledger (usually empty)
//      // this is a vector of encoded 'LedgerUpgrade' so that nodes can drop
//      // unknown steps during consensus if needed.
//      // see notes below on 'LedgerUpgrade' for more detail
//      // max size is dictated by number of upgrade types (+ room for future)
//      UpgradeType upgrades<6>;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class StellarValue extends XdrEncodable {
  late HASH txSetHash;
  late UINT64 closeTime;
  late List<UPGRADETYPE> upgrades;
  late StellarValueExt ext;

  StellarValue(
    this.txSetHash,
    this.closeTime,
    this.upgrades,
    this.ext,
  );

  StellarValue.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.txSetHash = HASH.fromXdr(stream);
    this.closeTime = longFromXdr(stream);
    length = intFromXdr(stream);
    upgrades = <UPGRADETYPE>[];
    while (length > 0) {
      upgrades.add(opaqueFromXdr(stream));
      length--;
    }

    this.ext = StellarValueExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    txSetHash.toXdr(stream);
    closeTime.toXdr(stream);
    upgrades.length.toXdr(stream);
    upgrades.forEach((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}

abstract class StellarValueExt extends XdrEncodable {
  late LedgerVersion discriminant;

  StellarValueExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static StellarValueExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return StellarValueExtEmptyVersion.fromXdr(stream);
    }

    return StellarValueExtEmptyVersion.fromXdr(stream);
  }
}

class StellarValueExtEmptyVersion extends StellarValueExt {
  StellarValueExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  StellarValueExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct IdGenerator {
//  	LedgerEntryType entryType; // type of the entry, for which ids will be generated
//  	uint64 idPool; // last used entry specific ID, used for generating entry of specified type
//  };

//  ===========================================================================
class IdGenerator extends XdrEncodable {
  late LedgerEntryType entryType;
  late UINT64 idPool;

  IdGenerator(
    this.entryType,
    this.idPool,
  );

  IdGenerator.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.entryType = LedgerEntryType.fromXdr(stream);
    this.idPool = longFromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    entryType.toXdr(stream);
    idPool.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct LedgerHeader
//  {
//      uint32 ledgerVersion;    // the protocol version of the ledger
//      Hash previousLedgerHash; // hash of the previous ledger header
//      StellarValue scpValue;   // what consensus agreed to
//      Hash txSetResultHash;    // the TransactionResultSet that led to this ledger
//      Hash bucketListHash;     // hash of the ledger state
//
//      uint32 ledgerSeq; // sequence number of this ledger
//
//      IdGenerator idGenerators<>; // generators of ids
//
//      uint32 baseFee;     // base fee per operation in stroops
//      uint32 baseReserve; // account base reserve in stroops
//
//      uint32 maxTxSetSize; // maximum size a transaction set can be
//
//      int64 txExpirationPeriod;
//
//      Hash skipList[4]; // hashes of ledgers in the past. allows you to jump back
//                        // in time without walking the chain back ledger by ledger
//                        // each slot contains the oldest ledger that is mod of
//                        // either 50  5000  50000 or 500000 depending on index
//                        // skipList[0] mod(50), skipList[1] mod(5000), etc
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LedgerHeader extends XdrEncodable {
  late UINT32 ledgerVersion;
  late HASH previousLedgerHash;
  late StellarValue scpValue;
  late HASH txSetResultHash;
  late HASH bucketListHash;
  late UINT32 ledgerSeq;
  late List<IdGenerator> idGenerators;
  late UINT32 baseFee;
  late UINT32 baseReserve;
  late UINT32 maxTxSetSize;
  late INT64 txExpirationPeriod;
  late List<HASH> skipList;
  late LedgerHeaderExt ext;

  LedgerHeader(
    this.ledgerVersion,
    this.previousLedgerHash,
    this.scpValue,
    this.txSetResultHash,
    this.bucketListHash,
    this.ledgerSeq,
    this.idGenerators,
    this.baseFee,
    this.baseReserve,
    this.maxTxSetSize,
    this.txExpirationPeriod,
    this.skipList,
    this.ext,
  );

  LedgerHeader.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ledgerVersion = intFromXdr(stream);
    this.previousLedgerHash = HASH.fromXdr(stream);
    this.scpValue = StellarValue.fromXdr(stream);
    this.txSetResultHash = HASH.fromXdr(stream);
    this.bucketListHash = HASH.fromXdr(stream);
    this.ledgerSeq = intFromXdr(stream);
    length = intFromXdr(stream);
    idGenerators = <IdGenerator>[];
    while (length > 0) {
      idGenerators.add(IdGenerator.fromXdr(stream));
      length--;
    }

    this.baseFee = intFromXdr(stream);
    this.baseReserve = intFromXdr(stream);
    this.maxTxSetSize = intFromXdr(stream);
    this.txExpirationPeriod = longFromXdr(stream);
    length = intFromXdr(stream);
    skipList = <HASH>[];
    while (length > 0) {
      skipList.add(HASH.fromXdr(stream));
      length--;
    }

    this.ext = LedgerHeaderExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ledgerVersion.toXdr(stream);
    previousLedgerHash.toXdr(stream);
    scpValue.toXdr(stream);
    txSetResultHash.toXdr(stream);
    bucketListHash.toXdr(stream);
    ledgerSeq.toXdr(stream);
    idGenerators.length.toXdr(stream);
    idGenerators.forEach((element) {
      element.toXdr(stream);
    });
    baseFee.toXdr(stream);
    baseReserve.toXdr(stream);
    maxTxSetSize.toXdr(stream);
    txExpirationPeriod.toXdr(stream);
    skipList.forEach((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}

abstract class LedgerHeaderExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerHeaderExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerHeaderExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerHeaderExtEmptyVersion.fromXdr(stream);
    }

    return LedgerHeaderExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerHeaderExtEmptyVersion extends LedgerHeaderExt {
  LedgerHeaderExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerHeaderExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class LedgerUpgradeType extends XdrEncodable {
  static const VERSION = 1;
  static const MAX_TX_SET_SIZE = 2;
  static const TX_EXPIRATION_PERIOD = 3;
  late int value;

  LedgerUpgradeType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  LedgerUpgradeType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class LedgerUpgrade extends XdrEncodable {
  late LedgerUpgradeType discriminant;

  LedgerUpgrade(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerUpgrade fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerUpgradeType.VERSION:
        return LedgerUpgradeVersion.fromXdr(stream);
      case LedgerUpgradeType.MAX_TX_SET_SIZE:
        return LedgerUpgradeMaxTxSetSize.fromXdr(stream);
      case LedgerUpgradeType.TX_EXPIRATION_PERIOD:
        return LedgerUpgradeTxExpirationPeriod.fromXdr(stream);
    }

    return LedgerUpgradeVersion.fromXdr(stream);
  }
}

class LedgerUpgradeVersion extends LedgerUpgrade {
  LedgerUpgradeVersion(this.newLedgerVersion)
      : super(LedgerUpgradeType(LedgerUpgradeType.VERSION));
  late UINT32 newLedgerVersion;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    newLedgerVersion.toXdr(stream);
  }

  LedgerUpgradeVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerUpgradeType(LedgerUpgradeType.VERSION)) {
    var length = 0;
    this.newLedgerVersion = intFromXdr(stream);
  }
}

class LedgerUpgradeMaxTxSetSize extends LedgerUpgrade {
  LedgerUpgradeMaxTxSetSize(this.newMaxTxSetSize)
      : super(LedgerUpgradeType(LedgerUpgradeType.MAX_TX_SET_SIZE));
  late UINT32 newMaxTxSetSize;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    newMaxTxSetSize.toXdr(stream);
  }

  LedgerUpgradeMaxTxSetSize.fromXdr(XdrDataInputStream stream)
      : super(LedgerUpgradeType(LedgerUpgradeType.MAX_TX_SET_SIZE)) {
    var length = 0;
    this.newMaxTxSetSize = intFromXdr(stream);
  }
}

class LedgerUpgradeTxExpirationPeriod extends LedgerUpgrade {
  LedgerUpgradeTxExpirationPeriod(this.newTxExpirationPeriod)
      : super(LedgerUpgradeType(LedgerUpgradeType.TX_EXPIRATION_PERIOD));
  late INT64 newTxExpirationPeriod;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    newTxExpirationPeriod.toXdr(stream);
  }

  LedgerUpgradeTxExpirationPeriod.fromXdr(XdrDataInputStream stream)
      : super(LedgerUpgradeType(LedgerUpgradeType.TX_EXPIRATION_PERIOD)) {
    var length = 0;
    this.newTxExpirationPeriod = longFromXdr(stream);
  }
}

class BucketEntryType extends XdrEncodable {
  static const LIVEENTRY = 0;
  static const DEADENTRY = 1;
  late int value;

  BucketEntryType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  BucketEntryType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class BucketEntry extends XdrEncodable {
  late BucketEntryType discriminant;

  BucketEntry(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static BucketEntry fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case BucketEntryType.LIVEENTRY:
        return BucketEntryLiveentry.fromXdr(stream);
      case BucketEntryType.DEADENTRY:
        return BucketEntryDeadentry.fromXdr(stream);
    }

    return BucketEntryLiveentry.fromXdr(stream);
  }
}

class BucketEntryLiveentry extends BucketEntry {
  BucketEntryLiveentry(this.liveEntry)
      : super(BucketEntryType(BucketEntryType.LIVEENTRY));
  late LedgerEntry liveEntry;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    liveEntry.toXdr(stream);
  }

  BucketEntryLiveentry.fromXdr(XdrDataInputStream stream)
      : super(BucketEntryType(BucketEntryType.LIVEENTRY)) {
    this.liveEntry = LedgerEntry.fromXdr(stream);
  }
}

class BucketEntryDeadentry extends BucketEntry {
  BucketEntryDeadentry(this.deadEntry)
      : super(BucketEntryType(BucketEntryType.DEADENTRY));
  late LedgerKey deadEntry;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    deadEntry.toXdr(stream);
  }

  BucketEntryDeadentry.fromXdr(XdrDataInputStream stream)
      : super(BucketEntryType(BucketEntryType.DEADENTRY)) {
    this.deadEntry = LedgerKey.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct TransactionSet
//  {
//      Hash previousLedgerHash;
//      TransactionEnvelope txs<>;
//  };

//  ===========================================================================
class TransactionSet extends XdrEncodable {
  late HASH previousLedgerHash;
  late List<TransactionEnvelope> txs;

  TransactionSet(
    this.previousLedgerHash,
    this.txs,
  );

  TransactionSet.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.previousLedgerHash = HASH.fromXdr(stream);
    length = intFromXdr(stream);
    txs = <TransactionEnvelope>[];
    while (length > 0) {
      txs.add(TransactionEnvelope.fromXdr(stream));
      length--;
    }
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    previousLedgerHash.toXdr(stream);
    txs.length.toXdr(stream);
    txs.forEach((element) {
      element.toXdr(stream);
    });
  }
}
// === xdr source ============================================================

//  struct TransactionResultPair
//  {
//      Hash transactionHash;
//      TransactionResult result; // result for the transaction
//  };

//  ===========================================================================
class TransactionResultPair extends XdrEncodable {
  late HASH transactionHash;
  late TransactionResult result;

  TransactionResultPair(
    this.transactionHash,
    this.result,
  );

  TransactionResultPair.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.transactionHash = HASH.fromXdr(stream);
    this.result = TransactionResult.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    transactionHash.toXdr(stream);
    result.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct TransactionResultSet
//  {
//      TransactionResultPair results<>;
//  };

//  ===========================================================================
class TransactionResultSet extends XdrEncodable {
  late List<TransactionResultPair> results;

  TransactionResultSet(
    this.results,
  );

  TransactionResultSet.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    length = intFromXdr(stream);
    results = <TransactionResultPair>[];
    while (length > 0) {
      results.add(TransactionResultPair.fromXdr(stream));
      length--;
    }
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    results.length.toXdr(stream);
    results.forEach((element) {
      element.toXdr(stream);
    });
  }
}
// === xdr source ============================================================

//  struct TransactionHistoryEntry
//  {
//      uint32 ledgerSeq;
//      TransactionSet txSet;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class TransactionHistoryEntry extends XdrEncodable {
  late UINT32 ledgerSeq;
  late TransactionSet txSet;
  late TransactionHistoryEntryExt ext;

  TransactionHistoryEntry(
    this.ledgerSeq,
    this.txSet,
    this.ext,
  );

  TransactionHistoryEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ledgerSeq = intFromXdr(stream);
    this.txSet = TransactionSet.fromXdr(stream);
    this.ext = TransactionHistoryEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ledgerSeq.toXdr(stream);
    txSet.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class TransactionHistoryEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  TransactionHistoryEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static TransactionHistoryEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return TransactionHistoryEntryExtEmptyVersion.fromXdr(stream);
    }

    return TransactionHistoryEntryExtEmptyVersion.fromXdr(stream);
  }
}

class TransactionHistoryEntryExtEmptyVersion
    extends TransactionHistoryEntryExt {
  TransactionHistoryEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  TransactionHistoryEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct TransactionHistoryResultEntry
//  {
//      uint32 ledgerSeq;
//      TransactionResultSet txResultSet;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class TransactionHistoryResultEntry extends XdrEncodable {
  late UINT32 ledgerSeq;
  late TransactionResultSet txResultSet;
  late TransactionHistoryResultEntryExt ext;

  TransactionHistoryResultEntry(
    this.ledgerSeq,
    this.txResultSet,
    this.ext,
  );

  TransactionHistoryResultEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ledgerSeq = intFromXdr(stream);
    this.txResultSet = TransactionResultSet.fromXdr(stream);
    this.ext = TransactionHistoryResultEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ledgerSeq.toXdr(stream);
    txResultSet.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class TransactionHistoryResultEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  TransactionHistoryResultEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static TransactionHistoryResultEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return TransactionHistoryResultEntryExtEmptyVersion.fromXdr(stream);
    }

    return TransactionHistoryResultEntryExtEmptyVersion.fromXdr(stream);
  }
}

class TransactionHistoryResultEntryExtEmptyVersion
    extends TransactionHistoryResultEntryExt {
  TransactionHistoryResultEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  TransactionHistoryResultEntryExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct LedgerHeaderHistoryEntry
//  {
//      Hash hash;
//      LedgerHeader header;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LedgerHeaderHistoryEntry extends XdrEncodable {
  late HASH hash;
  late LedgerHeader header;
  late LedgerHeaderHistoryEntryExt ext;

  LedgerHeaderHistoryEntry(
    this.hash,
    this.header,
    this.ext,
  );

  LedgerHeaderHistoryEntry.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.hash = HASH.fromXdr(stream);
    this.header = LedgerHeader.fromXdr(stream);
    this.ext = LedgerHeaderHistoryEntryExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    hash.toXdr(stream);
    header.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LedgerHeaderHistoryEntryExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LedgerHeaderHistoryEntryExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerHeaderHistoryEntryExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LedgerHeaderHistoryEntryExtEmptyVersion.fromXdr(stream);
    }

    return LedgerHeaderHistoryEntryExtEmptyVersion.fromXdr(stream);
  }
}

class LedgerHeaderHistoryEntryExtEmptyVersion
    extends LedgerHeaderHistoryEntryExt {
  LedgerHeaderHistoryEntryExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LedgerHeaderHistoryEntryExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct LedgerSCPMessages
//  {
//      uint32 ledgerSeq;
//      SCPEnvelope messages<>;
//  };

//  ===========================================================================
class LedgerSCPMessages extends XdrEncodable {
  late UINT32 ledgerSeq;
  late List<SCPEnvelope> messages;

  LedgerSCPMessages(
    this.ledgerSeq,
    this.messages,
  );

  LedgerSCPMessages.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ledgerSeq = intFromXdr(stream);
    length = intFromXdr(stream);
    messages = <SCPEnvelope>[];
    while (length > 0) {
      messages.add(SCPEnvelope.fromXdr(stream));
      length--;
    }
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ledgerSeq.toXdr(stream);
    messages.length.toXdr(stream);
    messages.forEach((element) {
      element.toXdr(stream);
    });
  }
}
// === xdr source ============================================================

//  struct SCPHistoryEntryV0
//  {
//      SCPQuorumSet quorumSets<>; // additional quorum sets used by ledgerMessages
//      LedgerSCPMessages ledgerMessages;
//  };

//  ===========================================================================
class SCPHistoryEntryV0 extends XdrEncodable {
  late List<SCPQuorumSet> quorumSets;
  late LedgerSCPMessages ledgerMessages;

  SCPHistoryEntryV0(
    this.quorumSets,
    this.ledgerMessages,
  );

  SCPHistoryEntryV0.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    length = intFromXdr(stream);
    quorumSets = <SCPQuorumSet>[];
    while (length > 0) {
      quorumSets.add(SCPQuorumSet.fromXdr(stream));
      length--;
    }

    this.ledgerMessages = LedgerSCPMessages.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    quorumSets.length.toXdr(stream);
    quorumSets.forEach((element) {
      element.toXdr(stream);
    });
    ledgerMessages.toXdr(stream);
  }
}

abstract class SCPHistoryEntry extends XdrEncodable {
  late LedgerVersion discriminant;

  SCPHistoryEntry(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SCPHistoryEntry fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return SCPHistoryEntryEmptyVersion.fromXdr(stream);
    }

    return SCPHistoryEntryEmptyVersion.fromXdr(stream);
  }
}

class SCPHistoryEntryEmptyVersion extends SCPHistoryEntry {
  SCPHistoryEntryEmptyVersion(this.v0)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
  late SCPHistoryEntryV0 v0;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    v0.toXdr(stream);
  }

  SCPHistoryEntryEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {
    this.v0 = SCPHistoryEntryV0.fromXdr(stream);
  }
}

class LedgerEntryChangeType extends XdrEncodable {
  static const CREATED = 0;
  static const UPDATED = 1;
  static const REMOVED = 2;
  static const STATE = 3;
  late int value;

  LedgerEntryChangeType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  LedgerEntryChangeType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class LedgerEntryChange extends XdrEncodable {
  late LedgerEntryChangeType discriminant;

  LedgerEntryChange(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LedgerEntryChange fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerEntryChangeType.CREATED:
        return LedgerEntryChangeCreated.fromXdr(stream);
      case LedgerEntryChangeType.UPDATED:
        return LedgerEntryChangeUpdated.fromXdr(stream);
      case LedgerEntryChangeType.REMOVED:
        return LedgerEntryChangeRemoved.fromXdr(stream);
      case LedgerEntryChangeType.STATE:
        return LedgerEntryChangeState.fromXdr(stream);
    }

    return LedgerEntryChangeCreated.fromXdr(stream);
  }
}

class LedgerEntryChangeCreated extends LedgerEntryChange {
  LedgerEntryChangeCreated(this.created)
      : super(LedgerEntryChangeType(LedgerEntryChangeType.CREATED));
  late LedgerEntry created;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    created.toXdr(stream);
  }

  LedgerEntryChangeCreated.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryChangeType(LedgerEntryChangeType.CREATED)) {
    this.created = LedgerEntry.fromXdr(stream);
  }
}

class LedgerEntryChangeUpdated extends LedgerEntryChange {
  LedgerEntryChangeUpdated(this.updated)
      : super(LedgerEntryChangeType(LedgerEntryChangeType.UPDATED));
  late LedgerEntry updated;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updated.toXdr(stream);
  }

  LedgerEntryChangeUpdated.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryChangeType(LedgerEntryChangeType.UPDATED)) {
    this.updated = LedgerEntry.fromXdr(stream);
  }
}

class LedgerEntryChangeRemoved extends LedgerEntryChange {
  LedgerEntryChangeRemoved(this.removed)
      : super(LedgerEntryChangeType(LedgerEntryChangeType.REMOVED));
  late LedgerKey removed;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removed.toXdr(stream);
  }

  LedgerEntryChangeRemoved.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryChangeType(LedgerEntryChangeType.REMOVED)) {
    this.removed = LedgerKey.fromXdr(stream);
  }
}

class LedgerEntryChangeState extends LedgerEntryChange {
  LedgerEntryChangeState(this.state)
      : super(LedgerEntryChangeType(LedgerEntryChangeType.STATE));
  late LedgerEntry state;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    state.toXdr(stream);
  }

  LedgerEntryChangeState.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryChangeType(LedgerEntryChangeType.STATE)) {
    this.state = LedgerEntry.fromXdr(stream);
  }
}

typedef LEDGERENTRYCHANGES = List<LedgerEntryChange>;

extension LedgerEntryChangesToXdr on LEDGERENTRYCHANGES {
  toXdr(XdrDataOutputStream stream) {
    this.length.toXdr(stream);
    this.forEach((element) {
      element.toXdr(stream);
    });
  }
}
// === xdr source ============================================================

//  struct OperationMeta
//  {
//      LedgerEntryChanges changes;
//  };

//  ===========================================================================
class OperationMeta extends XdrEncodable {
  late LEDGERENTRYCHANGES changes;

  OperationMeta(
    this.changes,
  );

  OperationMeta.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    length = intFromXdr(stream);
    changes = <LedgerEntryChange>[];
    while (length > 0) {
      changes.add(LedgerEntryChange.fromXdr(stream));
      length--;
    }
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    changes.toXdr(stream);
  }
}

abstract class TransactionMeta extends XdrEncodable {
  late LedgerVersion discriminant;

  TransactionMeta(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static TransactionMeta fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return TransactionMetaEmptyVersion.fromXdr(stream);
    }

    return TransactionMetaEmptyVersion.fromXdr(stream);
  }
}

class TransactionMetaEmptyVersion extends TransactionMeta {
  TransactionMetaEmptyVersion(this.operations)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
  late List<OperationMeta> operations;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    operations.length.toXdr(stream);
    operations.forEach((element) {
      element.toXdr(stream);
    });
  }

  TransactionMetaEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {
    var length = 0;
    length = intFromXdr(stream);
    operations = <OperationMeta>[];
    while (length > 0) {
      operations.add(OperationMeta.fromXdr(stream));
      length--;
    }
  }
}

// === xdr source ============================================================

//  //: BindExternalSystemAccountIdOp is used to bind a particular account to the external system account which is represented by account ID taken from the pool
//  struct BindExternalSystemAccountIdOp
//  {
//      //: Type of external system to bind
//      int32 externalSystemType;
//
//      //: Reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class BindExternalSystemAccountIdOp extends XdrEncodable {
  late INT32 externalSystemType;
  late BindExternalSystemAccountIdOpExt ext;

  BindExternalSystemAccountIdOp(
    this.externalSystemType,
    this.ext,
  );

  BindExternalSystemAccountIdOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.externalSystemType = intFromXdr(stream);
    this.ext = BindExternalSystemAccountIdOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    externalSystemType.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class BindExternalSystemAccountIdOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  BindExternalSystemAccountIdOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static BindExternalSystemAccountIdOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return BindExternalSystemAccountIdOpExtEmptyVersion.fromXdr(stream);
    }

    return BindExternalSystemAccountIdOpExtEmptyVersion.fromXdr(stream);
  }
}

class BindExternalSystemAccountIdOpExtEmptyVersion
    extends BindExternalSystemAccountIdOpExt {
  BindExternalSystemAccountIdOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  BindExternalSystemAccountIdOpExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class BindExternalSystemAccountIdResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const NO_AVAILABLE_ID = -2;
  late int value;

  BindExternalSystemAccountIdResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  BindExternalSystemAccountIdResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: `BindExternalSystemAccountIdSuccess` represents details of successful result of operation application
//  struct BindExternalSystemAccountIdSuccess
//  {
//      //: `data` is used to pass data about account from external system ID
//      longstring data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class BindExternalSystemAccountIdSuccess extends XdrEncodable {
  late LONGSTRING data;
  late BindExternalSystemAccountIdSuccessExt ext;

  BindExternalSystemAccountIdSuccess(
    this.data,
    this.ext,
  );

  BindExternalSystemAccountIdSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.data = stringFromXdr(stream);
    this.ext = BindExternalSystemAccountIdSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class BindExternalSystemAccountIdSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  BindExternalSystemAccountIdSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static BindExternalSystemAccountIdSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return BindExternalSystemAccountIdSuccessExtEmptyVersion.fromXdr(
            stream);
    }

    return BindExternalSystemAccountIdSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class BindExternalSystemAccountIdSuccessExtEmptyVersion
    extends BindExternalSystemAccountIdSuccessExt {
  BindExternalSystemAccountIdSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  BindExternalSystemAccountIdSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class BindExternalSystemAccountIdResult extends XdrEncodable {
  late BindExternalSystemAccountIdResultCode discriminant;

  BindExternalSystemAccountIdResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static BindExternalSystemAccountIdResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case BindExternalSystemAccountIdResultCode.SUCCESS:
        return BindExternalSystemAccountIdResultSuccess.fromXdr(stream);
    }

    return BindExternalSystemAccountIdResultSuccess.fromXdr(stream);
  }
}

class BindExternalSystemAccountIdResultSuccess
    extends BindExternalSystemAccountIdResult {
  BindExternalSystemAccountIdResultSuccess(this.success)
      : super(BindExternalSystemAccountIdResultCode(
            BindExternalSystemAccountIdResultCode.SUCCESS));
  late BindExternalSystemAccountIdSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  BindExternalSystemAccountIdResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(BindExternalSystemAccountIdResultCode(
            BindExternalSystemAccountIdResultCode.SUCCESS)) {
    this.success = BindExternalSystemAccountIdSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelAtomicSwapAskOp is used to cancel existing atomic swap ask
//  struct CancelAtomicSwapAskOp
//  {
//      //: id of existing atomic swap ask
//      uint64 askID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CancelAtomicSwapAskOp extends XdrEncodable {
  late UINT64 askID;
  late CancelAtomicSwapAskOpExt ext;

  CancelAtomicSwapAskOp(
    this.askID,
    this.ext,
  );

  CancelAtomicSwapAskOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.askID = longFromXdr(stream);
    this.ext = CancelAtomicSwapAskOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    askID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CancelAtomicSwapAskOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelAtomicSwapAskOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelAtomicSwapAskOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelAtomicSwapAskOpExtEmptyVersion.fromXdr(stream);
    }

    return CancelAtomicSwapAskOpExtEmptyVersion.fromXdr(stream);
  }
}

class CancelAtomicSwapAskOpExtEmptyVersion extends CancelAtomicSwapAskOpExt {
  CancelAtomicSwapAskOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelAtomicSwapAskOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CancelAtomicSwapAskResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const ALREADY_CANCELLED = -2;
  late int value;

  CancelAtomicSwapAskResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CancelAtomicSwapAskResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Success result of CancelASwapAskOp application
//  struct CancelAtomicSwapAskResultSuccess
//  {
//      //: Sum of `CREATE_ATOMIC_SWAP_BID` requests' base amounts which are waiting for applying.
//      //: Zero means that ask successfully removed
//      uint64 lockedAmount;
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CancelAtomicSwapAskResultSuccess extends XdrEncodable {
  late UINT64 lockedAmount;
  late CancelAtomicSwapAskResultSuccessExt ext;

  CancelAtomicSwapAskResultSuccess(
    this.lockedAmount,
    this.ext,
  );

  CancelAtomicSwapAskResultSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.lockedAmount = longFromXdr(stream);
    this.ext = CancelAtomicSwapAskResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    lockedAmount.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CancelAtomicSwapAskResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelAtomicSwapAskResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelAtomicSwapAskResultSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelAtomicSwapAskResultSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CancelAtomicSwapAskResultSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CancelAtomicSwapAskResultSuccessExtEmptyVersion
    extends CancelAtomicSwapAskResultSuccessExt {
  CancelAtomicSwapAskResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelAtomicSwapAskResultSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CancelAtomicSwapAskResult extends XdrEncodable {
  late CancelAtomicSwapAskResultCode discriminant;

  CancelAtomicSwapAskResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelAtomicSwapAskResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CancelAtomicSwapAskResultCode.SUCCESS:
        return CancelAtomicSwapAskResultSuccessSuccess.fromXdr(stream);
    }

    return CancelAtomicSwapAskResultSuccessSuccess.fromXdr(stream);
  }
}

class CancelAtomicSwapAskResultSuccessSuccess
    extends CancelAtomicSwapAskResult {
  CancelAtomicSwapAskResultSuccessSuccess(this.success)
      : super(CancelAtomicSwapAskResultCode(
            CancelAtomicSwapAskResultCode.SUCCESS));
  late CancelAtomicSwapAskResultSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CancelAtomicSwapAskResultSuccessSuccess.fromXdr(XdrDataInputStream stream)
      : super(CancelAtomicSwapAskResultCode(
            CancelAtomicSwapAskResultCode.SUCCESS)) {
    this.success = CancelAtomicSwapAskResultSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelChangeRoleRequestOp is used to cancel reviwable request for changing role.
//  //: If successful, request with the corresponding ID will be deleted
//  struct CancelChangeRoleRequestOp
//  {
//      //: ID of the ChangeRoleRequest request to be canceled
//      uint64 requestID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CancelChangeRoleRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late CancelChangeRoleRequestOpExt ext;

  CancelChangeRoleRequestOp(
    this.requestID,
    this.ext,
  );

  CancelChangeRoleRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.ext = CancelChangeRoleRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CancelChangeRoleRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelChangeRoleRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelChangeRoleRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelChangeRoleRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CancelChangeRoleRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CancelChangeRoleRequestOpExtEmptyVersion
    extends CancelChangeRoleRequestOpExt {
  CancelChangeRoleRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelChangeRoleRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CancelChangeRoleRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REQUEST_ID_INVALID = -1;
  static const REQUEST_NOT_FOUND = -2;
  late int value;

  CancelChangeRoleRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CancelChangeRoleRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Result of successful `CancelChangeRoleRequestOp` application
//  struct CancelChangeRoleSuccess {
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CancelChangeRoleSuccess extends XdrEncodable {
  late CancelChangeRoleSuccessExt ext;

  CancelChangeRoleSuccess(
    this.ext,
  );

  CancelChangeRoleSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = CancelChangeRoleSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class CancelChangeRoleSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelChangeRoleSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelChangeRoleSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelChangeRoleSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CancelChangeRoleSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CancelChangeRoleSuccessExtEmptyVersion
    extends CancelChangeRoleSuccessExt {
  CancelChangeRoleSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelChangeRoleSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CancelChangeRoleRequestResult extends XdrEncodable {
  late CancelChangeRoleRequestResultCode discriminant;

  CancelChangeRoleRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelChangeRoleRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CancelChangeRoleRequestResultCode.SUCCESS:
        return CancelChangeRoleRequestResultSuccess.fromXdr(stream);
    }

    return CancelChangeRoleRequestResultSuccess.fromXdr(stream);
  }
}

class CancelChangeRoleRequestResultSuccess
    extends CancelChangeRoleRequestResult {
  CancelChangeRoleRequestResultSuccess(this.success)
      : super(CancelChangeRoleRequestResultCode(
            CancelChangeRoleRequestResultCode.SUCCESS));
  late CancelChangeRoleSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CancelChangeRoleRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CancelChangeRoleRequestResultCode(
            CancelChangeRoleRequestResultCode.SUCCESS)) {
    this.success = CancelChangeRoleSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelCloseDeferredPaymentRequestOp is used to cancel existing deferred payment creation request
//  struct CancelCloseDeferredPaymentRequestOp
//  {
//      //: id of existing request
//      uint64 requestID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CancelCloseDeferredPaymentRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late CancelCloseDeferredPaymentRequestOpExt ext;

  CancelCloseDeferredPaymentRequestOp(
    this.requestID,
    this.ext,
  );

  CancelCloseDeferredPaymentRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.ext = CancelCloseDeferredPaymentRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CancelCloseDeferredPaymentRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelCloseDeferredPaymentRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelCloseDeferredPaymentRequestOpExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelCloseDeferredPaymentRequestOpExtEmptyVersion.fromXdr(
            stream);
    }

    return CancelCloseDeferredPaymentRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CancelCloseDeferredPaymentRequestOpExtEmptyVersion
    extends CancelCloseDeferredPaymentRequestOpExt {
  CancelCloseDeferredPaymentRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelCloseDeferredPaymentRequestOpExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CancelCloseDeferredPaymentRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  late int value;

  CancelCloseDeferredPaymentRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CancelCloseDeferredPaymentRequestResultCode.fromXdr(
      XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Success result of CancelCloseDeferredPaymentRequestOp application
//  struct CancelCloseDeferredPaymentRequestResultSuccess
//  {
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CancelCloseDeferredPaymentRequestResultSuccess extends XdrEncodable {
  late CancelCloseDeferredPaymentRequestResultSuccessExt ext;

  CancelCloseDeferredPaymentRequestResultSuccess(
    this.ext,
  );

  CancelCloseDeferredPaymentRequestResultSuccess.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.ext =
        CancelCloseDeferredPaymentRequestResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class CancelCloseDeferredPaymentRequestResultSuccessExt
    extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelCloseDeferredPaymentRequestResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelCloseDeferredPaymentRequestResultSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelCloseDeferredPaymentRequestResultSuccessExtEmptyVersion
            .fromXdr(stream);
    }

    return CancelCloseDeferredPaymentRequestResultSuccessExtEmptyVersion
        .fromXdr(stream);
  }
}

class CancelCloseDeferredPaymentRequestResultSuccessExtEmptyVersion
    extends CancelCloseDeferredPaymentRequestResultSuccessExt {
  CancelCloseDeferredPaymentRequestResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelCloseDeferredPaymentRequestResultSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CancelCloseDeferredPaymentRequestResult extends XdrEncodable {
  late CancelCloseDeferredPaymentRequestResultCode discriminant;

  CancelCloseDeferredPaymentRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelCloseDeferredPaymentRequestResult fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CancelCloseDeferredPaymentRequestResultCode.SUCCESS:
        return CancelCloseDeferredPaymentRequestResultSuccessSuccess.fromXdr(
            stream);
    }

    return CancelCloseDeferredPaymentRequestResultSuccessSuccess.fromXdr(
        stream);
  }
}

class CancelCloseDeferredPaymentRequestResultSuccessSuccess
    extends CancelCloseDeferredPaymentRequestResult {
  CancelCloseDeferredPaymentRequestResultSuccessSuccess(this.success)
      : super(CancelCloseDeferredPaymentRequestResultCode(
            CancelCloseDeferredPaymentRequestResultCode.SUCCESS));
  late CancelCloseDeferredPaymentRequestResultSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CancelCloseDeferredPaymentRequestResultSuccessSuccess.fromXdr(
      XdrDataInputStream stream)
      : super(CancelCloseDeferredPaymentRequestResultCode(
            CancelCloseDeferredPaymentRequestResultCode.SUCCESS)) {
    this.success =
        CancelCloseDeferredPaymentRequestResultSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelDataCreationRequestOp is used to cancel reviwable request for data creation.
//  //: If successful, request with the corresponding ID will be deleted
//  struct CancelDataCreationRequestOp
//  {
//      //: ID of the DataCreationRequest request to be canceled
//      uint64 requestID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CancelDataCreationRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late CancelDataCreationRequestOpExt ext;

  CancelDataCreationRequestOp(
    this.requestID,
    this.ext,
  );

  CancelDataCreationRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.ext = CancelDataCreationRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CancelDataCreationRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelDataCreationRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelDataCreationRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelDataCreationRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CancelDataCreationRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CancelDataCreationRequestOpExtEmptyVersion
    extends CancelDataCreationRequestOpExt {
  CancelDataCreationRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelDataCreationRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CancelDataCreationRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REQUEST_ID_INVALID = -1;
  static const REQUEST_NOT_FOUND = -2;
  late int value;

  CancelDataCreationRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CancelDataCreationRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Result of successful `CancelDataCreationRequestOp` application
//  struct CancelDataCreationSuccess {
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CancelDataCreationSuccess extends XdrEncodable {
  late CancelDataCreationSuccessExt ext;

  CancelDataCreationSuccess(
    this.ext,
  );

  CancelDataCreationSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = CancelDataCreationSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class CancelDataCreationSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelDataCreationSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelDataCreationSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelDataCreationSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CancelDataCreationSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CancelDataCreationSuccessExtEmptyVersion
    extends CancelDataCreationSuccessExt {
  CancelDataCreationSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelDataCreationSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CancelDataCreationRequestResult extends XdrEncodable {
  late CancelDataCreationRequestResultCode discriminant;

  CancelDataCreationRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelDataCreationRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CancelDataCreationRequestResultCode.SUCCESS:
        return CancelDataCreationRequestResultSuccess.fromXdr(stream);
    }

    return CancelDataCreationRequestResultSuccess.fromXdr(stream);
  }
}

class CancelDataCreationRequestResultSuccess
    extends CancelDataCreationRequestResult {
  CancelDataCreationRequestResultSuccess(this.success)
      : super(CancelDataCreationRequestResultCode(
            CancelDataCreationRequestResultCode.SUCCESS));
  late CancelDataCreationSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CancelDataCreationRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CancelDataCreationRequestResultCode(
            CancelDataCreationRequestResultCode.SUCCESS)) {
    this.success = CancelDataCreationSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelDataRemoveRequestOp is used to cancel reviwable request for data Remove.
//  //: If successful, request with the corresponding ID will be deleted
//  struct CancelDataRemoveRequestOp
//  {
//      //: ID of the DataRemoveRequest request to be canceled
//      uint64 requestID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CancelDataRemoveRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late CancelDataRemoveRequestOpExt ext;

  CancelDataRemoveRequestOp(
    this.requestID,
    this.ext,
  );

  CancelDataRemoveRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.ext = CancelDataRemoveRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CancelDataRemoveRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelDataRemoveRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelDataRemoveRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelDataRemoveRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CancelDataRemoveRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CancelDataRemoveRequestOpExtEmptyVersion
    extends CancelDataRemoveRequestOpExt {
  CancelDataRemoveRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelDataRemoveRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CancelDataRemoveRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REQUEST_ID_INVALID = -1;
  static const REQUEST_NOT_FOUND = -2;
  late int value;

  CancelDataRemoveRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CancelDataRemoveRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Result of successful `CancelDataRemoveRequestOp` application
//  struct CancelDataRemoveSuccess {
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CancelDataRemoveSuccess extends XdrEncodable {
  late CancelDataRemoveSuccessExt ext;

  CancelDataRemoveSuccess(
    this.ext,
  );

  CancelDataRemoveSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = CancelDataRemoveSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class CancelDataRemoveSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelDataRemoveSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelDataRemoveSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelDataRemoveSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CancelDataRemoveSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CancelDataRemoveSuccessExtEmptyVersion
    extends CancelDataRemoveSuccessExt {
  CancelDataRemoveSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelDataRemoveSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CancelDataRemoveRequestResult extends XdrEncodable {
  late CancelDataRemoveRequestResultCode discriminant;

  CancelDataRemoveRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelDataRemoveRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CancelDataRemoveRequestResultCode.SUCCESS:
        return CancelDataRemoveRequestResultSuccess.fromXdr(stream);
    }

    return CancelDataRemoveRequestResultSuccess.fromXdr(stream);
  }
}

class CancelDataRemoveRequestResultSuccess
    extends CancelDataRemoveRequestResult {
  CancelDataRemoveRequestResultSuccess(this.success)
      : super(CancelDataRemoveRequestResultCode(
            CancelDataRemoveRequestResultCode.SUCCESS));
  late CancelDataRemoveSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CancelDataRemoveRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CancelDataRemoveRequestResultCode(
            CancelDataRemoveRequestResultCode.SUCCESS)) {
    this.success = CancelDataRemoveSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelDataUpdateRequestOp is used to cancel reviwable request for data Update.
//  //: If successful, request with the corresponding ID will be deleted
//  struct CancelDataUpdateRequestOp
//  {
//      //: ID of the DataUpdateRequest request to be canceled
//      uint64 requestID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CancelDataUpdateRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late CancelDataUpdateRequestOpExt ext;

  CancelDataUpdateRequestOp(
    this.requestID,
    this.ext,
  );

  CancelDataUpdateRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.ext = CancelDataUpdateRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CancelDataUpdateRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelDataUpdateRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelDataUpdateRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelDataUpdateRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CancelDataUpdateRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CancelDataUpdateRequestOpExtEmptyVersion
    extends CancelDataUpdateRequestOpExt {
  CancelDataUpdateRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelDataUpdateRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CancelDataUpdateRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REQUEST_ID_INVALID = -1;
  static const REQUEST_NOT_FOUND = -2;
  late int value;

  CancelDataUpdateRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CancelDataUpdateRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Result of successful `CancelDataUpdateRequestOp` application
//  struct CancelDataUpdateSuccess {
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CancelDataUpdateSuccess extends XdrEncodable {
  late CancelDataUpdateSuccessExt ext;

  CancelDataUpdateSuccess(
    this.ext,
  );

  CancelDataUpdateSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = CancelDataUpdateSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class CancelDataUpdateSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelDataUpdateSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelDataUpdateSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelDataUpdateSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CancelDataUpdateSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CancelDataUpdateSuccessExtEmptyVersion
    extends CancelDataUpdateSuccessExt {
  CancelDataUpdateSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelDataUpdateSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CancelDataUpdateRequestResult extends XdrEncodable {
  late CancelDataUpdateRequestResultCode discriminant;

  CancelDataUpdateRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelDataUpdateRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CancelDataUpdateRequestResultCode.SUCCESS:
        return CancelDataUpdateRequestResultSuccess.fromXdr(stream);
    }

    return CancelDataUpdateRequestResultSuccess.fromXdr(stream);
  }
}

class CancelDataUpdateRequestResultSuccess
    extends CancelDataUpdateRequestResult {
  CancelDataUpdateRequestResultSuccess(this.success)
      : super(CancelDataUpdateRequestResultCode(
            CancelDataUpdateRequestResultCode.SUCCESS));
  late CancelDataUpdateSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CancelDataUpdateRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CancelDataUpdateRequestResultCode(
            CancelDataUpdateRequestResultCode.SUCCESS)) {
    this.success = CancelDataUpdateSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelDeferredPaymentCreationRequestOp is used to cancel existing deferred payment creation request
//  struct CancelDeferredPaymentCreationRequestOp
//  {
//      //: id of existing request
//      uint64 requestID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CancelDeferredPaymentCreationRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late CancelDeferredPaymentCreationRequestOpExt ext;

  CancelDeferredPaymentCreationRequestOp(
    this.requestID,
    this.ext,
  );

  CancelDeferredPaymentCreationRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.ext = CancelDeferredPaymentCreationRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CancelDeferredPaymentCreationRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelDeferredPaymentCreationRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelDeferredPaymentCreationRequestOpExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelDeferredPaymentCreationRequestOpExtEmptyVersion.fromXdr(
            stream);
    }

    return CancelDeferredPaymentCreationRequestOpExtEmptyVersion.fromXdr(
        stream);
  }
}

class CancelDeferredPaymentCreationRequestOpExtEmptyVersion
    extends CancelDeferredPaymentCreationRequestOpExt {
  CancelDeferredPaymentCreationRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelDeferredPaymentCreationRequestOpExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CancelDeferredPaymentCreationRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const REQUEST_ID_INVALID = -2;
  static const LINE_FULL = -3;
  late int value;

  CancelDeferredPaymentCreationRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CancelDeferredPaymentCreationRequestResultCode.fromXdr(
      XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Success result of CancelDeferredPaymentCreationRequestOp application
//  struct CancelDeferredPaymentCreationRequestResultSuccess
//  {
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CancelDeferredPaymentCreationRequestResultSuccess extends XdrEncodable {
  late CancelDeferredPaymentCreationRequestResultSuccessExt ext;

  CancelDeferredPaymentCreationRequestResultSuccess(
    this.ext,
  );

  CancelDeferredPaymentCreationRequestResultSuccess.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.ext =
        CancelDeferredPaymentCreationRequestResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class CancelDeferredPaymentCreationRequestResultSuccessExt
    extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelDeferredPaymentCreationRequestResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelDeferredPaymentCreationRequestResultSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelDeferredPaymentCreationRequestResultSuccessExtEmptyVersion
            .fromXdr(stream);
    }

    return CancelDeferredPaymentCreationRequestResultSuccessExtEmptyVersion
        .fromXdr(stream);
  }
}

class CancelDeferredPaymentCreationRequestResultSuccessExtEmptyVersion
    extends CancelDeferredPaymentCreationRequestResultSuccessExt {
  CancelDeferredPaymentCreationRequestResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelDeferredPaymentCreationRequestResultSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CancelDeferredPaymentCreationRequestResult extends XdrEncodable {
  late CancelDeferredPaymentCreationRequestResultCode discriminant;

  CancelDeferredPaymentCreationRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelDeferredPaymentCreationRequestResult fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CancelDeferredPaymentCreationRequestResultCode.SUCCESS:
        return CancelDeferredPaymentCreationRequestResultSuccessSuccess.fromXdr(
            stream);
    }

    return CancelDeferredPaymentCreationRequestResultSuccessSuccess.fromXdr(
        stream);
  }
}

class CancelDeferredPaymentCreationRequestResultSuccessSuccess
    extends CancelDeferredPaymentCreationRequestResult {
  CancelDeferredPaymentCreationRequestResultSuccessSuccess(this.success)
      : super(CancelDeferredPaymentCreationRequestResultCode(
            CancelDeferredPaymentCreationRequestResultCode.SUCCESS));
  late CancelDeferredPaymentCreationRequestResultSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CancelDeferredPaymentCreationRequestResultSuccessSuccess.fromXdr(
      XdrDataInputStream stream)
      : super(CancelDeferredPaymentCreationRequestResultCode(
            CancelDeferredPaymentCreationRequestResultCode.SUCCESS)) {
    this.success =
        CancelDeferredPaymentCreationRequestResultSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelSaleCreationRequest operation is used to cancel sale creation request.
//  //: If successful, request with the corresponding ID will be deleted
//  //: SaleCreationRequest with provided ID
//  struct CancelSaleCreationRequestOp
//  {
//      //: ID of the SaleCreation request to be canceled
//      uint64 requestID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CancelSaleCreationRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late CancelSaleCreationRequestOpExt ext;

  CancelSaleCreationRequestOp(
    this.requestID,
    this.ext,
  );

  CancelSaleCreationRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.ext = CancelSaleCreationRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CancelSaleCreationRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelSaleCreationRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelSaleCreationRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelSaleCreationRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CancelSaleCreationRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CancelSaleCreationRequestOpExtEmptyVersion
    extends CancelSaleCreationRequestOpExt {
  CancelSaleCreationRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelSaleCreationRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CancelSaleCreationRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REQUEST_ID_INVALID = -1;
  static const REQUEST_NOT_FOUND = -2;
  late int value;

  CancelSaleCreationRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CancelSaleCreationRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Result of successful `CancelSaleCreationRequestOp` application
//  struct CancelSaleCreationSuccess {
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CancelSaleCreationSuccess extends XdrEncodable {
  late CancelSaleCreationSuccessExt ext;

  CancelSaleCreationSuccess(
    this.ext,
  );

  CancelSaleCreationSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = CancelSaleCreationSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class CancelSaleCreationSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelSaleCreationSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelSaleCreationSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelSaleCreationSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CancelSaleCreationSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CancelSaleCreationSuccessExtEmptyVersion
    extends CancelSaleCreationSuccessExt {
  CancelSaleCreationSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelSaleCreationSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CancelSaleCreationRequestResult extends XdrEncodable {
  late CancelSaleCreationRequestResultCode discriminant;

  CancelSaleCreationRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelSaleCreationRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CancelSaleCreationRequestResultCode.SUCCESS:
        return CancelSaleCreationRequestResultSuccess.fromXdr(stream);
    }

    return CancelSaleCreationRequestResultSuccess.fromXdr(stream);
  }
}

class CancelSaleCreationRequestResultSuccess
    extends CancelSaleCreationRequestResult {
  CancelSaleCreationRequestResultSuccess(this.success)
      : super(CancelSaleCreationRequestResultCode(
            CancelSaleCreationRequestResultCode.SUCCESS));
  late CancelSaleCreationSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CancelSaleCreationRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CancelSaleCreationRequestResultCode(
            CancelSaleCreationRequestResultCode.SUCCESS)) {
    this.success = CancelSaleCreationSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CheckSaleState operation is used to perform check on sale state - whether the sale was successful or not
//  struct CheckSaleStateOp
//  {
//      //:ID of the sale to check
//      uint64 saleID;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CheckSaleStateOp extends XdrEncodable {
  late UINT64 saleID;
  late CheckSaleStateOpExt ext;

  CheckSaleStateOp(
    this.saleID,
    this.ext,
  );

  CheckSaleStateOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.saleID = longFromXdr(stream);
    this.ext = CheckSaleStateOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CheckSaleStateOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CheckSaleStateOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CheckSaleStateOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CheckSaleStateOpExtEmptyVersion.fromXdr(stream);
    }

    return CheckSaleStateOpExtEmptyVersion.fromXdr(stream);
  }
}

class CheckSaleStateOpExtEmptyVersion extends CheckSaleStateOpExt {
  CheckSaleStateOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CheckSaleStateOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CheckSaleStateResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const NOT_READY = -2;
  late int value;

  CheckSaleStateResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CheckSaleStateResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

class CheckSaleStateEffect extends XdrEncodable {
  static const CANCELED = 1;
  static const CLOSED = 2;
  static const UPDATED = 3;
  late int value;

  CheckSaleStateEffect(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CheckSaleStateEffect.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Entry for additional information regarding sale cancel
//  struct SaleCanceled {
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SaleCanceled extends XdrEncodable {
  late SaleCanceledExt ext;

  SaleCanceled(
    this.ext,
  );

  SaleCanceled.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = SaleCanceledExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class SaleCanceledExt extends XdrEncodable {
  late LedgerVersion discriminant;

  SaleCanceledExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SaleCanceledExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return SaleCanceledExtEmptyVersion.fromXdr(stream);
    }

    return SaleCanceledExtEmptyVersion.fromXdr(stream);
  }
}

class SaleCanceledExtEmptyVersion extends SaleCanceledExt {
  SaleCanceledExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  SaleCanceledExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Entry for additional information regarding sale update
//  struct SaleUpdated {
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SaleUpdated extends XdrEncodable {
  late SaleUpdatedExt ext;

  SaleUpdated(
    this.ext,
  );

  SaleUpdated.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = SaleUpdatedExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class SaleUpdatedExt extends XdrEncodable {
  late LedgerVersion discriminant;

  SaleUpdatedExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SaleUpdatedExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return SaleUpdatedExtEmptyVersion.fromXdr(stream);
    }

    return SaleUpdatedExtEmptyVersion.fromXdr(stream);
  }
}

class SaleUpdatedExtEmptyVersion extends SaleUpdatedExt {
  SaleUpdatedExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  SaleUpdatedExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Entry for additional information regarding sub sale closing
//  struct CheckSubSaleClosedResult {
//      //: Balance in base asset of the closed sale
//      BalanceID saleBaseBalance;
//      //: Balance in one of the quote assets of the closed sale
//      BalanceID saleQuoteBalance;
//      //: Result of an individual offer made during the sale and completed on its close
//      ManageOfferSuccessResult saleDetails;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//        void;
//      }
//      ext;
//  };

//  ===========================================================================
class CheckSubSaleClosedResult extends XdrEncodable {
  late BALANCEID saleBaseBalance;
  late BALANCEID saleQuoteBalance;
  late ManageOfferSuccessResult saleDetails;
  late CheckSubSaleClosedResultExt ext;

  CheckSubSaleClosedResult(
    this.saleBaseBalance,
    this.saleQuoteBalance,
    this.saleDetails,
    this.ext,
  );

  CheckSubSaleClosedResult.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.saleBaseBalance = PublicKey.fromXdr(stream);
    this.saleQuoteBalance = PublicKey.fromXdr(stream);
    this.saleDetails = ManageOfferSuccessResult.fromXdr(stream);
    this.ext = CheckSubSaleClosedResultExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    saleBaseBalance.toXdr(stream);
    saleQuoteBalance.toXdr(stream);
    saleDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CheckSubSaleClosedResultExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CheckSubSaleClosedResultExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CheckSubSaleClosedResultExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CheckSubSaleClosedResultExtEmptyVersion.fromXdr(stream);
    }

    return CheckSubSaleClosedResultExtEmptyVersion.fromXdr(stream);
  }
}

class CheckSubSaleClosedResultExtEmptyVersion
    extends CheckSubSaleClosedResultExt {
  CheckSubSaleClosedResultExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CheckSubSaleClosedResultExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Entry for additional information regarding sale closing
//  struct CheckSaleClosedResult {
//      //: AccountID of the sale owner
//      AccountID saleOwner;
//      //: Array of individual's contribution details
//      CheckSubSaleClosedResult results<>;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//        case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CheckSaleClosedResult extends XdrEncodable {
  late ACCOUNTID saleOwner;
  late List<CheckSubSaleClosedResult> results;
  late CheckSaleClosedResultExt ext;

  CheckSaleClosedResult(
    this.saleOwner,
    this.results,
    this.ext,
  );

  CheckSaleClosedResult.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.saleOwner = PublicKey.fromXdr(stream);
    length = intFromXdr(stream);
    results = <CheckSubSaleClosedResult>[];
    while (length > 0) {
      results.add(CheckSubSaleClosedResult.fromXdr(stream));
      length--;
    }

    this.ext = CheckSaleClosedResultExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    saleOwner.toXdr(stream);
    results.length.toXdr(stream);
    results.forEach((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}

abstract class CheckSaleClosedResultExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CheckSaleClosedResultExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CheckSaleClosedResultExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CheckSaleClosedResultExtEmptyVersion.fromXdr(stream);
    }

    return CheckSaleClosedResultExtEmptyVersion.fromXdr(stream);
  }
}

class CheckSaleClosedResultExtEmptyVersion extends CheckSaleClosedResultExt {
  CheckSaleClosedResultExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CheckSaleClosedResultExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Result of the successful application of CheckSaleState operation
//  struct CheckSaleStateSuccess
//  {
//      //: ID of the sale being checked
//      uint64 saleID;
//      //: Additional information regarding eventual result
//      union switch (CheckSaleStateEffect effect)
//      {
//      case CANCELED:
//          SaleCanceled saleCanceled;
//      case CLOSED:
//          CheckSaleClosedResult saleClosed;
//      case UPDATED:
//          SaleUpdated saleUpdated;
//      }
//      effect;
//       //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//        case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CheckSaleStateSuccess extends XdrEncodable {
  late UINT64 saleID;
  late CheckSaleStateSuccessEffect effect;
  late CheckSaleStateSuccessExt ext;

  CheckSaleStateSuccess(
    this.saleID,
    this.effect,
    this.ext,
  );

  CheckSaleStateSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.saleID = longFromXdr(stream);
    this.effect = CheckSaleStateSuccessEffect.fromXdr(stream);
    this.ext = CheckSaleStateSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    effect.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CheckSaleStateSuccessEffect extends XdrEncodable {
  late CheckSaleStateEffect discriminant;

  CheckSaleStateSuccessEffect(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CheckSaleStateSuccessEffect fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CheckSaleStateEffect.CANCELED:
        return CheckSaleStateSuccessEffectCanceled.fromXdr(stream);
      case CheckSaleStateEffect.CLOSED:
        return CheckSaleStateSuccessEffectClosed.fromXdr(stream);
      case CheckSaleStateEffect.UPDATED:
        return CheckSaleStateSuccessEffectUpdated.fromXdr(stream);
    }

    return CheckSaleStateSuccessEffectCanceled.fromXdr(stream);
  }
}

class CheckSaleStateSuccessEffectCanceled extends CheckSaleStateSuccessEffect {
  CheckSaleStateSuccessEffectCanceled(this.saleCanceled)
      : super(CheckSaleStateEffect(CheckSaleStateEffect.CANCELED));
  late SaleCanceled saleCanceled;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    saleCanceled.toXdr(stream);
  }

  CheckSaleStateSuccessEffectCanceled.fromXdr(XdrDataInputStream stream)
      : super(CheckSaleStateEffect(CheckSaleStateEffect.CANCELED)) {
    this.saleCanceled = SaleCanceled.fromXdr(stream);
  }
}

class CheckSaleStateSuccessEffectClosed extends CheckSaleStateSuccessEffect {
  CheckSaleStateSuccessEffectClosed(this.saleClosed)
      : super(CheckSaleStateEffect(CheckSaleStateEffect.CLOSED));
  late CheckSaleClosedResult saleClosed;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    saleClosed.toXdr(stream);
  }

  CheckSaleStateSuccessEffectClosed.fromXdr(XdrDataInputStream stream)
      : super(CheckSaleStateEffect(CheckSaleStateEffect.CLOSED)) {
    this.saleClosed = CheckSaleClosedResult.fromXdr(stream);
  }
}

class CheckSaleStateSuccessEffectUpdated extends CheckSaleStateSuccessEffect {
  CheckSaleStateSuccessEffectUpdated(this.saleUpdated)
      : super(CheckSaleStateEffect(CheckSaleStateEffect.UPDATED));
  late SaleUpdated saleUpdated;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    saleUpdated.toXdr(stream);
  }

  CheckSaleStateSuccessEffectUpdated.fromXdr(XdrDataInputStream stream)
      : super(CheckSaleStateEffect(CheckSaleStateEffect.UPDATED)) {
    this.saleUpdated = SaleUpdated.fromXdr(stream);
  }
}

abstract class CheckSaleStateSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CheckSaleStateSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CheckSaleStateSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CheckSaleStateSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CheckSaleStateSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CheckSaleStateSuccessExtEmptyVersion extends CheckSaleStateSuccessExt {
  CheckSaleStateSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CheckSaleStateSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CheckSaleStateResult extends XdrEncodable {
  late CheckSaleStateResultCode discriminant;

  CheckSaleStateResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CheckSaleStateResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CheckSaleStateResultCode.SUCCESS:
        return CheckSaleStateResultSuccess.fromXdr(stream);
    }

    return CheckSaleStateResultSuccess.fromXdr(stream);
  }
}

class CheckSaleStateResultSuccess extends CheckSaleStateResult {
  CheckSaleStateResultSuccess(this.success)
      : super(CheckSaleStateResultCode(CheckSaleStateResultCode.SUCCESS));
  late CheckSaleStateSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CheckSaleStateResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CheckSaleStateResultCode(CheckSaleStateResultCode.SUCCESS)) {
    this.success = CheckSaleStateSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct CloseSwapOp
//  {
//      //: ID of the swap to close
//      uint64 swapID;
//      //: (optional) Secret of the swap. Must be provided in order for destination of the swap to receive funds
//      Hash* secret;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CloseSwapOp extends XdrEncodable {
  late UINT64 swapID;
  late HASH? secret;
  late EmptyExt ext;

  CloseSwapOp(
    this.swapID,
    this.secret,
    this.ext,
  );

  CloseSwapOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.swapID = longFromXdr(stream);
    if (boolFromXdr(stream)) {
      this.secret = HASH.fromXdr(stream);
    } else {
      this.secret = null;
    }
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    swapID.toXdr(stream);
    if (secret != null) {
      true.toXdr(stream);
      secret?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

class CloseSwapResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const SWAP_EXPIRED = -1;
  static const INVALID_SECRET = -2;
  static const LINE_FULL = -3;
  static const NOT_AUTHORIZED = -4;
  late int value;

  CloseSwapResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CloseSwapResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

class CloseSwapEffect extends XdrEncodable {
  static const CLOSED = 0;
  static const CANCELLED = 1;
  late int value;

  CloseSwapEffect(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CloseSwapEffect.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: CloseSwapSuccess is used to pass saved ledger hash and license hash
//  struct CloseSwapSuccess {
//      //: Effect of CloseSwap application
//      CloseSwapEffect effect;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class CloseSwapSuccess extends XdrEncodable {
  late CloseSwapEffect effect;
  late EmptyExt ext;

  CloseSwapSuccess(
    this.effect,
    this.ext,
  );

  CloseSwapSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.effect = CloseSwapEffect.fromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    effect.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CloseSwapResult extends XdrEncodable {
  late CloseSwapResultCode discriminant;

  CloseSwapResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CloseSwapResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CloseSwapResultCode.SUCCESS:
        return CloseSwapResultSuccess.fromXdr(stream);
    }

    return CloseSwapResultSuccess.fromXdr(stream);
  }
}

class CloseSwapResultSuccess extends CloseSwapResult {
  CloseSwapResultSuccess(this.success)
      : super(CloseSwapResultCode(CloseSwapResultCode.SUCCESS));
  late CloseSwapSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CloseSwapResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CloseSwapResultCode(CloseSwapResultCode.SUCCESS)) {
    this.success = CloseSwapSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateAMLAlertRequest operation creates a reviewable request
//  //: that will void the specified amount from target balance after the reviewer's approval
//  struct CreateAMLAlertRequestOp
//  {
//      //: Reference of AMLAlertRequest
//      string64 reference; // TODO longstring ?
//      //: Parameters of AMLAlertRequest
//      AMLAlertRequest amlAlertRequest;
//      //: (optional) Bit mask whose flags must be cleared in order for AMLAlertRequest to be approved, which will be used by key aml_alert_tasks:<asset_code>
//      //: instead of key-value
//      uint32* allTasks;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CreateAMLAlertRequestOp extends XdrEncodable {
  late STRING64 reference;
  late AMLAlertRequest amlAlertRequest;
  late UINT32? allTasks;
  late CreateAMLAlertRequestOpExt ext;

  CreateAMLAlertRequestOp(
    this.reference,
    this.amlAlertRequest,
    this.allTasks,
    this.ext,
  );

  CreateAMLAlertRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.reference = stringFromXdr(stream);
    this.amlAlertRequest = AMLAlertRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = CreateAMLAlertRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    reference.toXdr(stream);
    amlAlertRequest.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreateAMLAlertRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateAMLAlertRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAMLAlertRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateAMLAlertRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CreateAMLAlertRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CreateAMLAlertRequestOpExtEmptyVersion
    extends CreateAMLAlertRequestOpExt {
  CreateAMLAlertRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateAMLAlertRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CreateAMLAlertRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const OLD_BALANCE_NOT_EXIST = 1;
  static const OLD_INVALID_CREATOR_DETAILS = 2;
  static const OLD_UNDERFUNDED = 3;
  static const OLD_REFERENCE_DUPLICATION = 4;
  static const OLD_INVALID_AMOUNT = 5;
  static const OLD_INCORRECT_PRECISION = 6;
  static const AML_ALERT_TASKS_NOT_FOUND = -1;
  static const BALANCE_NOT_EXIST = -2;
  static const INVALID_CREATOR_DETAILS = -3;
  static const UNDERFUNDED = -4;
  static const REFERENCE_DUPLICATION = -5;
  static const INVALID_AMOUNT = -6;
  static const INCORRECT_PRECISION = -7;
  late int value;

  CreateAMLAlertRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateAMLAlertRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Result of successful application of `CreateAMLAlertRequest` operation
//  struct CreateAMLAlertRequestSuccess {
//      //: ID of a newly created reviewable request
//      uint64 requestID;
//      //: Indicates  whether or not the AMLAlert request was auto approved and fulfilled
//      bool fulfilled;
//      //: Reserved for future use
//       union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateAMLAlertRequestSuccess extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late CreateAMLAlertRequestSuccessExt ext;

  CreateAMLAlertRequestSuccess(
    this.requestID,
    this.fulfilled,
    this.ext,
  );

  CreateAMLAlertRequestSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.ext = CreateAMLAlertRequestSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateAMLAlertRequestSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateAMLAlertRequestSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAMLAlertRequestSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateAMLAlertRequestSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CreateAMLAlertRequestSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CreateAMLAlertRequestSuccessExtEmptyVersion
    extends CreateAMLAlertRequestSuccessExt {
  CreateAMLAlertRequestSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateAMLAlertRequestSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CreateAMLAlertRequestResult extends XdrEncodable {
  late CreateAMLAlertRequestResultCode discriminant;

  CreateAMLAlertRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAMLAlertRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateAMLAlertRequestResultCode.SUCCESS:
        return CreateAMLAlertRequestResultSuccess.fromXdr(stream);
    }

    return CreateAMLAlertRequestResultSuccess.fromXdr(stream);
  }
}

class CreateAMLAlertRequestResultSuccess extends CreateAMLAlertRequestResult {
  CreateAMLAlertRequestResultSuccess(this.success)
      : super(CreateAMLAlertRequestResultCode(
            CreateAMLAlertRequestResultCode.SUCCESS));
  late CreateAMLAlertRequestSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateAMLAlertRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateAMLAlertRequestResultCode(
            CreateAMLAlertRequestResultCode.SUCCESS)) {
    this.success = CreateAMLAlertRequestSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateAccountOp is used to create new account
//  struct CreateAccountOp
//  {
//      //: ID of account to be created
//      AccountID destination;
//      //: ID of an another account that introduced this account into the system.
//      //: If account with such ID does not exist or it's Admin Account. Referrer won't be set.
//      AccountID* referrer;
//      //: ID of the role that will be attached to an account
//      uint64 roleID;
//
//      //: Array of data about 'destination' account signers to be created
//      UpdateSignerData signersData<>;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateAccountOp extends XdrEncodable {
  late ACCOUNTID destination;
  late ACCOUNTID? referrer;
  late UINT64 roleID;
  late List<UpdateSignerData> signersData;
  late CreateAccountOpExt ext;

  CreateAccountOp(
    this.destination,
    this.referrer,
    this.roleID,
    this.signersData,
    this.ext,
  );

  CreateAccountOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.destination = PublicKey.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.referrer = PublicKey.fromXdr(stream);
    } else {
      this.referrer = null;
    }
    this.roleID = longFromXdr(stream);
    length = intFromXdr(stream);
    signersData = <UpdateSignerData>[];
    while (length > 0) {
      signersData.add(UpdateSignerData.fromXdr(stream));
      length--;
    }

    this.ext = CreateAccountOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    destination.toXdr(stream);
    if (referrer != null) {
      true.toXdr(stream);
      referrer?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    roleID.toXdr(stream);
    signersData.length.toXdr(stream);
    signersData.forEach((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}

abstract class CreateAccountOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateAccountOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAccountOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateAccountOpExtEmptyVersion.fromXdr(stream);
    }

    return CreateAccountOpExtEmptyVersion.fromXdr(stream);
  }
}

class CreateAccountOpExtEmptyVersion extends CreateAccountOpExt {
  CreateAccountOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateAccountOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CreateAccountResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_DESTINATION = -1;
  static const ALREADY_EXISTS = -2;
  static const INVALID_WEIGHT = -3;
  static const NO_SUCH_ROLE = -4;
  static const INVALID_SIGNER_DATA = -5;
  static const NO_SIGNER_DATA = -6;
  late int value;

  CreateAccountResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateAccountResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Result of successful application of `CreateAccount` operation
//  struct CreateAccountSuccess
//  {
//      //: Unique unsigned integer identifier of the new account
//      uint64 sequentialID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateAccountSuccess extends XdrEncodable {
  late UINT64 sequentialID;
  late CreateAccountSuccessExt ext;

  CreateAccountSuccess(
    this.sequentialID,
    this.ext,
  );

  CreateAccountSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.sequentialID = longFromXdr(stream);
    this.ext = CreateAccountSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    sequentialID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateAccountSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateAccountSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAccountSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateAccountSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CreateAccountSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CreateAccountSuccessExtEmptyVersion extends CreateAccountSuccessExt {
  CreateAccountSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateAccountSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CreateAccountResult extends XdrEncodable {
  late CreateAccountResultCode discriminant;

  CreateAccountResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAccountResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateAccountResultCode.SUCCESS:
        return CreateAccountResultSuccess.fromXdr(stream);
      case CreateAccountResultCode.INVALID_SIGNER_DATA:
        return CreateAccountResultInvalidSignerData.fromXdr(stream);
    }

    return CreateAccountResultSuccess.fromXdr(stream);
  }
}

class CreateAccountResultSuccess extends CreateAccountResult {
  CreateAccountResultSuccess(this.success)
      : super(CreateAccountResultCode(CreateAccountResultCode.SUCCESS));
  late CreateAccountSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateAccountResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateAccountResultCode(CreateAccountResultCode.SUCCESS)) {
    this.success = CreateAccountSuccess.fromXdr(stream);
  }
}

class CreateAccountResultInvalidSignerData extends CreateAccountResult {
  CreateAccountResultInvalidSignerData(this.createSignerErrorCode)
      : super(CreateAccountResultCode(
            CreateAccountResultCode.INVALID_SIGNER_DATA));
  late ManageSignerResultCode createSignerErrorCode;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createSignerErrorCode.toXdr(stream);
  }

  CreateAccountResultInvalidSignerData.fromXdr(XdrDataInputStream stream)
      : super(CreateAccountResultCode(
            CreateAccountResultCode.INVALID_SIGNER_DATA)) {
    this.createSignerErrorCode = ManageSignerResultCode.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateAtomicSwapAskRequestOp is used to create `CREATE_ATOMIC_SWAP_ASK` request
//  struct CreateAtomicSwapAskRequestOp
//  {
//      //: Body of request which will be created
//      CreateAtomicSwapAskRequest request;
//
//      //: (optional) Bit mask whose flags must be cleared in order for `CREATE_ATOMIC_SWAP_BID` request to be approved,
//      //: which will be used instead of key-value by `atomic_swap_bid_tasks` key
//      uint32* allTasks;
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateAtomicSwapAskRequestOp extends XdrEncodable {
  late CreateAtomicSwapAskRequest request;
  late UINT32? allTasks;
  late CreateAtomicSwapAskRequestOpExt ext;

  CreateAtomicSwapAskRequestOp(
    this.request,
    this.allTasks,
    this.ext,
  );

  CreateAtomicSwapAskRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.request = CreateAtomicSwapAskRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = CreateAtomicSwapAskRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreateAtomicSwapAskRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateAtomicSwapAskRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAtomicSwapAskRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateAtomicSwapAskRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CreateAtomicSwapAskRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CreateAtomicSwapAskRequestOpExtEmptyVersion
    extends CreateAtomicSwapAskRequestOpExt {
  CreateAtomicSwapAskRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateAtomicSwapAskRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CreateAtomicSwapAskRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_AMOUNT = -1;
  static const INVALID_PRICE = -2;
  static const INVALID_DETAILS = -3;
  static const INCORRECT_PRECISION = -4;
  static const BASE_ASSET_NOT_FOUND = -5;
  static const BASE_ASSET_CANNOT_BE_SWAPPED = -6;
  static const QUOTE_ASSET_NOT_FOUND = -7;
  static const QUOTE_ASSET_CANNOT_BE_SWAPPED = -8;
  static const BASE_BALANCE_NOT_FOUND = -9;
  static const ASSETS_ARE_EQUAL = -10;
  static const BASE_BALANCE_UNDERFUNDED = -11;
  static const INVALID_QUOTE_ASSET = -12;
  static const ATOMIC_SWAP_ASK_TASKS_NOT_FOUND = -13;
  late int value;

  CreateAtomicSwapAskRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateAtomicSwapAskRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Success result of CreateASwapAskCreationRequestOp application
//  struct CreateAtomicSwapAskRequestSuccess
//  {
//      //: id of created request
//      uint64 requestID;
//      //: Indicates whether or not the `CREATE_ATOMIC_SWAP_ASK` request was auto approved and fulfilled
//      bool fulfilled;
//      //: ID of a newly created ask (if the ask  creation request has been auto approved)
//      uint64 askID;
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAtomicSwapAskRequestSuccess extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late UINT64 askID;
  late CreateAtomicSwapAskRequestSuccessExt ext;

  CreateAtomicSwapAskRequestSuccess(
    this.requestID,
    this.fulfilled,
    this.askID,
    this.ext,
  );

  CreateAtomicSwapAskRequestSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.askID = longFromXdr(stream);
    this.ext = CreateAtomicSwapAskRequestSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    askID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateAtomicSwapAskRequestSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateAtomicSwapAskRequestSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAtomicSwapAskRequestSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateAtomicSwapAskRequestSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CreateAtomicSwapAskRequestSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CreateAtomicSwapAskRequestSuccessExtEmptyVersion
    extends CreateAtomicSwapAskRequestSuccessExt {
  CreateAtomicSwapAskRequestSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateAtomicSwapAskRequestSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CreateAtomicSwapAskRequestResult extends XdrEncodable {
  late CreateAtomicSwapAskRequestResultCode discriminant;

  CreateAtomicSwapAskRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAtomicSwapAskRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateAtomicSwapAskRequestResultCode.SUCCESS:
        return CreateAtomicSwapAskRequestResultSuccess.fromXdr(stream);
    }

    return CreateAtomicSwapAskRequestResultSuccess.fromXdr(stream);
  }
}

class CreateAtomicSwapAskRequestResultSuccess
    extends CreateAtomicSwapAskRequestResult {
  CreateAtomicSwapAskRequestResultSuccess(this.success)
      : super(CreateAtomicSwapAskRequestResultCode(
            CreateAtomicSwapAskRequestResultCode.SUCCESS));
  late CreateAtomicSwapAskRequestSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateAtomicSwapAskRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateAtomicSwapAskRequestResultCode(
            CreateAtomicSwapAskRequestResultCode.SUCCESS)) {
    this.success = CreateAtomicSwapAskRequestSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateAtomicSwapBidRequestOp is used to create `CREATE_ATOMIC_SWAP_BID` request
//  struct CreateAtomicSwapBidRequestOp
//  {
//      //: Body of request which will be created
//      CreateAtomicSwapBidRequest request;
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAtomicSwapBidRequestOp extends XdrEncodable {
  late CreateAtomicSwapBidRequest request;
  late CreateAtomicSwapBidRequestOpExt ext;

  CreateAtomicSwapBidRequestOp(
    this.request,
    this.ext,
  );

  CreateAtomicSwapBidRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.request = CreateAtomicSwapBidRequest.fromXdr(stream);
    this.ext = CreateAtomicSwapBidRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateAtomicSwapBidRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateAtomicSwapBidRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAtomicSwapBidRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateAtomicSwapBidRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CreateAtomicSwapBidRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CreateAtomicSwapBidRequestOpExtEmptyVersion
    extends CreateAtomicSwapBidRequestOpExt {
  CreateAtomicSwapBidRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateAtomicSwapBidRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CreateAtomicSwapBidRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_BASE_AMOUNT = -1;
  static const INVALID_QUOTE_ASSET = -2;
  static const ASK_NOT_FOUND = -3;
  static const QUOTE_ASSET_NOT_FOUND = -4;
  static const ASK_UNDERFUNDED = -5;
  static const ATOMIC_SWAP_BID_TASKS_NOT_FOUND = -6;
  static const INCORRECT_PRECISION = -7;
  static const ASK_IS_CANCELLED = -8;
  static const SOURCE_ACCOUNT_EQUALS_ASK_OWNER = -9;
  static const ATOMIC_SWAP_BID_ZERO_TASKS_NOT_ALLOWED = -10;
  static const QUOTE_AMOUNT_OVERFLOWS = -11;
  late int value;

  CreateAtomicSwapBidRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateAtomicSwapBidRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Success request of CreateAtomicSwapBidRequestOp application
//  struct CreateAtomicSwapBidRequestSuccess
//  {
//      //: id of created request
//      uint64 requestID;
//      //: id of ask owner
//      AccountID askOwnerID;
//      //: amount in quote asset which required for request applying
//      uint64 quoteAmount;
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAtomicSwapBidRequestSuccess extends XdrEncodable {
  late UINT64 requestID;
  late ACCOUNTID askOwnerID;
  late UINT64 quoteAmount;
  late CreateAtomicSwapBidRequestSuccessExt ext;

  CreateAtomicSwapBidRequestSuccess(
    this.requestID,
    this.askOwnerID,
    this.quoteAmount,
    this.ext,
  );

  CreateAtomicSwapBidRequestSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.askOwnerID = PublicKey.fromXdr(stream);
    this.quoteAmount = longFromXdr(stream);
    this.ext = CreateAtomicSwapBidRequestSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    askOwnerID.toXdr(stream);
    quoteAmount.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateAtomicSwapBidRequestSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateAtomicSwapBidRequestSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAtomicSwapBidRequestSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateAtomicSwapBidRequestSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CreateAtomicSwapBidRequestSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CreateAtomicSwapBidRequestSuccessExtEmptyVersion
    extends CreateAtomicSwapBidRequestSuccessExt {
  CreateAtomicSwapBidRequestSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateAtomicSwapBidRequestSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CreateAtomicSwapBidRequestResult extends XdrEncodable {
  late CreateAtomicSwapBidRequestResultCode discriminant;

  CreateAtomicSwapBidRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAtomicSwapBidRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateAtomicSwapBidRequestResultCode.SUCCESS:
        return CreateAtomicSwapBidRequestResultSuccess.fromXdr(stream);
    }

    return CreateAtomicSwapBidRequestResultSuccess.fromXdr(stream);
  }
}

class CreateAtomicSwapBidRequestResultSuccess
    extends CreateAtomicSwapBidRequestResult {
  CreateAtomicSwapBidRequestResultSuccess(this.success)
      : super(CreateAtomicSwapBidRequestResultCode(
            CreateAtomicSwapBidRequestResultCode.SUCCESS));
  late CreateAtomicSwapBidRequestSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateAtomicSwapBidRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateAtomicSwapBidRequestResultCode(
            CreateAtomicSwapBidRequestResultCode.SUCCESS)) {
    this.success = CreateAtomicSwapBidRequestSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: `CreateChangeRoleRequestOp` is used to create reviewable requests
//  //: that, with admin's approval, will change the role of `destinationAccount`
//  //: from current role to `accountRoleToSet`
//  struct CreateChangeRoleRequestOp
//  {
//      //: Set zero to create new request, set non zero to update existing request
//      uint64 requestID;
//
//      //: AccountID of an account whose role will be changed
//      AccountID destinationAccount;
//      //: ID of account role that will be attached to `destinationAccount`
//      uint64 accountRoleToSet;
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails;
//
//      //: Bit mask that will be used instead of the value from key-value entry by
//      //: `change_role_tasks:<currentRoleID>:<accountRoleToSet>` key
//      uint32* allTasks;
//
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateChangeRoleRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late ACCOUNTID destinationAccount;
  late UINT64 accountRoleToSet;
  late LONGSTRING creatorDetails;
  late UINT32? allTasks;
  late CreateChangeRoleRequestOpExt ext;

  CreateChangeRoleRequestOp(
    this.requestID,
    this.destinationAccount,
    this.accountRoleToSet,
    this.creatorDetails,
    this.allTasks,
    this.ext,
  );

  CreateChangeRoleRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.destinationAccount = PublicKey.fromXdr(stream);
    this.accountRoleToSet = longFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = CreateChangeRoleRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    destinationAccount.toXdr(stream);
    accountRoleToSet.toXdr(stream);
    creatorDetails.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreateChangeRoleRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateChangeRoleRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateChangeRoleRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateChangeRoleRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CreateChangeRoleRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CreateChangeRoleRequestOpExtEmptyVersion
    extends CreateChangeRoleRequestOpExt {
  CreateChangeRoleRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateChangeRoleRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CreateChangeRoleRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const ACC_TO_UPDATE_DOES_NOT_EXIST = -1;
  static const REQUEST_ALREADY_EXISTS = -2;
  static const REQUEST_DOES_NOT_EXIST = -4;
  static const NOT_ALLOWED_TO_UPDATE_REQUEST = -6;
  static const INVALID_CHANGE_ROLE_REQUEST_DATA = -7;
  static const INVALID_CREATOR_DETAILS = -8;
  static const CHANGE_ROLE_TASKS_NOT_FOUND = -9;
  static const ACCOUNT_ROLE_TO_SET_DOES_NOT_EXIST = -10;
  late int value;

  CreateChangeRoleRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateChangeRoleRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class CreateChangeRoleRequestResult extends XdrEncodable {
  late CreateChangeRoleRequestResultCode discriminant;

  CreateChangeRoleRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateChangeRoleRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateChangeRoleRequestResultCode.SUCCESS:
        return CreateChangeRoleRequestResultSuccess.fromXdr(stream);
    }

    return CreateChangeRoleRequestResultSuccess.fromXdr(stream);
  }
}

class CreateChangeRoleRequestResultSuccess
    extends CreateChangeRoleRequestResult {
  CreateChangeRoleRequestResultSuccess(this.success)
      : super(CreateChangeRoleRequestResultCode(
            CreateChangeRoleRequestResultCode.SUCCESS));
  late CreateChangeRoleRequestResultSuccessSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateChangeRoleRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateChangeRoleRequestResultCode(
            CreateChangeRoleRequestResultCode.SUCCESS)) {
    this.success = CreateChangeRoleRequestResultSuccessSuccess.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          //: ID of a created or updated request
//          uint64 requestID;
//          //: True if request was auto approved (pending tasks == 0),
//          //: `destinationAccount` must have new account role
//          bool fulfilled;
//          // Reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//  	}

//  ===========================================================================
class CreateChangeRoleRequestResultSuccessSuccess extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late CreateChangeRoleRequestResultSuccessExt ext;

  CreateChangeRoleRequestResultSuccessSuccess(
    this.requestID,
    this.fulfilled,
    this.ext,
  );

  CreateChangeRoleRequestResultSuccessSuccess.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.ext = CreateChangeRoleRequestResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateChangeRoleRequestResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateChangeRoleRequestResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateChangeRoleRequestResultSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateChangeRoleRequestResultSuccessExtEmptyVersion.fromXdr(
            stream);
    }

    return CreateChangeRoleRequestResultSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CreateChangeRoleRequestResultSuccessExtEmptyVersion
    extends CreateChangeRoleRequestResultSuccessExt {
  CreateChangeRoleRequestResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateChangeRoleRequestResultSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

// === xdr source ============================================================

//  //: CreateCloseDeferredPaymentRequestOp is used to create `CLOSE_DEFERRED_PAYMENT` request
//  struct CreateCloseDeferredPaymentRequestOp
//  {
//
//      uint64 requestID;
//
//      //: Body of request which will be created
//      CloseDeferredPaymentRequest request;
//
//      uint32* allTasks;
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateCloseDeferredPaymentRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late CloseDeferredPaymentRequest request;
  late UINT32? allTasks;
  late CreateCloseDeferredPaymentRequestOpExt ext;

  CreateCloseDeferredPaymentRequestOp(
    this.requestID,
    this.request,
    this.allTasks,
    this.ext,
  );

  CreateCloseDeferredPaymentRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.request = CloseDeferredPaymentRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = CreateCloseDeferredPaymentRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreateCloseDeferredPaymentRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateCloseDeferredPaymentRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateCloseDeferredPaymentRequestOpExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateCloseDeferredPaymentRequestOpExtEmptyVersion.fromXdr(
            stream);
    }

    return CreateCloseDeferredPaymentRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CreateCloseDeferredPaymentRequestOpExtEmptyVersion
    extends CreateCloseDeferredPaymentRequestOpExt {
  CreateCloseDeferredPaymentRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateCloseDeferredPaymentRequestOpExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CreateCloseDeferredPaymentRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const UNDERFUNDED = -1;
  static const INVALID_CREATOR_DETAILS = -2;
  static const NOT_AUTHORIZED = -3;
  static const DESTINATION_ACCOUNT_NOT_FOUND = -4;
  static const INCORRECT_PRECISION = -5;
  static const ASSET_MISMATCH = -6;
  static const LINE_FULL = -7;
  static const TASKS_NOT_FOUND = -8;
  static const INVALID_AMOUNT = -9;
  static const DESTINATION_BALANCE_NOT_FOUND = -10;
  static const REQUEST_NOT_FOUND = -11;
  late int value;

  CreateCloseDeferredPaymentRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateCloseDeferredPaymentRequestResultCode.fromXdr(
      XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

class CloseDeferredPaymentEffect extends XdrEncodable {
  static const CHARGED = 0;
  static const DELETED = 1;
  late int value;

  CloseDeferredPaymentEffect(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CloseDeferredPaymentEffect.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct CloseDeferredPaymentResult
//  {
//      uint64 deferredPaymentID;
//
//      AccountID destination;
//      BalanceID destinationBalance;
//
//      CloseDeferredPaymentEffect effect;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class CloseDeferredPaymentResult extends XdrEncodable {
  late UINT64 deferredPaymentID;
  late ACCOUNTID destination;
  late BALANCEID destinationBalance;
  late CloseDeferredPaymentEffect effect;
  late EmptyExt ext;

  CloseDeferredPaymentResult(
    this.deferredPaymentID,
    this.destination,
    this.destinationBalance,
    this.effect,
    this.ext,
  );

  CloseDeferredPaymentResult.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.deferredPaymentID = longFromXdr(stream);
    this.destination = PublicKey.fromXdr(stream);
    this.destinationBalance = PublicKey.fromXdr(stream);
    this.effect = CloseDeferredPaymentEffect.fromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    deferredPaymentID.toXdr(stream);
    destination.toXdr(stream);
    destinationBalance.toXdr(stream);
    effect.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Success result of CreateASwapAskCreationRequestOp application
//  struct CreateCloseDeferredPaymentRequestSuccess
//  {
//      uint64 requestID;
//      bool fulfilled;
//      uint64 deferredPaymentID;
//
//      CloseDeferredPaymentResult* extendedResult;
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateCloseDeferredPaymentRequestSuccess extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late UINT64 deferredPaymentID;
  late CloseDeferredPaymentResult? extendedResult;
  late CreateCloseDeferredPaymentRequestSuccessExt ext;

  CreateCloseDeferredPaymentRequestSuccess(
    this.requestID,
    this.fulfilled,
    this.deferredPaymentID,
    this.extendedResult,
    this.ext,
  );

  CreateCloseDeferredPaymentRequestSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.deferredPaymentID = longFromXdr(stream);
    if (boolFromXdr(stream)) {
      this.extendedResult = CloseDeferredPaymentResult.fromXdr(stream);
    } else {
      this.extendedResult = null;
    }
    this.ext = CreateCloseDeferredPaymentRequestSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    deferredPaymentID.toXdr(stream);
    if (extendedResult != null) {
      true.toXdr(stream);
      extendedResult?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreateCloseDeferredPaymentRequestSuccessExt
    extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateCloseDeferredPaymentRequestSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateCloseDeferredPaymentRequestSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateCloseDeferredPaymentRequestSuccessExtEmptyVersion.fromXdr(
            stream);
    }

    return CreateCloseDeferredPaymentRequestSuccessExtEmptyVersion.fromXdr(
        stream);
  }
}

class CreateCloseDeferredPaymentRequestSuccessExtEmptyVersion
    extends CreateCloseDeferredPaymentRequestSuccessExt {
  CreateCloseDeferredPaymentRequestSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateCloseDeferredPaymentRequestSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CreateCloseDeferredPaymentRequestResult extends XdrEncodable {
  late CreateCloseDeferredPaymentRequestResultCode discriminant;

  CreateCloseDeferredPaymentRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateCloseDeferredPaymentRequestResult fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateCloseDeferredPaymentRequestResultCode.SUCCESS:
        return CreateCloseDeferredPaymentRequestResultSuccess.fromXdr(stream);
    }

    return CreateCloseDeferredPaymentRequestResultSuccess.fromXdr(stream);
  }
}

class CreateCloseDeferredPaymentRequestResultSuccess
    extends CreateCloseDeferredPaymentRequestResult {
  CreateCloseDeferredPaymentRequestResultSuccess(this.success)
      : super(CreateCloseDeferredPaymentRequestResultCode(
            CreateCloseDeferredPaymentRequestResultCode.SUCCESS));
  late CreateCloseDeferredPaymentRequestSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateCloseDeferredPaymentRequestResultSuccess.fromXdr(
      XdrDataInputStream stream)
      : super(CreateCloseDeferredPaymentRequestResultCode(
            CreateCloseDeferredPaymentRequestResultCode.SUCCESS)) {
    this.success = CreateCloseDeferredPaymentRequestSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct CreateDataCreationRequestOp
//  {
//      //: ID of the DataCreationRequest. If set to 0, a new request is created
//      uint64 requestID;
//
//      DataCreationRequest dataCreationRequest;
//
//      uint32* allTasks;
//
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateDataCreationRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late DataCreationRequest dataCreationRequest;
  late UINT32? allTasks;
  late EmptyExt ext;

  CreateDataCreationRequestOp(
    this.requestID,
    this.dataCreationRequest,
    this.allTasks,
    this.ext,
  );

  CreateDataCreationRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.dataCreationRequest = DataCreationRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    dataCreationRequest.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

class CreateDataCreationRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_VALUE = -1;
  static const CREATE_DATA_TASKS_NOT_FOUND = -2;
  static const REQUEST_NOT_FOUND = -3;
  static const INVALID_CREATOR_DETAILS = -4;
  late int value;

  CreateDataCreationRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateDataCreationRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct CreateDataCreationRequestSuccess {
//      uint64 requestID;
//      bool fulfilled;
//      AccountID owner;
//      uint64 id;
//      uint64 type;
//      longstring value;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateDataCreationRequestSuccess extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late ACCOUNTID owner;
  late UINT64 id;
  late UINT64 type;
  late LONGSTRING value;
  late CreateDataCreationRequestSuccessExt ext;

  CreateDataCreationRequestSuccess(
    this.requestID,
    this.fulfilled,
    this.owner,
    this.id,
    this.type,
    this.value,
    this.ext,
  );

  CreateDataCreationRequestSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.owner = PublicKey.fromXdr(stream);
    this.id = longFromXdr(stream);
    this.type = longFromXdr(stream);
    this.value = stringFromXdr(stream);
    this.ext = CreateDataCreationRequestSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    owner.toXdr(stream);
    id.toXdr(stream);
    type.toXdr(stream);
    value.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateDataCreationRequestSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateDataCreationRequestSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateDataCreationRequestSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateDataCreationRequestSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CreateDataCreationRequestSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CreateDataCreationRequestSuccessExtEmptyVersion
    extends CreateDataCreationRequestSuccessExt {
  CreateDataCreationRequestSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateDataCreationRequestSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CreateDataCreationRequestResult extends XdrEncodable {
  late CreateDataCreationRequestResultCode discriminant;

  CreateDataCreationRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateDataCreationRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateDataCreationRequestResultCode.SUCCESS:
        return CreateDataCreationRequestResultSuccess.fromXdr(stream);
    }

    return CreateDataCreationRequestResultSuccess.fromXdr(stream);
  }
}

class CreateDataCreationRequestResultSuccess
    extends CreateDataCreationRequestResult {
  CreateDataCreationRequestResultSuccess(this.success)
      : super(CreateDataCreationRequestResultCode(
            CreateDataCreationRequestResultCode.SUCCESS));
  late CreateDataCreationRequestSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateDataCreationRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateDataCreationRequestResultCode(
            CreateDataCreationRequestResultCode.SUCCESS)) {
    this.success = CreateDataCreationRequestSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct CreateDataRemoveRequestOp
//  {
//      //: ID of the DataRemoveRequest. If set to 0, a new request is created
//      uint64 requestID;
//
//      DataRemoveRequest dataRemoveRequest;
//
//      uint32* allTasks;
//
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateDataRemoveRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late DataRemoveRequest dataRemoveRequest;
  late UINT32? allTasks;
  late EmptyExt ext;

  CreateDataRemoveRequestOp(
    this.requestID,
    this.dataRemoveRequest,
    this.allTasks,
    this.ext,
  );

  CreateDataRemoveRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.dataRemoveRequest = DataRemoveRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    dataRemoveRequest.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

class CreateDataRemoveRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REMOVE_DATA_TASKS_NOT_FOUND = -1;
  static const DATA_NOT_FOUND = -2;
  static const INVALID_CREATOR_DETAILS = -3;
  static const REQUEST_NOT_FOUND = -4;
  late int value;

  CreateDataRemoveRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateDataRemoveRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct CreateDataRemoveRequestSuccess {
//      uint64 requestID;
//      bool fulfilled;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateDataRemoveRequestSuccess extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late CreateDataRemoveRequestSuccessExt ext;

  CreateDataRemoveRequestSuccess(
    this.requestID,
    this.fulfilled,
    this.ext,
  );

  CreateDataRemoveRequestSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.ext = CreateDataRemoveRequestSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateDataRemoveRequestSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateDataRemoveRequestSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateDataRemoveRequestSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateDataRemoveRequestSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CreateDataRemoveRequestSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CreateDataRemoveRequestSuccessExtEmptyVersion
    extends CreateDataRemoveRequestSuccessExt {
  CreateDataRemoveRequestSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateDataRemoveRequestSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CreateDataRemoveRequestResult extends XdrEncodable {
  late CreateDataRemoveRequestResultCode discriminant;

  CreateDataRemoveRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateDataRemoveRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateDataRemoveRequestResultCode.SUCCESS:
        return CreateDataRemoveRequestResultSuccess.fromXdr(stream);
    }

    return CreateDataRemoveRequestResultSuccess.fromXdr(stream);
  }
}

class CreateDataRemoveRequestResultSuccess
    extends CreateDataRemoveRequestResult {
  CreateDataRemoveRequestResultSuccess(this.success)
      : super(CreateDataRemoveRequestResultCode(
            CreateDataRemoveRequestResultCode.SUCCESS));
  late CreateDataRemoveRequestSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateDataRemoveRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateDataRemoveRequestResultCode(
            CreateDataRemoveRequestResultCode.SUCCESS)) {
    this.success = CreateDataRemoveRequestSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct CreateDataUpdateRequestOp
//  {
//      //: ID of the DataUpdateRequest. If set to 0, a new request is created
//      uint64 requestID;
//
//      DataUpdateRequest dataUpdateRequest;
//
//      uint32* allTasks;
//
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateDataUpdateRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late DataUpdateRequest dataUpdateRequest;
  late UINT32? allTasks;
  late EmptyExt ext;

  CreateDataUpdateRequestOp(
    this.requestID,
    this.dataUpdateRequest,
    this.allTasks,
    this.ext,
  );

  CreateDataUpdateRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.dataUpdateRequest = DataUpdateRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    dataUpdateRequest.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

class CreateDataUpdateRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_VALUE = -1;
  static const UPDATE_DATA_TASKS_NOT_FOUND = -2;
  static const DATA_NOT_FOUND = -3;
  static const INVALID_CREATOR_DETAILS = -4;
  static const REQUEST_NOT_FOUND = -5;
  late int value;

  CreateDataUpdateRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateDataUpdateRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct CreateDataUpdateRequestSuccess {
//      uint64 requestID;
//      bool fulfilled;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateDataUpdateRequestSuccess extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late CreateDataUpdateRequestSuccessExt ext;

  CreateDataUpdateRequestSuccess(
    this.requestID,
    this.fulfilled,
    this.ext,
  );

  CreateDataUpdateRequestSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.ext = CreateDataUpdateRequestSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateDataUpdateRequestSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateDataUpdateRequestSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateDataUpdateRequestSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateDataUpdateRequestSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CreateDataUpdateRequestSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CreateDataUpdateRequestSuccessExtEmptyVersion
    extends CreateDataUpdateRequestSuccessExt {
  CreateDataUpdateRequestSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateDataUpdateRequestSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CreateDataUpdateRequestResult extends XdrEncodable {
  late CreateDataUpdateRequestResultCode discriminant;

  CreateDataUpdateRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateDataUpdateRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateDataUpdateRequestResultCode.SUCCESS:
        return CreateDataUpdateRequestResultSuccess.fromXdr(stream);
    }

    return CreateDataUpdateRequestResultSuccess.fromXdr(stream);
  }
}

class CreateDataUpdateRequestResultSuccess
    extends CreateDataUpdateRequestResult {
  CreateDataUpdateRequestResultSuccess(this.success)
      : super(CreateDataUpdateRequestResultCode(
            CreateDataUpdateRequestResultCode.SUCCESS));
  late CreateDataUpdateRequestSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateDataUpdateRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateDataUpdateRequestResultCode(
            CreateDataUpdateRequestResultCode.SUCCESS)) {
    this.success = CreateDataUpdateRequestSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct CreateDataOp
//  {
//      //: Numeric type, used for access control
//      uint64 type;
//      //: Value to store
//      longstring value;
//
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateDataOp extends XdrEncodable {
  late UINT64 type;
  late LONGSTRING value;
  late EmptyExt ext;

  CreateDataOp(
    this.type,
    this.value,
    this.ext,
  );

  CreateDataOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.type = longFromXdr(stream);
    this.value = stringFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    value.toXdr(stream);
    ext.toXdr(stream);
  }
}

class CreateDataResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_DATA = -1;
  late int value;

  CreateDataResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateDataResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct CreateDataSuccess
//  {
//      //: ID of created data entry
//      uint64 dataID;
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateDataSuccess extends XdrEncodable {
  late UINT64 dataID;
  late EmptyExt ext;

  CreateDataSuccess(
    this.dataID,
    this.ext,
  );

  CreateDataSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.dataID = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    dataID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateDataResult extends XdrEncodable {
  late CreateDataResultCode discriminant;

  CreateDataResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateDataResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateDataResultCode.SUCCESS:
        return CreateDataResultSuccess.fromXdr(stream);
    }

    return CreateDataResultSuccess.fromXdr(stream);
  }
}

class CreateDataResultSuccess extends CreateDataResult {
  CreateDataResultSuccess(this.success)
      : super(CreateDataResultCode(CreateDataResultCode.SUCCESS));
  late CreateDataSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateDataResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateDataResultCode(CreateDataResultCode.SUCCESS)) {
    this.success = CreateDataSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateDeferredPaymentCreationRequestOp is used to create `CREATE_DEFERRED_PAYMENT` request
//  struct CreateDeferredPaymentCreationRequestOp
//  {
//
//      uint64 requestID;
//      //: Body of request which will be created
//      CreateDeferredPaymentRequest request;
//
//      //: (optional) Bit mask whose flags must be cleared in order for `CREATE_ATOMIC_SWAP_BID` request to be approved,
//      //: which will be used instead of key-value by `create_deferred_payment_creation_request_tasks` key
//      uint32* allTasks;
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateDeferredPaymentCreationRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late CreateDeferredPaymentRequest request;
  late UINT32? allTasks;
  late CreateDeferredPaymentCreationRequestOpExt ext;

  CreateDeferredPaymentCreationRequestOp(
    this.requestID,
    this.request,
    this.allTasks,
    this.ext,
  );

  CreateDeferredPaymentCreationRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.request = CreateDeferredPaymentRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = CreateDeferredPaymentCreationRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreateDeferredPaymentCreationRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateDeferredPaymentCreationRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateDeferredPaymentCreationRequestOpExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateDeferredPaymentCreationRequestOpExtEmptyVersion.fromXdr(
            stream);
    }

    return CreateDeferredPaymentCreationRequestOpExtEmptyVersion.fromXdr(
        stream);
  }
}

class CreateDeferredPaymentCreationRequestOpExtEmptyVersion
    extends CreateDeferredPaymentCreationRequestOpExt {
  CreateDeferredPaymentCreationRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateDeferredPaymentCreationRequestOpExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CreateDeferredPaymentCreationRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const SOURCE_BALANCE_NOT_FOUND = -1;
  static const DESTINATION_ACCOUNT_NOT_FOUND = -2;
  static const INCORRECT_PRECISION = -3;
  static const UNDERFUNDED = -4;
  static const TASKS_NOT_FOUND = -5;
  static const INVALID_CREATOR_DETAILS = -6;
  static const INVALID_AMOUNT = -7;
  static const REQUEST_NOT_FOUND = -8;
  late int value;

  CreateDeferredPaymentCreationRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateDeferredPaymentCreationRequestResultCode.fromXdr(
      XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Success result of CreateASwapAskCreationRequestOp application
//  struct CreateDeferredPaymentCreationRequestSuccess
//  {
//      //: id of created request
//      uint64 requestID;
//      //: Indicates whether or not the `CREATE_ATOMIC_SWAP_ASK` request was auto approved and fulfilled
//      bool fulfilled;
//      //: ID of a newly created ask (if the ask  creation request has been auto approved)
//      uint64 deferredPaymentID;
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateDeferredPaymentCreationRequestSuccess extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late UINT64 deferredPaymentID;
  late CreateDeferredPaymentCreationRequestSuccessExt ext;

  CreateDeferredPaymentCreationRequestSuccess(
    this.requestID,
    this.fulfilled,
    this.deferredPaymentID,
    this.ext,
  );

  CreateDeferredPaymentCreationRequestSuccess.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.deferredPaymentID = longFromXdr(stream);
    this.ext = CreateDeferredPaymentCreationRequestSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    deferredPaymentID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateDeferredPaymentCreationRequestSuccessExt
    extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateDeferredPaymentCreationRequestSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateDeferredPaymentCreationRequestSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateDeferredPaymentCreationRequestSuccessExtEmptyVersion
            .fromXdr(stream);
    }

    return CreateDeferredPaymentCreationRequestSuccessExtEmptyVersion.fromXdr(
        stream);
  }
}

class CreateDeferredPaymentCreationRequestSuccessExtEmptyVersion
    extends CreateDeferredPaymentCreationRequestSuccessExt {
  CreateDeferredPaymentCreationRequestSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateDeferredPaymentCreationRequestSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CreateDeferredPaymentCreationRequestResult extends XdrEncodable {
  late CreateDeferredPaymentCreationRequestResultCode discriminant;

  CreateDeferredPaymentCreationRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateDeferredPaymentCreationRequestResult fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateDeferredPaymentCreationRequestResultCode.SUCCESS:
        return CreateDeferredPaymentCreationRequestResultSuccess.fromXdr(
            stream);
    }

    return CreateDeferredPaymentCreationRequestResultSuccess.fromXdr(stream);
  }
}

class CreateDeferredPaymentCreationRequestResultSuccess
    extends CreateDeferredPaymentCreationRequestResult {
  CreateDeferredPaymentCreationRequestResultSuccess(this.success)
      : super(CreateDeferredPaymentCreationRequestResultCode(
            CreateDeferredPaymentCreationRequestResultCode.SUCCESS));
  late CreateDeferredPaymentCreationRequestSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateDeferredPaymentCreationRequestResultSuccess.fromXdr(
      XdrDataInputStream stream)
      : super(CreateDeferredPaymentCreationRequestResultCode(
            CreateDeferredPaymentCreationRequestResultCode.SUCCESS)) {
    this.success = CreateDeferredPaymentCreationRequestSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateIssuanceRequestOp is used to create a reviewable request that, after reviewer's approval,
//  //: will issue the specified amount of asset to a receiver's balance
//  struct CreateIssuanceRequestOp
//  {
//      //: Issuance request to create
//      IssuanceRequest request;
//      //: Reference of the request
//      string64 reference;
//      //: (optional) Bit mask whose flags must be cleared in order for IssuanceRequest to be approved, which will be used by key issuance_tasks:<asset_code>
//      //: instead of key-value
//      uint32* allTasks;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateIssuanceRequestOp extends XdrEncodable {
  late IssuanceRequest request;
  late STRING64 reference;
  late UINT32? allTasks;
  late CreateIssuanceRequestOpExt ext;

  CreateIssuanceRequestOp(
    this.request,
    this.reference,
    this.allTasks,
    this.ext,
  );

  CreateIssuanceRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.request = IssuanceRequest.fromXdr(stream);
    this.reference = stringFromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = CreateIssuanceRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    reference.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreateIssuanceRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateIssuanceRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateIssuanceRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateIssuanceRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CreateIssuanceRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CreateIssuanceRequestOpExtEmptyVersion
    extends CreateIssuanceRequestOpExt {
  CreateIssuanceRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateIssuanceRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CreateIssuanceRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const ASSET_NOT_FOUND = -1;
  static const INVALID_AMOUNT = -2;
  static const REFERENCE_DUPLICATION = -3;
  static const NO_COUNTERPARTY = -4;
  static const NOT_AUTHORIZED = -5;
  static const EXCEEDS_MAX_ISSUANCE_AMOUNT = -6;
  static const RECEIVER_FULL_LINE = -7;
  static const INVALID_CREATOR_DETAILS = -8;
  static const FEE_EXCEEDS_AMOUNT = -9;
  static const REQUIRES_KYC = -10;
  static const REQUIRES_VERIFICATION = -11;
  static const ISSUANCE_TASKS_NOT_FOUND = -12;
  static const SYSTEM_TASKS_NOT_ALLOWED = -13;
  static const INVALID_AMOUNT_PRECISION = -14;
  late int value;

  CreateIssuanceRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateIssuanceRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //:Result of successful application of CreateIssuanceRequest operation
//  struct CreateIssuanceRequestSuccess {
//      //: ID of a newly created issuance request
//      uint64 requestID;
//      //: Account address of the receiver
//      AccountID receiver;
//      //: Indicates whether or not the Issuance request was auto approved and fulfilled
//      bool fulfilled;
//      //: Paid fee
//      Fee fee;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateIssuanceRequestSuccess extends XdrEncodable {
  late UINT64 requestID;
  late ACCOUNTID receiver;
  late bool fulfilled;
  late Fee fee;
  late CreateIssuanceRequestSuccessExt ext;

  CreateIssuanceRequestSuccess(
    this.requestID,
    this.receiver,
    this.fulfilled,
    this.fee,
    this.ext,
  );

  CreateIssuanceRequestSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.receiver = PublicKey.fromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.fee = Fee.fromXdr(stream);
    this.ext = CreateIssuanceRequestSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    receiver.toXdr(stream);
    fulfilled.toXdr(stream);
    fee.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateIssuanceRequestSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateIssuanceRequestSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateIssuanceRequestSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateIssuanceRequestSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CreateIssuanceRequestSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CreateIssuanceRequestSuccessExtEmptyVersion
    extends CreateIssuanceRequestSuccessExt {
  CreateIssuanceRequestSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateIssuanceRequestSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CreateIssuanceRequestResult extends XdrEncodable {
  late CreateIssuanceRequestResultCode discriminant;

  CreateIssuanceRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateIssuanceRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateIssuanceRequestResultCode.SUCCESS:
        return CreateIssuanceRequestResultSuccess.fromXdr(stream);
    }

    return CreateIssuanceRequestResultSuccess.fromXdr(stream);
  }
}

class CreateIssuanceRequestResultSuccess extends CreateIssuanceRequestResult {
  CreateIssuanceRequestResultSuccess(this.success)
      : super(CreateIssuanceRequestResultCode(
            CreateIssuanceRequestResultCode.SUCCESS));
  late CreateIssuanceRequestSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateIssuanceRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateIssuanceRequestResultCode(
            CreateIssuanceRequestResultCode.SUCCESS)) {
    this.success = CreateIssuanceRequestSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateKYCRecoveryRequestOp to create KYC recovery request and set new signers for account
//  struct CreateKYCRecoveryRequestOp
//  {
//      //: ID of a reviewable request. If set 0, request is created, else - request is updated
//      uint64 requestID;
//      //: Account for which signers will be set
//      AccountID targetAccount;
//      //: New signers to set
//      UpdateSignerData signersData<>;
//
//       //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      //: (optional) Bit mask whose flags must be cleared in order for KYC recovery request to be approved, which will be used by key `create_kyc_recovery_tasks`
//      //: instead of key-value
//      uint32* allTasks;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateKYCRecoveryRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late ACCOUNTID targetAccount;
  late List<UpdateSignerData> signersData;
  late LONGSTRING creatorDetails;
  late UINT32? allTasks;
  late CreateKYCRecoveryRequestOpExt ext;

  CreateKYCRecoveryRequestOp(
    this.requestID,
    this.targetAccount,
    this.signersData,
    this.creatorDetails,
    this.allTasks,
    this.ext,
  );

  CreateKYCRecoveryRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.targetAccount = PublicKey.fromXdr(stream);
    length = intFromXdr(stream);
    signersData = <UpdateSignerData>[];
    while (length > 0) {
      signersData.add(UpdateSignerData.fromXdr(stream));
      length--;
    }

    this.creatorDetails = stringFromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = CreateKYCRecoveryRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    targetAccount.toXdr(stream);
    signersData.length.toXdr(stream);
    signersData.forEach((element) {
      element.toXdr(stream);
    });
    creatorDetails.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreateKYCRecoveryRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateKYCRecoveryRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateKYCRecoveryRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateKYCRecoveryRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CreateKYCRecoveryRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CreateKYCRecoveryRequestOpExtEmptyVersion
    extends CreateKYCRecoveryRequestOpExt {
  CreateKYCRecoveryRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateKYCRecoveryRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CreateKYCRecoveryRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_CREATOR_DETAILS = -1;
  static const KYC_RECOVERY_TASKS_NOT_FOUND = -2;
  static const NO_SIGNER_DATA = -3;
  static const SIGNER_DUPLICATION = -4;
  static const INVALID_WEIGHT = -5;
  static const INVALID_DETAILS = -6;
  static const REQUEST_ALREADY_EXISTS = -7;
  static const TARGET_ACCOUNT_NOT_FOUND = -8;
  static const RECOVERY_NOT_ALLOWED = -10;
  static const NOT_ALLOWED_TO_UPDATE_REQUEST = -11;
  static const REQUEST_NOT_FOUND = -12;
  static const INVALID_UPDATE_DATA = -13;
  static const NOT_ALLOWED_TO_SET_TASKS_ON_UPDATE = -14;
  late int value;

  CreateKYCRecoveryRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateKYCRecoveryRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class CreateKYCRecoveryRequestResult extends XdrEncodable {
  late CreateKYCRecoveryRequestResultCode discriminant;

  CreateKYCRecoveryRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateKYCRecoveryRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateKYCRecoveryRequestResultCode.SUCCESS:
        return CreateKYCRecoveryRequestResultSuccess.fromXdr(stream);
    }

    return CreateKYCRecoveryRequestResultSuccess.fromXdr(stream);
  }
}

class CreateKYCRecoveryRequestResultSuccess
    extends CreateKYCRecoveryRequestResult {
  CreateKYCRecoveryRequestResultSuccess(this.success)
      : super(CreateKYCRecoveryRequestResultCode(
            CreateKYCRecoveryRequestResultCode.SUCCESS));
  late CreateKYCRecoveryRequestResultSuccessSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateKYCRecoveryRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateKYCRecoveryRequestResultCode(
            CreateKYCRecoveryRequestResultCode.SUCCESS)) {
    this.success = CreateKYCRecoveryRequestResultSuccessSuccess.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          //: id of the created request
//          uint64 requestID;
//
//          //: Indicates whether or not the KYC Recovery request was auto approved and fulfilled
//          bool fulfilled;
//
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class CreateKYCRecoveryRequestResultSuccessSuccess extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late CreateKYCRecoveryRequestResultSuccessExt ext;

  CreateKYCRecoveryRequestResultSuccessSuccess(
    this.requestID,
    this.fulfilled,
    this.ext,
  );

  CreateKYCRecoveryRequestResultSuccessSuccess.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.ext = CreateKYCRecoveryRequestResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateKYCRecoveryRequestResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateKYCRecoveryRequestResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateKYCRecoveryRequestResultSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateKYCRecoveryRequestResultSuccessExtEmptyVersion.fromXdr(
            stream);
    }

    return CreateKYCRecoveryRequestResultSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CreateKYCRecoveryRequestResultSuccessExtEmptyVersion
    extends CreateKYCRecoveryRequestResultSuccessExt {
  CreateKYCRecoveryRequestResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateKYCRecoveryRequestResultSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

// === xdr source ============================================================

//  //: CreateManageLimitsRequestOp is used to create a reviewable request which, after approval, will update the limits set in the system
//  struct CreateManageLimitsRequestOp
//  {
//      //: Body of the `UpdateLimits` reviewable request to be created
//      LimitsUpdateRequest manageLimitsRequest;
//
//      //: (optional) Bit mask whose flags must be cleared in order for ManageLimits request to be approved, which will be used instead of value from the key-value pair
//      //: by key `limits_update_tasks`
//      uint32* allTasks;
//      //: ID of the LimitsUpdateRequest
//      //: If `requestID == 0`, operation creates a new limits entry; otherwise, it updates the existing one
//      uint64 requestID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateManageLimitsRequestOp extends XdrEncodable {
  late LimitsUpdateRequest manageLimitsRequest;
  late UINT32? allTasks;
  late UINT64 requestID;
  late CreateManageLimitsRequestOpExt ext;

  CreateManageLimitsRequestOp(
    this.manageLimitsRequest,
    this.allTasks,
    this.requestID,
    this.ext,
  );

  CreateManageLimitsRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.manageLimitsRequest = LimitsUpdateRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.requestID = longFromXdr(stream);
    this.ext = CreateManageLimitsRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    manageLimitsRequest.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateManageLimitsRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateManageLimitsRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateManageLimitsRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateManageLimitsRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CreateManageLimitsRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CreateManageLimitsRequestOpExtEmptyVersion
    extends CreateManageLimitsRequestOpExt {
  CreateManageLimitsRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateManageLimitsRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CreateManageLimitsRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MANAGE_LIMITS_REQUEST_REFERENCE_DUPLICATION = -1;
  static const MANAGE_LIMITS_REQUEST_NOT_FOUND = -2;
  static const INVALID_CREATOR_DETAILS = -3;
  static const LIMITS_UPDATE_TASKS_NOT_FOUND = -5;
  static const NOT_ALLOWED_TO_SET_TASKS_ON_UPDATE = -6;
  static const LIMITS_UPDATE_ZERO_TASKS_NOT_ALLOWED = -7;
  late int value;

  CreateManageLimitsRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateManageLimitsRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class CreateManageLimitsRequestResult extends XdrEncodable {
  late CreateManageLimitsRequestResultCode discriminant;

  CreateManageLimitsRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateManageLimitsRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateManageLimitsRequestResultCode.SUCCESS:
        return CreateManageLimitsRequestResultSuccess.fromXdr(stream);
    }

    return CreateManageLimitsRequestResultSuccess.fromXdr(stream);
  }
}

class CreateManageLimitsRequestResultSuccess
    extends CreateManageLimitsRequestResult {
  CreateManageLimitsRequestResultSuccess(this.success)
      : super(CreateManageLimitsRequestResultCode(
            CreateManageLimitsRequestResultCode.SUCCESS));
  late CreateManageLimitsRequestResultSuccessSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateManageLimitsRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateManageLimitsRequestResultCode(
            CreateManageLimitsRequestResultCode.SUCCESS)) {
    this.success =
        CreateManageLimitsRequestResultSuccessSuccess.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          //: ID of the created manage limits request
//          uint64 manageLimitsRequestID;
//          //: Indicates whether or not the `limits update request` request was auto approved and fulfilled
//          bool fulfilled;
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class CreateManageLimitsRequestResultSuccessSuccess extends XdrEncodable {
  late UINT64 manageLimitsRequestID;
  late bool fulfilled;
  late CreateManageLimitsRequestResultSuccessExt ext;

  CreateManageLimitsRequestResultSuccessSuccess(
    this.manageLimitsRequestID,
    this.fulfilled,
    this.ext,
  );

  CreateManageLimitsRequestResultSuccessSuccess.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.manageLimitsRequestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.ext = CreateManageLimitsRequestResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    manageLimitsRequestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateManageLimitsRequestResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateManageLimitsRequestResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateManageLimitsRequestResultSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateManageLimitsRequestResultSuccessExtEmptyVersion.fromXdr(
            stream);
    }

    return CreateManageLimitsRequestResultSuccessExtEmptyVersion.fromXdr(
        stream);
  }
}

class CreateManageLimitsRequestResultSuccessExtEmptyVersion
    extends CreateManageLimitsRequestResultSuccessExt {
  CreateManageLimitsRequestResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateManageLimitsRequestResultSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

// === xdr source ============================================================

//  struct CreateManageOfferRequestOp
//  {
//      //: ManageOfferRequest details
//      ManageOfferRequest request;
//
//      //: (optional) Bit mask whose flags must be cleared in order for CreateSale request to be approved, which will be used by key sale_create_tasks:<asset_code>
//      //: instead of key-value
//      uint32* allTasks;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateManageOfferRequestOp extends XdrEncodable {
  late ManageOfferRequest request;
  late UINT32? allTasks;
  late EmptyExt ext;

  CreateManageOfferRequestOp(
    this.request,
    this.allTasks,
    this.ext,
  );

  CreateManageOfferRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.request = ManageOfferRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

class CreateManageOfferRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_OFFER = -1;
  static const MANAGE_OFFER_TASKS_NOT_FOUND = -2;
  static const INVALID_CREATOR_DETAILS = -3;
  late int value;

  CreateManageOfferRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateManageOfferRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct CreateManagerOfferRequestSuccessResult
//  {
//      //: ID of the ManageOfferRequest
//      uint64 requestID;
//      //: Indicates whether or not the manage offer request was auto approved
//      bool fulfilled;
//
//      //: Result of manage offer application
//      ManageOfferResult* manageOfferResult;
//
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateManagerOfferRequestSuccessResult extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late ManageOfferResult? manageOfferResult;
  late EmptyExt ext;

  CreateManagerOfferRequestSuccessResult(
    this.requestID,
    this.fulfilled,
    this.manageOfferResult,
    this.ext,
  );

  CreateManagerOfferRequestSuccessResult.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    if (boolFromXdr(stream)) {
      this.manageOfferResult = ManageOfferResult.fromXdr(stream);
    } else {
      this.manageOfferResult = null;
    }
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    if (manageOfferResult != null) {
      true.toXdr(stream);
      manageOfferResult?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreateManageOfferRequestResult extends XdrEncodable {
  late CreateManageOfferRequestResultCode discriminant;

  CreateManageOfferRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateManageOfferRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateManageOfferRequestResultCode.SUCCESS:
        return CreateManageOfferRequestResultSuccess.fromXdr(stream);
      case CreateManageOfferRequestResultCode.INVALID_OFFER:
        return CreateManageOfferRequestResultInvalidOffer.fromXdr(stream);
    }

    return CreateManageOfferRequestResultSuccess.fromXdr(stream);
  }
}

class CreateManageOfferRequestResultSuccess
    extends CreateManageOfferRequestResult {
  CreateManageOfferRequestResultSuccess(this.success)
      : super(CreateManageOfferRequestResultCode(
            CreateManageOfferRequestResultCode.SUCCESS));
  late CreateManagerOfferRequestSuccessResult success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateManageOfferRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateManageOfferRequestResultCode(
            CreateManageOfferRequestResultCode.SUCCESS)) {
    this.success = CreateManagerOfferRequestSuccessResult.fromXdr(stream);
  }
}

class CreateManageOfferRequestResultInvalidOffer
    extends CreateManageOfferRequestResult {
  CreateManageOfferRequestResultInvalidOffer(this.manageOfferCode)
      : super(CreateManageOfferRequestResultCode(
            CreateManageOfferRequestResultCode.INVALID_OFFER));
  late ManageOfferResultCode manageOfferCode;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageOfferCode.toXdr(stream);
  }

  CreateManageOfferRequestResultInvalidOffer.fromXdr(XdrDataInputStream stream)
      : super(CreateManageOfferRequestResultCode(
            CreateManageOfferRequestResultCode.INVALID_OFFER)) {
    this.manageOfferCode = ManageOfferResultCode.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct CreatePaymentRequestOp
//  {
//      //: Payment request details
//      CreatePaymentRequest request;
//
//      //: (optional) Bit mask whose flags must be cleared in order for CreateSale request to be approved, which will be used by key sale_create_tasks:<asset_code>
//      //: instead of key-value
//      uint32* allTasks;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreatePaymentRequestOp extends XdrEncodable {
  late CreatePaymentRequest request;
  late UINT32? allTasks;
  late EmptyExt ext;

  CreatePaymentRequestOp(
    this.request,
    this.allTasks,
    this.ext,
  );

  CreatePaymentRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.request = CreatePaymentRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

class CreatePaymentRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_PAYMENT = -1;
  static const PAYMENT_TASKS_NOT_FOUND = -2;
  static const INVALID_CREATOR_DETAILS = -3;
  late int value;

  CreatePaymentRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreatePaymentRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Result of the successful payment request creation
//  struct CreatePaymentRequestSuccessResult
//  {
//      //: ID of the Payment request
//      uint64 requestID;
//      //: Indicates whether or not the payment request was auto approved
//      bool fulfilled;
//
//      //: Result of the payment application
//      PaymentResult* paymentResult;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreatePaymentRequestSuccessResult extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late PaymentResult? paymentResult;
  late EmptyExt ext;

  CreatePaymentRequestSuccessResult(
    this.requestID,
    this.fulfilled,
    this.paymentResult,
    this.ext,
  );

  CreatePaymentRequestSuccessResult.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    if (boolFromXdr(stream)) {
      this.paymentResult = PaymentResult.fromXdr(stream);
    } else {
      this.paymentResult = null;
    }
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    if (paymentResult != null) {
      true.toXdr(stream);
      paymentResult?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreatePaymentRequestResult extends XdrEncodable {
  late CreatePaymentRequestResultCode discriminant;

  CreatePaymentRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreatePaymentRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreatePaymentRequestResultCode.SUCCESS:
        return CreatePaymentRequestResultSuccess.fromXdr(stream);
      case CreatePaymentRequestResultCode.INVALID_PAYMENT:
        return CreatePaymentRequestResultInvalidPayment.fromXdr(stream);
    }

    return CreatePaymentRequestResultSuccess.fromXdr(stream);
  }
}

class CreatePaymentRequestResultSuccess extends CreatePaymentRequestResult {
  CreatePaymentRequestResultSuccess(this.success)
      : super(CreatePaymentRequestResultCode(
            CreatePaymentRequestResultCode.SUCCESS));
  late CreatePaymentRequestSuccessResult success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreatePaymentRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreatePaymentRequestResultCode(
            CreatePaymentRequestResultCode.SUCCESS)) {
    this.success = CreatePaymentRequestSuccessResult.fromXdr(stream);
  }
}

class CreatePaymentRequestResultInvalidPayment
    extends CreatePaymentRequestResult {
  CreatePaymentRequestResultInvalidPayment(this.paymentCode)
      : super(CreatePaymentRequestResultCode(
            CreatePaymentRequestResultCode.INVALID_PAYMENT));
  late PaymentResultCode paymentCode;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    paymentCode.toXdr(stream);
  }

  CreatePaymentRequestResultInvalidPayment.fromXdr(XdrDataInputStream stream)
      : super(CreatePaymentRequestResultCode(
            CreatePaymentRequestResultCode.INVALID_PAYMENT)) {
    this.paymentCode = PaymentResultCode.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreatePreIssuanceRequestOp is used to create a reviewable request,
//  //: which, after admin's approval, will change `availableForIssuance` amount of asset
//  struct CreatePreIssuanceRequestOp
//  {
//      //: Body of PreIssuanceRequest to be created
//      PreIssuanceRequest request;
//
//      //: (optional) Bit mask whose flags must be cleared in order for PreIssuanceRequest to be approved, which will be used by key `preissuance_tasks`
//      //: instead of key-value
//      uint32* allTasks;
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreatePreIssuanceRequestOp extends XdrEncodable {
  late PreIssuanceRequest request;
  late UINT32? allTasks;
  late CreatePreIssuanceRequestOpExt ext;

  CreatePreIssuanceRequestOp(
    this.request,
    this.allTasks,
    this.ext,
  );

  CreatePreIssuanceRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.request = PreIssuanceRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = CreatePreIssuanceRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreatePreIssuanceRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreatePreIssuanceRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreatePreIssuanceRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreatePreIssuanceRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CreatePreIssuanceRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CreatePreIssuanceRequestOpExtEmptyVersion
    extends CreatePreIssuanceRequestOpExt {
  CreatePreIssuanceRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreatePreIssuanceRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CreatePreIssuanceRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const ASSET_NOT_FOUND = -1;
  static const REFERENCE_DUPLICATION = -2;
  static const NOT_AUTHORIZED_UPLOAD = -3;
  static const INVALID_SIGNATURE = -4;
  static const EXCEEDED_MAX_AMOUNT = -5;
  static const INVALID_AMOUNT = -6;
  static const INVALID_REFERENCE = -7;
  static const INCORRECT_AMOUNT_PRECISION = -8;
  static const PREISSUANCE_TASKS_NOT_FOUND = -9;
  static const INVALID_CREATOR_DETAILS = -10;
  late int value;

  CreatePreIssuanceRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreatePreIssuanceRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class CreatePreIssuanceRequestResult extends XdrEncodable {
  late CreatePreIssuanceRequestResultCode discriminant;

  CreatePreIssuanceRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreatePreIssuanceRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreatePreIssuanceRequestResultCode.SUCCESS:
        return CreatePreIssuanceRequestResultSuccess.fromXdr(stream);
    }

    return CreatePreIssuanceRequestResultSuccess.fromXdr(stream);
  }
}

class CreatePreIssuanceRequestResultSuccess
    extends CreatePreIssuanceRequestResult {
  CreatePreIssuanceRequestResultSuccess(this.success)
      : super(CreatePreIssuanceRequestResultCode(
            CreatePreIssuanceRequestResultCode.SUCCESS));
  late CreatePreIssuanceRequestResultSuccessSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreatePreIssuanceRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreatePreIssuanceRequestResultCode(
            CreatePreIssuanceRequestResultCode.SUCCESS)) {
    this.success = CreatePreIssuanceRequestResultSuccessSuccess.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: ID of created or updated request
//          uint64 requestID;
//          //: Indicates whether or not the request was auto approved and fulfilled
//          bool fulfilled;
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//  	}

//  ===========================================================================
class CreatePreIssuanceRequestResultSuccessSuccess extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late CreatePreIssuanceRequestResultSuccessExt ext;

  CreatePreIssuanceRequestResultSuccessSuccess(
    this.requestID,
    this.fulfilled,
    this.ext,
  );

  CreatePreIssuanceRequestResultSuccessSuccess.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.ext = CreatePreIssuanceRequestResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreatePreIssuanceRequestResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreatePreIssuanceRequestResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreatePreIssuanceRequestResultSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreatePreIssuanceRequestResultSuccessExtEmptyVersion.fromXdr(
            stream);
    }

    return CreatePreIssuanceRequestResultSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CreatePreIssuanceRequestResultSuccessExtEmptyVersion
    extends CreatePreIssuanceRequestResultSuccessExt {
  CreatePreIssuanceRequestResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreatePreIssuanceRequestResultSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

// === xdr source ============================================================

//  //: CreateRedemptionRequest operation creates a reviewable request
//  //: that will transfer the specified amount from current holder's balance to destination balance after the reviewer's approval
//  struct CreateRedemptionRequestOp
//  {
//      //: Reference of RedemptionRequest
//      string64 reference; // TODO longstring ?
//      //: Parameters of RedemptionRequest
//      RedemptionRequest redemptionRequest;
//      //: (optional) Bit mask whose flags must be cleared in order for RedemptionRequest to be approved, which will be used by key redemption_tasks
//      //: instead of key-value
//      uint32* allTasks;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CreateRedemptionRequestOp extends XdrEncodable {
  late STRING64 reference;
  late RedemptionRequest redemptionRequest;
  late UINT32? allTasks;
  late CreateRedemptionRequestOpExt ext;

  CreateRedemptionRequestOp(
    this.reference,
    this.redemptionRequest,
    this.allTasks,
    this.ext,
  );

  CreateRedemptionRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.reference = stringFromXdr(stream);
    this.redemptionRequest = RedemptionRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = CreateRedemptionRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    reference.toXdr(stream);
    redemptionRequest.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreateRedemptionRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateRedemptionRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateRedemptionRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateRedemptionRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CreateRedemptionRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CreateRedemptionRequestOpExtEmptyVersion
    extends CreateRedemptionRequestOpExt {
  CreateRedemptionRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateRedemptionRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CreateRedemptionRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_REDEMPTION = -1;
  static const REDEMPTION_TASKS_NOT_FOUND = -2;
  static const INVALID_CREATOR_DETAILS = -3;
  static const INVALID_AMOUNT = -4;
  static const INVALID_REFERENCE = -5;
  static const SOURCE_BALANCE_NOT_EXIST = -6;
  static const INCORRECT_PRECISION = -7;
  static const UNDERFUNDED = -8;
  static const REFERENCE_DUPLICATION = -9;
  static const DST_ACCOUNT_NOT_FOUND = -10;
  static const REDEMPTION_ZERO_TASKS_NOT_ALLOWED = -11;
  static const REDEMPTION_NON_OWNED_ASSET_FORBIDDEN = -12;
  late int value;

  CreateRedemptionRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateRedemptionRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Result of successful application of `CreateRedemptionRequest` operation
//  struct RedemptionRequestResponse {
//      //: ID of a newly created reviewable request
//      uint64 requestID;
//      //: Indicates  whether or not the Redemption request was auto approved and fulfilled
//      bool fulfilled;
//
//      //: ID of destination balance (may be freshly created)
//      BalanceID destinationBalanceID;
//      //: Code of an asset used in payment
//      AssetCode asset;
//      //: Amount sent by the sender
//      uint64 sourceSentUniversal;
//      //: Reserved for future use
//       union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class RedemptionRequestResponse extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late BALANCEID destinationBalanceID;
  late ASSETCODE asset;
  late UINT64 sourceSentUniversal;
  late RedemptionRequestResponseExt ext;

  RedemptionRequestResponse(
    this.requestID,
    this.fulfilled,
    this.destinationBalanceID,
    this.asset,
    this.sourceSentUniversal,
    this.ext,
  );

  RedemptionRequestResponse.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.destinationBalanceID = PublicKey.fromXdr(stream);
    this.asset = stringFromXdr(stream);
    this.sourceSentUniversal = longFromXdr(stream);
    this.ext = RedemptionRequestResponseExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    destinationBalanceID.toXdr(stream);
    asset.toXdr(stream);
    sourceSentUniversal.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class RedemptionRequestResponseExt extends XdrEncodable {
  late LedgerVersion discriminant;

  RedemptionRequestResponseExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static RedemptionRequestResponseExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return RedemptionRequestResponseExtEmptyVersion.fromXdr(stream);
    }

    return RedemptionRequestResponseExtEmptyVersion.fromXdr(stream);
  }
}

class RedemptionRequestResponseExtEmptyVersion
    extends RedemptionRequestResponseExt {
  RedemptionRequestResponseExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  RedemptionRequestResponseExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CreateRedemptionRequestResult extends XdrEncodable {
  late CreateRedemptionRequestResultCode discriminant;

  CreateRedemptionRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateRedemptionRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateRedemptionRequestResultCode.SUCCESS:
        return CreateRedemptionRequestResultSuccess.fromXdr(stream);
    }

    return CreateRedemptionRequestResultSuccess.fromXdr(stream);
  }
}

class CreateRedemptionRequestResultSuccess
    extends CreateRedemptionRequestResult {
  CreateRedemptionRequestResultSuccess(this.redemptionResponse)
      : super(CreateRedemptionRequestResultCode(
            CreateRedemptionRequestResultCode.SUCCESS));
  late RedemptionRequestResponse redemptionResponse;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    redemptionResponse.toXdr(stream);
  }

  CreateRedemptionRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateRedemptionRequestResultCode(
            CreateRedemptionRequestResultCode.SUCCESS)) {
    this.redemptionResponse = RedemptionRequestResponse.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateSaleCreationRequest operation creates SaleCreationRequest or updates the rejected request
//  struct CreateSaleCreationRequestOp
//  {
//      //: ID of the SaleCreationRequest. If set to 0, a new request is created
//      uint64 requestID;
//      //: SaleCreationRequest details
//      SaleCreationRequest request;
//      //: (optional) Bit mask whose flags must be cleared in order for CreateSale request to be approved, which will be used by key sale_create_tasks:<asset_code>
//      //: instead of key-value
//      uint32* allTasks;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CreateSaleCreationRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late SaleCreationRequest request;
  late UINT32? allTasks;
  late CreateSaleCreationRequestOpExt ext;

  CreateSaleCreationRequestOp(
    this.requestID,
    this.request,
    this.allTasks,
    this.ext,
  );

  CreateSaleCreationRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.request = SaleCreationRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = CreateSaleCreationRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreateSaleCreationRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateSaleCreationRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateSaleCreationRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateSaleCreationRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CreateSaleCreationRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CreateSaleCreationRequestOpExtEmptyVersion
    extends CreateSaleCreationRequestOpExt {
  CreateSaleCreationRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateSaleCreationRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CreateSaleCreationRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REQUEST_NOT_FOUND = -1;
  static const BASE_ASSET_OR_ASSET_REQUEST_NOT_FOUND = -2;
  static const QUOTE_ASSET_NOT_FOUND = -3;
  static const START_END_INVALID = -4;
  static const INVALID_END = -5;
  static const INVALID_PRICE = -6;
  static const INVALID_CAP = -7;
  static const INSUFFICIENT_MAX_ISSUANCE = -8;
  static const INVALID_ASSET_PAIR = -9;
  static const REQUEST_OR_SALE_ALREADY_EXISTS = -10;
  static const INSUFFICIENT_PREISSUED = -11;
  static const INVALID_CREATOR_DETAILS = -12;
  static const VERSION_IS_NOT_SUPPORTED_YET = -13;
  static const SALE_CREATE_TASKS_NOT_FOUND = -14;
  static const NOT_ALLOWED_TO_SET_TASKS_ON_UPDATE = -15;
  static const AUTO_REVIEW_FAILED = -16;
  static const EXCEEDED_MAX_RULES_SIZE = -17;
  static const GLOBAL_SPECIFIC_RULE_DUPLICATION = -18;
  static const ACCOUNT_SPECIFIC_RULE_DUPLICATION = -19;
  static const GLOBAL_SPECIFIC_RULE_REQUIRED = -20;
  static const ACCOUNT_NOT_FOUND = -21;
  late int value;

  CreateSaleCreationRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateSaleCreationRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Result of the successful application of CreateSaleCreationRequest operation
//  struct CreateSaleCreationSuccess {
//      //: ID of the SaleCreation request
//      uint64 requestID;
//      //: ID of a newly created sale (if the sale creation request has been auto approved)
//      uint64 saleID;
//      //: Indicates whether or not the sale creation request was auto approved and fulfilled
//      bool fulfilled;
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateSaleCreationSuccess extends XdrEncodable {
  late UINT64 requestID;
  late UINT64 saleID;
  late bool fulfilled;
  late CreateSaleCreationSuccessExt ext;

  CreateSaleCreationSuccess(
    this.requestID,
    this.saleID,
    this.fulfilled,
    this.ext,
  );

  CreateSaleCreationSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.saleID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.ext = CreateSaleCreationSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    saleID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateSaleCreationSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateSaleCreationSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateSaleCreationSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateSaleCreationSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CreateSaleCreationSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CreateSaleCreationSuccessExtEmptyVersion
    extends CreateSaleCreationSuccessExt {
  CreateSaleCreationSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateSaleCreationSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: specifies details on why an auto review has failed
//  struct CreateSaleCreationAutoReviewFailed {
//      //: auto review result
//      ReviewRequestResult reviewRequestRequest;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateSaleCreationAutoReviewFailed extends XdrEncodable {
  late ReviewRequestResult reviewRequestRequest;
  late CreateSaleCreationAutoReviewFailedExt ext;

  CreateSaleCreationAutoReviewFailed(
    this.reviewRequestRequest,
    this.ext,
  );

  CreateSaleCreationAutoReviewFailed.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.reviewRequestRequest = ReviewRequestResult.fromXdr(stream);
    this.ext = CreateSaleCreationAutoReviewFailedExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    reviewRequestRequest.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateSaleCreationAutoReviewFailedExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateSaleCreationAutoReviewFailedExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateSaleCreationAutoReviewFailedExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateSaleCreationAutoReviewFailedExtEmptyVersion.fromXdr(
            stream);
    }

    return CreateSaleCreationAutoReviewFailedExtEmptyVersion.fromXdr(stream);
  }
}

class CreateSaleCreationAutoReviewFailedExtEmptyVersion
    extends CreateSaleCreationAutoReviewFailedExt {
  CreateSaleCreationAutoReviewFailedExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateSaleCreationAutoReviewFailedExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CreateSaleCreationRequestResult extends XdrEncodable {
  late CreateSaleCreationRequestResultCode discriminant;

  CreateSaleCreationRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateSaleCreationRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateSaleCreationRequestResultCode.SUCCESS:
        return CreateSaleCreationRequestResultSuccess.fromXdr(stream);
      case CreateSaleCreationRequestResultCode.AUTO_REVIEW_FAILED:
        return CreateSaleCreationRequestResultAutoReviewFailed.fromXdr(stream);
    }

    return CreateSaleCreationRequestResultSuccess.fromXdr(stream);
  }
}

class CreateSaleCreationRequestResultSuccess
    extends CreateSaleCreationRequestResult {
  CreateSaleCreationRequestResultSuccess(this.success)
      : super(CreateSaleCreationRequestResultCode(
            CreateSaleCreationRequestResultCode.SUCCESS));
  late CreateSaleCreationSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateSaleCreationRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateSaleCreationRequestResultCode(
            CreateSaleCreationRequestResultCode.SUCCESS)) {
    this.success = CreateSaleCreationSuccess.fromXdr(stream);
  }
}

class CreateSaleCreationRequestResultAutoReviewFailed
    extends CreateSaleCreationRequestResult {
  CreateSaleCreationRequestResultAutoReviewFailed(this.autoReviewFailed)
      : super(CreateSaleCreationRequestResultCode(
            CreateSaleCreationRequestResultCode.AUTO_REVIEW_FAILED));
  late CreateSaleCreationAutoReviewFailed autoReviewFailed;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    autoReviewFailed.toXdr(stream);
  }

  CreateSaleCreationRequestResultAutoReviewFailed.fromXdr(
      XdrDataInputStream stream)
      : super(CreateSaleCreationRequestResultCode(
            CreateSaleCreationRequestResultCode.AUTO_REVIEW_FAILED)) {
    this.autoReviewFailed = CreateSaleCreationAutoReviewFailed.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateWithdrawalRequest operation is used to create a reviewable request,
//  //: which, after reviewer's approval, will charge the specified amount from balance and send it to external wallet/account
//  struct CreateWithdrawalRequestOp
//  {
//      //: Withdrawal request to create
//      WithdrawalRequest request;
//      //: (optional) Bit mask whose flags must be cleared in order for WithdrawalRequest to be approved, which will be used by key withdrawal_tasks:<asset_code>
//      //: instead of key-value
//      uint32* allTasks;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CreateWithdrawalRequestOp extends XdrEncodable {
  late WithdrawalRequest request;
  late UINT32? allTasks;
  late CreateWithdrawalRequestOpExt ext;

  CreateWithdrawalRequestOp(
    this.request,
    this.allTasks,
    this.ext,
  );

  CreateWithdrawalRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.request = WithdrawalRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = CreateWithdrawalRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreateWithdrawalRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateWithdrawalRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateWithdrawalRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateWithdrawalRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return CreateWithdrawalRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class CreateWithdrawalRequestOpExtEmptyVersion
    extends CreateWithdrawalRequestOpExt {
  CreateWithdrawalRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateWithdrawalRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CreateWithdrawalRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_AMOUNT = -1;
  static const INVALID_CREATOR_DETAILS = -2;
  static const BALANCE_NOT_FOUND = -3;
  static const ASSET_IS_NOT_WITHDRAWABLE = -4;
  static const CONVERSION_PRICE_IS_NOT_AVAILABLE = -5;
  static const FEE_MISMATCHED = -6;
  static const CONVERSION_OVERFLOW = -7;
  static const CONVERTED_AMOUNT_MISMATCHED = -8;
  static const BALANCE_LOCK_OVERFLOW = -9;
  static const UNDERFUNDED = -10;
  static const INVALID_UNIVERSAL_AMOUNT = -11;
  static const STATS_OVERFLOW = -12;
  static const LIMITS_EXCEEDED = -13;
  static const INVALID_PRE_CONFIRMATION_DETAILS = -14;
  static const LOWER_BOUND_NOT_EXCEEDED = -15;
  static const WITHDRAWAL_TASKS_NOT_FOUND = -16;
  static const NOT_ALLOWED_TO_SET_WITHDRAWAL_TASKS = -17;
  static const WITHDRAWAL_ZERO_TASKS_NOT_ALLOWED = -18;
  late int value;

  CreateWithdrawalRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CreateWithdrawalRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Result of the successful withdrawal request creation
//  struct CreateWithdrawalSuccess {
//      //: ID of a newly created WithdrawalRequest
//      uint64 requestID;
//      //: Indicates whether or not the withdrawal request was auto approved and fulfilled
//      bool fulfilled;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateWithdrawalSuccess extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late CreateWithdrawalSuccessExt ext;

  CreateWithdrawalSuccess(
    this.requestID,
    this.fulfilled,
    this.ext,
  );

  CreateWithdrawalSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.ext = CreateWithdrawalSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateWithdrawalSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateWithdrawalSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateWithdrawalSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateWithdrawalSuccessExtEmptyVersion.fromXdr(stream);
    }

    return CreateWithdrawalSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class CreateWithdrawalSuccessExtEmptyVersion
    extends CreateWithdrawalSuccessExt {
  CreateWithdrawalSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateWithdrawalSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class CreateWithdrawalRequestResult extends XdrEncodable {
  late CreateWithdrawalRequestResultCode discriminant;

  CreateWithdrawalRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateWithdrawalRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CreateWithdrawalRequestResultCode.SUCCESS:
        return CreateWithdrawalRequestResultSuccess.fromXdr(stream);
    }

    return CreateWithdrawalRequestResultSuccess.fromXdr(stream);
  }
}

class CreateWithdrawalRequestResultSuccess
    extends CreateWithdrawalRequestResult {
  CreateWithdrawalRequestResultSuccess(this.success)
      : super(CreateWithdrawalRequestResultCode(
            CreateWithdrawalRequestResultCode.SUCCESS));
  late CreateWithdrawalSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  CreateWithdrawalRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(CreateWithdrawalRequestResultCode(
            CreateWithdrawalRequestResultCode.SUCCESS)) {
    this.success = CreateWithdrawalSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: InitiateKYCRecoveryOp is used to start KYC recovery process
//  struct InitiateKYCRecoveryOp
//  {
//      //: Address of account to be recovered
//      AccountID account;
//      //: New signer to set
//      PublicKey signer;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class InitiateKYCRecoveryOp extends XdrEncodable {
  late ACCOUNTID account;
  late PublicKey signer;
  late InitiateKYCRecoveryOpExt ext;

  InitiateKYCRecoveryOp(
    this.account,
    this.signer,
    this.ext,
  );

  InitiateKYCRecoveryOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.account = PublicKey.fromXdr(stream);
    this.signer = PublicKey.fromXdr(stream);
    this.ext = InitiateKYCRecoveryOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    account.toXdr(stream);
    signer.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class InitiateKYCRecoveryOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  InitiateKYCRecoveryOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static InitiateKYCRecoveryOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return InitiateKYCRecoveryOpExtEmptyVersion.fromXdr(stream);
    }

    return InitiateKYCRecoveryOpExtEmptyVersion.fromXdr(stream);
  }
}

class InitiateKYCRecoveryOpExtEmptyVersion extends InitiateKYCRecoveryOpExt {
  InitiateKYCRecoveryOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  InitiateKYCRecoveryOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class InitiateKYCRecoveryResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const RECOVERY_NOT_ALLOWED = -1;
  static const RECOVERY_SIGNER_ROLE_NOT_FOUND = -2;
  late int value;

  InitiateKYCRecoveryResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  InitiateKYCRecoveryResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class InitiateKYCRecoveryResult extends XdrEncodable {
  late InitiateKYCRecoveryResultCode discriminant;

  InitiateKYCRecoveryResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static InitiateKYCRecoveryResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case InitiateKYCRecoveryResultCode.SUCCESS:
        return InitiateKYCRecoveryResultSuccess.fromXdr(stream);
    }

    return InitiateKYCRecoveryResultSuccess.fromXdr(stream);
  }
}

class InitiateKYCRecoveryResultSuccess extends InitiateKYCRecoveryResult {
  InitiateKYCRecoveryResultSuccess(this.success)
      : super(InitiateKYCRecoveryResultCode(
            InitiateKYCRecoveryResultCode.SUCCESS));
  late InitiateKYCRecoveryResultSuccessSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  InitiateKYCRecoveryResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(InitiateKYCRecoveryResultCode(
            InitiateKYCRecoveryResultCode.SUCCESS)) {
    this.success = InitiateKYCRecoveryResultSuccessSuccess.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//           //: reserved for future use
//           union switch (LedgerVersion v)
//           {
//           case EMPTY_VERSION:
//               void;
//           } ext;
//      }

//  ===========================================================================
class InitiateKYCRecoveryResultSuccessSuccess extends XdrEncodable {
  late InitiateKYCRecoveryResultSuccessExt ext;

  InitiateKYCRecoveryResultSuccessSuccess(
    this.ext,
  );

  InitiateKYCRecoveryResultSuccessSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = InitiateKYCRecoveryResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class InitiateKYCRecoveryResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  InitiateKYCRecoveryResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static InitiateKYCRecoveryResultSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return InitiateKYCRecoveryResultSuccessExtEmptyVersion.fromXdr(stream);
    }

    return InitiateKYCRecoveryResultSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class InitiateKYCRecoveryResultSuccessExtEmptyVersion
    extends InitiateKYCRecoveryResultSuccessExt {
  InitiateKYCRecoveryResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  InitiateKYCRecoveryResultSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

// === xdr source ============================================================

//  //: License operation is used to increase the allowed number of admins and due date
//  struct LicenseOp
//  {
//      //: Allowed number of admins to set in the system
//      uint64 adminCount;
//      //: Expiration date of the license
//      uint64 dueDate;
//      //: Hash of a stamped ledger
//      Hash ledgerHash;
//      //: Hash of the previous license
//      Hash prevLicenseHash;
//      //: Signatures are used to prove authenticity of license that is being submitted.
//      DecoratedSignature signatures<>;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LicenseOp extends XdrEncodable {
  late UINT64 adminCount;
  late UINT64 dueDate;
  late HASH ledgerHash;
  late HASH prevLicenseHash;
  late List<DecoratedSignature> signatures;
  late LicenseOpExt ext;

  LicenseOp(
    this.adminCount,
    this.dueDate,
    this.ledgerHash,
    this.prevLicenseHash,
    this.signatures,
    this.ext,
  );

  LicenseOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.adminCount = longFromXdr(stream);
    this.dueDate = longFromXdr(stream);
    this.ledgerHash = HASH.fromXdr(stream);
    this.prevLicenseHash = HASH.fromXdr(stream);
    length = intFromXdr(stream);
    signatures = <DecoratedSignature>[];
    while (length > 0) {
      signatures.add(DecoratedSignature.fromXdr(stream));
      length--;
    }

    this.ext = LicenseOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    adminCount.toXdr(stream);
    dueDate.toXdr(stream);
    ledgerHash.toXdr(stream);
    prevLicenseHash.toXdr(stream);
    signatures.length.toXdr(stream);
    signatures.forEach((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}

abstract class LicenseOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LicenseOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LicenseOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LicenseOpExtEmptyVersion.fromXdr(stream);
    }

    return LicenseOpExtEmptyVersion.fromXdr(stream);
  }
}

class LicenseOpExtEmptyVersion extends LicenseOpExt {
  LicenseOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LicenseOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class LicenseResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_STAMP = -1;
  static const INVALID_DUE_DATE = -2;
  static const INVALID_SIGNATURE = -3;
  static const EXTRA_SIGNATURES = -4;
  late int value;

  LicenseResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  LicenseResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: LicenseSuccess is a result of successful LicenseOp application
//  struct LicenseSuccess {
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LicenseSuccess extends XdrEncodable {
  late LicenseSuccessExt ext;

  LicenseSuccess(
    this.ext,
  );

  LicenseSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = LicenseSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class LicenseSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LicenseSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LicenseSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LicenseSuccessExtEmptyVersion.fromXdr(stream);
    }

    return LicenseSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class LicenseSuccessExtEmptyVersion extends LicenseSuccessExt {
  LicenseSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LicenseSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class LicenseResult extends XdrEncodable {
  late LicenseResultCode discriminant;

  LicenseResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LicenseResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LicenseResultCode.SUCCESS:
        return LicenseResultSuccess.fromXdr(stream);
    }

    return LicenseResultSuccess.fromXdr(stream);
  }
}

class LicenseResultSuccess extends LicenseResult {
  LicenseResultSuccess(this.success)
      : super(LicenseResultCode(LicenseResultCode.SUCCESS));
  late LicenseSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  LicenseResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(LicenseResultCode(LicenseResultCode.SUCCESS)) {
    this.success = LicenseSuccess.fromXdr(stream);
  }
}

class ManageAccountRoleAction extends XdrEncodable {
  static const CREATE = 0;
  static const UPDATE = 1;
  static const REMOVE = 2;
  late int value;

  ManageAccountRoleAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageAccountRoleAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: CreateAccountRoleData is used to pass necessary params to create a new account role
//  struct CreateAccountRoleData
//  {
//      //: Arbitrary stringified json object that will be attached to the role
//      longstring details;
//      //: Array of ids of existing unique rules
//      uint64 ruleIDs<>;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAccountRoleData extends XdrEncodable {
  late LONGSTRING details;
  late List<UINT64> ruleIDs;
  late CreateAccountRoleDataExt ext;

  CreateAccountRoleData(
    this.details,
    this.ruleIDs,
    this.ext,
  );

  CreateAccountRoleData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.details = stringFromXdr(stream);
    length = intFromXdr(stream);
    ruleIDs = <UINT64>[];
    while (length > 0) {
      ruleIDs.add(longFromXdr(stream));
      length--;
    }

    this.ext = CreateAccountRoleDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ruleIDs.length.toXdr(stream);
    ruleIDs.forEach((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}

abstract class CreateAccountRoleDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateAccountRoleDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAccountRoleDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateAccountRoleDataExtEmptyVersion.fromXdr(stream);
    }

    return CreateAccountRoleDataExtEmptyVersion.fromXdr(stream);
  }
}

class CreateAccountRoleDataExtEmptyVersion extends CreateAccountRoleDataExt {
  CreateAccountRoleDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateAccountRoleDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: UpdateAccountRoleData is used to pass necessary params to update existing account role
//  struct UpdateAccountRoleData
//  {
//      //: Identifier of existing signer role
//      uint64 roleID;
//      //: Arbitrary stringified json object that will be attached to the role
//      longstring details;
//      //: Array of ids of existing unique rules
//      uint64 ruleIDs<>;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class UpdateAccountRoleData extends XdrEncodable {
  late UINT64 roleID;
  late LONGSTRING details;
  late List<UINT64> ruleIDs;
  late UpdateAccountRoleDataExt ext;

  UpdateAccountRoleData(
    this.roleID,
    this.details,
    this.ruleIDs,
    this.ext,
  );

  UpdateAccountRoleData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.roleID = longFromXdr(stream);
    this.details = stringFromXdr(stream);
    length = intFromXdr(stream);
    ruleIDs = <UINT64>[];
    while (length > 0) {
      ruleIDs.add(longFromXdr(stream));
      length--;
    }

    this.ext = UpdateAccountRoleDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    details.toXdr(stream);
    ruleIDs.length.toXdr(stream);
    ruleIDs.forEach((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}

abstract class UpdateAccountRoleDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  UpdateAccountRoleDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static UpdateAccountRoleDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return UpdateAccountRoleDataExtEmptyVersion.fromXdr(stream);
    }

    return UpdateAccountRoleDataExtEmptyVersion.fromXdr(stream);
  }
}

class UpdateAccountRoleDataExtEmptyVersion extends UpdateAccountRoleDataExt {
  UpdateAccountRoleDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  UpdateAccountRoleDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: RemoveAccountRoleData is used to pass necessary params to remove an existing account role
//  struct RemoveAccountRoleData
//  {
//      //: Identifier of an existing account role
//      uint64 roleID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class RemoveAccountRoleData extends XdrEncodable {
  late UINT64 roleID;
  late RemoveAccountRoleDataExt ext;

  RemoveAccountRoleData(
    this.roleID,
    this.ext,
  );

  RemoveAccountRoleData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.roleID = longFromXdr(stream);
    this.ext = RemoveAccountRoleDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class RemoveAccountRoleDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  RemoveAccountRoleDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static RemoveAccountRoleDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return RemoveAccountRoleDataExtEmptyVersion.fromXdr(stream);
    }

    return RemoveAccountRoleDataExtEmptyVersion.fromXdr(stream);
  }
}

class RemoveAccountRoleDataExtEmptyVersion extends RemoveAccountRoleDataExt {
  RemoveAccountRoleDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  RemoveAccountRoleDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: ManageAccountRoleOp is used to create, update or remove account role
//  struct ManageAccountRoleOp
//  {
//      //: data is used to pass one of `ManageAccountRoleAction` with required params
//      union switch (ManageAccountRoleAction action)
//      {
//      case CREATE:
//          CreateAccountRoleData createData;
//      case UPDATE:
//          UpdateAccountRoleData updateData;
//      case REMOVE:
//          RemoveAccountRoleData removeData;
//      } data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageAccountRoleOp extends XdrEncodable {
  late ManageAccountRoleOpData data;
  late ManageAccountRoleOpExt ext;

  ManageAccountRoleOp(
    this.data,
    this.ext,
  );

  ManageAccountRoleOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.data = ManageAccountRoleOpData.fromXdr(stream);
    this.ext = ManageAccountRoleOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageAccountRoleOpData extends XdrEncodable {
  late ManageAccountRoleAction discriminant;

  ManageAccountRoleOpData(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAccountRoleOpData fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageAccountRoleAction.CREATE:
        return ManageAccountRoleOpDataCreate.fromXdr(stream);
      case ManageAccountRoleAction.UPDATE:
        return ManageAccountRoleOpDataUpdate.fromXdr(stream);
      case ManageAccountRoleAction.REMOVE:
        return ManageAccountRoleOpDataRemove.fromXdr(stream);
    }

    return ManageAccountRoleOpDataCreate.fromXdr(stream);
  }
}

class ManageAccountRoleOpDataCreate extends ManageAccountRoleOpData {
  ManageAccountRoleOpDataCreate(this.createData)
      : super(ManageAccountRoleAction(ManageAccountRoleAction.CREATE));
  late CreateAccountRoleData createData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }

  ManageAccountRoleOpDataCreate.fromXdr(XdrDataInputStream stream)
      : super(ManageAccountRoleAction(ManageAccountRoleAction.CREATE)) {
    this.createData = CreateAccountRoleData.fromXdr(stream);
  }
}

class ManageAccountRoleOpDataUpdate extends ManageAccountRoleOpData {
  ManageAccountRoleOpDataUpdate(this.updateData)
      : super(ManageAccountRoleAction(ManageAccountRoleAction.UPDATE));
  late UpdateAccountRoleData updateData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateData.toXdr(stream);
  }

  ManageAccountRoleOpDataUpdate.fromXdr(XdrDataInputStream stream)
      : super(ManageAccountRoleAction(ManageAccountRoleAction.UPDATE)) {
    this.updateData = UpdateAccountRoleData.fromXdr(stream);
  }
}

class ManageAccountRoleOpDataRemove extends ManageAccountRoleOpData {
  ManageAccountRoleOpDataRemove(this.removeData)
      : super(ManageAccountRoleAction(ManageAccountRoleAction.REMOVE));
  late RemoveAccountRoleData removeData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeData.toXdr(stream);
  }

  ManageAccountRoleOpDataRemove.fromXdr(XdrDataInputStream stream)
      : super(ManageAccountRoleAction(ManageAccountRoleAction.REMOVE)) {
    this.removeData = RemoveAccountRoleData.fromXdr(stream);
  }
}

abstract class ManageAccountRoleOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageAccountRoleOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAccountRoleOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageAccountRoleOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageAccountRoleOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageAccountRoleOpExtEmptyVersion extends ManageAccountRoleOpExt {
  ManageAccountRoleOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageAccountRoleOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageAccountRoleResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const ROLE_IS_USED = -2;
  static const INVALID_DETAILS = -3;
  static const NO_SUCH_RULE = -4;
  static const RULE_ID_DUPLICATION = -5;
  late int value;

  ManageAccountRoleResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageAccountRoleResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class ManageAccountRoleResult extends XdrEncodable {
  late ManageAccountRoleResultCode discriminant;

  ManageAccountRoleResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAccountRoleResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageAccountRoleResultCode.SUCCESS:
        return ManageAccountRoleResultSuccess.fromXdr(stream);
      case ManageAccountRoleResultCode.RULE_ID_DUPLICATION:
        return ManageAccountRoleResultRuleIdDuplication.fromXdr(stream);
      case ManageAccountRoleResultCode.NO_SUCH_RULE:
        return ManageAccountRoleResultNoSuchRule.fromXdr(stream);
    }

    return ManageAccountRoleResultSuccess.fromXdr(stream);
  }
}

class ManageAccountRoleResultSuccess extends ManageAccountRoleResult {
  ManageAccountRoleResultSuccess(this.success)
      : super(ManageAccountRoleResultCode(ManageAccountRoleResultCode.SUCCESS));
  late ManageAccountRoleResultSuccessSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageAccountRoleResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(
            ManageAccountRoleResultCode(ManageAccountRoleResultCode.SUCCESS)) {
    this.success = ManageAccountRoleResultSuccessSuccess.fromXdr(stream);
  }
}

class ManageAccountRoleResultRuleIdDuplication extends ManageAccountRoleResult {
  ManageAccountRoleResultRuleIdDuplication(this.ruleID)
      : super(ManageAccountRoleResultCode(
            ManageAccountRoleResultCode.RULE_ID_DUPLICATION));
  late UINT64 ruleID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ruleID.toXdr(stream);
  }

  ManageAccountRoleResultRuleIdDuplication.fromXdr(XdrDataInputStream stream)
      : super(ManageAccountRoleResultCode(
            ManageAccountRoleResultCode.RULE_ID_DUPLICATION)) {
    var length = 0;
    this.ruleID = longFromXdr(stream);
  }
}

class ManageAccountRoleResultNoSuchRule extends ManageAccountRoleResult {
  ManageAccountRoleResultNoSuchRule(this.ruleID)
      : super(ManageAccountRoleResultCode(
            ManageAccountRoleResultCode.NO_SUCH_RULE));
  late UINT64 ruleID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ruleID.toXdr(stream);
  }

  ManageAccountRoleResultNoSuchRule.fromXdr(XdrDataInputStream stream)
      : super(ManageAccountRoleResultCode(
            ManageAccountRoleResultCode.NO_SUCH_RULE)) {
    var length = 0;
    this.ruleID = longFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//              //: id of the role that was managed
//              uint64 roleID;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          }

//  ===========================================================================
class ManageAccountRoleResultSuccessSuccess extends XdrEncodable {
  late UINT64 roleID;
  late ManageAccountRoleResultSuccessExt ext;

  ManageAccountRoleResultSuccessSuccess(
    this.roleID,
    this.ext,
  );

  ManageAccountRoleResultSuccessSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.roleID = longFromXdr(stream);
    this.ext = ManageAccountRoleResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageAccountRoleResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageAccountRoleResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAccountRoleResultSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageAccountRoleResultSuccessExtEmptyVersion.fromXdr(stream);
    }

    return ManageAccountRoleResultSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class ManageAccountRoleResultSuccessExtEmptyVersion
    extends ManageAccountRoleResultSuccessExt {
  ManageAccountRoleResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageAccountRoleResultSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageAccountRuleAction extends XdrEncodable {
  static const CREATE = 0;
  static const UPDATE = 1;
  static const REMOVE = 2;
  late int value;

  ManageAccountRuleAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageAccountRuleAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: CreateAccountRuleData is used to pass necessary params to create a new account rule
//  struct CreateAccountRuleData
//  {
//      //: Resource is used to specify an entity (for some - with properties) that can be managed through operations
//      AccountRuleResource resource;
//      //: Value from enum that can be applied to `resource`
//      AccountRuleAction action;
//      //: True if such `action` on such `resource` is prohibited, otherwise allows
//      bool forbids;
//      //: Arbitrary stringified json object that will be attached to rule
//      longstring details;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAccountRuleData extends XdrEncodable {
  late AccountRuleResource resource;
  late AccountRuleAction action;
  late bool forbids;
  late LONGSTRING details;
  late CreateAccountRuleDataExt ext;

  CreateAccountRuleData(
    this.resource,
    this.action,
    this.forbids,
    this.details,
    this.ext,
  );

  CreateAccountRuleData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.resource = AccountRuleResource.fromXdr(stream);
    this.action = AccountRuleAction.fromXdr(stream);
    this.forbids = boolFromXdr(stream);
    this.details = stringFromXdr(stream);
    this.ext = CreateAccountRuleDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    resource.toXdr(stream);
    action.toXdr(stream);
    forbids.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateAccountRuleDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateAccountRuleDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAccountRuleDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateAccountRuleDataExtEmptyVersion.fromXdr(stream);
    }

    return CreateAccountRuleDataExtEmptyVersion.fromXdr(stream);
  }
}

class CreateAccountRuleDataExtEmptyVersion extends CreateAccountRuleDataExt {
  CreateAccountRuleDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateAccountRuleDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: UpdateAccountRuleData is used to pass necessary params to update existing account rule
//  struct UpdateAccountRuleData
//  {
//      //: Identifier of existing signer rule
//      uint64 ruleID;
//      //: Resource is used to specify entity (for some - with properties) that can be managed through operations
//      AccountRuleResource resource;
//      //: Value from enum that can be applied to `resource`
//      AccountRuleAction action;
//      //: True if such `action` on such `resource` is prohibited, otherwise allows
//      bool forbids;
//      //: Arbitrary stringified json object that will be attached to rule
//      longstring details;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class UpdateAccountRuleData extends XdrEncodable {
  late UINT64 ruleID;
  late AccountRuleResource resource;
  late AccountRuleAction action;
  late bool forbids;
  late LONGSTRING details;
  late UpdateAccountRuleDataExt ext;

  UpdateAccountRuleData(
    this.ruleID,
    this.resource,
    this.action,
    this.forbids,
    this.details,
    this.ext,
  );

  UpdateAccountRuleData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ruleID = longFromXdr(stream);
    this.resource = AccountRuleResource.fromXdr(stream);
    this.action = AccountRuleAction.fromXdr(stream);
    this.forbids = boolFromXdr(stream);
    this.details = stringFromXdr(stream);
    this.ext = UpdateAccountRuleDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    resource.toXdr(stream);
    action.toXdr(stream);
    forbids.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class UpdateAccountRuleDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  UpdateAccountRuleDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static UpdateAccountRuleDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return UpdateAccountRuleDataExtEmptyVersion.fromXdr(stream);
    }

    return UpdateAccountRuleDataExtEmptyVersion.fromXdr(stream);
  }
}

class UpdateAccountRuleDataExtEmptyVersion extends UpdateAccountRuleDataExt {
  UpdateAccountRuleDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  UpdateAccountRuleDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: RemoveAccountRuleData is used to pass necessary params to remove existing account rule
//  struct RemoveAccountRuleData
//  {
//      //: Identifier of existing account rule
//      uint64 ruleID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class RemoveAccountRuleData extends XdrEncodable {
  late UINT64 ruleID;
  late RemoveAccountRuleDataExt ext;

  RemoveAccountRuleData(
    this.ruleID,
    this.ext,
  );

  RemoveAccountRuleData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ruleID = longFromXdr(stream);
    this.ext = RemoveAccountRuleDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class RemoveAccountRuleDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  RemoveAccountRuleDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static RemoveAccountRuleDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return RemoveAccountRuleDataExtEmptyVersion.fromXdr(stream);
    }

    return RemoveAccountRuleDataExtEmptyVersion.fromXdr(stream);
  }
}

class RemoveAccountRuleDataExtEmptyVersion extends RemoveAccountRuleDataExt {
  RemoveAccountRuleDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  RemoveAccountRuleDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: ManageAccountRuleOp is used to create, update or remove account rule
//  struct ManageAccountRuleOp
//  {
//      //: data is used to pass one of `ManageAccountRuleAction` with required params
//      union switch (ManageAccountRuleAction action)
//      {
//      case CREATE:
//          CreateAccountRuleData createData;
//      case UPDATE:
//          UpdateAccountRuleData updateData;
//      case REMOVE:
//          RemoveAccountRuleData removeData;
//      } data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageAccountRuleOp extends XdrEncodable {
  late ManageAccountRuleOpData data;
  late ManageAccountRuleOpExt ext;

  ManageAccountRuleOp(
    this.data,
    this.ext,
  );

  ManageAccountRuleOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.data = ManageAccountRuleOpData.fromXdr(stream);
    this.ext = ManageAccountRuleOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageAccountRuleOpData extends XdrEncodable {
  late ManageAccountRuleAction discriminant;

  ManageAccountRuleOpData(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAccountRuleOpData fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageAccountRuleAction.CREATE:
        return ManageAccountRuleOpDataCreate.fromXdr(stream);
      case ManageAccountRuleAction.UPDATE:
        return ManageAccountRuleOpDataUpdate.fromXdr(stream);
      case ManageAccountRuleAction.REMOVE:
        return ManageAccountRuleOpDataRemove.fromXdr(stream);
    }

    return ManageAccountRuleOpDataCreate.fromXdr(stream);
  }
}

class ManageAccountRuleOpDataCreate extends ManageAccountRuleOpData {
  ManageAccountRuleOpDataCreate(this.createData)
      : super(ManageAccountRuleAction(ManageAccountRuleAction.CREATE));
  late CreateAccountRuleData createData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }

  ManageAccountRuleOpDataCreate.fromXdr(XdrDataInputStream stream)
      : super(ManageAccountRuleAction(ManageAccountRuleAction.CREATE)) {
    this.createData = CreateAccountRuleData.fromXdr(stream);
  }
}

class ManageAccountRuleOpDataUpdate extends ManageAccountRuleOpData {
  ManageAccountRuleOpDataUpdate(this.updateData)
      : super(ManageAccountRuleAction(ManageAccountRuleAction.UPDATE));
  late UpdateAccountRuleData updateData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateData.toXdr(stream);
  }

  ManageAccountRuleOpDataUpdate.fromXdr(XdrDataInputStream stream)
      : super(ManageAccountRuleAction(ManageAccountRuleAction.UPDATE)) {
    this.updateData = UpdateAccountRuleData.fromXdr(stream);
  }
}

class ManageAccountRuleOpDataRemove extends ManageAccountRuleOpData {
  ManageAccountRuleOpDataRemove(this.removeData)
      : super(ManageAccountRuleAction(ManageAccountRuleAction.REMOVE));
  late RemoveAccountRuleData removeData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeData.toXdr(stream);
  }

  ManageAccountRuleOpDataRemove.fromXdr(XdrDataInputStream stream)
      : super(ManageAccountRuleAction(ManageAccountRuleAction.REMOVE)) {
    this.removeData = RemoveAccountRuleData.fromXdr(stream);
  }
}

abstract class ManageAccountRuleOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageAccountRuleOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAccountRuleOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageAccountRuleOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageAccountRuleOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageAccountRuleOpExtEmptyVersion extends ManageAccountRuleOpExt {
  ManageAccountRuleOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageAccountRuleOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageAccountRuleResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const RULE_IS_USED = -2;
  static const INVALID_DETAILS = -3;
  static const INVALID_ACTION = -4;
  late int value;

  ManageAccountRuleResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageAccountRuleResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class ManageAccountRuleResult extends XdrEncodable {
  late ManageAccountRuleResultCode discriminant;

  ManageAccountRuleResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAccountRuleResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageAccountRuleResultCode.SUCCESS:
        return ManageAccountRuleResultSuccess.fromXdr(stream);
      case ManageAccountRuleResultCode.RULE_IS_USED:
        return ManageAccountRuleResultRuleIsUsed.fromXdr(stream);
    }

    return ManageAccountRuleResultSuccess.fromXdr(stream);
  }
}

class ManageAccountRuleResultSuccess extends ManageAccountRuleResult {
  ManageAccountRuleResultSuccess(this.success)
      : super(ManageAccountRuleResultCode(ManageAccountRuleResultCode.SUCCESS));
  late ManageAccountRuleResultSuccessSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageAccountRuleResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(
            ManageAccountRuleResultCode(ManageAccountRuleResultCode.SUCCESS)) {
    this.success = ManageAccountRuleResultSuccessSuccess.fromXdr(stream);
  }
}

class ManageAccountRuleResultRuleIsUsed extends ManageAccountRuleResult {
  ManageAccountRuleResultRuleIsUsed(this.roleIDs)
      : super(ManageAccountRuleResultCode(
            ManageAccountRuleResultCode.RULE_IS_USED));
  late List<UINT64> roleIDs;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    roleIDs.length.toXdr(stream);
    roleIDs.forEach((element) {
      element.toXdr(stream);
    });
  }

  ManageAccountRuleResultRuleIsUsed.fromXdr(XdrDataInputStream stream)
      : super(ManageAccountRuleResultCode(
            ManageAccountRuleResultCode.RULE_IS_USED)) {
    var length = 0;
    length = intFromXdr(stream);
    roleIDs = <UINT64>[];
    while (length > 0) {
      roleIDs.add(longFromXdr(stream));
      length--;
    }
  }
}
// === xdr source ============================================================

//  struct {
//              //: id of the rule that was managed
//              uint64 ruleID;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          }

//  ===========================================================================
class ManageAccountRuleResultSuccessSuccess extends XdrEncodable {
  late UINT64 ruleID;
  late ManageAccountRuleResultSuccessExt ext;

  ManageAccountRuleResultSuccessSuccess(
    this.ruleID,
    this.ext,
  );

  ManageAccountRuleResultSuccessSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ruleID = longFromXdr(stream);
    this.ext = ManageAccountRuleResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageAccountRuleResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageAccountRuleResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAccountRuleResultSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageAccountRuleResultSuccessExtEmptyVersion.fromXdr(stream);
    }

    return ManageAccountRuleResultSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class ManageAccountRuleResultSuccessExtEmptyVersion
    extends ManageAccountRuleResultSuccessExt {
  ManageAccountRuleResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageAccountRuleResultSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageAccountSpecificRuleAction extends XdrEncodable {
  static const CREATE = 0;
  static const REMOVE = 1;
  late int value;

  ManageAccountSpecificRuleAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageAccountSpecificRuleAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: CreateAccountSpecificRuleData is used to pass necessary params to create a new account specific rule
//  struct CreateAccountSpecificRuleData
//  {
//      //: ledgerKey is used to specify an entity with primary key that can be used through operations
//      LedgerKey ledgerKey;
//      //: Certain account for which rule is applied, null means rule is global
//      AccountID* accountID;
//      //: True if such rule is deniable, otherwise allows
//      bool forbids;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAccountSpecificRuleData extends XdrEncodable {
  late LedgerKey ledgerKey;
  late ACCOUNTID? accountID;
  late bool forbids;
  late CreateAccountSpecificRuleDataExt ext;

  CreateAccountSpecificRuleData(
    this.ledgerKey,
    this.accountID,
    this.forbids,
    this.ext,
  );

  CreateAccountSpecificRuleData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ledgerKey = LedgerKey.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.accountID = PublicKey.fromXdr(stream);
    } else {
      this.accountID = null;
    }
    this.forbids = boolFromXdr(stream);
    this.ext = CreateAccountSpecificRuleDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ledgerKey.toXdr(stream);
    if (accountID != null) {
      true.toXdr(stream);
      accountID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    forbids.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateAccountSpecificRuleDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateAccountSpecificRuleDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAccountSpecificRuleDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateAccountSpecificRuleDataExtEmptyVersion.fromXdr(stream);
    }

    return CreateAccountSpecificRuleDataExtEmptyVersion.fromXdr(stream);
  }
}

class CreateAccountSpecificRuleDataExtEmptyVersion
    extends CreateAccountSpecificRuleDataExt {
  CreateAccountSpecificRuleDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateAccountSpecificRuleDataExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: RemoveAccountSpecificRuleData is used to pass necessary params to remove existing account specific rule
//  struct RemoveAccountSpecificRuleData
//  {
//      //: Identifier of existing account specific rule
//      uint64 ruleID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class RemoveAccountSpecificRuleData extends XdrEncodable {
  late UINT64 ruleID;
  late RemoveAccountSpecificRuleDataExt ext;

  RemoveAccountSpecificRuleData(
    this.ruleID,
    this.ext,
  );

  RemoveAccountSpecificRuleData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ruleID = longFromXdr(stream);
    this.ext = RemoveAccountSpecificRuleDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class RemoveAccountSpecificRuleDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  RemoveAccountSpecificRuleDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static RemoveAccountSpecificRuleDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return RemoveAccountSpecificRuleDataExtEmptyVersion.fromXdr(stream);
    }

    return RemoveAccountSpecificRuleDataExtEmptyVersion.fromXdr(stream);
  }
}

class RemoveAccountSpecificRuleDataExtEmptyVersion
    extends RemoveAccountSpecificRuleDataExt {
  RemoveAccountSpecificRuleDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  RemoveAccountSpecificRuleDataExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: ManageAccountSpecificRuleOp is used to create or remove account specific rule
//  struct ManageAccountSpecificRuleOp
//  {
//      //: data is used to pass one of `ManageAccountSpecificRuleAction` with required params
//      union switch (ManageAccountSpecificRuleAction action)
//      {
//      case CREATE:
//          CreateAccountSpecificRuleData createData;
//      case REMOVE:
//          RemoveAccountSpecificRuleData removeData;
//      } data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageAccountSpecificRuleOp extends XdrEncodable {
  late ManageAccountSpecificRuleOpData data;
  late ManageAccountSpecificRuleOpExt ext;

  ManageAccountSpecificRuleOp(
    this.data,
    this.ext,
  );

  ManageAccountSpecificRuleOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.data = ManageAccountSpecificRuleOpData.fromXdr(stream);
    this.ext = ManageAccountSpecificRuleOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageAccountSpecificRuleOpData extends XdrEncodable {
  late ManageAccountSpecificRuleAction discriminant;

  ManageAccountSpecificRuleOpData(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAccountSpecificRuleOpData fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageAccountSpecificRuleAction.CREATE:
        return ManageAccountSpecificRuleOpDataCreate.fromXdr(stream);
      case ManageAccountSpecificRuleAction.REMOVE:
        return ManageAccountSpecificRuleOpDataRemove.fromXdr(stream);
    }

    return ManageAccountSpecificRuleOpDataCreate.fromXdr(stream);
  }
}

class ManageAccountSpecificRuleOpDataCreate
    extends ManageAccountSpecificRuleOpData {
  ManageAccountSpecificRuleOpDataCreate(this.createData)
      : super(ManageAccountSpecificRuleAction(
            ManageAccountSpecificRuleAction.CREATE));
  late CreateAccountSpecificRuleData createData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }

  ManageAccountSpecificRuleOpDataCreate.fromXdr(XdrDataInputStream stream)
      : super(ManageAccountSpecificRuleAction(
            ManageAccountSpecificRuleAction.CREATE)) {
    this.createData = CreateAccountSpecificRuleData.fromXdr(stream);
  }
}

class ManageAccountSpecificRuleOpDataRemove
    extends ManageAccountSpecificRuleOpData {
  ManageAccountSpecificRuleOpDataRemove(this.removeData)
      : super(ManageAccountSpecificRuleAction(
            ManageAccountSpecificRuleAction.REMOVE));
  late RemoveAccountSpecificRuleData removeData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeData.toXdr(stream);
  }

  ManageAccountSpecificRuleOpDataRemove.fromXdr(XdrDataInputStream stream)
      : super(ManageAccountSpecificRuleAction(
            ManageAccountSpecificRuleAction.REMOVE)) {
    this.removeData = RemoveAccountSpecificRuleData.fromXdr(stream);
  }
}

abstract class ManageAccountSpecificRuleOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageAccountSpecificRuleOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAccountSpecificRuleOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageAccountSpecificRuleOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageAccountSpecificRuleOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageAccountSpecificRuleOpExtEmptyVersion
    extends ManageAccountSpecificRuleOpExt {
  ManageAccountSpecificRuleOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageAccountSpecificRuleOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageAccountSpecificRuleResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const SALE_NOT_FOUND = -2;
  static const NOT_AUTHORIZED = -3;
  static const ALREADY_EXISTS = -4;
  static const REVERSED_ALREADY_EXISTS = -5;
  static const ENTRY_TYPE_NOT_SUPPORTED = -6;
  static const ACCOUNT_NOT_FOUND = -7;
  static const SPECIFIC_RULE_NOT_SUPPORTED = -8;
  static const REMOVING_GLOBAL_RULE_FORBIDDEN = -9;
  late int value;

  ManageAccountSpecificRuleResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageAccountSpecificRuleResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class ManageAccountSpecificRuleResult extends XdrEncodable {
  late ManageAccountSpecificRuleResultCode discriminant;

  ManageAccountSpecificRuleResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAccountSpecificRuleResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageAccountSpecificRuleResultCode.SUCCESS:
        return ManageAccountSpecificRuleResultSuccess.fromXdr(stream);
    }

    return ManageAccountSpecificRuleResultSuccess.fromXdr(stream);
  }
}

class ManageAccountSpecificRuleResultSuccess
    extends ManageAccountSpecificRuleResult {
  ManageAccountSpecificRuleResultSuccess(this.success)
      : super(ManageAccountSpecificRuleResultCode(
            ManageAccountSpecificRuleResultCode.SUCCESS));
  late ManageAccountSpecificRuleResultSuccessSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageAccountSpecificRuleResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageAccountSpecificRuleResultCode(
            ManageAccountSpecificRuleResultCode.SUCCESS)) {
    this.success =
        ManageAccountSpecificRuleResultSuccessSuccess.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          //: id of the rule that was managed
//          uint64 ruleID;
//
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class ManageAccountSpecificRuleResultSuccessSuccess extends XdrEncodable {
  late UINT64 ruleID;
  late ManageAccountSpecificRuleResultSuccessExt ext;

  ManageAccountSpecificRuleResultSuccessSuccess(
    this.ruleID,
    this.ext,
  );

  ManageAccountSpecificRuleResultSuccessSuccess.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.ruleID = longFromXdr(stream);
    this.ext = ManageAccountSpecificRuleResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageAccountSpecificRuleResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageAccountSpecificRuleResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAccountSpecificRuleResultSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageAccountSpecificRuleResultSuccessExtEmptyVersion.fromXdr(
            stream);
    }

    return ManageAccountSpecificRuleResultSuccessExtEmptyVersion.fromXdr(
        stream);
  }
}

class ManageAccountSpecificRuleResultSuccessExtEmptyVersion
    extends ManageAccountSpecificRuleResultSuccessExt {
  ManageAccountSpecificRuleResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageAccountSpecificRuleResultSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageAssetPairAction extends XdrEncodable {
  static const CREATE = 0;
  static const UPDATE_PRICE = 1;
  static const UPDATE_POLICIES = 2;
  late int value;

  ManageAssetPairAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageAssetPairAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: `ManageAssetPairOp` either creates new asset pairs or updates prices or policies of existing [asset pairs](#operation/assetPairResources)
//  struct ManageAssetPairOp
//  {
//      //: Defines a ManageBalanceAction that will be performed on an asset pair
//      ManageAssetPairAction action;
//      //: Defines a base asset of an asset pair
//      AssetCode base;
//      //: Defines a base asset of an asset pair
//      AssetCode quote;
//
//      //: New physical price of the asset pair which would be set after successful `ManageAssetPairOp` application
//      int64 physicalPrice;
//
//      //: New correction of the asset pair physical price in percents
//      int64 physicalPriceCorrection;
//      //: New maximal price step of asset pair
//      int64 maxPriceStep;
//
//      //: Bitmask of asset policies set by the creator or corrected by manage asset operations
//      int32 policies;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageAssetPairOp extends XdrEncodable {
  late ManageAssetPairAction action;
  late ASSETCODE base;
  late ASSETCODE quote;
  late INT64 physicalPrice;
  late INT64 physicalPriceCorrection;
  late INT64 maxPriceStep;
  late INT32 policies;
  late ManageAssetPairOpExt ext;

  ManageAssetPairOp(
    this.action,
    this.base,
    this.quote,
    this.physicalPrice,
    this.physicalPriceCorrection,
    this.maxPriceStep,
    this.policies,
    this.ext,
  );

  ManageAssetPairOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.action = ManageAssetPairAction.fromXdr(stream);
    this.base = stringFromXdr(stream);
    this.quote = stringFromXdr(stream);
    this.physicalPrice = longFromXdr(stream);
    this.physicalPriceCorrection = longFromXdr(stream);
    this.maxPriceStep = longFromXdr(stream);
    this.policies = intFromXdr(stream);
    this.ext = ManageAssetPairOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    action.toXdr(stream);
    base.toXdr(stream);
    quote.toXdr(stream);
    physicalPrice.toXdr(stream);
    physicalPriceCorrection.toXdr(stream);
    maxPriceStep.toXdr(stream);
    policies.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageAssetPairOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageAssetPairOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAssetPairOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageAssetPairOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageAssetPairOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageAssetPairOpExtEmptyVersion extends ManageAssetPairOpExt {
  ManageAssetPairOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageAssetPairOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageAssetPairResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const ALREADY_EXISTS = -2;
  static const MALFORMED = -3;
  static const INVALID_ASSET = -4;
  static const INVALID_ACTION = -5;
  static const INVALID_POLICIES = -6;
  static const ASSET_NOT_FOUND = -7;
  static const SAME_ASSET = -8;
  late int value;

  ManageAssetPairResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageAssetPairResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: `ManageAssetPairSuccess` represents a successful result of `ManageAssetPairOp`
//  struct ManageAssetPairSuccess
//  {
//      //: Price of an asset pair after the operation
//      int64 currentPrice;
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageAssetPairSuccess extends XdrEncodable {
  late INT64 currentPrice;
  late ManageAssetPairSuccessExt ext;

  ManageAssetPairSuccess(
    this.currentPrice,
    this.ext,
  );

  ManageAssetPairSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.currentPrice = longFromXdr(stream);
    this.ext = ManageAssetPairSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    currentPrice.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageAssetPairSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageAssetPairSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAssetPairSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageAssetPairSuccessExtEmptyVersion.fromXdr(stream);
    }

    return ManageAssetPairSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class ManageAssetPairSuccessExtEmptyVersion extends ManageAssetPairSuccessExt {
  ManageAssetPairSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageAssetPairSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class ManageAssetPairResult extends XdrEncodable {
  late ManageAssetPairResultCode discriminant;

  ManageAssetPairResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAssetPairResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageAssetPairResultCode.SUCCESS:
        return ManageAssetPairResultSuccess.fromXdr(stream);
    }

    return ManageAssetPairResultSuccess.fromXdr(stream);
  }
}

class ManageAssetPairResultSuccess extends ManageAssetPairResult {
  ManageAssetPairResultSuccess(this.success)
      : super(ManageAssetPairResultCode(ManageAssetPairResultCode.SUCCESS));
  late ManageAssetPairSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageAssetPairResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageAssetPairResultCode(ManageAssetPairResultCode.SUCCESS)) {
    this.success = ManageAssetPairSuccess.fromXdr(stream);
  }
}

class ManageAssetAction extends XdrEncodable {
  static const CREATE_ASSET_CREATION_REQUEST = 0;
  static const CREATE_ASSET_UPDATE_REQUEST = 1;
  static const CANCEL_ASSET_REQUEST = 2;
  static const CHANGE_PREISSUED_ASSET_SIGNER = 3;
  static const UPDATE_MAX_ISSUANCE = 4;
  late int value;

  ManageAssetAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageAssetAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: CancelAssetRequest is used to cancel an `UPDATE_ASSET` or `CREATE_ASSET` request
//  struct CancelAssetRequest
//  {
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CancelAssetRequest extends XdrEncodable {
  late CancelAssetRequestExt ext;

  CancelAssetRequest(
    this.ext,
  );

  CancelAssetRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = CancelAssetRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class CancelAssetRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelAssetRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelAssetRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelAssetRequestExtEmptyVersion.fromXdr(stream);
    }

    return CancelAssetRequestExtEmptyVersion.fromXdr(stream);
  }
}

class CancelAssetRequestExtEmptyVersion extends CancelAssetRequestExt {
  CancelAssetRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelAssetRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: UpdateMaxIssuance is used to update max issuance amount of an asset.
//  struct UpdateMaxIssuance
//  {
//      //: `assetCode` defines an asset entry that will be updated
//      AssetCode assetCode;
//      //: new max issuance amount for an asset entry
//      uint64 maxIssuanceAmount;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class UpdateMaxIssuance extends XdrEncodable {
  late ASSETCODE assetCode;
  late UINT64 maxIssuanceAmount;
  late UpdateMaxIssuanceExt ext;

  UpdateMaxIssuance(
    this.assetCode,
    this.maxIssuanceAmount,
    this.ext,
  );

  UpdateMaxIssuance.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.assetCode = stringFromXdr(stream);
    this.maxIssuanceAmount = longFromXdr(stream);
    this.ext = UpdateMaxIssuanceExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    maxIssuanceAmount.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class UpdateMaxIssuanceExt extends XdrEncodable {
  late LedgerVersion discriminant;

  UpdateMaxIssuanceExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static UpdateMaxIssuanceExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return UpdateMaxIssuanceExtEmptyVersion.fromXdr(stream);
    }

    return UpdateMaxIssuanceExtEmptyVersion.fromXdr(stream);
  }
}

class UpdateMaxIssuanceExtEmptyVersion extends UpdateMaxIssuanceExt {
  UpdateMaxIssuanceExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  UpdateMaxIssuanceExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: ManageAssetOp is used to:
//  //: * create or update `CREATE_ASSET` request;
//  //: * create or update `UPDATE_ASSET` request;
//  //: * cancel `CREATE_ASSET` or `UPDATE_ASSET` request
//  //: * change asset pre issuer
//  //: * update max issuance of an asset
//  struct ManageAssetOp
//  {
//      //: ID of a reviewable request
//      //: If `requestID == 0`, operation creates a new reviewable request; otherwise, it updates the existing one
//      uint64 requestID;
//
//      //: data is used to pass one of `ManageAssetAction` with required params
//      union switch (ManageAssetAction action)
//      {
//      case CREATE_ASSET_CREATION_REQUEST:
//          //: Is used to pass required fields for `CREATE_ASSET`
//          struct
//          {
//              //: Is used to pass required fields to create an asset entry
//              AssetCreationRequest createAsset;
//              //: (optional) Bit mask whose flags must be cleared in order for `CREATE_ASSET` request to be approved, which will be used by key `asset_create_tasks`
//              //: instead of key-value
//              uint32* allTasks;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          } createAssetCreationRequest;
//      case CREATE_ASSET_UPDATE_REQUEST:
//          //: Is used to pass needed fields for `UPDATE_ASSET`
//          struct
//          {
//              //: Is used to pass required fields to update an asset entry
//              AssetUpdateRequest updateAsset;
//              //: (optional) Bit mask whose flags must be cleared in order for `UPDATE_ASSET` request to be approved, which will be used
//              //: instead of key-value by key `asset_update_tasks`
//              uint32* allTasks;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          } createAssetUpdateRequest;
//      case CANCEL_ASSET_REQUEST:
//          //: Reserved for future use
//          CancelAssetRequest cancelRequest;
//      case CHANGE_PREISSUED_ASSET_SIGNER:
//          //: Is used to pass required fields to change an asset pre issuer
//          AssetChangePreissuedSigner changePreissuedSigner;
//      case UPDATE_MAX_ISSUANCE:
//          //: Is used to update max issuance of asset
//          UpdateMaxIssuance updateMaxIssuance;
//      } request;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageAssetOp extends XdrEncodable {
  late UINT64 requestID;
  late ManageAssetOpRequest request;
  late ManageAssetOpExt ext;

  ManageAssetOp(
    this.requestID,
    this.request,
    this.ext,
  );

  ManageAssetOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.request = ManageAssetOpRequest.fromXdr(stream);
    this.ext = ManageAssetOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    request.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageAssetOpRequest extends XdrEncodable {
  late ManageAssetAction discriminant;

  ManageAssetOpRequest(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAssetOpRequest fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageAssetAction.CREATE_ASSET_CREATION_REQUEST:
        return ManageAssetOpRequestCreateAssetCreationRequest.fromXdr(stream);
      case ManageAssetAction.CREATE_ASSET_UPDATE_REQUEST:
        return ManageAssetOpRequestCreateAssetUpdateRequest.fromXdr(stream);
      case ManageAssetAction.CANCEL_ASSET_REQUEST:
        return ManageAssetOpRequestCancelAssetRequest.fromXdr(stream);
      case ManageAssetAction.CHANGE_PREISSUED_ASSET_SIGNER:
        return ManageAssetOpRequestChangePreissuedAssetSigner.fromXdr(stream);
      case ManageAssetAction.UPDATE_MAX_ISSUANCE:
        return ManageAssetOpRequestUpdateMaxIssuance.fromXdr(stream);
    }

    return ManageAssetOpRequestCreateAssetCreationRequest.fromXdr(stream);
  }
}

class ManageAssetOpRequestCreateAssetCreationRequest
    extends ManageAssetOpRequest {
  ManageAssetOpRequestCreateAssetCreationRequest(
      this.createAssetCreationRequest)
      : super(
            ManageAssetAction(ManageAssetAction.CREATE_ASSET_CREATION_REQUEST));
  late ManageAssetOpCreateAssetCreationRequestCreateAssetCreationRequest
      createAssetCreationRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAssetCreationRequest.toXdr(stream);
  }

  ManageAssetOpRequestCreateAssetCreationRequest.fromXdr(
      XdrDataInputStream stream)
      : super(ManageAssetAction(
            ManageAssetAction.CREATE_ASSET_CREATION_REQUEST)) {
    this.createAssetCreationRequest =
        ManageAssetOpCreateAssetCreationRequestCreateAssetCreationRequest
            .fromXdr(stream);
  }
}

class ManageAssetOpRequestCreateAssetUpdateRequest
    extends ManageAssetOpRequest {
  ManageAssetOpRequestCreateAssetUpdateRequest(this.createAssetUpdateRequest)
      : super(ManageAssetAction(ManageAssetAction.CREATE_ASSET_UPDATE_REQUEST));
  late ManageAssetOpCreateAssetUpdateRequestCreateAssetUpdateRequest
      createAssetUpdateRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAssetUpdateRequest.toXdr(stream);
  }

  ManageAssetOpRequestCreateAssetUpdateRequest.fromXdr(
      XdrDataInputStream stream)
      : super(
            ManageAssetAction(ManageAssetAction.CREATE_ASSET_UPDATE_REQUEST)) {
    this.createAssetUpdateRequest =
        ManageAssetOpCreateAssetUpdateRequestCreateAssetUpdateRequest.fromXdr(
            stream);
  }
}

class ManageAssetOpRequestCancelAssetRequest extends ManageAssetOpRequest {
  ManageAssetOpRequestCancelAssetRequest(this.cancelRequest)
      : super(ManageAssetAction(ManageAssetAction.CANCEL_ASSET_REQUEST));
  late CancelAssetRequest cancelRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelRequest.toXdr(stream);
  }

  ManageAssetOpRequestCancelAssetRequest.fromXdr(XdrDataInputStream stream)
      : super(ManageAssetAction(ManageAssetAction.CANCEL_ASSET_REQUEST)) {
    this.cancelRequest = CancelAssetRequest.fromXdr(stream);
  }
}

class ManageAssetOpRequestChangePreissuedAssetSigner
    extends ManageAssetOpRequest {
  ManageAssetOpRequestChangePreissuedAssetSigner(this.changePreissuedSigner)
      : super(
            ManageAssetAction(ManageAssetAction.CHANGE_PREISSUED_ASSET_SIGNER));
  late AssetChangePreissuedSigner changePreissuedSigner;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    changePreissuedSigner.toXdr(stream);
  }

  ManageAssetOpRequestChangePreissuedAssetSigner.fromXdr(
      XdrDataInputStream stream)
      : super(ManageAssetAction(
            ManageAssetAction.CHANGE_PREISSUED_ASSET_SIGNER)) {
    this.changePreissuedSigner = AssetChangePreissuedSigner.fromXdr(stream);
  }
}

class ManageAssetOpRequestUpdateMaxIssuance extends ManageAssetOpRequest {
  ManageAssetOpRequestUpdateMaxIssuance(this.updateMaxIssuance)
      : super(ManageAssetAction(ManageAssetAction.UPDATE_MAX_ISSUANCE));
  late UpdateMaxIssuance updateMaxIssuance;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateMaxIssuance.toXdr(stream);
  }

  ManageAssetOpRequestUpdateMaxIssuance.fromXdr(XdrDataInputStream stream)
      : super(ManageAssetAction(ManageAssetAction.UPDATE_MAX_ISSUANCE)) {
    this.updateMaxIssuance = UpdateMaxIssuance.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              //: Is used to pass required fields to create an asset entry
//              AssetCreationRequest createAsset;
//              //: (optional) Bit mask whose flags must be cleared in order for `CREATE_ASSET` request to be approved, which will be used by key `asset_create_tasks`
//              //: instead of key-value
//              uint32* allTasks;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          }

//  ===========================================================================
class ManageAssetOpCreateAssetCreationRequestCreateAssetCreationRequest
    extends XdrEncodable {
  late AssetCreationRequest createAsset;
  late UINT32? allTasks;
  late ManageAssetOpCreateAssetCreationRequestExt ext;

  ManageAssetOpCreateAssetCreationRequestCreateAssetCreationRequest(
    this.createAsset,
    this.allTasks,
    this.ext,
  );

  ManageAssetOpCreateAssetCreationRequestCreateAssetCreationRequest.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.createAsset = AssetCreationRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = ManageAssetOpCreateAssetCreationRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    createAsset.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class ManageAssetOpCreateAssetCreationRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageAssetOpCreateAssetCreationRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAssetOpCreateAssetCreationRequestExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageAssetOpCreateAssetCreationRequestExtEmptyVersion.fromXdr(
            stream);
    }

    return ManageAssetOpCreateAssetCreationRequestExtEmptyVersion.fromXdr(
        stream);
  }
}

class ManageAssetOpCreateAssetCreationRequestExtEmptyVersion
    extends ManageAssetOpCreateAssetCreationRequestExt {
  ManageAssetOpCreateAssetCreationRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageAssetOpCreateAssetCreationRequestExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct
//          {
//              //: Is used to pass required fields to update an asset entry
//              AssetUpdateRequest updateAsset;
//              //: (optional) Bit mask whose flags must be cleared in order for `UPDATE_ASSET` request to be approved, which will be used
//              //: instead of key-value by key `asset_update_tasks`
//              uint32* allTasks;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          }

//  ===========================================================================
class ManageAssetOpCreateAssetUpdateRequestCreateAssetUpdateRequest
    extends XdrEncodable {
  late AssetUpdateRequest updateAsset;
  late UINT32? allTasks;
  late ManageAssetOpCreateAssetUpdateRequestExt ext;

  ManageAssetOpCreateAssetUpdateRequestCreateAssetUpdateRequest(
    this.updateAsset,
    this.allTasks,
    this.ext,
  );

  ManageAssetOpCreateAssetUpdateRequestCreateAssetUpdateRequest.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.updateAsset = AssetUpdateRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = ManageAssetOpCreateAssetUpdateRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    updateAsset.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class ManageAssetOpCreateAssetUpdateRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageAssetOpCreateAssetUpdateRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAssetOpCreateAssetUpdateRequestExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageAssetOpCreateAssetUpdateRequestExtEmptyVersion.fromXdr(
            stream);
    }

    return ManageAssetOpCreateAssetUpdateRequestExtEmptyVersion.fromXdr(stream);
  }
}

class ManageAssetOpCreateAssetUpdateRequestExtEmptyVersion
    extends ManageAssetOpCreateAssetUpdateRequestExt {
  ManageAssetOpCreateAssetUpdateRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageAssetOpCreateAssetUpdateRequestExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class ManageAssetOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageAssetOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAssetOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageAssetOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageAssetOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageAssetOpExtEmptyVersion extends ManageAssetOpExt {
  ManageAssetOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageAssetOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageAssetResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REQUEST_NOT_FOUND = -1;
  static const INVALID_SIGNATURE = -2;
  static const ASSET_ALREADY_EXISTS = -3;
  static const INVALID_MAX_ISSUANCE_AMOUNT = -4;
  static const INVALID_CODE = -5;
  static const INVALID_PRE_ISSUER = -6;
  static const INVALID_POLICIES = -7;
  static const ASSET_NOT_FOUND = -8;
  static const REQUEST_ALREADY_EXISTS = -9;
  static const STATS_ASSET_ALREADY_EXISTS = -10;
  static const INITIAL_PREISSUED_EXCEEDS_MAX_ISSUANCE = -11;
  static const INVALID_CREATOR_DETAILS = -12;
  static const INVALID_TRAILING_DIGITS_COUNT = -13;
  static const INVALID_PREISSUED_AMOUNT_PRECISION = -14;
  static const INVALID_MAX_ISSUANCE_AMOUNT_PRECISION = -15;
  static const ASSET_CREATE_TASKS_NOT_FOUND = -16;
  static const ASSET_UPDATE_TASKS_NOT_FOUND = -17;
  static const NOT_ALLOWED_TO_SET_TASKS_ON_UPDATE = -18;
  late int value;

  ManageAssetResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageAssetResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Is used to pass useful params after the successful operation application
//  struct ManageAssetSuccess
//  {
//      //: ID of the request that was created in the process of operation application
//      uint64 requestID;
//      //: True means that the request was applied and execution flow was successful
//      bool fulfilled;
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageAssetSuccess extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late ManageAssetSuccessExt ext;

  ManageAssetSuccess(
    this.requestID,
    this.fulfilled,
    this.ext,
  );

  ManageAssetSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.ext = ManageAssetSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageAssetSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageAssetSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAssetSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageAssetSuccessExtEmptyVersion.fromXdr(stream);
    }

    return ManageAssetSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class ManageAssetSuccessExtEmptyVersion extends ManageAssetSuccessExt {
  ManageAssetSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageAssetSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class ManageAssetResult extends XdrEncodable {
  late ManageAssetResultCode discriminant;

  ManageAssetResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageAssetResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageAssetResultCode.SUCCESS:
        return ManageAssetResultSuccess.fromXdr(stream);
    }

    return ManageAssetResultSuccess.fromXdr(stream);
  }
}

class ManageAssetResultSuccess extends ManageAssetResult {
  ManageAssetResultSuccess(this.success)
      : super(ManageAssetResultCode(ManageAssetResultCode.SUCCESS));
  late ManageAssetSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageAssetResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageAssetResultCode(ManageAssetResultCode.SUCCESS)) {
    this.success = ManageAssetSuccess.fromXdr(stream);
  }
}

class ManageBalanceAction extends XdrEncodable {
  static const CREATE = 0;
  static const DELETE_BALANCE = 1;
  static const CREATE_UNIQUE = 2;
  late int value;

  ManageBalanceAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageBalanceAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: `ManageBalanceOp` applies an `action` of the `ManageBalanceAction` type on the balance of a particular `asset` (referenced to by its AssetCode)
//  //: of the `destination` account (referenced to by its AccountID)
//  struct ManageBalanceOp
//  {
//      //: Defines a ManageBalanceAction to be performed. `DELETE_BALANCE` is reserved and not implemented yet.
//      ManageBalanceAction action;
//      //: Defines an account whose balance will be managed
//      AccountID destination;
//      //: Defines an asset code of the balance to which `action` will be applied
//      AssetCode asset;
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageBalanceOp extends XdrEncodable {
  late ManageBalanceAction action;
  late ACCOUNTID destination;
  late ASSETCODE asset;
  late ManageBalanceOpExt ext;

  ManageBalanceOp(
    this.action,
    this.destination,
    this.asset,
    this.ext,
  );

  ManageBalanceOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.action = ManageBalanceAction.fromXdr(stream);
    this.destination = PublicKey.fromXdr(stream);
    this.asset = stringFromXdr(stream);
    this.ext = ManageBalanceOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    action.toXdr(stream);
    destination.toXdr(stream);
    asset.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageBalanceOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageBalanceOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageBalanceOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageBalanceOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageBalanceOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageBalanceOpExtEmptyVersion extends ManageBalanceOpExt {
  ManageBalanceOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageBalanceOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageBalanceResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const NOT_FOUND = -2;
  static const DESTINATION_NOT_FOUND = -3;
  static const ASSET_NOT_FOUND = -4;
  static const INVALID_ASSET = -5;
  static const BALANCE_ALREADY_EXISTS = -6;
  static const VERSION_IS_NOT_SUPPORTED_YET = -7;
  late int value;

  ManageBalanceResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageBalanceResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct ManageBalanceSuccess {
//      //: ID of the balance that was managed
//      BalanceID balanceID;
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageBalanceSuccess extends XdrEncodable {
  late BALANCEID balanceID;
  late ManageBalanceSuccessExt ext;

  ManageBalanceSuccess(
    this.balanceID,
    this.ext,
  );

  ManageBalanceSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.balanceID = PublicKey.fromXdr(stream);
    this.ext = ManageBalanceSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    balanceID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageBalanceSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageBalanceSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageBalanceSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageBalanceSuccessExtEmptyVersion.fromXdr(stream);
    }

    return ManageBalanceSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class ManageBalanceSuccessExtEmptyVersion extends ManageBalanceSuccessExt {
  ManageBalanceSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageBalanceSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class ManageBalanceResult extends XdrEncodable {
  late ManageBalanceResultCode discriminant;

  ManageBalanceResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageBalanceResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageBalanceResultCode.SUCCESS:
        return ManageBalanceResultSuccess.fromXdr(stream);
    }

    return ManageBalanceResultSuccess.fromXdr(stream);
  }
}

class ManageBalanceResultSuccess extends ManageBalanceResult {
  ManageBalanceResultSuccess(this.success)
      : super(ManageBalanceResultCode(ManageBalanceResultCode.SUCCESS));
  late ManageBalanceSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageBalanceResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageBalanceResultCode(ManageBalanceResultCode.SUCCESS)) {
    this.success = ManageBalanceSuccess.fromXdr(stream);
  }
}

class ManageContractRequestAction extends XdrEncodable {
  static const CREATE = 0;
  static const REMOVE = 1;
  late int value;

  ManageContractRequestAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageContractRequestAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct CreateContractRequest
//  {
//      ContractRequest contractRequest;
//      uint32* allTasks;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateContractRequest extends XdrEncodable {
  late ContractRequest contractRequest;
  late UINT32? allTasks;
  late CreateContractRequestExt ext;

  CreateContractRequest(
    this.contractRequest,
    this.allTasks,
    this.ext,
  );

  CreateContractRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.contractRequest = ContractRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = CreateContractRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    contractRequest.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreateContractRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateContractRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateContractRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateContractRequestExtEmptyVersion.fromXdr(stream);
    }

    return CreateContractRequestExtEmptyVersion.fromXdr(stream);
  }
}

class CreateContractRequestExtEmptyVersion extends CreateContractRequestExt {
  CreateContractRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateContractRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct ManageContractRequestOp
//  {
//      union switch (ManageContractRequestAction action){
//      case CREATE:
//          CreateContractRequest createContractRequest;
//      case REMOVE:
//          uint64 requestID;
//      } details;
//
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageContractRequestOp extends XdrEncodable {
  late ManageContractRequestOpDetails details;
  late ManageContractRequestOpExt ext;

  ManageContractRequestOp(
    this.details,
    this.ext,
  );

  ManageContractRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.details = ManageContractRequestOpDetails.fromXdr(stream);
    this.ext = ManageContractRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageContractRequestOpDetails extends XdrEncodable {
  late ManageContractRequestAction discriminant;

  ManageContractRequestOpDetails(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageContractRequestOpDetails fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageContractRequestAction.CREATE:
        return ManageContractRequestOpDetailsCreate.fromXdr(stream);
      case ManageContractRequestAction.REMOVE:
        return ManageContractRequestOpDetailsRemove.fromXdr(stream);
    }

    return ManageContractRequestOpDetailsCreate.fromXdr(stream);
  }
}

class ManageContractRequestOpDetailsCreate
    extends ManageContractRequestOpDetails {
  ManageContractRequestOpDetailsCreate(this.createContractRequest)
      : super(ManageContractRequestAction(ManageContractRequestAction.CREATE));
  late CreateContractRequest createContractRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createContractRequest.toXdr(stream);
  }

  ManageContractRequestOpDetailsCreate.fromXdr(XdrDataInputStream stream)
      : super(ManageContractRequestAction(ManageContractRequestAction.CREATE)) {
    this.createContractRequest = CreateContractRequest.fromXdr(stream);
  }
}

class ManageContractRequestOpDetailsRemove
    extends ManageContractRequestOpDetails {
  ManageContractRequestOpDetailsRemove(this.requestID)
      : super(ManageContractRequestAction(ManageContractRequestAction.REMOVE));
  late UINT64 requestID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    requestID.toXdr(stream);
  }

  ManageContractRequestOpDetailsRemove.fromXdr(XdrDataInputStream stream)
      : super(ManageContractRequestAction(ManageContractRequestAction.REMOVE)) {
    var length = 0;
    this.requestID = longFromXdr(stream);
  }
}

abstract class ManageContractRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageContractRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageContractRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageContractRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageContractRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageContractRequestOpExtEmptyVersion
    extends ManageContractRequestOpExt {
  ManageContractRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageContractRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageContractRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const NOT_FOUND = -2;
  static const TOO_MANY_CONTRACTS = -3;
  static const NOT_ALLOWED_TO_REMOVE = -4;
  static const DETAILS_TOO_LONG = -5;
  static const CONTRACT_CREATE_TASKS_NOT_FOUND = -6;
  late int value;

  ManageContractRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageContractRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct CreateContractRequestResponse
//  {
//  	uint64 requestID;
//      bool fulfilled;
//
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateContractRequestResponse extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late CreateContractRequestResponseExt ext;

  CreateContractRequestResponse(
    this.requestID,
    this.fulfilled,
    this.ext,
  );

  CreateContractRequestResponse.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    this.ext = CreateContractRequestResponseExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateContractRequestResponseExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateContractRequestResponseExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateContractRequestResponseExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateContractRequestResponseExtEmptyVersion.fromXdr(stream);
    }

    return CreateContractRequestResponseExtEmptyVersion.fromXdr(stream);
  }
}

class CreateContractRequestResponseExtEmptyVersion
    extends CreateContractRequestResponseExt {
  CreateContractRequestResponseExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateContractRequestResponseExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class ManageContractRequestResult extends XdrEncodable {
  late ManageContractRequestResultCode discriminant;

  ManageContractRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageContractRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageContractRequestResultCode.SUCCESS:
        return ManageContractRequestResultSuccess.fromXdr(stream);
    }

    return ManageContractRequestResultSuccess.fromXdr(stream);
  }
}

class ManageContractRequestResultSuccess extends ManageContractRequestResult {
  ManageContractRequestResultSuccess(this.success)
      : super(ManageContractRequestResultCode(
            ManageContractRequestResultCode.SUCCESS));
  late ManageContractRequestResultSuccessSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageContractRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageContractRequestResultCode(
            ManageContractRequestResultCode.SUCCESS)) {
    this.success = ManageContractRequestResultSuccessSuccess.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          union switch (ManageContractRequestAction action)
//          {
//          case CREATE:
//              CreateContractRequestResponse response;
//          case REMOVE:
//              void;
//          } details;
//
//          // reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          } ext;
//      }

//  ===========================================================================
class ManageContractRequestResultSuccessSuccess extends XdrEncodable {
  late ManageContractRequestResultSuccessDetails details;
  late ManageContractRequestResultSuccessExt ext;

  ManageContractRequestResultSuccessSuccess(
    this.details,
    this.ext,
  );

  ManageContractRequestResultSuccessSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.details = ManageContractRequestResultSuccessDetails.fromXdr(stream);
    this.ext = ManageContractRequestResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageContractRequestResultSuccessDetails extends XdrEncodable {
  late ManageContractRequestAction discriminant;

  ManageContractRequestResultSuccessDetails(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageContractRequestResultSuccessDetails fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageContractRequestAction.CREATE:
        return ManageContractRequestResultSuccessDetailsCreate.fromXdr(stream);
      case ManageContractRequestAction.REMOVE:
        return ManageContractRequestResultSuccessDetailsRemove.fromXdr(stream);
    }

    return ManageContractRequestResultSuccessDetailsCreate.fromXdr(stream);
  }
}

class ManageContractRequestResultSuccessDetailsCreate
    extends ManageContractRequestResultSuccessDetails {
  ManageContractRequestResultSuccessDetailsCreate(this.response)
      : super(ManageContractRequestAction(ManageContractRequestAction.CREATE));
  late CreateContractRequestResponse response;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    response.toXdr(stream);
  }

  ManageContractRequestResultSuccessDetailsCreate.fromXdr(
      XdrDataInputStream stream)
      : super(ManageContractRequestAction(ManageContractRequestAction.CREATE)) {
    this.response = CreateContractRequestResponse.fromXdr(stream);
  }
}

class ManageContractRequestResultSuccessDetailsRemove
    extends ManageContractRequestResultSuccessDetails {
  ManageContractRequestResultSuccessDetailsRemove()
      : super(ManageContractRequestAction(ManageContractRequestAction.REMOVE));

  ManageContractRequestResultSuccessDetailsRemove.fromXdr(
      XdrDataInputStream stream)
      : super(
            ManageContractRequestAction(ManageContractRequestAction.REMOVE)) {}
}

abstract class ManageContractRequestResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageContractRequestResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageContractRequestResultSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageContractRequestResultSuccessExtEmptyVersion.fromXdr(
            stream);
    }

    return ManageContractRequestResultSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class ManageContractRequestResultSuccessExtEmptyVersion
    extends ManageContractRequestResultSuccessExt {
  ManageContractRequestResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageContractRequestResultSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageContractAction extends XdrEncodable {
  static const ADD_DETAILS = 0;
  static const CONFIRM_COMPLETED = 1;
  static const START_DISPUTE = 2;
  static const RESOLVE_DISPUTE = 3;
  late int value;

  ManageContractAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageContractAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct ManageContractOp
//  {
//      uint64 contractID;
//
//      union switch (ManageContractAction action)
//      {
//      case ADD_DETAILS:
//          longstring details;
//      case CONFIRM_COMPLETED:
//          void;
//      case START_DISPUTE:
//          longstring disputeReason;
//      case RESOLVE_DISPUTE:
//          bool isRevert;
//      }
//      data;
//
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageContractOp extends XdrEncodable {
  late UINT64 contractID;
  late ManageContractOpData data;
  late ManageContractOpExt ext;

  ManageContractOp(
    this.contractID,
    this.data,
    this.ext,
  );

  ManageContractOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.contractID = longFromXdr(stream);
    this.data = ManageContractOpData.fromXdr(stream);
    this.ext = ManageContractOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    contractID.toXdr(stream);
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageContractOpData extends XdrEncodable {
  late ManageContractAction discriminant;

  ManageContractOpData(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageContractOpData fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageContractAction.ADD_DETAILS:
        return ManageContractOpDataAddDetails.fromXdr(stream);
      case ManageContractAction.CONFIRM_COMPLETED:
        return ManageContractOpDataConfirmCompleted.fromXdr(stream);
      case ManageContractAction.START_DISPUTE:
        return ManageContractOpDataStartDispute.fromXdr(stream);
      case ManageContractAction.RESOLVE_DISPUTE:
        return ManageContractOpDataResolveDispute.fromXdr(stream);
    }

    return ManageContractOpDataAddDetails.fromXdr(stream);
  }
}

class ManageContractOpDataAddDetails extends ManageContractOpData {
  ManageContractOpDataAddDetails(this.details)
      : super(ManageContractAction(ManageContractAction.ADD_DETAILS));
  late LONGSTRING details;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    details.toXdr(stream);
  }

  ManageContractOpDataAddDetails.fromXdr(XdrDataInputStream stream)
      : super(ManageContractAction(ManageContractAction.ADD_DETAILS)) {
    var length = 0;
    this.details = stringFromXdr(stream);
  }
}

class ManageContractOpDataConfirmCompleted extends ManageContractOpData {
  ManageContractOpDataConfirmCompleted()
      : super(ManageContractAction(ManageContractAction.CONFIRM_COMPLETED));

  ManageContractOpDataConfirmCompleted.fromXdr(XdrDataInputStream stream)
      : super(ManageContractAction(ManageContractAction.CONFIRM_COMPLETED)) {}
}

class ManageContractOpDataStartDispute extends ManageContractOpData {
  ManageContractOpDataStartDispute(this.disputeReason)
      : super(ManageContractAction(ManageContractAction.START_DISPUTE));
  late LONGSTRING disputeReason;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    disputeReason.toXdr(stream);
  }

  ManageContractOpDataStartDispute.fromXdr(XdrDataInputStream stream)
      : super(ManageContractAction(ManageContractAction.START_DISPUTE)) {
    var length = 0;
    this.disputeReason = stringFromXdr(stream);
  }
}

class ManageContractOpDataResolveDispute extends ManageContractOpData {
  ManageContractOpDataResolveDispute(this.isRevert)
      : super(ManageContractAction(ManageContractAction.RESOLVE_DISPUTE));
  late bool isRevert;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    isRevert.toXdr(stream);
  }

  ManageContractOpDataResolveDispute.fromXdr(XdrDataInputStream stream)
      : super(ManageContractAction(ManageContractAction.RESOLVE_DISPUTE)) {
    var length = 0;
    this.isRevert = boolFromXdr(stream);
  }
}

abstract class ManageContractOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageContractOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageContractOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageContractOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageContractOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageContractOpExtEmptyVersion extends ManageContractOpExt {
  ManageContractOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageContractOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageContractResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const NOT_FOUND = -2;
  static const NOT_ALLOWED = -3;
  static const DETAILS_TOO_LONG = -4;
  static const DISPUTE_REASON_TOO_LONG = -5;
  static const ALREADY_CONFIRMED = -6;
  static const INVOICE_NOT_APPROVED = -7;
  static const DISPUTE_ALREADY_STARTED = -8;
  static const CUSTOMER_BALANCE_OVERFLOW = -9;
  static const INCORRECT_PRECISION = -10;
  late int value;

  ManageContractResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageContractResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct ManageContractResponse
//  {
//      union switch (ManageContractAction action)
//      {
//      case CONFIRM_COMPLETED:
//          bool isCompleted;
//      default:
//          void;
//      }
//      data;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageContractResponse extends XdrEncodable {
  late ManageContractResponseData data;
  late ManageContractResponseExt ext;

  ManageContractResponse(
    this.data,
    this.ext,
  );

  ManageContractResponse.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.data = ManageContractResponseData.fromXdr(stream);
    this.ext = ManageContractResponseExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageContractResponseData extends XdrEncodable {
  late ManageContractAction discriminant;

  ManageContractResponseData(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageContractResponseData fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageContractAction.CONFIRM_COMPLETED:
        return ManageContractResponseDataConfirmCompleted.fromXdr(stream);
    }

    return ManageContractResponseDataConfirmCompleted.fromXdr(stream);
  }
}

class ManageContractResponseDataConfirmCompleted
    extends ManageContractResponseData {
  ManageContractResponseDataConfirmCompleted(this.isCompleted)
      : super(ManageContractAction(ManageContractAction.CONFIRM_COMPLETED));
  late bool isCompleted;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    isCompleted.toXdr(stream);
  }

  ManageContractResponseDataConfirmCompleted.fromXdr(XdrDataInputStream stream)
      : super(ManageContractAction(ManageContractAction.CONFIRM_COMPLETED)) {
    var length = 0;
    this.isCompleted = boolFromXdr(stream);
  }
}

abstract class ManageContractResponseExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageContractResponseExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageContractResponseExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageContractResponseExtEmptyVersion.fromXdr(stream);
    }

    return ManageContractResponseExtEmptyVersion.fromXdr(stream);
  }
}

class ManageContractResponseExtEmptyVersion extends ManageContractResponseExt {
  ManageContractResponseExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageContractResponseExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class ManageContractResult extends XdrEncodable {
  late ManageContractResultCode discriminant;

  ManageContractResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageContractResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageContractResultCode.SUCCESS:
        return ManageContractResultSuccess.fromXdr(stream);
    }

    return ManageContractResultSuccess.fromXdr(stream);
  }
}

class ManageContractResultSuccess extends ManageContractResult {
  ManageContractResultSuccess(this.response)
      : super(ManageContractResultCode(ManageContractResultCode.SUCCESS));
  late ManageContractResponse response;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    response.toXdr(stream);
  }

  ManageContractResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageContractResultCode(ManageContractResultCode.SUCCESS)) {
    this.response = ManageContractResponse.fromXdr(stream);
  }
}

class ManageCreatePollRequestAction extends XdrEncodable {
  static const CREATE = 0;
  static const CANCEL = 1;
  late int value;

  ManageCreatePollRequestAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageCreatePollRequestAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: CreatePollRequestData is used to pass necessary data to create a `CREATE_POLL` request
//  struct CreatePollRequestData
//  {
//      //: Body of `CREATE_POLL` request
//      CreatePollRequest request;
//
//      //: Bit mask that will be used instead of the value from key-value entry by
//      //: `create_poll_tasks:<permissionType>` key
//      uint32* allTasks;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreatePollRequestData extends XdrEncodable {
  late CreatePollRequest request;
  late UINT32? allTasks;
  late CreatePollRequestDataExt ext;

  CreatePollRequestData(
    this.request,
    this.allTasks,
    this.ext,
  );

  CreatePollRequestData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.request = CreatePollRequest.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = CreatePollRequestDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreatePollRequestDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreatePollRequestDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreatePollRequestDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreatePollRequestDataExtEmptyVersion.fromXdr(stream);
    }

    return CreatePollRequestDataExtEmptyVersion.fromXdr(stream);
  }
}

class CreatePollRequestDataExtEmptyVersion extends CreatePollRequestDataExt {
  CreatePollRequestDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreatePollRequestDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: CancelPollRequestData is used to pass necessary data to remove a `CREATE_POLL` request
//  struct CancelPollRequestData
//  {
//      //: ID of `CREATE_POLL` request to remove
//      uint64 requestID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CancelPollRequestData extends XdrEncodable {
  late UINT64 requestID;
  late CancelPollRequestDataExt ext;

  CancelPollRequestData(
    this.requestID,
    this.ext,
  );

  CancelPollRequestData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.ext = CancelPollRequestDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CancelPollRequestDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CancelPollRequestDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CancelPollRequestDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CancelPollRequestDataExtEmptyVersion.fromXdr(stream);
    }

    return CancelPollRequestDataExtEmptyVersion.fromXdr(stream);
  }
}

class CancelPollRequestDataExtEmptyVersion extends CancelPollRequestDataExt {
  CancelPollRequestDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CancelPollRequestDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: ManageCreatePollRequestOp is used to create or remove a `CREATE_POLL` request
//  struct ManageCreatePollRequestOp
//  {
//      //: data is used to pass one of `ManageCreatePollRequestAction` with required params
//      union switch (ManageCreatePollRequestAction action)
//      {
//      case CREATE:
//          CreatePollRequestData createData;
//      case CANCEL:
//          CancelPollRequestData cancelData;
//      }
//      data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageCreatePollRequestOp extends XdrEncodable {
  late ManageCreatePollRequestOpData data;
  late ManageCreatePollRequestOpExt ext;

  ManageCreatePollRequestOp(
    this.data,
    this.ext,
  );

  ManageCreatePollRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.data = ManageCreatePollRequestOpData.fromXdr(stream);
    this.ext = ManageCreatePollRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageCreatePollRequestOpData extends XdrEncodable {
  late ManageCreatePollRequestAction discriminant;

  ManageCreatePollRequestOpData(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageCreatePollRequestOpData fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageCreatePollRequestAction.CREATE:
        return ManageCreatePollRequestOpDataCreate.fromXdr(stream);
      case ManageCreatePollRequestAction.CANCEL:
        return ManageCreatePollRequestOpDataCancel.fromXdr(stream);
    }

    return ManageCreatePollRequestOpDataCreate.fromXdr(stream);
  }
}

class ManageCreatePollRequestOpDataCreate
    extends ManageCreatePollRequestOpData {
  ManageCreatePollRequestOpDataCreate(this.createData)
      : super(ManageCreatePollRequestAction(
            ManageCreatePollRequestAction.CREATE));
  late CreatePollRequestData createData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }

  ManageCreatePollRequestOpDataCreate.fromXdr(XdrDataInputStream stream)
      : super(ManageCreatePollRequestAction(
            ManageCreatePollRequestAction.CREATE)) {
    this.createData = CreatePollRequestData.fromXdr(stream);
  }
}

class ManageCreatePollRequestOpDataCancel
    extends ManageCreatePollRequestOpData {
  ManageCreatePollRequestOpDataCancel(this.cancelData)
      : super(ManageCreatePollRequestAction(
            ManageCreatePollRequestAction.CANCEL));
  late CancelPollRequestData cancelData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelData.toXdr(stream);
  }

  ManageCreatePollRequestOpDataCancel.fromXdr(XdrDataInputStream stream)
      : super(ManageCreatePollRequestAction(
            ManageCreatePollRequestAction.CANCEL)) {
    this.cancelData = CancelPollRequestData.fromXdr(stream);
  }
}

abstract class ManageCreatePollRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageCreatePollRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageCreatePollRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageCreatePollRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageCreatePollRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageCreatePollRequestOpExtEmptyVersion
    extends ManageCreatePollRequestOpExt {
  ManageCreatePollRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageCreatePollRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageCreatePollRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_CREATOR_DETAILS = -1;
  static const NOT_FOUND = -2;
  static const INVALID_DATES = -3;
  static const INVALID_END_TIME = -4;
  static const RESULT_PROVIDER_NOT_FOUND = -5;
  static const CREATE_POLL_TASKS_NOT_FOUND = -6;
  static const INVALID_NUMBER_OF_CHOICES = -7;
  late int value;

  ManageCreatePollRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageCreatePollRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: CreatePollRequestResponse is used to pass useful fields after `CREATE_POLL` request creation
//  struct CreatePollRequestResponse
//  {
//      //: ID of a created request
//      uint64 requestID;
//
//      //: Indicates whether or not the `CREATE_POLL` request was auto approved and fulfilled
//      //: True means that poll was successfully created
//      bool fulfilled;
//
//      //: ID of created poll if request was fulfilled
//      uint64* pollID;
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreatePollRequestResponse extends XdrEncodable {
  late UINT64 requestID;
  late bool fulfilled;
  late UINT64? pollID;
  late CreatePollRequestResponseExt ext;

  CreatePollRequestResponse(
    this.requestID,
    this.fulfilled,
    this.pollID,
    this.ext,
  );

  CreatePollRequestResponse.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.fulfilled = boolFromXdr(stream);
    if (boolFromXdr(stream)) {
      this.pollID = longFromXdr(stream);
    } else {
      this.pollID = null;
    }
    this.ext = CreatePollRequestResponseExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    if (pollID != null) {
      true.toXdr(stream);
      pollID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class CreatePollRequestResponseExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreatePollRequestResponseExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreatePollRequestResponseExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreatePollRequestResponseExtEmptyVersion.fromXdr(stream);
    }

    return CreatePollRequestResponseExtEmptyVersion.fromXdr(stream);
  }
}

class CreatePollRequestResponseExtEmptyVersion
    extends CreatePollRequestResponseExt {
  CreatePollRequestResponseExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreatePollRequestResponseExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Success result of operation application
//  struct ManageCreatePollRequestSuccessResult
//  {
//      //: `details` id used to pass useful fields
//      union switch (ManageCreatePollRequestAction action)
//      {
//      case CREATE:
//          CreatePollRequestResponse response;
//      case CANCEL:
//          void;
//      } details;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageCreatePollRequestSuccessResult extends XdrEncodable {
  late ManageCreatePollRequestSuccessResultDetails details;
  late ManageCreatePollRequestSuccessResultExt ext;

  ManageCreatePollRequestSuccessResult(
    this.details,
    this.ext,
  );

  ManageCreatePollRequestSuccessResult.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.details = ManageCreatePollRequestSuccessResultDetails.fromXdr(stream);
    this.ext = ManageCreatePollRequestSuccessResultExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageCreatePollRequestSuccessResultDetails
    extends XdrEncodable {
  late ManageCreatePollRequestAction discriminant;

  ManageCreatePollRequestSuccessResultDetails(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageCreatePollRequestSuccessResultDetails fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageCreatePollRequestAction.CREATE:
        return ManageCreatePollRequestSuccessResultDetailsCreate.fromXdr(
            stream);
      case ManageCreatePollRequestAction.CANCEL:
        return ManageCreatePollRequestSuccessResultDetailsCancel.fromXdr(
            stream);
    }

    return ManageCreatePollRequestSuccessResultDetailsCreate.fromXdr(stream);
  }
}

class ManageCreatePollRequestSuccessResultDetailsCreate
    extends ManageCreatePollRequestSuccessResultDetails {
  ManageCreatePollRequestSuccessResultDetailsCreate(this.response)
      : super(ManageCreatePollRequestAction(
            ManageCreatePollRequestAction.CREATE));
  late CreatePollRequestResponse response;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    response.toXdr(stream);
  }

  ManageCreatePollRequestSuccessResultDetailsCreate.fromXdr(
      XdrDataInputStream stream)
      : super(ManageCreatePollRequestAction(
            ManageCreatePollRequestAction.CREATE)) {
    this.response = CreatePollRequestResponse.fromXdr(stream);
  }
}

class ManageCreatePollRequestSuccessResultDetailsCancel
    extends ManageCreatePollRequestSuccessResultDetails {
  ManageCreatePollRequestSuccessResultDetailsCancel()
      : super(ManageCreatePollRequestAction(
            ManageCreatePollRequestAction.CANCEL));

  ManageCreatePollRequestSuccessResultDetailsCancel.fromXdr(
      XdrDataInputStream stream)
      : super(ManageCreatePollRequestAction(
            ManageCreatePollRequestAction.CANCEL)) {}
}

abstract class ManageCreatePollRequestSuccessResultExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageCreatePollRequestSuccessResultExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageCreatePollRequestSuccessResultExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageCreatePollRequestSuccessResultExtEmptyVersion.fromXdr(
            stream);
    }

    return ManageCreatePollRequestSuccessResultExtEmptyVersion.fromXdr(stream);
  }
}

class ManageCreatePollRequestSuccessResultExtEmptyVersion
    extends ManageCreatePollRequestSuccessResultExt {
  ManageCreatePollRequestSuccessResultExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageCreatePollRequestSuccessResultExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class ManageCreatePollRequestResult extends XdrEncodable {
  late ManageCreatePollRequestResultCode discriminant;

  ManageCreatePollRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageCreatePollRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageCreatePollRequestResultCode.SUCCESS:
        return ManageCreatePollRequestResultSuccess.fromXdr(stream);
    }

    return ManageCreatePollRequestResultSuccess.fromXdr(stream);
  }
}

class ManageCreatePollRequestResultSuccess
    extends ManageCreatePollRequestResult {
  ManageCreatePollRequestResultSuccess(this.success)
      : super(ManageCreatePollRequestResultCode(
            ManageCreatePollRequestResultCode.SUCCESS));
  late ManageCreatePollRequestSuccessResult success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageCreatePollRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageCreatePollRequestResultCode(
            ManageCreatePollRequestResultCode.SUCCESS)) {
    this.success = ManageCreatePollRequestSuccessResult.fromXdr(stream);
  }
}

class ManageExternalSystemAccountIdPoolEntryAction extends XdrEncodable {
  static const CREATE = 0;
  static const REMOVE = 1;
  late int value;

  ManageExternalSystemAccountIdPoolEntryAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageExternalSystemAccountIdPoolEntryAction.fromXdr(
      XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: CreateExternalSystemAccountIdPoolEntryActionInput is used to
//  //: pass necessary params to create a new external system account ID in the external system ID pool
//  struct CreateExternalSystemAccountIdPoolEntryActionInput
//  {
//      //: Type of external system, selected arbitrarily
//      int32 externalSystemType;
//      //: Data for external system binding
//      longstring data;
//      //: External system ID of the creator
//      uint64 parent;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateExternalSystemAccountIdPoolEntryActionInput extends XdrEncodable {
  late INT32 externalSystemType;
  late LONGSTRING data;
  late UINT64 parent;
  late CreateExternalSystemAccountIdPoolEntryActionInputExt ext;

  CreateExternalSystemAccountIdPoolEntryActionInput(
    this.externalSystemType,
    this.data,
    this.parent,
    this.ext,
  );

  CreateExternalSystemAccountIdPoolEntryActionInput.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.externalSystemType = intFromXdr(stream);
    this.data = stringFromXdr(stream);
    this.parent = longFromXdr(stream);
    this.ext =
        CreateExternalSystemAccountIdPoolEntryActionInputExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    externalSystemType.toXdr(stream);
    data.toXdr(stream);
    parent.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateExternalSystemAccountIdPoolEntryActionInputExt
    extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateExternalSystemAccountIdPoolEntryActionInputExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateExternalSystemAccountIdPoolEntryActionInputExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateExternalSystemAccountIdPoolEntryActionInputExtEmptyVersion
            .fromXdr(stream);
    }

    return CreateExternalSystemAccountIdPoolEntryActionInputExtEmptyVersion
        .fromXdr(stream);
  }
}

class CreateExternalSystemAccountIdPoolEntryActionInputExtEmptyVersion
    extends CreateExternalSystemAccountIdPoolEntryActionInputExt {
  CreateExternalSystemAccountIdPoolEntryActionInputExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateExternalSystemAccountIdPoolEntryActionInputExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: DeleteExternalSystemAccountIdPoolEntryActionInput is used to
//  //: pass necessary params to remove an existing external system account ID in the external system ID pool
//  struct DeleteExternalSystemAccountIdPoolEntryActionInput
//  {
//      //: ID of an existing external system account ID pool
//      uint64 poolEntryID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class DeleteExternalSystemAccountIdPoolEntryActionInput extends XdrEncodable {
  late UINT64 poolEntryID;
  late DeleteExternalSystemAccountIdPoolEntryActionInputExt ext;

  DeleteExternalSystemAccountIdPoolEntryActionInput(
    this.poolEntryID,
    this.ext,
  );

  DeleteExternalSystemAccountIdPoolEntryActionInput.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.poolEntryID = longFromXdr(stream);
    this.ext =
        DeleteExternalSystemAccountIdPoolEntryActionInputExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    poolEntryID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class DeleteExternalSystemAccountIdPoolEntryActionInputExt
    extends XdrEncodable {
  late LedgerVersion discriminant;

  DeleteExternalSystemAccountIdPoolEntryActionInputExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static DeleteExternalSystemAccountIdPoolEntryActionInputExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return DeleteExternalSystemAccountIdPoolEntryActionInputExtEmptyVersion
            .fromXdr(stream);
    }

    return DeleteExternalSystemAccountIdPoolEntryActionInputExtEmptyVersion
        .fromXdr(stream);
  }
}

class DeleteExternalSystemAccountIdPoolEntryActionInputExtEmptyVersion
    extends DeleteExternalSystemAccountIdPoolEntryActionInputExt {
  DeleteExternalSystemAccountIdPoolEntryActionInputExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  DeleteExternalSystemAccountIdPoolEntryActionInputExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: ManageExternalSystemAccountIdPoolEntryOp is used to create or remove
//  //: an external system account ID from the external system ID pool
//  struct ManageExternalSystemAccountIdPoolEntryOp
//  {
//      //: `actionInput` is used to pass one of
//      //: `ManageExternalSystemAccountIdPoolEntryAction` with required params
//      union switch (ManageExternalSystemAccountIdPoolEntryAction action)
//      {
//      case CREATE:
//          CreateExternalSystemAccountIdPoolEntryActionInput createExternalSystemAccountIdPoolEntryActionInput;
//      case REMOVE:
//          DeleteExternalSystemAccountIdPoolEntryActionInput deleteExternalSystemAccountIdPoolEntryActionInput;
//      } actionInput;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageExternalSystemAccountIdPoolEntryOp extends XdrEncodable {
  late ManageExternalSystemAccountIdPoolEntryOpActionInput actionInput;
  late ManageExternalSystemAccountIdPoolEntryOpExt ext;

  ManageExternalSystemAccountIdPoolEntryOp(
    this.actionInput,
    this.ext,
  );

  ManageExternalSystemAccountIdPoolEntryOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.actionInput =
        ManageExternalSystemAccountIdPoolEntryOpActionInput.fromXdr(stream);
    this.ext = ManageExternalSystemAccountIdPoolEntryOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    actionInput.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageExternalSystemAccountIdPoolEntryOpActionInput
    extends XdrEncodable {
  late ManageExternalSystemAccountIdPoolEntryAction discriminant;

  ManageExternalSystemAccountIdPoolEntryOpActionInput(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageExternalSystemAccountIdPoolEntryOpActionInput fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageExternalSystemAccountIdPoolEntryAction.CREATE:
        return ManageExternalSystemAccountIdPoolEntryOpActionInputCreate
            .fromXdr(stream);
      case ManageExternalSystemAccountIdPoolEntryAction.REMOVE:
        return ManageExternalSystemAccountIdPoolEntryOpActionInputRemove
            .fromXdr(stream);
    }

    return ManageExternalSystemAccountIdPoolEntryOpActionInputCreate.fromXdr(
        stream);
  }
}

class ManageExternalSystemAccountIdPoolEntryOpActionInputCreate
    extends ManageExternalSystemAccountIdPoolEntryOpActionInput {
  ManageExternalSystemAccountIdPoolEntryOpActionInputCreate(
      this.createExternalSystemAccountIdPoolEntryActionInput)
      : super(ManageExternalSystemAccountIdPoolEntryAction(
            ManageExternalSystemAccountIdPoolEntryAction.CREATE));
  late CreateExternalSystemAccountIdPoolEntryActionInput
      createExternalSystemAccountIdPoolEntryActionInput;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createExternalSystemAccountIdPoolEntryActionInput.toXdr(stream);
  }

  ManageExternalSystemAccountIdPoolEntryOpActionInputCreate.fromXdr(
      XdrDataInputStream stream)
      : super(ManageExternalSystemAccountIdPoolEntryAction(
            ManageExternalSystemAccountIdPoolEntryAction.CREATE)) {
    this.createExternalSystemAccountIdPoolEntryActionInput =
        CreateExternalSystemAccountIdPoolEntryActionInput.fromXdr(stream);
  }
}

class ManageExternalSystemAccountIdPoolEntryOpActionInputRemove
    extends ManageExternalSystemAccountIdPoolEntryOpActionInput {
  ManageExternalSystemAccountIdPoolEntryOpActionInputRemove(
      this.deleteExternalSystemAccountIdPoolEntryActionInput)
      : super(ManageExternalSystemAccountIdPoolEntryAction(
            ManageExternalSystemAccountIdPoolEntryAction.REMOVE));
  late DeleteExternalSystemAccountIdPoolEntryActionInput
      deleteExternalSystemAccountIdPoolEntryActionInput;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    deleteExternalSystemAccountIdPoolEntryActionInput.toXdr(stream);
  }

  ManageExternalSystemAccountIdPoolEntryOpActionInputRemove.fromXdr(
      XdrDataInputStream stream)
      : super(ManageExternalSystemAccountIdPoolEntryAction(
            ManageExternalSystemAccountIdPoolEntryAction.REMOVE)) {
    this.deleteExternalSystemAccountIdPoolEntryActionInput =
        DeleteExternalSystemAccountIdPoolEntryActionInput.fromXdr(stream);
  }
}

abstract class ManageExternalSystemAccountIdPoolEntryOpExt
    extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageExternalSystemAccountIdPoolEntryOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageExternalSystemAccountIdPoolEntryOpExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageExternalSystemAccountIdPoolEntryOpExtEmptyVersion.fromXdr(
            stream);
    }

    return ManageExternalSystemAccountIdPoolEntryOpExtEmptyVersion.fromXdr(
        stream);
  }
}

class ManageExternalSystemAccountIdPoolEntryOpExtEmptyVersion
    extends ManageExternalSystemAccountIdPoolEntryOpExt {
  ManageExternalSystemAccountIdPoolEntryOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageExternalSystemAccountIdPoolEntryOpExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageExternalSystemAccountIdPoolEntryResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const ALREADY_EXISTS = -2;
  static const NOT_FOUND = -3;
  late int value;

  ManageExternalSystemAccountIdPoolEntryResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageExternalSystemAccountIdPoolEntryResultCode.fromXdr(
      XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Success result of operation application
//  struct ManageExternalSystemAccountIdPoolEntrySuccess
//  {
//      //: ID of the created external system account ID pool
//      uint64 poolEntryID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageExternalSystemAccountIdPoolEntrySuccess extends XdrEncodable {
  late UINT64 poolEntryID;
  late ManageExternalSystemAccountIdPoolEntrySuccessExt ext;

  ManageExternalSystemAccountIdPoolEntrySuccess(
    this.poolEntryID,
    this.ext,
  );

  ManageExternalSystemAccountIdPoolEntrySuccess.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.poolEntryID = longFromXdr(stream);
    this.ext = ManageExternalSystemAccountIdPoolEntrySuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    poolEntryID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageExternalSystemAccountIdPoolEntrySuccessExt
    extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageExternalSystemAccountIdPoolEntrySuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageExternalSystemAccountIdPoolEntrySuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageExternalSystemAccountIdPoolEntrySuccessExtEmptyVersion
            .fromXdr(stream);
    }

    return ManageExternalSystemAccountIdPoolEntrySuccessExtEmptyVersion.fromXdr(
        stream);
  }
}

class ManageExternalSystemAccountIdPoolEntrySuccessExtEmptyVersion
    extends ManageExternalSystemAccountIdPoolEntrySuccessExt {
  ManageExternalSystemAccountIdPoolEntrySuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageExternalSystemAccountIdPoolEntrySuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class ManageExternalSystemAccountIdPoolEntryResult
    extends XdrEncodable {
  late ManageExternalSystemAccountIdPoolEntryResultCode discriminant;

  ManageExternalSystemAccountIdPoolEntryResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageExternalSystemAccountIdPoolEntryResult fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageExternalSystemAccountIdPoolEntryResultCode.SUCCESS:
        return ManageExternalSystemAccountIdPoolEntryResultSuccess.fromXdr(
            stream);
    }

    return ManageExternalSystemAccountIdPoolEntryResultSuccess.fromXdr(stream);
  }
}

class ManageExternalSystemAccountIdPoolEntryResultSuccess
    extends ManageExternalSystemAccountIdPoolEntryResult {
  ManageExternalSystemAccountIdPoolEntryResultSuccess(this.success)
      : super(ManageExternalSystemAccountIdPoolEntryResultCode(
            ManageExternalSystemAccountIdPoolEntryResultCode.SUCCESS));
  late ManageExternalSystemAccountIdPoolEntrySuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageExternalSystemAccountIdPoolEntryResultSuccess.fromXdr(
      XdrDataInputStream stream)
      : super(ManageExternalSystemAccountIdPoolEntryResultCode(
            ManageExternalSystemAccountIdPoolEntryResultCode.SUCCESS)) {
    this.success =
        ManageExternalSystemAccountIdPoolEntrySuccess.fromXdr(stream);
  }
}

class ManageInvoiceRequestAction extends XdrEncodable {
  static const CREATE = 0;
  static const REMOVE = 1;
  late int value;

  ManageInvoiceRequestAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageInvoiceRequestAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct InvoiceCreationRequest
//  {
//      AssetCode asset;
//      AccountID sender;
//      uint64 amount; // not allowed to set 0
//
//      uint64 *contractID;
//      longstring details;
//
//      uint32* allTasks;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class InvoiceCreationRequest extends XdrEncodable {
  late ASSETCODE asset;
  late ACCOUNTID sender;
  late UINT64 amount;
  late UINT64? contractID;
  late LONGSTRING details;
  late UINT32? allTasks;
  late InvoiceCreationRequestExt ext;

  InvoiceCreationRequest(
    this.asset,
    this.sender,
    this.amount,
    this.contractID,
    this.details,
    this.allTasks,
    this.ext,
  );

  InvoiceCreationRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.asset = stringFromXdr(stream);
    this.sender = PublicKey.fromXdr(stream);
    this.amount = longFromXdr(stream);
    if (boolFromXdr(stream)) {
      this.contractID = longFromXdr(stream);
    } else {
      this.contractID = null;
    }
    this.details = stringFromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = InvoiceCreationRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    asset.toXdr(stream);
    sender.toXdr(stream);
    amount.toXdr(stream);
    if (contractID != null) {
      true.toXdr(stream);
      contractID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    details.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class InvoiceCreationRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  InvoiceCreationRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static InvoiceCreationRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return InvoiceCreationRequestExtEmptyVersion.fromXdr(stream);
    }

    return InvoiceCreationRequestExtEmptyVersion.fromXdr(stream);
  }
}

class InvoiceCreationRequestExtEmptyVersion extends InvoiceCreationRequestExt {
  InvoiceCreationRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  InvoiceCreationRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct ManageInvoiceRequestOp
//  {
//      union switch (ManageInvoiceRequestAction action){
//      case CREATE:
//          InvoiceCreationRequest invoiceRequest;
//      case REMOVE:
//          uint64 requestID;
//      } details;
//
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageInvoiceRequestOp extends XdrEncodable {
  late ManageInvoiceRequestOpDetails details;
  late ManageInvoiceRequestOpExt ext;

  ManageInvoiceRequestOp(
    this.details,
    this.ext,
  );

  ManageInvoiceRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.details = ManageInvoiceRequestOpDetails.fromXdr(stream);
    this.ext = ManageInvoiceRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageInvoiceRequestOpDetails extends XdrEncodable {
  late ManageInvoiceRequestAction discriminant;

  ManageInvoiceRequestOpDetails(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageInvoiceRequestOpDetails fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageInvoiceRequestAction.CREATE:
        return ManageInvoiceRequestOpDetailsCreate.fromXdr(stream);
      case ManageInvoiceRequestAction.REMOVE:
        return ManageInvoiceRequestOpDetailsRemove.fromXdr(stream);
    }

    return ManageInvoiceRequestOpDetailsCreate.fromXdr(stream);
  }
}

class ManageInvoiceRequestOpDetailsCreate
    extends ManageInvoiceRequestOpDetails {
  ManageInvoiceRequestOpDetailsCreate(this.invoiceRequest)
      : super(ManageInvoiceRequestAction(ManageInvoiceRequestAction.CREATE));
  late InvoiceCreationRequest invoiceRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    invoiceRequest.toXdr(stream);
  }

  ManageInvoiceRequestOpDetailsCreate.fromXdr(XdrDataInputStream stream)
      : super(ManageInvoiceRequestAction(ManageInvoiceRequestAction.CREATE)) {
    this.invoiceRequest = InvoiceCreationRequest.fromXdr(stream);
  }
}

class ManageInvoiceRequestOpDetailsRemove
    extends ManageInvoiceRequestOpDetails {
  ManageInvoiceRequestOpDetailsRemove(this.requestID)
      : super(ManageInvoiceRequestAction(ManageInvoiceRequestAction.REMOVE));
  late UINT64 requestID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    requestID.toXdr(stream);
  }

  ManageInvoiceRequestOpDetailsRemove.fromXdr(XdrDataInputStream stream)
      : super(ManageInvoiceRequestAction(ManageInvoiceRequestAction.REMOVE)) {
    var length = 0;
    this.requestID = longFromXdr(stream);
  }
}

abstract class ManageInvoiceRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageInvoiceRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageInvoiceRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageInvoiceRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageInvoiceRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageInvoiceRequestOpExtEmptyVersion extends ManageInvoiceRequestOpExt {
  ManageInvoiceRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageInvoiceRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageInvoiceRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const BALANCE_NOT_FOUND = -2;
  static const NOT_FOUND = -3;
  static const TOO_MANY_INVOICES = -4;
  static const DETAILS_TOO_LONG = -5;
  static const NOT_ALLOWED_TO_REMOVE = -6;
  static const CONTRACT_NOT_FOUND = -7;
  static const ONLY_CONTRACTOR_CAN_ATTACH_INVOICE_TO_CONTRACT = -8;
  static const SENDER_ACCOUNT_MISMATCHED = -9;
  static const INVOICE_IS_APPROVED = -10;
  static const INVOICE_TASKS_NOT_FOUND = -11;
  late int value;

  ManageInvoiceRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageInvoiceRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct CreateInvoiceRequestResponse
//  {
//  	BalanceID receiverBalance;
//  	BalanceID senderBalance;
//
//  	uint64 requestID;
//
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateInvoiceRequestResponse extends XdrEncodable {
  late BALANCEID receiverBalance;
  late BALANCEID senderBalance;
  late UINT64 requestID;
  late CreateInvoiceRequestResponseExt ext;

  CreateInvoiceRequestResponse(
    this.receiverBalance,
    this.senderBalance,
    this.requestID,
    this.ext,
  );

  CreateInvoiceRequestResponse.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.receiverBalance = PublicKey.fromXdr(stream);
    this.senderBalance = PublicKey.fromXdr(stream);
    this.requestID = longFromXdr(stream);
    this.ext = CreateInvoiceRequestResponseExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    receiverBalance.toXdr(stream);
    senderBalance.toXdr(stream);
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateInvoiceRequestResponseExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateInvoiceRequestResponseExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateInvoiceRequestResponseExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateInvoiceRequestResponseExtEmptyVersion.fromXdr(stream);
    }

    return CreateInvoiceRequestResponseExtEmptyVersion.fromXdr(stream);
  }
}

class CreateInvoiceRequestResponseExtEmptyVersion
    extends CreateInvoiceRequestResponseExt {
  CreateInvoiceRequestResponseExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateInvoiceRequestResponseExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class ManageInvoiceRequestResult extends XdrEncodable {
  late ManageInvoiceRequestResultCode discriminant;

  ManageInvoiceRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageInvoiceRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageInvoiceRequestResultCode.SUCCESS:
        return ManageInvoiceRequestResultSuccess.fromXdr(stream);
    }

    return ManageInvoiceRequestResultSuccess.fromXdr(stream);
  }
}

class ManageInvoiceRequestResultSuccess extends ManageInvoiceRequestResult {
  ManageInvoiceRequestResultSuccess(this.success)
      : super(ManageInvoiceRequestResultCode(
            ManageInvoiceRequestResultCode.SUCCESS));
  late ManageInvoiceRequestResultSuccessSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageInvoiceRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageInvoiceRequestResultCode(
            ManageInvoiceRequestResultCode.SUCCESS)) {
    this.success = ManageInvoiceRequestResultSuccessSuccess.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          bool fulfilled;
//          union switch (ManageInvoiceRequestAction action)
//          {
//          case CREATE:
//              CreateInvoiceRequestResponse response;
//          case REMOVE:
//              void;
//          } details;
//
//          // reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          } ext;
//      }

//  ===========================================================================
class ManageInvoiceRequestResultSuccessSuccess extends XdrEncodable {
  late bool fulfilled;
  late ManageInvoiceRequestResultSuccessDetails details;
  late ManageInvoiceRequestResultSuccessExt ext;

  ManageInvoiceRequestResultSuccessSuccess(
    this.fulfilled,
    this.details,
    this.ext,
  );

  ManageInvoiceRequestResultSuccessSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.fulfilled = boolFromXdr(stream);
    this.details = ManageInvoiceRequestResultSuccessDetails.fromXdr(stream);
    this.ext = ManageInvoiceRequestResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    fulfilled.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageInvoiceRequestResultSuccessDetails extends XdrEncodable {
  late ManageInvoiceRequestAction discriminant;

  ManageInvoiceRequestResultSuccessDetails(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageInvoiceRequestResultSuccessDetails fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageInvoiceRequestAction.CREATE:
        return ManageInvoiceRequestResultSuccessDetailsCreate.fromXdr(stream);
      case ManageInvoiceRequestAction.REMOVE:
        return ManageInvoiceRequestResultSuccessDetailsRemove.fromXdr(stream);
    }

    return ManageInvoiceRequestResultSuccessDetailsCreate.fromXdr(stream);
  }
}

class ManageInvoiceRequestResultSuccessDetailsCreate
    extends ManageInvoiceRequestResultSuccessDetails {
  ManageInvoiceRequestResultSuccessDetailsCreate(this.response)
      : super(ManageInvoiceRequestAction(ManageInvoiceRequestAction.CREATE));
  late CreateInvoiceRequestResponse response;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    response.toXdr(stream);
  }

  ManageInvoiceRequestResultSuccessDetailsCreate.fromXdr(
      XdrDataInputStream stream)
      : super(ManageInvoiceRequestAction(ManageInvoiceRequestAction.CREATE)) {
    this.response = CreateInvoiceRequestResponse.fromXdr(stream);
  }
}

class ManageInvoiceRequestResultSuccessDetailsRemove
    extends ManageInvoiceRequestResultSuccessDetails {
  ManageInvoiceRequestResultSuccessDetailsRemove()
      : super(ManageInvoiceRequestAction(ManageInvoiceRequestAction.REMOVE));

  ManageInvoiceRequestResultSuccessDetailsRemove.fromXdr(
      XdrDataInputStream stream)
      : super(ManageInvoiceRequestAction(ManageInvoiceRequestAction.REMOVE)) {}
}

abstract class ManageInvoiceRequestResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageInvoiceRequestResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageInvoiceRequestResultSuccessExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageInvoiceRequestResultSuccessExtEmptyVersion.fromXdr(stream);
    }

    return ManageInvoiceRequestResultSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class ManageInvoiceRequestResultSuccessExtEmptyVersion
    extends ManageInvoiceRequestResultSuccessExt {
  ManageInvoiceRequestResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageInvoiceRequestResultSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageKVAction extends XdrEncodable {
  static const PUT = 1;
  static const REMOVE = 2;
  late int value;

  ManageKVAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageKVAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: `ManageKeyValueOp` is used to create the manage key-value operation which, if applied successfully, will update the key-value entry present in the system
//      struct ManageKeyValueOp
//      {
//          //: `key` is the key for KeyValueEntry
//          longstring key;
//          //: `action` defines an action applied to the KeyValue based on given ManageKVAction
//          //: * Action `PUT` stores new value for a particular key
//          //: * Action `REMOVE` removes the value by a particular key
//          union switch(ManageKVAction action)
//          {
//              case PUT:
//                   KeyValueEntryValue value;
//              case REMOVE:
//                  void;
//          }
//          action;
//
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//              case EMPTY_VERSION:
//                  void;
//          }
//          ext;
//      };

//  ===========================================================================
class ManageKeyValueOp extends XdrEncodable {
  late LONGSTRING key;
  late ManageKeyValueOpAction action;
  late ManageKeyValueOpExt ext;

  ManageKeyValueOp(
    this.key,
    this.action,
    this.ext,
  );

  ManageKeyValueOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.key = stringFromXdr(stream);
    this.action = ManageKeyValueOpAction.fromXdr(stream);
    this.ext = ManageKeyValueOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    key.toXdr(stream);
    action.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageKeyValueOpAction extends XdrEncodable {
  late ManageKVAction discriminant;

  ManageKeyValueOpAction(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageKeyValueOpAction fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageKVAction.PUT:
        return ManageKeyValueOpActionPut.fromXdr(stream);
      case ManageKVAction.REMOVE:
        return ManageKeyValueOpActionRemove.fromXdr(stream);
    }

    return ManageKeyValueOpActionPut.fromXdr(stream);
  }
}

class ManageKeyValueOpActionPut extends ManageKeyValueOpAction {
  ManageKeyValueOpActionPut(this.value)
      : super(ManageKVAction(ManageKVAction.PUT));
  late KeyValueEntryValue value;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    value.toXdr(stream);
  }

  ManageKeyValueOpActionPut.fromXdr(XdrDataInputStream stream)
      : super(ManageKVAction(ManageKVAction.PUT)) {
    this.value = KeyValueEntryValue.fromXdr(stream);
  }
}

class ManageKeyValueOpActionRemove extends ManageKeyValueOpAction {
  ManageKeyValueOpActionRemove() : super(ManageKVAction(ManageKVAction.REMOVE));

  ManageKeyValueOpActionRemove.fromXdr(XdrDataInputStream stream)
      : super(ManageKVAction(ManageKVAction.REMOVE)) {}
}

abstract class ManageKeyValueOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageKeyValueOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageKeyValueOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageKeyValueOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageKeyValueOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageKeyValueOpExtEmptyVersion extends ManageKeyValueOpExt {
  ManageKeyValueOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageKeyValueOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: `ManageKeyValueSuccess` represents details returned after the successful application of `ManageKeyValueOp`
//      struct ManageKeyValueSuccess
//      {
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//              case EMPTY_VERSION:
//                  void;
//          }
//          ext;
//      };

//  ===========================================================================
class ManageKeyValueSuccess extends XdrEncodable {
  late ManageKeyValueSuccessExt ext;

  ManageKeyValueSuccess(
    this.ext,
  );

  ManageKeyValueSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = ManageKeyValueSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class ManageKeyValueSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageKeyValueSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageKeyValueSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageKeyValueSuccessExtEmptyVersion.fromXdr(stream);
    }

    return ManageKeyValueSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class ManageKeyValueSuccessExtEmptyVersion extends ManageKeyValueSuccessExt {
  ManageKeyValueSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageKeyValueSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageKeyValueResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const INVALID_TYPE = -2;
  static const ZERO_VALUE_NOT_ALLOWED = -3;
  late int value;

  ManageKeyValueResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageKeyValueResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class ManageKeyValueResult extends XdrEncodable {
  late ManageKeyValueResultCode discriminant;

  ManageKeyValueResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageKeyValueResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageKeyValueResultCode.SUCCESS:
        return ManageKeyValueResultSuccess.fromXdr(stream);
    }

    return ManageKeyValueResultSuccess.fromXdr(stream);
  }
}

class ManageKeyValueResultSuccess extends ManageKeyValueResult {
  ManageKeyValueResultSuccess(this.success)
      : super(ManageKeyValueResultCode(ManageKeyValueResultCode.SUCCESS));
  late ManageKeyValueSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageKeyValueResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageKeyValueResultCode(ManageKeyValueResultCode.SUCCESS)) {
    this.success = ManageKeyValueSuccess.fromXdr(stream);
  }
}

class ManageLimitsAction extends XdrEncodable {
  static const CREATE = 0;
  static const REMOVE = 1;
  late int value;

  ManageLimitsAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageLimitsAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: `LimitsCreateDetails` is used in the system configuration to set limits (daily, weekly, montly, annual)
//  //: for different assets, operations (according to StatsOpType), particular account roles, particular accounts,
//  //: or globally (only if both parameters particular account role and paticular account are not specified)
//  struct LimitsCreateDetails
//  {
//      //: (optional) ID of an account role that will be imposed with limits
//      uint64*     accountRole;
//      //: (optional) ID of an account that will be imposed with limits
//      AccountID*  accountID;
//      //: Operation type to which limits will be applied. See `enum StatsOpType`
//      StatsOpType statsOpType;
//      //: `AssetCode` defines an asset to which limits will be applied
//      AssetCode   assetCode;
//      //: `isConvertNeeded` indicates whether the asset conversion is needed for the limits entry or not needed.
//      //: If this field is `true` - limits are applied to all balances of the account (to every asset account owns).
//      //: Otherwise limits from particular limits entry are applied only to the balances with `AssetCode` provided by entry.
//      bool        isConvertNeeded;
//
//      //: daily out limit
//      uint64 dailyOut;
//      //: weekly out limit
//      uint64 weeklyOut;
//      //: monthly out limit
//      uint64 monthlyOut;
//      //: annual out limit
//      uint64 annualOut;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LimitsCreateDetails extends XdrEncodable {
  late UINT64? accountRole;
  late ACCOUNTID? accountID;
  late StatsOpType statsOpType;
  late ASSETCODE assetCode;
  late bool isConvertNeeded;
  late UINT64 dailyOut;
  late UINT64 weeklyOut;
  late UINT64 monthlyOut;
  late UINT64 annualOut;
  late LimitsCreateDetailsExt ext;

  LimitsCreateDetails(
    this.accountRole,
    this.accountID,
    this.statsOpType,
    this.assetCode,
    this.isConvertNeeded,
    this.dailyOut,
    this.weeklyOut,
    this.monthlyOut,
    this.annualOut,
    this.ext,
  );

  LimitsCreateDetails.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    if (boolFromXdr(stream)) {
      this.accountRole = longFromXdr(stream);
    } else {
      this.accountRole = null;
    }
    if (boolFromXdr(stream)) {
      this.accountID = PublicKey.fromXdr(stream);
    } else {
      this.accountID = null;
    }
    this.statsOpType = StatsOpType.fromXdr(stream);
    this.assetCode = stringFromXdr(stream);
    this.isConvertNeeded = boolFromXdr(stream);
    this.dailyOut = longFromXdr(stream);
    this.weeklyOut = longFromXdr(stream);
    this.monthlyOut = longFromXdr(stream);
    this.annualOut = longFromXdr(stream);
    this.ext = LimitsCreateDetailsExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    if (accountRole != null) {
      true.toXdr(stream);
      accountRole?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    if (accountID != null) {
      true.toXdr(stream);
      accountID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    statsOpType.toXdr(stream);
    assetCode.toXdr(stream);
    isConvertNeeded.toXdr(stream);
    dailyOut.toXdr(stream);
    weeklyOut.toXdr(stream);
    monthlyOut.toXdr(stream);
    annualOut.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LimitsCreateDetailsExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LimitsCreateDetailsExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LimitsCreateDetailsExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LimitsCreateDetailsExtEmptyVersion.fromXdr(stream);
    }

    return LimitsCreateDetailsExtEmptyVersion.fromXdr(stream);
  }
}

class LimitsCreateDetailsExtEmptyVersion extends LimitsCreateDetailsExt {
  LimitsCreateDetailsExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LimitsCreateDetailsExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: `ManageLimitsOp` is used to update limits set in the system
//  struct ManageLimitsOp
//  {
//      //: `details` defines all details of an operation based on given `ManageLimitsAction`
//      union switch (ManageLimitsAction action)
//      {
//      case CREATE:
//          LimitsCreateDetails limitsCreateDetails;
//      case REMOVE:
//          uint64 id;
//      } details;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageLimitsOp extends XdrEncodable {
  late ManageLimitsOpDetails details;
  late ManageLimitsOpExt ext;

  ManageLimitsOp(
    this.details,
    this.ext,
  );

  ManageLimitsOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.details = ManageLimitsOpDetails.fromXdr(stream);
    this.ext = ManageLimitsOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageLimitsOpDetails extends XdrEncodable {
  late ManageLimitsAction discriminant;

  ManageLimitsOpDetails(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageLimitsOpDetails fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageLimitsAction.CREATE:
        return ManageLimitsOpDetailsCreate.fromXdr(stream);
      case ManageLimitsAction.REMOVE:
        return ManageLimitsOpDetailsRemove.fromXdr(stream);
    }

    return ManageLimitsOpDetailsCreate.fromXdr(stream);
  }
}

class ManageLimitsOpDetailsCreate extends ManageLimitsOpDetails {
  ManageLimitsOpDetailsCreate(this.limitsCreateDetails)
      : super(ManageLimitsAction(ManageLimitsAction.CREATE));
  late LimitsCreateDetails limitsCreateDetails;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    limitsCreateDetails.toXdr(stream);
  }

  ManageLimitsOpDetailsCreate.fromXdr(XdrDataInputStream stream)
      : super(ManageLimitsAction(ManageLimitsAction.CREATE)) {
    this.limitsCreateDetails = LimitsCreateDetails.fromXdr(stream);
  }
}

class ManageLimitsOpDetailsRemove extends ManageLimitsOpDetails {
  ManageLimitsOpDetailsRemove(this.id)
      : super(ManageLimitsAction(ManageLimitsAction.REMOVE));
  late UINT64 id;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    id.toXdr(stream);
  }

  ManageLimitsOpDetailsRemove.fromXdr(XdrDataInputStream stream)
      : super(ManageLimitsAction(ManageLimitsAction.REMOVE)) {
    var length = 0;
    this.id = longFromXdr(stream);
  }
}

abstract class ManageLimitsOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageLimitsOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageLimitsOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageLimitsOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageLimitsOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageLimitsOpExtEmptyVersion extends ManageLimitsOpExt {
  ManageLimitsOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageLimitsOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageLimitsResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const ACCOUNT_NOT_FOUND = -1;
  static const NOT_FOUND = -2;
  static const ROLE_NOT_FOUND = -3;
  static const CANNOT_CREATE_FOR_ACC_ID_AND_ACC_TYPE = -4;
  static const INVALID_LIMITS = -5;
  static const ASSET_NOT_FOUND = -6;
  late int value;

  ManageLimitsResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageLimitsResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class ManageLimitsResult extends XdrEncodable {
  late ManageLimitsResultCode discriminant;

  ManageLimitsResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageLimitsResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageLimitsResultCode.SUCCESS:
        return ManageLimitsResultSuccess.fromXdr(stream);
    }

    return ManageLimitsResultSuccess.fromXdr(stream);
  }
}

class ManageLimitsResultSuccess extends ManageLimitsResult {
  ManageLimitsResultSuccess(this.success)
      : super(ManageLimitsResultCode(ManageLimitsResultCode.SUCCESS));
  late ManageLimitsResultSuccessSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageLimitsResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageLimitsResultCode(ManageLimitsResultCode.SUCCESS)) {
    this.success = ManageLimitsResultSuccessSuccess.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          //: `details` represents an additional information of the `ManageLimitsOp` application result
//          union switch (ManageLimitsAction action)
//          {
//          case CREATE:
//              //: ID of the created limits entry
//              uint64 id;
//          case REMOVE:
//              void;
//          } details;
//
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//  }

//  ===========================================================================
class ManageLimitsResultSuccessSuccess extends XdrEncodable {
  late ManageLimitsResultSuccessDetails details;
  late ManageLimitsResultSuccessExt ext;

  ManageLimitsResultSuccessSuccess(
    this.details,
    this.ext,
  );

  ManageLimitsResultSuccessSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.details = ManageLimitsResultSuccessDetails.fromXdr(stream);
    this.ext = ManageLimitsResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageLimitsResultSuccessDetails extends XdrEncodable {
  late ManageLimitsAction discriminant;

  ManageLimitsResultSuccessDetails(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageLimitsResultSuccessDetails fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageLimitsAction.CREATE:
        return ManageLimitsResultSuccessDetailsCreate.fromXdr(stream);
      case ManageLimitsAction.REMOVE:
        return ManageLimitsResultSuccessDetailsRemove.fromXdr(stream);
    }

    return ManageLimitsResultSuccessDetailsCreate.fromXdr(stream);
  }
}

class ManageLimitsResultSuccessDetailsCreate
    extends ManageLimitsResultSuccessDetails {
  ManageLimitsResultSuccessDetailsCreate(this.id)
      : super(ManageLimitsAction(ManageLimitsAction.CREATE));
  late UINT64 id;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    id.toXdr(stream);
  }

  ManageLimitsResultSuccessDetailsCreate.fromXdr(XdrDataInputStream stream)
      : super(ManageLimitsAction(ManageLimitsAction.CREATE)) {
    var length = 0;
    this.id = longFromXdr(stream);
  }
}

class ManageLimitsResultSuccessDetailsRemove
    extends ManageLimitsResultSuccessDetails {
  ManageLimitsResultSuccessDetailsRemove()
      : super(ManageLimitsAction(ManageLimitsAction.REMOVE));

  ManageLimitsResultSuccessDetailsRemove.fromXdr(XdrDataInputStream stream)
      : super(ManageLimitsAction(ManageLimitsAction.REMOVE)) {}
}

abstract class ManageLimitsResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageLimitsResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageLimitsResultSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageLimitsResultSuccessExtEmptyVersion.fromXdr(stream);
    }

    return ManageLimitsResultSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class ManageLimitsResultSuccessExtEmptyVersion
    extends ManageLimitsResultSuccessExt {
  ManageLimitsResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageLimitsResultSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

// === xdr source ============================================================

//  //: ManageOfferOp is used to create or delete offer
//  struct ManageOfferOp
//  {
//      //: Balance for base asset of an offer creator
//      BalanceID baseBalance;
//
//      //: Balance for quote asset of an offer creator
//      BalanceID quoteBalance;
//
//      //: Direction of an offer (to buy or to sell)
//      bool isBuy;
//
//      //: Amount in base asset to buy or sell (to delete an offer, set 0)
//      int64 amount;
//
//      //: Price of base asset in the ratio of quote asset
//      int64 price;
//
//      //: Fee in quote asset to pay
//      int64 fee;
//
//      //: ID of an offer to be managed. 0 to create a new offer, otherwise to edit an existing offer
//      uint64 offerID;
//
//      //: ID of an orderBook to put an offer in and to find a match in
//      uint64 orderBookID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//              void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageOfferOp extends XdrEncodable {
  late BALANCEID baseBalance;
  late BALANCEID quoteBalance;
  late bool isBuy;
  late INT64 amount;
  late INT64 price;
  late INT64 fee;
  late UINT64 offerID;
  late UINT64 orderBookID;
  late ManageOfferOpExt ext;

  ManageOfferOp(
    this.baseBalance,
    this.quoteBalance,
    this.isBuy,
    this.amount,
    this.price,
    this.fee,
    this.offerID,
    this.orderBookID,
    this.ext,
  );

  ManageOfferOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.baseBalance = PublicKey.fromXdr(stream);
    this.quoteBalance = PublicKey.fromXdr(stream);
    this.isBuy = boolFromXdr(stream);
    this.amount = longFromXdr(stream);
    this.price = longFromXdr(stream);
    this.fee = longFromXdr(stream);
    this.offerID = longFromXdr(stream);
    this.orderBookID = longFromXdr(stream);
    this.ext = ManageOfferOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    baseBalance.toXdr(stream);
    quoteBalance.toXdr(stream);
    isBuy.toXdr(stream);
    amount.toXdr(stream);
    price.toXdr(stream);
    fee.toXdr(stream);
    offerID.toXdr(stream);
    orderBookID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageOfferOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageOfferOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageOfferOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageOfferOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageOfferOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageOfferOpExtEmptyVersion extends ManageOfferOpExt {
  ManageOfferOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageOfferOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageOfferResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const PAIR_NOT_TRADED = -2;
  static const BALANCE_NOT_FOUND = -3;
  static const UNDERFUNDED = -4;
  static const CROSS_SELF = -5;
  static const OFFER_OVERFLOW = -6;
  static const ASSET_PAIR_NOT_TRADABLE = -7;
  static const PHYSICAL_PRICE_RESTRICTION = -8;
  static const CURRENT_PRICE_RESTRICTION = -9;
  static const NOT_FOUND = -10;
  static const INVALID_PERCENT_FEE = -11;
  static const INSUFFICIENT_PRICE = -12;
  static const ORDER_BOOK_DOES_NOT_EXISTS = -13;
  static const SALE_IS_NOT_STARTED_YET = -14;
  static const SALE_ALREADY_ENDED = -15;
  static const ORDER_VIOLATES_HARD_CAP = -16;
  static const CANT_PARTICIPATE_OWN_SALE = -17;
  static const ASSET_MISMATCHED = -18;
  static const PRICE_DOES_NOT_MATCH = -19;
  static const PRICE_IS_INVALID = -20;
  static const UPDATE_IS_NOT_ALLOWED = -21;
  static const INVALID_AMOUNT = -22;
  static const SALE_IS_NOT_ACTIVE = -23;
  static const REQUIRES_KYC = -24;
  static const SOURCE_UNDERFUNDED = -25;
  static const SOURCE_BALANCE_LOCK_OVERFLOW = -26;
  static const REQUIRES_VERIFICATION = -27;
  static const INCORRECT_AMOUNT_PRECISION = -28;
  static const SPECIFIC_RULE_FORBIDS = -29;
  static const PENDING_ISSUANCE_LESS_THEN_AMOUNT = -30;
  late int value;

  ManageOfferResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageOfferResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

class ManageOfferEffect extends XdrEncodable {
  static const CREATED = 0;
  static const UPDATED = 1;
  static const DELETED = 2;
  late int value;

  ManageOfferEffect(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageOfferEffect.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Used when offers are taken during the operation
//  struct ClaimOfferAtom
//  {
//      // emitted to identify the offer
//      //: ID of an account that created the matched offer
//      AccountID bAccountID;
//      //: ID of the matched offer
//      uint64 offerID;
//      //: Amount in base asset taken during the match
//      int64 baseAmount;
//      //: Amount in quote asset taked during the match
//      int64 quoteAmount;
//      //: Fee paid by an offer owner
//      int64 bFeePaid;
//      //: Fee paid by the source of an operation
//      int64 aFeePaid;
//      //: Balance in base asset of an offer owner
//      BalanceID baseBalance;
//      //: Balance in quote asset of an offer owner
//      BalanceID quoteBalance;
//      //: Match price
//      int64 currentPrice;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ClaimOfferAtom extends XdrEncodable {
  late ACCOUNTID bAccountID;
  late UINT64 offerID;
  late INT64 baseAmount;
  late INT64 quoteAmount;
  late INT64 bFeePaid;
  late INT64 aFeePaid;
  late BALANCEID baseBalance;
  late BALANCEID quoteBalance;
  late INT64 currentPrice;
  late ClaimOfferAtomExt ext;

  ClaimOfferAtom(
    this.bAccountID,
    this.offerID,
    this.baseAmount,
    this.quoteAmount,
    this.bFeePaid,
    this.aFeePaid,
    this.baseBalance,
    this.quoteBalance,
    this.currentPrice,
    this.ext,
  );

  ClaimOfferAtom.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.bAccountID = PublicKey.fromXdr(stream);
    this.offerID = longFromXdr(stream);
    this.baseAmount = longFromXdr(stream);
    this.quoteAmount = longFromXdr(stream);
    this.bFeePaid = longFromXdr(stream);
    this.aFeePaid = longFromXdr(stream);
    this.baseBalance = PublicKey.fromXdr(stream);
    this.quoteBalance = PublicKey.fromXdr(stream);
    this.currentPrice = longFromXdr(stream);
    this.ext = ClaimOfferAtomExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    bAccountID.toXdr(stream);
    offerID.toXdr(stream);
    baseAmount.toXdr(stream);
    quoteAmount.toXdr(stream);
    bFeePaid.toXdr(stream);
    aFeePaid.toXdr(stream);
    baseBalance.toXdr(stream);
    quoteBalance.toXdr(stream);
    currentPrice.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ClaimOfferAtomExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ClaimOfferAtomExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ClaimOfferAtomExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ClaimOfferAtomExtEmptyVersion.fromXdr(stream);
    }

    return ClaimOfferAtomExtEmptyVersion.fromXdr(stream);
  }
}

class ClaimOfferAtomExtEmptyVersion extends ClaimOfferAtomExt {
  ClaimOfferAtomExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ClaimOfferAtomExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Contains details of successful operation application
//  struct ManageOfferSuccessResult
//  {
//
//      //: Offers that matched a created offer
//      ClaimOfferAtom offersClaimed<>;
//      //: Base asset of an offer
//      AssetCode baseAsset;
//      //: Quote asset of an offer
//      AssetCode quoteAsset;
//
//      //: Effect of operation
//      union switch (ManageOfferEffect effect)
//      {
//      case CREATED:
//      case UPDATED:
//          //: Updated offer entry
//          OfferEntry offer;
//      default:
//          void;
//      }
//      offer;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageOfferSuccessResult extends XdrEncodable {
  late List<ClaimOfferAtom> offersClaimed;
  late ASSETCODE baseAsset;
  late ASSETCODE quoteAsset;
  late ManageOfferSuccessResultOffer offer;
  late ManageOfferSuccessResultExt ext;

  ManageOfferSuccessResult(
    this.offersClaimed,
    this.baseAsset,
    this.quoteAsset,
    this.offer,
    this.ext,
  );

  ManageOfferSuccessResult.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    length = intFromXdr(stream);
    offersClaimed = <ClaimOfferAtom>[];
    while (length > 0) {
      offersClaimed.add(ClaimOfferAtom.fromXdr(stream));
      length--;
    }

    this.baseAsset = stringFromXdr(stream);
    this.quoteAsset = stringFromXdr(stream);
    this.offer = ManageOfferSuccessResultOffer.fromXdr(stream);
    this.ext = ManageOfferSuccessResultExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    offersClaimed.length.toXdr(stream);
    offersClaimed.forEach((element) {
      element.toXdr(stream);
    });
    baseAsset.toXdr(stream);
    quoteAsset.toXdr(stream);
    offer.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageOfferSuccessResultOffer extends XdrEncodable {
  late ManageOfferEffect discriminant;

  ManageOfferSuccessResultOffer(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageOfferSuccessResultOffer fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageOfferEffect.CREATED:
        return ManageOfferSuccessResultOfferCreated.fromXdr(stream);
      case ManageOfferEffect.UPDATED:
        return ManageOfferSuccessResultOfferUpdated.fromXdr(stream);
    }

    return ManageOfferSuccessResultOfferCreated.fromXdr(stream);
  }
}

class ManageOfferSuccessResultOfferCreated
    extends ManageOfferSuccessResultOffer {
  ManageOfferSuccessResultOfferCreated(this.offer)
      : super(ManageOfferEffect(ManageOfferEffect.CREATED));
  late OfferEntry offer;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    offer.toXdr(stream);
  }

  ManageOfferSuccessResultOfferCreated.fromXdr(XdrDataInputStream stream)
      : super(ManageOfferEffect(ManageOfferEffect.CREATED)) {
    this.offer = OfferEntry.fromXdr(stream);
  }
}

class ManageOfferSuccessResultOfferUpdated
    extends ManageOfferSuccessResultOffer {
  ManageOfferSuccessResultOfferUpdated(this.offer)
      : super(ManageOfferEffect(ManageOfferEffect.UPDATED));
  late OfferEntry offer;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    offer.toXdr(stream);
  }

  ManageOfferSuccessResultOfferUpdated.fromXdr(XdrDataInputStream stream)
      : super(ManageOfferEffect(ManageOfferEffect.UPDATED)) {
    this.offer = OfferEntry.fromXdr(stream);
  }
}

abstract class ManageOfferSuccessResultExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageOfferSuccessResultExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageOfferSuccessResultExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageOfferSuccessResultExtEmptyVersion.fromXdr(stream);
    }

    return ManageOfferSuccessResultExtEmptyVersion.fromXdr(stream);
  }
}

class ManageOfferSuccessResultExtEmptyVersion
    extends ManageOfferSuccessResultExt {
  ManageOfferSuccessResultExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageOfferSuccessResultExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class ManageOfferResult extends XdrEncodable {
  late ManageOfferResultCode discriminant;

  ManageOfferResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageOfferResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageOfferResultCode.SUCCESS:
        return ManageOfferResultSuccess.fromXdr(stream);
      case ManageOfferResultCode.PHYSICAL_PRICE_RESTRICTION:
        return ManageOfferResultPhysicalPriceRestriction.fromXdr(stream);
      case ManageOfferResultCode.CURRENT_PRICE_RESTRICTION:
        return ManageOfferResultCurrentPriceRestriction.fromXdr(stream);
    }

    return ManageOfferResultSuccess.fromXdr(stream);
  }
}

class ManageOfferResultSuccess extends ManageOfferResult {
  ManageOfferResultSuccess(this.success)
      : super(ManageOfferResultCode(ManageOfferResultCode.SUCCESS));
  late ManageOfferSuccessResult success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageOfferResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageOfferResultCode(ManageOfferResultCode.SUCCESS)) {
    this.success = ManageOfferSuccessResult.fromXdr(stream);
  }
}

class ManageOfferResultPhysicalPriceRestriction extends ManageOfferResult {
  ManageOfferResultPhysicalPriceRestriction(this.physicalPriceRestriction)
      : super(ManageOfferResultCode(
            ManageOfferResultCode.PHYSICAL_PRICE_RESTRICTION));
  late ManageOfferResultPhysicalPriceRestrictionPhysicalPriceRestriction
      physicalPriceRestriction;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    physicalPriceRestriction.toXdr(stream);
  }

  ManageOfferResultPhysicalPriceRestriction.fromXdr(XdrDataInputStream stream)
      : super(ManageOfferResultCode(
            ManageOfferResultCode.PHYSICAL_PRICE_RESTRICTION)) {
    this.physicalPriceRestriction =
        ManageOfferResultPhysicalPriceRestrictionPhysicalPriceRestriction
            .fromXdr(stream);
  }
}

class ManageOfferResultCurrentPriceRestriction extends ManageOfferResult {
  ManageOfferResultCurrentPriceRestriction(this.currentPriceRestriction)
      : super(ManageOfferResultCode(
            ManageOfferResultCode.CURRENT_PRICE_RESTRICTION));
  late ManageOfferResultCurrentPriceRestrictionCurrentPriceRestriction
      currentPriceRestriction;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    currentPriceRestriction.toXdr(stream);
  }

  ManageOfferResultCurrentPriceRestriction.fromXdr(XdrDataInputStream stream)
      : super(ManageOfferResultCode(
            ManageOfferResultCode.CURRENT_PRICE_RESTRICTION)) {
    this.currentPriceRestriction =
        ManageOfferResultCurrentPriceRestrictionCurrentPriceRestriction.fromXdr(
            stream);
  }
}
// === xdr source ============================================================

//  struct {
//          //: Physical price of the base asset
//          int64 physicalPrice;
//          //: Reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class ManageOfferResultPhysicalPriceRestrictionPhysicalPriceRestriction
    extends XdrEncodable {
  late INT64 physicalPrice;
  late ManageOfferResultPhysicalPriceRestrictionExt ext;

  ManageOfferResultPhysicalPriceRestrictionPhysicalPriceRestriction(
    this.physicalPrice,
    this.ext,
  );

  ManageOfferResultPhysicalPriceRestrictionPhysicalPriceRestriction.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.physicalPrice = longFromXdr(stream);
    this.ext = ManageOfferResultPhysicalPriceRestrictionExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    physicalPrice.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageOfferResultPhysicalPriceRestrictionExt
    extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageOfferResultPhysicalPriceRestrictionExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageOfferResultPhysicalPriceRestrictionExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageOfferResultPhysicalPriceRestrictionExtEmptyVersion.fromXdr(
            stream);
    }

    return ManageOfferResultPhysicalPriceRestrictionExtEmptyVersion.fromXdr(
        stream);
  }
}

class ManageOfferResultPhysicalPriceRestrictionExtEmptyVersion
    extends ManageOfferResultPhysicalPriceRestrictionExt {
  ManageOfferResultPhysicalPriceRestrictionExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageOfferResultPhysicalPriceRestrictionExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct {
//          //: Current price of the base asset
//          int64 currentPrice;
//          //: Reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class ManageOfferResultCurrentPriceRestrictionCurrentPriceRestriction
    extends XdrEncodable {
  late INT64 currentPrice;
  late ManageOfferResultCurrentPriceRestrictionExt ext;

  ManageOfferResultCurrentPriceRestrictionCurrentPriceRestriction(
    this.currentPrice,
    this.ext,
  );

  ManageOfferResultCurrentPriceRestrictionCurrentPriceRestriction.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.currentPrice = longFromXdr(stream);
    this.ext = ManageOfferResultCurrentPriceRestrictionExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    currentPrice.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageOfferResultCurrentPriceRestrictionExt
    extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageOfferResultCurrentPriceRestrictionExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageOfferResultCurrentPriceRestrictionExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageOfferResultCurrentPriceRestrictionExtEmptyVersion.fromXdr(
            stream);
    }

    return ManageOfferResultCurrentPriceRestrictionExtEmptyVersion.fromXdr(
        stream);
  }
}

class ManageOfferResultCurrentPriceRestrictionExtEmptyVersion
    extends ManageOfferResultCurrentPriceRestrictionExt {
  ManageOfferResultCurrentPriceRestrictionExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageOfferResultCurrentPriceRestrictionExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManagePollAction extends XdrEncodable {
  static const CLOSE = 0;
  static const UPDATE_END_TIME = 1;
  static const CANCEL = 2;
  late int value;

  ManagePollAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManagePollAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

class PollResult extends XdrEncodable {
  static const PASSED = 0;
  static const FAILED = 1;
  late int value;

  PollResult(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  PollResult.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: ClosePollData is used to submit poll results
//  struct ClosePollData
//  {
//      //: result of voting
//      PollResult result;
//
//      //: Arbitrary stringified json object with details about the result
//      longstring details;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ClosePollData extends XdrEncodable {
  late PollResult result;
  late LONGSTRING details;
  late ClosePollDataExt ext;

  ClosePollData(
    this.result,
    this.details,
    this.ext,
  );

  ClosePollData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.result = PollResult.fromXdr(stream);
    this.details = stringFromXdr(stream);
    this.ext = ClosePollDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    result.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ClosePollDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ClosePollDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ClosePollDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ClosePollDataExtEmptyVersion.fromXdr(stream);
    }

    return ClosePollDataExtEmptyVersion.fromXdr(stream);
  }
}

class ClosePollDataExtEmptyVersion extends ClosePollDataExt {
  ClosePollDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ClosePollDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct UpdatePollEndTimeData
//  {
//      uint64 newEndTime;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class UpdatePollEndTimeData extends XdrEncodable {
  late UINT64 newEndTime;
  late UpdatePollEndTimeDataExt ext;

  UpdatePollEndTimeData(
    this.newEndTime,
    this.ext,
  );

  UpdatePollEndTimeData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.newEndTime = longFromXdr(stream);
    this.ext = UpdatePollEndTimeDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    newEndTime.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class UpdatePollEndTimeDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  UpdatePollEndTimeDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static UpdatePollEndTimeDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return UpdatePollEndTimeDataExtEmptyVersion.fromXdr(stream);
    }

    return UpdatePollEndTimeDataExtEmptyVersion.fromXdr(stream);
  }
}

class UpdatePollEndTimeDataExtEmptyVersion extends UpdatePollEndTimeDataExt {
  UpdatePollEndTimeDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  UpdatePollEndTimeDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: ManagePollOp is used to close,  update end time or cancel the poll
//  struct ManagePollOp
//  {
//      //: ID of poll to manage
//      uint64 pollID;
//
//      //: data is used to pass one of `ManagePollAction` with required params
//      union switch (ManagePollAction action)
//      {
//      case CLOSE:
//          ClosePollData closePollData;
//      case UPDATE_END_TIME:
//          UpdatePollEndTimeData updateTimeData;
//      case CANCEL:
//          EmptyExt ext;
//      }
//      data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManagePollOp extends XdrEncodable {
  late UINT64 pollID;
  late ManagePollOpData data;
  late ManagePollOpExt ext;

  ManagePollOp(
    this.pollID,
    this.data,
    this.ext,
  );

  ManagePollOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.pollID = longFromXdr(stream);
    this.data = ManagePollOpData.fromXdr(stream);
    this.ext = ManagePollOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManagePollOpData extends XdrEncodable {
  late ManagePollAction discriminant;

  ManagePollOpData(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManagePollOpData fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManagePollAction.CLOSE:
        return ManagePollOpDataClose.fromXdr(stream);
      case ManagePollAction.UPDATE_END_TIME:
        return ManagePollOpDataUpdateEndTime.fromXdr(stream);
      case ManagePollAction.CANCEL:
        return ManagePollOpDataCancel.fromXdr(stream);
    }

    return ManagePollOpDataClose.fromXdr(stream);
  }
}

class ManagePollOpDataClose extends ManagePollOpData {
  ManagePollOpDataClose(this.closePollData)
      : super(ManagePollAction(ManagePollAction.CLOSE));
  late ClosePollData closePollData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    closePollData.toXdr(stream);
  }

  ManagePollOpDataClose.fromXdr(XdrDataInputStream stream)
      : super(ManagePollAction(ManagePollAction.CLOSE)) {
    this.closePollData = ClosePollData.fromXdr(stream);
  }
}

class ManagePollOpDataUpdateEndTime extends ManagePollOpData {
  ManagePollOpDataUpdateEndTime(this.updateTimeData)
      : super(ManagePollAction(ManagePollAction.UPDATE_END_TIME));
  late UpdatePollEndTimeData updateTimeData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateTimeData.toXdr(stream);
  }

  ManagePollOpDataUpdateEndTime.fromXdr(XdrDataInputStream stream)
      : super(ManagePollAction(ManagePollAction.UPDATE_END_TIME)) {
    this.updateTimeData = UpdatePollEndTimeData.fromXdr(stream);
  }
}

class ManagePollOpDataCancel extends ManagePollOpData {
  ManagePollOpDataCancel(this.ext)
      : super(ManagePollAction(ManagePollAction.CANCEL));
  late EmptyExt ext;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ext.toXdr(stream);
  }

  ManagePollOpDataCancel.fromXdr(XdrDataInputStream stream)
      : super(ManagePollAction(ManagePollAction.CANCEL)) {
    this.ext = EmptyExt.fromXdr(stream);
  }
}

abstract class ManagePollOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManagePollOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManagePollOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManagePollOpExtEmptyVersion.fromXdr(stream);
    }

    return ManagePollOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManagePollOpExtEmptyVersion extends ManagePollOpExt {
  ManagePollOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManagePollOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManagePollResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const POLL_NOT_READY = -2;
  static const NOT_AUTHORIZED_TO_CLOSE_POLL = -3;
  static const INVALID_END_TIME = -4;
  static const NOT_AUTHORIZED = -5;
  late int value;

  ManagePollResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManagePollResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class ManagePollResult extends XdrEncodable {
  late ManagePollResultCode discriminant;

  ManagePollResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManagePollResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManagePollResultCode.SUCCESS:
        return ManagePollResultSuccess.fromXdr(stream);
    }

    return ManagePollResultSuccess.fromXdr(stream);
  }
}

class ManagePollResultSuccess extends ManagePollResult {
  ManagePollResultSuccess(this.ext)
      : super(ManagePollResultCode(ManagePollResultCode.SUCCESS));
  late EmptyExt ext;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ext.toXdr(stream);
  }

  ManagePollResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManagePollResultCode(ManagePollResultCode.SUCCESS)) {
    this.ext = EmptyExt.fromXdr(stream);
  }
}

class ManageSaleAction extends XdrEncodable {
  static const CREATE_UPDATE_DETAILS_REQUEST = 1;
  static const CANCEL = 2;
  late int value;

  ManageSaleAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageSaleAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Details regarding the `Update Sale Details` request
//  struct UpdateSaleDetailsData {
//      //: ID of a reviewable request. If set 0, request is created, else - request is updated
//      uint64 requestID; // if requestID is 0 - create request, else - update
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails;
//      //: (optional) Bit mask whose flags must be cleared in order for UpdateSaleDetailsRequest to be approved,
//      //: which will be used instead of key-value by key sale_update_tasks:<asset_code>
//      uint32* allTasks;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class UpdateSaleDetailsData extends XdrEncodable {
  late UINT64 requestID;
  late LONGSTRING creatorDetails;
  late UINT32? allTasks;
  late UpdateSaleDetailsDataExt ext;

  UpdateSaleDetailsData(
    this.requestID,
    this.creatorDetails,
    this.allTasks,
    this.ext,
  );

  UpdateSaleDetailsData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    if (boolFromXdr(stream)) {
      this.allTasks = intFromXdr(stream);
    } else {
      this.allTasks = null;
    }
    this.ext = UpdateSaleDetailsDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    creatorDetails.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}

abstract class UpdateSaleDetailsDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  UpdateSaleDetailsDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static UpdateSaleDetailsDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return UpdateSaleDetailsDataExtEmptyVersion.fromXdr(stream);
    }

    return UpdateSaleDetailsDataExtEmptyVersion.fromXdr(stream);
  }
}

class UpdateSaleDetailsDataExtEmptyVersion extends UpdateSaleDetailsDataExt {
  UpdateSaleDetailsDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  UpdateSaleDetailsDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: ManageSaleOp is used to cancel a sale, or create a reviewable request which, after approval, will update sale details.
//  struct ManageSaleOp
//  {
//      //: ID of the sale to manage
//      uint64 saleID;
//      //: data is used to pass ManageSaleAction along with required parameters
//      union switch (ManageSaleAction action) {
//      case CREATE_UPDATE_DETAILS_REQUEST:
//          UpdateSaleDetailsData updateSaleDetailsData;
//      case CANCEL:
//          void;
//      } data;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class ManageSaleOp extends XdrEncodable {
  late UINT64 saleID;
  late ManageSaleOpData data;
  late ManageSaleOpExt ext;

  ManageSaleOp(
    this.saleID,
    this.data,
    this.ext,
  );

  ManageSaleOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.saleID = longFromXdr(stream);
    this.data = ManageSaleOpData.fromXdr(stream);
    this.ext = ManageSaleOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageSaleOpData extends XdrEncodable {
  late ManageSaleAction discriminant;

  ManageSaleOpData(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageSaleOpData fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageSaleAction.CREATE_UPDATE_DETAILS_REQUEST:
        return ManageSaleOpDataCreateUpdateDetailsRequest.fromXdr(stream);
      case ManageSaleAction.CANCEL:
        return ManageSaleOpDataCancel.fromXdr(stream);
    }

    return ManageSaleOpDataCreateUpdateDetailsRequest.fromXdr(stream);
  }
}

class ManageSaleOpDataCreateUpdateDetailsRequest extends ManageSaleOpData {
  ManageSaleOpDataCreateUpdateDetailsRequest(this.updateSaleDetailsData)
      : super(ManageSaleAction(ManageSaleAction.CREATE_UPDATE_DETAILS_REQUEST));
  late UpdateSaleDetailsData updateSaleDetailsData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateSaleDetailsData.toXdr(stream);
  }

  ManageSaleOpDataCreateUpdateDetailsRequest.fromXdr(XdrDataInputStream stream)
      : super(
            ManageSaleAction(ManageSaleAction.CREATE_UPDATE_DETAILS_REQUEST)) {
    this.updateSaleDetailsData = UpdateSaleDetailsData.fromXdr(stream);
  }
}

class ManageSaleOpDataCancel extends ManageSaleOpData {
  ManageSaleOpDataCancel() : super(ManageSaleAction(ManageSaleAction.CANCEL));

  ManageSaleOpDataCancel.fromXdr(XdrDataInputStream stream)
      : super(ManageSaleAction(ManageSaleAction.CANCEL)) {}
}

abstract class ManageSaleOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageSaleOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageSaleOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageSaleOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageSaleOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageSaleOpExtEmptyVersion extends ManageSaleOpExt {
  ManageSaleOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageSaleOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageSaleResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const SALE_NOT_FOUND = -1;
  static const INVALID_CREATOR_DETAILS = -2;
  static const UPDATE_DETAILS_REQUEST_ALREADY_EXISTS = -3;
  static const UPDATE_DETAILS_REQUEST_NOT_FOUND = -4;
  static const NOT_ALLOWED_TO_SET_TASKS_ON_UPDATE = -5;
  static const SALE_UPDATE_DETAILS_TASKS_NOT_FOUND = -6;
  late int value;

  ManageSaleResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageSaleResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //:Result of ManageSale operation successful application
//  struct ManageSaleResultSuccess
//  {
//      //: Indicates  whether or not the ManageSale request was auto approved and fulfilled
//      bool fulfilled; // can be used for any reviewable request type created with manage sale operation
//
//      //: response is used for additional information regarding the action performed on sale during operation application
//      union switch (ManageSaleAction action) {
//      case CREATE_UPDATE_DETAILS_REQUEST:
//          uint64 requestID;
//      case CANCEL:
//          void;
//      } response;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageSaleResultSuccess extends XdrEncodable {
  late bool fulfilled;
  late ManageSaleResultSuccessResponse response;
  late ManageSaleResultSuccessExt ext;

  ManageSaleResultSuccess(
    this.fulfilled,
    this.response,
    this.ext,
  );

  ManageSaleResultSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.fulfilled = boolFromXdr(stream);
    this.response = ManageSaleResultSuccessResponse.fromXdr(stream);
    this.ext = ManageSaleResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    fulfilled.toXdr(stream);
    response.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageSaleResultSuccessResponse extends XdrEncodable {
  late ManageSaleAction discriminant;

  ManageSaleResultSuccessResponse(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageSaleResultSuccessResponse fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageSaleAction.CREATE_UPDATE_DETAILS_REQUEST:
        return ManageSaleResultSuccessResponseCreateUpdateDetailsRequest
            .fromXdr(stream);
      case ManageSaleAction.CANCEL:
        return ManageSaleResultSuccessResponseCancel.fromXdr(stream);
    }

    return ManageSaleResultSuccessResponseCreateUpdateDetailsRequest.fromXdr(
        stream);
  }
}

class ManageSaleResultSuccessResponseCreateUpdateDetailsRequest
    extends ManageSaleResultSuccessResponse {
  ManageSaleResultSuccessResponseCreateUpdateDetailsRequest(this.requestID)
      : super(ManageSaleAction(ManageSaleAction.CREATE_UPDATE_DETAILS_REQUEST));
  late UINT64 requestID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    requestID.toXdr(stream);
  }

  ManageSaleResultSuccessResponseCreateUpdateDetailsRequest.fromXdr(
      XdrDataInputStream stream)
      : super(
            ManageSaleAction(ManageSaleAction.CREATE_UPDATE_DETAILS_REQUEST)) {
    var length = 0;
    this.requestID = longFromXdr(stream);
  }
}

class ManageSaleResultSuccessResponseCancel
    extends ManageSaleResultSuccessResponse {
  ManageSaleResultSuccessResponseCancel()
      : super(ManageSaleAction(ManageSaleAction.CANCEL));

  ManageSaleResultSuccessResponseCancel.fromXdr(XdrDataInputStream stream)
      : super(ManageSaleAction(ManageSaleAction.CANCEL)) {}
}

abstract class ManageSaleResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageSaleResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageSaleResultSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageSaleResultSuccessExtEmptyVersion.fromXdr(stream);
    }

    return ManageSaleResultSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class ManageSaleResultSuccessExtEmptyVersion
    extends ManageSaleResultSuccessExt {
  ManageSaleResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageSaleResultSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class ManageSaleResult extends XdrEncodable {
  late ManageSaleResultCode discriminant;

  ManageSaleResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageSaleResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageSaleResultCode.SUCCESS:
        return ManageSaleResultSuccessSuccess.fromXdr(stream);
    }

    return ManageSaleResultSuccessSuccess.fromXdr(stream);
  }
}

class ManageSaleResultSuccessSuccess extends ManageSaleResult {
  ManageSaleResultSuccessSuccess(this.success)
      : super(ManageSaleResultCode(ManageSaleResultCode.SUCCESS));
  late ManageSaleResultSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageSaleResultSuccessSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageSaleResultCode(ManageSaleResultCode.SUCCESS)) {
    this.success = ManageSaleResultSuccess.fromXdr(stream);
  }
}

class ManageSignerRoleAction extends XdrEncodable {
  static const CREATE = 0;
  static const UPDATE = 1;
  static const REMOVE = 2;
  late int value;

  ManageSignerRoleAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageSignerRoleAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: CreateSignerRoleData is used to pass necessary params to create a new signer role
//  struct CreateSignerRoleData
//  {
//      //: Array of ids of existing, unique and not default rules
//      uint64 ruleIDs<>;
//      //: Indicates whether or not a rule can be modified in the future
//      bool isReadOnly;
//      //: Arbitrary stringified json object with details to attach to the role
//      longstring details;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateSignerRoleData extends XdrEncodable {
  late List<UINT64> ruleIDs;
  late bool isReadOnly;
  late LONGSTRING details;
  late CreateSignerRoleDataExt ext;

  CreateSignerRoleData(
    this.ruleIDs,
    this.isReadOnly,
    this.details,
    this.ext,
  );

  CreateSignerRoleData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    length = intFromXdr(stream);
    ruleIDs = <UINT64>[];
    while (length > 0) {
      ruleIDs.add(longFromXdr(stream));
      length--;
    }

    this.isReadOnly = boolFromXdr(stream);
    this.details = stringFromXdr(stream);
    this.ext = CreateSignerRoleDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ruleIDs.length.toXdr(stream);
    ruleIDs.forEach((element) {
      element.toXdr(stream);
    });
    isReadOnly.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateSignerRoleDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateSignerRoleDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateSignerRoleDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateSignerRoleDataExtEmptyVersion.fromXdr(stream);
    }

    return CreateSignerRoleDataExtEmptyVersion.fromXdr(stream);
  }
}

class CreateSignerRoleDataExtEmptyVersion extends CreateSignerRoleDataExt {
  CreateSignerRoleDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateSignerRoleDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: UpdateSignerRoleData is used to pass necessary params to update an existing signer role
//  struct UpdateSignerRoleData
//  {
//      //: ID of an existing signer role
//      uint64 roleID;
//      //: Array of ids of existing, unique and not default rules
//      uint64 ruleIDs<>;
//
//      //: Arbitrary stringified json object with details to attach to the role
//      longstring details;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class UpdateSignerRoleData extends XdrEncodable {
  late UINT64 roleID;
  late List<UINT64> ruleIDs;
  late LONGSTRING details;
  late UpdateSignerRoleDataExt ext;

  UpdateSignerRoleData(
    this.roleID,
    this.ruleIDs,
    this.details,
    this.ext,
  );

  UpdateSignerRoleData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.roleID = longFromXdr(stream);
    length = intFromXdr(stream);
    ruleIDs = <UINT64>[];
    while (length > 0) {
      ruleIDs.add(longFromXdr(stream));
      length--;
    }

    this.details = stringFromXdr(stream);
    this.ext = UpdateSignerRoleDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ruleIDs.length.toXdr(stream);
    ruleIDs.forEach((element) {
      element.toXdr(stream);
    });
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class UpdateSignerRoleDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  UpdateSignerRoleDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static UpdateSignerRoleDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return UpdateSignerRoleDataExtEmptyVersion.fromXdr(stream);
    }

    return UpdateSignerRoleDataExtEmptyVersion.fromXdr(stream);
  }
}

class UpdateSignerRoleDataExtEmptyVersion extends UpdateSignerRoleDataExt {
  UpdateSignerRoleDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  UpdateSignerRoleDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: RemoveSignerRoleData is used to pass necessary params to remove existing signer role
//  struct RemoveSignerRoleData
//  {
//      //: Identifier of an existing signer role
//      uint64 roleID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class RemoveSignerRoleData extends XdrEncodable {
  late UINT64 roleID;
  late RemoveSignerRoleDataExt ext;

  RemoveSignerRoleData(
    this.roleID,
    this.ext,
  );

  RemoveSignerRoleData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.roleID = longFromXdr(stream);
    this.ext = RemoveSignerRoleDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class RemoveSignerRoleDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  RemoveSignerRoleDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static RemoveSignerRoleDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return RemoveSignerRoleDataExtEmptyVersion.fromXdr(stream);
    }

    return RemoveSignerRoleDataExtEmptyVersion.fromXdr(stream);
  }
}

class RemoveSignerRoleDataExtEmptyVersion extends RemoveSignerRoleDataExt {
  RemoveSignerRoleDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  RemoveSignerRoleDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: ManageSignerRoleOp is used to create, update or remove a signer role
//  struct ManageSignerRoleOp
//  {
//      //: data is used to pass one of `ManageSignerRoleAction` with required params
//      union switch (ManageSignerRoleAction action)
//      {
//      case CREATE:
//          CreateSignerRoleData createData;
//      case UPDATE:
//          UpdateSignerRoleData updateData;
//      case REMOVE:
//          RemoveSignerRoleData removeData;
//      } data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageSignerRoleOp extends XdrEncodable {
  late ManageSignerRoleOpData data;
  late ManageSignerRoleOpExt ext;

  ManageSignerRoleOp(
    this.data,
    this.ext,
  );

  ManageSignerRoleOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.data = ManageSignerRoleOpData.fromXdr(stream);
    this.ext = ManageSignerRoleOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageSignerRoleOpData extends XdrEncodable {
  late ManageSignerRoleAction discriminant;

  ManageSignerRoleOpData(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageSignerRoleOpData fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageSignerRoleAction.CREATE:
        return ManageSignerRoleOpDataCreate.fromXdr(stream);
      case ManageSignerRoleAction.UPDATE:
        return ManageSignerRoleOpDataUpdate.fromXdr(stream);
      case ManageSignerRoleAction.REMOVE:
        return ManageSignerRoleOpDataRemove.fromXdr(stream);
    }

    return ManageSignerRoleOpDataCreate.fromXdr(stream);
  }
}

class ManageSignerRoleOpDataCreate extends ManageSignerRoleOpData {
  ManageSignerRoleOpDataCreate(this.createData)
      : super(ManageSignerRoleAction(ManageSignerRoleAction.CREATE));
  late CreateSignerRoleData createData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }

  ManageSignerRoleOpDataCreate.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerRoleAction(ManageSignerRoleAction.CREATE)) {
    this.createData = CreateSignerRoleData.fromXdr(stream);
  }
}

class ManageSignerRoleOpDataUpdate extends ManageSignerRoleOpData {
  ManageSignerRoleOpDataUpdate(this.updateData)
      : super(ManageSignerRoleAction(ManageSignerRoleAction.UPDATE));
  late UpdateSignerRoleData updateData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateData.toXdr(stream);
  }

  ManageSignerRoleOpDataUpdate.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerRoleAction(ManageSignerRoleAction.UPDATE)) {
    this.updateData = UpdateSignerRoleData.fromXdr(stream);
  }
}

class ManageSignerRoleOpDataRemove extends ManageSignerRoleOpData {
  ManageSignerRoleOpDataRemove(this.removeData)
      : super(ManageSignerRoleAction(ManageSignerRoleAction.REMOVE));
  late RemoveSignerRoleData removeData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeData.toXdr(stream);
  }

  ManageSignerRoleOpDataRemove.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerRoleAction(ManageSignerRoleAction.REMOVE)) {
    this.removeData = RemoveSignerRoleData.fromXdr(stream);
  }
}

abstract class ManageSignerRoleOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageSignerRoleOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageSignerRoleOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageSignerRoleOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageSignerRoleOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageSignerRoleOpExtEmptyVersion extends ManageSignerRoleOpExt {
  ManageSignerRoleOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageSignerRoleOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageSignerRoleResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const ROLE_IS_USED = -2;
  static const INVALID_DETAILS = -3;
  static const NO_SUCH_RULE = -4;
  static const RULE_ID_DUPLICATION = -5;
  static const DEFAULT_RULE_ID_DUPLICATION = -6;
  static const TOO_MANY_RULE_IDS = -7;
  late int value;

  ManageSignerRoleResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageSignerRoleResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class ManageSignerRoleResult extends XdrEncodable {
  late ManageSignerRoleResultCode discriminant;

  ManageSignerRoleResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageSignerRoleResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageSignerRoleResultCode.SUCCESS:
        return ManageSignerRoleResultSuccess.fromXdr(stream);
      case ManageSignerRoleResultCode.RULE_ID_DUPLICATION:
        return ManageSignerRoleResultRuleIdDuplication.fromXdr(stream);
      case ManageSignerRoleResultCode.DEFAULT_RULE_ID_DUPLICATION:
        return ManageSignerRoleResultDefaultRuleIdDuplication.fromXdr(stream);
      case ManageSignerRoleResultCode.NO_SUCH_RULE:
        return ManageSignerRoleResultNoSuchRule.fromXdr(stream);
      case ManageSignerRoleResultCode.TOO_MANY_RULE_IDS:
        return ManageSignerRoleResultTooManyRuleIds.fromXdr(stream);
    }

    return ManageSignerRoleResultSuccess.fromXdr(stream);
  }
}

class ManageSignerRoleResultSuccess extends ManageSignerRoleResult {
  ManageSignerRoleResultSuccess(this.success)
      : super(ManageSignerRoleResultCode(ManageSignerRoleResultCode.SUCCESS));
  late ManageSignerRoleResultSuccessSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageSignerRoleResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerRoleResultCode(ManageSignerRoleResultCode.SUCCESS)) {
    this.success = ManageSignerRoleResultSuccessSuccess.fromXdr(stream);
  }
}

class ManageSignerRoleResultRuleIdDuplication extends ManageSignerRoleResult {
  ManageSignerRoleResultRuleIdDuplication(this.ruleID)
      : super(ManageSignerRoleResultCode(
            ManageSignerRoleResultCode.RULE_ID_DUPLICATION));
  late UINT64 ruleID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ruleID.toXdr(stream);
  }

  ManageSignerRoleResultRuleIdDuplication.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerRoleResultCode(
            ManageSignerRoleResultCode.RULE_ID_DUPLICATION)) {
    var length = 0;
    this.ruleID = longFromXdr(stream);
  }
}

class ManageSignerRoleResultDefaultRuleIdDuplication
    extends ManageSignerRoleResult {
  ManageSignerRoleResultDefaultRuleIdDuplication(this.ruleID)
      : super(ManageSignerRoleResultCode(
            ManageSignerRoleResultCode.DEFAULT_RULE_ID_DUPLICATION));
  late UINT64 ruleID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ruleID.toXdr(stream);
  }

  ManageSignerRoleResultDefaultRuleIdDuplication.fromXdr(
      XdrDataInputStream stream)
      : super(ManageSignerRoleResultCode(
            ManageSignerRoleResultCode.DEFAULT_RULE_ID_DUPLICATION)) {
    var length = 0;
    this.ruleID = longFromXdr(stream);
  }
}

class ManageSignerRoleResultNoSuchRule extends ManageSignerRoleResult {
  ManageSignerRoleResultNoSuchRule(this.ruleID)
      : super(ManageSignerRoleResultCode(
            ManageSignerRoleResultCode.NO_SUCH_RULE));
  late UINT64 ruleID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ruleID.toXdr(stream);
  }

  ManageSignerRoleResultNoSuchRule.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerRoleResultCode(
            ManageSignerRoleResultCode.NO_SUCH_RULE)) {
    var length = 0;
    this.ruleID = longFromXdr(stream);
  }
}

class ManageSignerRoleResultTooManyRuleIds extends ManageSignerRoleResult {
  ManageSignerRoleResultTooManyRuleIds(this.maxRuleIDsCount)
      : super(ManageSignerRoleResultCode(
            ManageSignerRoleResultCode.TOO_MANY_RULE_IDS));
  late UINT64 maxRuleIDsCount;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    maxRuleIDsCount.toXdr(stream);
  }

  ManageSignerRoleResultTooManyRuleIds.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerRoleResultCode(
            ManageSignerRoleResultCode.TOO_MANY_RULE_IDS)) {
    var length = 0;
    this.maxRuleIDsCount = longFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              //: id of a role that was managed
//              uint64 roleID;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          }

//  ===========================================================================
class ManageSignerRoleResultSuccessSuccess extends XdrEncodable {
  late UINT64 roleID;
  late ManageSignerRoleResultSuccessExt ext;

  ManageSignerRoleResultSuccessSuccess(
    this.roleID,
    this.ext,
  );

  ManageSignerRoleResultSuccessSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.roleID = longFromXdr(stream);
    this.ext = ManageSignerRoleResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageSignerRoleResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageSignerRoleResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageSignerRoleResultSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageSignerRoleResultSuccessExtEmptyVersion.fromXdr(stream);
    }

    return ManageSignerRoleResultSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class ManageSignerRoleResultSuccessExtEmptyVersion
    extends ManageSignerRoleResultSuccessExt {
  ManageSignerRoleResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageSignerRoleResultSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageSignerRuleAction extends XdrEncodable {
  static const CREATE = 0;
  static const UPDATE = 1;
  static const REMOVE = 2;
  late int value;

  ManageSignerRuleAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageSignerRuleAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: CreateSignerRuleData is used to pass necessary params to create a new signer rule
//  struct CreateSignerRuleData
//  {
//      //: Resource is used to specify an entity (for some, with properties) that can be managed through operations
//      SignerRuleResource resource;
//      //: Value from enum that can be applied to `resource`
//      SignerRuleAction action;
//      //: Indicate whether or not an `action` on the provided `resource` is prohibited
//      bool forbids;
//      //: True means that such rule will be automatically added to each new or updated signer role
//      bool isDefault;
//      //: Indicates whether or not a rule can be modified in the future
//      bool isReadOnly;
//      //: Arbitrary stringified json object with details that will be attached to a rule
//      longstring details;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateSignerRuleData extends XdrEncodable {
  late SignerRuleResource resource;
  late SignerRuleAction action;
  late bool forbids;
  late bool isDefault;
  late bool isReadOnly;
  late LONGSTRING details;
  late CreateSignerRuleDataExt ext;

  CreateSignerRuleData(
    this.resource,
    this.action,
    this.forbids,
    this.isDefault,
    this.isReadOnly,
    this.details,
    this.ext,
  );

  CreateSignerRuleData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.resource = SignerRuleResource.fromXdr(stream);
    this.action = SignerRuleAction.fromXdr(stream);
    this.forbids = boolFromXdr(stream);
    this.isDefault = boolFromXdr(stream);
    this.isReadOnly = boolFromXdr(stream);
    this.details = stringFromXdr(stream);
    this.ext = CreateSignerRuleDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    resource.toXdr(stream);
    action.toXdr(stream);
    forbids.toXdr(stream);
    isDefault.toXdr(stream);
    isReadOnly.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateSignerRuleDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateSignerRuleDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateSignerRuleDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateSignerRuleDataExtEmptyVersion.fromXdr(stream);
    }

    return CreateSignerRuleDataExtEmptyVersion.fromXdr(stream);
  }
}

class CreateSignerRuleDataExtEmptyVersion extends CreateSignerRuleDataExt {
  CreateSignerRuleDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateSignerRuleDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: UpdateSignerRuleData is used to pass necessary params to update an existing signer rule
//  struct UpdateSignerRuleData
//  {
//      //: Identifier of an existing signer rule
//      uint64 ruleID;
//      //: Resource is used to specify entity (for some, with properties) that can be managed through operations
//      SignerRuleResource resource;
//      //: Value from enum that can be applied to `resource`
//      SignerRuleAction action;
//      //: True means that such rule will be automatically added to each new or updated signer role
//      bool forbids;
//      //: True means that no one can manage such rule after creating
//      bool isDefault;
//      //: Arbitrary stringified json object with details that will be attached to a rule
//      longstring details;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class UpdateSignerRuleData extends XdrEncodable {
  late UINT64 ruleID;
  late SignerRuleResource resource;
  late SignerRuleAction action;
  late bool forbids;
  late bool isDefault;
  late LONGSTRING details;
  late UpdateSignerRuleDataExt ext;

  UpdateSignerRuleData(
    this.ruleID,
    this.resource,
    this.action,
    this.forbids,
    this.isDefault,
    this.details,
    this.ext,
  );

  UpdateSignerRuleData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ruleID = longFromXdr(stream);
    this.resource = SignerRuleResource.fromXdr(stream);
    this.action = SignerRuleAction.fromXdr(stream);
    this.forbids = boolFromXdr(stream);
    this.isDefault = boolFromXdr(stream);
    this.details = stringFromXdr(stream);
    this.ext = UpdateSignerRuleDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    resource.toXdr(stream);
    action.toXdr(stream);
    forbids.toXdr(stream);
    isDefault.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class UpdateSignerRuleDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  UpdateSignerRuleDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static UpdateSignerRuleDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return UpdateSignerRuleDataExtEmptyVersion.fromXdr(stream);
    }

    return UpdateSignerRuleDataExtEmptyVersion.fromXdr(stream);
  }
}

class UpdateSignerRuleDataExtEmptyVersion extends UpdateSignerRuleDataExt {
  UpdateSignerRuleDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  UpdateSignerRuleDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: RemoveSignerRuleData is used to pass necessary params to remove existing signer rule
//  struct RemoveSignerRuleData
//  {
//      //: Identifier of an existing signer rule
//      uint64 ruleID;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class RemoveSignerRuleData extends XdrEncodable {
  late UINT64 ruleID;
  late RemoveSignerRuleDataExt ext;

  RemoveSignerRuleData(
    this.ruleID,
    this.ext,
  );

  RemoveSignerRuleData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ruleID = longFromXdr(stream);
    this.ext = RemoveSignerRuleDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class RemoveSignerRuleDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  RemoveSignerRuleDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static RemoveSignerRuleDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return RemoveSignerRuleDataExtEmptyVersion.fromXdr(stream);
    }

    return RemoveSignerRuleDataExtEmptyVersion.fromXdr(stream);
  }
}

class RemoveSignerRuleDataExtEmptyVersion extends RemoveSignerRuleDataExt {
  RemoveSignerRuleDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  RemoveSignerRuleDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: ManageSignerRuleOp is used to create, update or remove signer rule
//  struct ManageSignerRuleOp
//  {
//      //: data is used to pass one of `ManageSignerRuleAction` with required params
//      union switch (ManageSignerRuleAction action)
//      {
//      case CREATE:
//          CreateSignerRuleData createData;
//      case UPDATE:
//          UpdateSignerRuleData updateData;
//      case REMOVE:
//          RemoveSignerRuleData removeData;
//      } data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageSignerRuleOp extends XdrEncodable {
  late ManageSignerRuleOpData data;
  late ManageSignerRuleOpExt ext;

  ManageSignerRuleOp(
    this.data,
    this.ext,
  );

  ManageSignerRuleOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.data = ManageSignerRuleOpData.fromXdr(stream);
    this.ext = ManageSignerRuleOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageSignerRuleOpData extends XdrEncodable {
  late ManageSignerRuleAction discriminant;

  ManageSignerRuleOpData(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageSignerRuleOpData fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageSignerRuleAction.CREATE:
        return ManageSignerRuleOpDataCreate.fromXdr(stream);
      case ManageSignerRuleAction.UPDATE:
        return ManageSignerRuleOpDataUpdate.fromXdr(stream);
      case ManageSignerRuleAction.REMOVE:
        return ManageSignerRuleOpDataRemove.fromXdr(stream);
    }

    return ManageSignerRuleOpDataCreate.fromXdr(stream);
  }
}

class ManageSignerRuleOpDataCreate extends ManageSignerRuleOpData {
  ManageSignerRuleOpDataCreate(this.createData)
      : super(ManageSignerRuleAction(ManageSignerRuleAction.CREATE));
  late CreateSignerRuleData createData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }

  ManageSignerRuleOpDataCreate.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerRuleAction(ManageSignerRuleAction.CREATE)) {
    this.createData = CreateSignerRuleData.fromXdr(stream);
  }
}

class ManageSignerRuleOpDataUpdate extends ManageSignerRuleOpData {
  ManageSignerRuleOpDataUpdate(this.updateData)
      : super(ManageSignerRuleAction(ManageSignerRuleAction.UPDATE));
  late UpdateSignerRuleData updateData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateData.toXdr(stream);
  }

  ManageSignerRuleOpDataUpdate.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerRuleAction(ManageSignerRuleAction.UPDATE)) {
    this.updateData = UpdateSignerRuleData.fromXdr(stream);
  }
}

class ManageSignerRuleOpDataRemove extends ManageSignerRuleOpData {
  ManageSignerRuleOpDataRemove(this.removeData)
      : super(ManageSignerRuleAction(ManageSignerRuleAction.REMOVE));
  late RemoveSignerRuleData removeData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeData.toXdr(stream);
  }

  ManageSignerRuleOpDataRemove.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerRuleAction(ManageSignerRuleAction.REMOVE)) {
    this.removeData = RemoveSignerRuleData.fromXdr(stream);
  }
}

abstract class ManageSignerRuleOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageSignerRuleOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageSignerRuleOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageSignerRuleOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageSignerRuleOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageSignerRuleOpExtEmptyVersion extends ManageSignerRuleOpExt {
  ManageSignerRuleOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageSignerRuleOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageSignerRuleResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const RULE_IS_USED = -2;
  static const INVALID_DETAILS = -3;
  static const INVALID_ACTION = -4;
  late int value;

  ManageSignerRuleResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageSignerRuleResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class ManageSignerRuleResult extends XdrEncodable {
  late ManageSignerRuleResultCode discriminant;

  ManageSignerRuleResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageSignerRuleResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageSignerRuleResultCode.SUCCESS:
        return ManageSignerRuleResultSuccess.fromXdr(stream);
      case ManageSignerRuleResultCode.RULE_IS_USED:
        return ManageSignerRuleResultRuleIsUsed.fromXdr(stream);
    }

    return ManageSignerRuleResultSuccess.fromXdr(stream);
  }
}

class ManageSignerRuleResultSuccess extends ManageSignerRuleResult {
  ManageSignerRuleResultSuccess(this.success)
      : super(ManageSignerRuleResultCode(ManageSignerRuleResultCode.SUCCESS));
  late ManageSignerRuleResultSuccessSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ManageSignerRuleResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerRuleResultCode(ManageSignerRuleResultCode.SUCCESS)) {
    this.success = ManageSignerRuleResultSuccessSuccess.fromXdr(stream);
  }
}

class ManageSignerRuleResultRuleIsUsed extends ManageSignerRuleResult {
  ManageSignerRuleResultRuleIsUsed(this.roleIDs)
      : super(ManageSignerRuleResultCode(
            ManageSignerRuleResultCode.RULE_IS_USED));
  late List<UINT64> roleIDs;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    roleIDs.length.toXdr(stream);
    roleIDs.forEach((element) {
      element.toXdr(stream);
    });
  }

  ManageSignerRuleResultRuleIsUsed.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerRuleResultCode(
            ManageSignerRuleResultCode.RULE_IS_USED)) {
    var length = 0;
    length = intFromXdr(stream);
    roleIDs = <UINT64>[];
    while (length > 0) {
      roleIDs.add(longFromXdr(stream));
      length--;
    }
  }
}
// === xdr source ============================================================

//  struct {
//              //: id of the rule that was managed
//              uint64 ruleID;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          }

//  ===========================================================================
class ManageSignerRuleResultSuccessSuccess extends XdrEncodable {
  late UINT64 ruleID;
  late ManageSignerRuleResultSuccessExt ext;

  ManageSignerRuleResultSuccessSuccess(
    this.ruleID,
    this.ext,
  );

  ManageSignerRuleResultSuccessSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ruleID = longFromXdr(stream);
    this.ext = ManageSignerRuleResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageSignerRuleResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageSignerRuleResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageSignerRuleResultSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageSignerRuleResultSuccessExtEmptyVersion.fromXdr(stream);
    }

    return ManageSignerRuleResultSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class ManageSignerRuleResultSuccessExtEmptyVersion
    extends ManageSignerRuleResultSuccessExt {
  ManageSignerRuleResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageSignerRuleResultSuccessExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageSignerAction extends XdrEncodable {
  static const CREATE = 0;
  static const UPDATE = 1;
  static const REMOVE = 2;
  late int value;

  ManageSignerAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageSignerAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: UpdateSignerData is used to pass necessary data to create or update the signer
//  struct UpdateSignerData
//  {
//      //: Public key of a signer
//      PublicKey publicKey;
//      //: id of the role that will be attached to a signer
//      uint64 roleID;
//
//      //: weight that signer will have, threshold for all SignerRequirements equals 1000
//      uint32 weight;
//      //: If there are some signers with equal identity, only one signer will be chosen
//      //: (either the one with the biggest weight or the one who was the first to satisfy a threshold)
//      uint32 identity;
//
//      //: Arbitrary stringified json object with details that will be attached to signer
//      longstring details;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class UpdateSignerData extends XdrEncodable {
  late PublicKey publicKey;
  late UINT64 roleID;
  late UINT32 weight;
  late UINT32 identity;
  late LONGSTRING details;
  late EmptyExt ext;

  UpdateSignerData(
    this.publicKey,
    this.roleID,
    this.weight,
    this.identity,
    this.details,
    this.ext,
  );

  UpdateSignerData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.publicKey = PublicKey.fromXdr(stream);
    this.roleID = longFromXdr(stream);
    this.weight = intFromXdr(stream);
    this.identity = intFromXdr(stream);
    this.details = stringFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    publicKey.toXdr(stream);
    roleID.toXdr(stream);
    weight.toXdr(stream);
    identity.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  //: RemoveSignerData is used to pass necessary data to remove a signer
//  struct RemoveSignerData
//  {
//      //: Public key of an existing signer
//      PublicKey publicKey;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class RemoveSignerData extends XdrEncodable {
  late PublicKey publicKey;
  late EmptyExt ext;

  RemoveSignerData(
    this.publicKey,
    this.ext,
  );

  RemoveSignerData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.publicKey = PublicKey.fromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    publicKey.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  //: ManageSignerOp is used to create, update or remove a signer
//  struct ManageSignerOp
//  {
//      //: data is used to pass one of `ManageSignerAction` with required params
//      union switch (ManageSignerAction action)
//      {
//      case CREATE:
//          UpdateSignerData createData;
//      case UPDATE:
//          UpdateSignerData updateData;
//      case REMOVE:
//          RemoveSignerData removeData;
//      }
//      data;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class ManageSignerOp extends XdrEncodable {
  late ManageSignerOpData data;
  late EmptyExt ext;

  ManageSignerOp(
    this.data,
    this.ext,
  );

  ManageSignerOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.data = ManageSignerOpData.fromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageSignerOpData extends XdrEncodable {
  late ManageSignerAction discriminant;

  ManageSignerOpData(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageSignerOpData fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageSignerAction.CREATE:
        return ManageSignerOpDataCreate.fromXdr(stream);
      case ManageSignerAction.UPDATE:
        return ManageSignerOpDataUpdate.fromXdr(stream);
      case ManageSignerAction.REMOVE:
        return ManageSignerOpDataRemove.fromXdr(stream);
    }

    return ManageSignerOpDataCreate.fromXdr(stream);
  }
}

class ManageSignerOpDataCreate extends ManageSignerOpData {
  ManageSignerOpDataCreate(this.createData)
      : super(ManageSignerAction(ManageSignerAction.CREATE));
  late UpdateSignerData createData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }

  ManageSignerOpDataCreate.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerAction(ManageSignerAction.CREATE)) {
    this.createData = UpdateSignerData.fromXdr(stream);
  }
}

class ManageSignerOpDataUpdate extends ManageSignerOpData {
  ManageSignerOpDataUpdate(this.updateData)
      : super(ManageSignerAction(ManageSignerAction.UPDATE));
  late UpdateSignerData updateData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateData.toXdr(stream);
  }

  ManageSignerOpDataUpdate.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerAction(ManageSignerAction.UPDATE)) {
    this.updateData = UpdateSignerData.fromXdr(stream);
  }
}

class ManageSignerOpDataRemove extends ManageSignerOpData {
  ManageSignerOpDataRemove(this.removeData)
      : super(ManageSignerAction(ManageSignerAction.REMOVE));
  late RemoveSignerData removeData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeData.toXdr(stream);
  }

  ManageSignerOpDataRemove.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerAction(ManageSignerAction.REMOVE)) {
    this.removeData = RemoveSignerData.fromXdr(stream);
  }
}

class ManageSignerResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_DETAILS = -1;
  static const ALREADY_EXISTS = -2;
  static const NO_SUCH_ROLE = -3;
  static const INVALID_WEIGHT = -4;
  static const NOT_FOUND = -5;
  static const NUMBER_OF_ADMINS_EXCEEDS_LICENSE = -6;
  late int value;

  ManageSignerResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageSignerResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class ManageSignerResult extends XdrEncodable {
  late ManageSignerResultCode discriminant;

  ManageSignerResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageSignerResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageSignerResultCode.SUCCESS:
        return ManageSignerResultSuccess.fromXdr(stream);
    }

    return ManageSignerResultSuccess.fromXdr(stream);
  }
}

class ManageSignerResultSuccess extends ManageSignerResult {
  ManageSignerResultSuccess(this.ext)
      : super(ManageSignerResultCode(ManageSignerResultCode.SUCCESS));
  late EmptyExt ext;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ext.toXdr(stream);
  }

  ManageSignerResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageSignerResultCode(ManageSignerResultCode.SUCCESS)) {
    this.ext = EmptyExt.fromXdr(stream);
  }
}

class ManageVoteAction extends XdrEncodable {
  static const CREATE = 0;
  static const REMOVE = 1;
  late int value;

  ManageVoteAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageVoteAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: CreateVoteData is used to pass needed params to create (send) vote
//  struct CreateVoteData
//  {
//      //: ID of poll to vote in
//      uint64 pollID;
//
//      //: `data` is used to pass choice with functional type of poll
//      VoteData data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateVoteData extends XdrEncodable {
  late UINT64 pollID;
  late VoteData data;
  late CreateVoteDataExt ext;

  CreateVoteData(
    this.pollID,
    this.data,
    this.ext,
  );

  CreateVoteData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.pollID = longFromXdr(stream);
    this.data = VoteData.fromXdr(stream);
    this.ext = CreateVoteDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateVoteDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateVoteDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateVoteDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateVoteDataExtEmptyVersion.fromXdr(stream);
    }

    return CreateVoteDataExtEmptyVersion.fromXdr(stream);
  }
}

class CreateVoteDataExtEmptyVersion extends CreateVoteDataExt {
  CreateVoteDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateVoteDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: RemoveVoteData is used to pass needed params to remove (cancel) own vote
//  struct RemoveVoteData
//  {
//      //: ID of poll
//      uint64 pollID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class RemoveVoteData extends XdrEncodable {
  late UINT64 pollID;
  late RemoveVoteDataExt ext;

  RemoveVoteData(
    this.pollID,
    this.ext,
  );

  RemoveVoteData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.pollID = longFromXdr(stream);
    this.ext = RemoveVoteDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class RemoveVoteDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  RemoveVoteDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static RemoveVoteDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return RemoveVoteDataExtEmptyVersion.fromXdr(stream);
    }

    return RemoveVoteDataExtEmptyVersion.fromXdr(stream);
  }
}

class RemoveVoteDataExtEmptyVersion extends RemoveVoteDataExt {
  RemoveVoteDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  RemoveVoteDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: ManageVoteOp is used to create (send) or remove (cancel) vote
//  struct ManageVoteOp
//  {
//      //: `data` is used to pass `ManageVoteAction` with needed params
//      union switch (ManageVoteAction action)
//      {
//      case CREATE:
//          CreateVoteData createData;
//      case REMOVE:
//          RemoveVoteData removeData;
//      }
//      data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class ManageVoteOp extends XdrEncodable {
  late ManageVoteOpData data;
  late ManageVoteOpExt ext;

  ManageVoteOp(
    this.data,
    this.ext,
  );

  ManageVoteOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.data = ManageVoteOpData.fromXdr(stream);
    this.ext = ManageVoteOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageVoteOpData extends XdrEncodable {
  late ManageVoteAction discriminant;

  ManageVoteOpData(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageVoteOpData fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageVoteAction.CREATE:
        return ManageVoteOpDataCreate.fromXdr(stream);
      case ManageVoteAction.REMOVE:
        return ManageVoteOpDataRemove.fromXdr(stream);
    }

    return ManageVoteOpDataCreate.fromXdr(stream);
  }
}

class ManageVoteOpDataCreate extends ManageVoteOpData {
  ManageVoteOpDataCreate(this.createData)
      : super(ManageVoteAction(ManageVoteAction.CREATE));
  late CreateVoteData createData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }

  ManageVoteOpDataCreate.fromXdr(XdrDataInputStream stream)
      : super(ManageVoteAction(ManageVoteAction.CREATE)) {
    this.createData = CreateVoteData.fromXdr(stream);
  }
}

class ManageVoteOpDataRemove extends ManageVoteOpData {
  ManageVoteOpDataRemove(this.removeData)
      : super(ManageVoteAction(ManageVoteAction.REMOVE));
  late RemoveVoteData removeData;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeData.toXdr(stream);
  }

  ManageVoteOpDataRemove.fromXdr(XdrDataInputStream stream)
      : super(ManageVoteAction(ManageVoteAction.REMOVE)) {
    this.removeData = RemoveVoteData.fromXdr(stream);
  }
}

abstract class ManageVoteOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageVoteOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageVoteOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageVoteOpExtEmptyVersion.fromXdr(stream);
    }

    return ManageVoteOpExtEmptyVersion.fromXdr(stream);
  }
}

class ManageVoteOpExtEmptyVersion extends ManageVoteOpExt {
  ManageVoteOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageVoteOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageVoteResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const VOTE_NOT_FOUND = -1;
  static const POLL_NOT_FOUND = -2;
  static const VOTE_EXISTS = -3;
  static const POLL_TYPE_MISMATCHED = -4;
  static const POLL_NOT_STARTED = -5;
  static const POLL_ENDED = -6;
  late int value;

  ManageVoteResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ManageVoteResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class ManageVoteResult extends XdrEncodable {
  late ManageVoteResultCode discriminant;

  ManageVoteResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageVoteResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ManageVoteResultCode.SUCCESS:
        return ManageVoteResultSuccess.fromXdr(stream);
    }

    return ManageVoteResultSuccess.fromXdr(stream);
  }
}

class ManageVoteResultSuccess extends ManageVoteResult {
  ManageVoteResultSuccess(this.ext)
      : super(ManageVoteResultCode(ManageVoteResultCode.SUCCESS));
  late EmptyExt ext;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ext.toXdr(stream);
  }

  ManageVoteResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ManageVoteResultCode(ManageVoteResultCode.SUCCESS)) {
    this.ext = EmptyExt.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct OpenSwapOp
//  {
//      //: Source balance of the swap
//      BalanceID sourceBalance;
//      //: Amount to send in swap
//      uint64 amount;
//
//     //: `destination` defines the type of instance that receives amount based on given PaymentDestinationType
//     union switch (PaymentDestinationType type) {
//         case ACCOUNT:
//             AccountID accountID;
//         case BALANCE:
//             BalanceID balanceID;
//     } destination;
//
//      //: Fee data for the swap
//      PaymentFeeData feeData;
//      //: Arbitrary stringified json object provided by swap source
//      longstring details;
//
//      //: Hash of the secret
//      Hash secretHash;
//      //: Time till which swapped funds can be received by destination if valid secret is provided
//      int64 lockTime;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class OpenSwapOp extends XdrEncodable {
  late BALANCEID sourceBalance;
  late UINT64 amount;
  late OpenSwapOpDestination destination;
  late PaymentFeeData feeData;
  late LONGSTRING details;
  late HASH secretHash;
  late INT64 lockTime;
  late EmptyExt ext;

  OpenSwapOp(
    this.sourceBalance,
    this.amount,
    this.destination,
    this.feeData,
    this.details,
    this.secretHash,
    this.lockTime,
    this.ext,
  );

  OpenSwapOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.sourceBalance = PublicKey.fromXdr(stream);
    this.amount = longFromXdr(stream);
    this.destination = OpenSwapOpDestination.fromXdr(stream);
    this.feeData = PaymentFeeData.fromXdr(stream);
    this.details = stringFromXdr(stream);
    this.secretHash = HASH.fromXdr(stream);
    this.lockTime = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    sourceBalance.toXdr(stream);
    amount.toXdr(stream);
    destination.toXdr(stream);
    feeData.toXdr(stream);
    details.toXdr(stream);
    secretHash.toXdr(stream);
    lockTime.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class OpenSwapOpDestination extends XdrEncodable {
  late PaymentDestinationType discriminant;

  OpenSwapOpDestination(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static OpenSwapOpDestination fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case PaymentDestinationType.ACCOUNT:
        return OpenSwapOpDestinationAccount.fromXdr(stream);
      case PaymentDestinationType.BALANCE:
        return OpenSwapOpDestinationBalance.fromXdr(stream);
    }

    return OpenSwapOpDestinationAccount.fromXdr(stream);
  }
}

class OpenSwapOpDestinationAccount extends OpenSwapOpDestination {
  OpenSwapOpDestinationAccount(this.accountID)
      : super(PaymentDestinationType(PaymentDestinationType.ACCOUNT));
  late ACCOUNTID accountID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountID.toXdr(stream);
  }

  OpenSwapOpDestinationAccount.fromXdr(XdrDataInputStream stream)
      : super(PaymentDestinationType(PaymentDestinationType.ACCOUNT)) {
    var length = 0;
    this.accountID = PublicKey.fromXdr(stream);
  }
}

class OpenSwapOpDestinationBalance extends OpenSwapOpDestination {
  OpenSwapOpDestinationBalance(this.balanceID)
      : super(PaymentDestinationType(PaymentDestinationType.BALANCE));
  late BALANCEID balanceID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    balanceID.toXdr(stream);
  }

  OpenSwapOpDestinationBalance.fromXdr(XdrDataInputStream stream)
      : super(PaymentDestinationType(PaymentDestinationType.BALANCE)) {
    var length = 0;
    this.balanceID = PublicKey.fromXdr(stream);
  }
}

class OpenSwapResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const UNDERFUNDED = -2;
  static const BALANCE_ASSETS_MISMATCHED = -3;
  static const SRC_BALANCE_NOT_FOUND = -4;
  static const NOT_ALLOWED_BY_ASSET_POLICY = -5;
  static const INVALID_DESTINATION_FEE = -6;
  static const INSUFFICIENT_FEE_AMOUNT = -7;
  static const AMOUNT_IS_LESS_THAN_DEST_FEE = -8;
  static const INCORRECT_AMOUNT_PRECISION = -9;
  static const INVALID_DETAILS = -10;
  static const INVALID_LOCK_TIME = -11;
  static const INVALID_AMOUNT = -12;
  late int value;

  OpenSwapResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  OpenSwapResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: OpenSwapSuccess is used to pass saved ledger hash and license hash
//  struct OpenSwapSuccess {
//      uint64 swapID;
//
//      //: ID of the destination account
//      AccountID destination;
//      //: ID of the destination balance
//      BalanceID destinationBalance;
//
//      //: Code of an asset used in swap
//      AssetCode asset;
//
//      //: Fee to be charged from the source balance
//      Fee actualSourceFee;
//      //: Fee to be charged from the destination balance
//      Fee actualDestinationFee;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class OpenSwapSuccess extends XdrEncodable {
  late UINT64 swapID;
  late ACCOUNTID destination;
  late BALANCEID destinationBalance;
  late ASSETCODE asset;
  late Fee actualSourceFee;
  late Fee actualDestinationFee;
  late EmptyExt ext;

  OpenSwapSuccess(
    this.swapID,
    this.destination,
    this.destinationBalance,
    this.asset,
    this.actualSourceFee,
    this.actualDestinationFee,
    this.ext,
  );

  OpenSwapSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.swapID = longFromXdr(stream);
    this.destination = PublicKey.fromXdr(stream);
    this.destinationBalance = PublicKey.fromXdr(stream);
    this.asset = stringFromXdr(stream);
    this.actualSourceFee = Fee.fromXdr(stream);
    this.actualDestinationFee = Fee.fromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    swapID.toXdr(stream);
    destination.toXdr(stream);
    destinationBalance.toXdr(stream);
    asset.toXdr(stream);
    actualSourceFee.toXdr(stream);
    actualDestinationFee.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class OpenSwapResult extends XdrEncodable {
  late OpenSwapResultCode discriminant;

  OpenSwapResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static OpenSwapResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case OpenSwapResultCode.SUCCESS:
        return OpenSwapResultSuccess.fromXdr(stream);
    }

    return OpenSwapResultSuccess.fromXdr(stream);
  }
}

class OpenSwapResultSuccess extends OpenSwapResult {
  OpenSwapResultSuccess(this.success)
      : super(OpenSwapResultCode(OpenSwapResultCode.SUCCESS));
  late OpenSwapSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  OpenSwapResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(OpenSwapResultCode(OpenSwapResultCode.SUCCESS)) {
    this.success = OpenSwapSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct PaymentFeeData {
//      //: Fee to pay by source balance
//      Fee sourceFee;
//      //: Fee kept from destination account/balance
//      Fee destinationFee;
//      //: Indicates whether or not the source of payment pays the destination fee
//      bool sourcePaysForDest;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PaymentFeeData extends XdrEncodable {
  late Fee sourceFee;
  late Fee destinationFee;
  late bool sourcePaysForDest;
  late PaymentFeeDataExt ext;

  PaymentFeeData(
    this.sourceFee,
    this.destinationFee,
    this.sourcePaysForDest,
    this.ext,
  );

  PaymentFeeData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.sourceFee = Fee.fromXdr(stream);
    this.destinationFee = Fee.fromXdr(stream);
    this.sourcePaysForDest = boolFromXdr(stream);
    this.ext = PaymentFeeDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    sourceFee.toXdr(stream);
    destinationFee.toXdr(stream);
    sourcePaysForDest.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class PaymentFeeDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  PaymentFeeDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static PaymentFeeDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return PaymentFeeDataExtEmptyVersion.fromXdr(stream);
    }

    return PaymentFeeDataExtEmptyVersion.fromXdr(stream);
  }
}

class PaymentFeeDataExtEmptyVersion extends PaymentFeeDataExt {
  PaymentFeeDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  PaymentFeeDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class PaymentDestinationType extends XdrEncodable {
  static const ACCOUNT = 0;
  static const BALANCE = 1;
  late int value;

  PaymentDestinationType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  PaymentDestinationType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: PaymentOp is used to transfer some amount of asset from the source balance to destination account/balance
//  struct PaymentOp
//  {
//      //: ID of the source balance of payment
//      BalanceID sourceBalanceID;
//
//      //: `destination` defines the type of instance that receives the payment based on given PaymentDestinationType
//      union switch (PaymentDestinationType type) {
//          case ACCOUNT:
//              AccountID accountID;
//          case BALANCE:
//              BalanceID balanceID;
//      } destination;
//
//      //: Amount of payment
//      uint64 amount;
//
//      //: `feeData` defines all data about the payment fee
//      PaymentFeeData feeData;
//
//      //: `subject` is a user-provided info about the real-life purpose of payment
//      longstring subject;
//      //: `reference` is a string formed by a payment sender. `Reference-sender account` pair is unique.
//      longstring reference;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PaymentOp extends XdrEncodable {
  late BALANCEID sourceBalanceID;
  late PaymentOpDestination destination;
  late UINT64 amount;
  late PaymentFeeData feeData;
  late LONGSTRING subject;
  late LONGSTRING reference;
  late PaymentOpExt ext;

  PaymentOp(
    this.sourceBalanceID,
    this.destination,
    this.amount,
    this.feeData,
    this.subject,
    this.reference,
    this.ext,
  );

  PaymentOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.sourceBalanceID = PublicKey.fromXdr(stream);
    this.destination = PaymentOpDestination.fromXdr(stream);
    this.amount = longFromXdr(stream);
    this.feeData = PaymentFeeData.fromXdr(stream);
    this.subject = stringFromXdr(stream);
    this.reference = stringFromXdr(stream);
    this.ext = PaymentOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    sourceBalanceID.toXdr(stream);
    destination.toXdr(stream);
    amount.toXdr(stream);
    feeData.toXdr(stream);
    subject.toXdr(stream);
    reference.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class PaymentOpDestination extends XdrEncodable {
  late PaymentDestinationType discriminant;

  PaymentOpDestination(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static PaymentOpDestination fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case PaymentDestinationType.ACCOUNT:
        return PaymentOpDestinationAccount.fromXdr(stream);
      case PaymentDestinationType.BALANCE:
        return PaymentOpDestinationBalance.fromXdr(stream);
    }

    return PaymentOpDestinationAccount.fromXdr(stream);
  }
}

class PaymentOpDestinationAccount extends PaymentOpDestination {
  PaymentOpDestinationAccount(this.accountID)
      : super(PaymentDestinationType(PaymentDestinationType.ACCOUNT));
  late ACCOUNTID accountID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountID.toXdr(stream);
  }

  PaymentOpDestinationAccount.fromXdr(XdrDataInputStream stream)
      : super(PaymentDestinationType(PaymentDestinationType.ACCOUNT)) {
    var length = 0;
    this.accountID = PublicKey.fromXdr(stream);
  }
}

class PaymentOpDestinationBalance extends PaymentOpDestination {
  PaymentOpDestinationBalance(this.balanceID)
      : super(PaymentDestinationType(PaymentDestinationType.BALANCE));
  late BALANCEID balanceID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    balanceID.toXdr(stream);
  }

  PaymentOpDestinationBalance.fromXdr(XdrDataInputStream stream)
      : super(PaymentDestinationType(PaymentDestinationType.BALANCE)) {
    var length = 0;
    this.balanceID = PublicKey.fromXdr(stream);
  }
}

abstract class PaymentOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  PaymentOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static PaymentOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return PaymentOpExtEmptyVersion.fromXdr(stream);
    }

    return PaymentOpExtEmptyVersion.fromXdr(stream);
  }
}

class PaymentOpExtEmptyVersion extends PaymentOpExt {
  PaymentOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  PaymentOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class PaymentResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const UNDERFUNDED = -2;
  static const LINE_FULL = -3;
  static const DESTINATION_BALANCE_NOT_FOUND = -4;
  static const BALANCE_ASSETS_MISMATCHED = -5;
  static const SRC_BALANCE_NOT_FOUND = -6;
  static const REFERENCE_DUPLICATION = -7;
  static const STATS_OVERFLOW = -8;
  static const LIMITS_EXCEEDED = -9;
  static const NOT_ALLOWED_BY_ASSET_POLICY = -10;
  static const INVALID_DESTINATION_FEE = -11;
  static const INSUFFICIENT_FEE_AMOUNT = -12;
  static const PAYMENT_AMOUNT_IS_LESS_THAN_DEST_FEE = -13;
  static const DESTINATION_ACCOUNT_NOT_FOUND = -14;
  static const INCORRECT_AMOUNT_PRECISION = -15;
  static const INVALID_SUBJECT = -16;
  late int value;

  PaymentResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  PaymentResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: `PaymentResponse` defines the response on the corresponding PaymentOp
//  struct PaymentResponse {
//      //: ID of the destination account
//      AccountID destination;
//      //: ID of the destination balance
//      BalanceID destinationBalanceID;
//
//      //: Code of an asset used in payment
//      AssetCode asset;
//      //: Amount sent by the sender
//      uint64 sourceSentUniversal;
//      //: Unique ID of the payment
//      uint64 paymentID;
//
//      //: Fee charged from the source balance
//      Fee actualSourcePaymentFee;
//      //: Fee charged from the destination balance
//      Fee actualDestinationPaymentFee;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PaymentResponse extends XdrEncodable {
  late ACCOUNTID destination;
  late BALANCEID destinationBalanceID;
  late ASSETCODE asset;
  late UINT64 sourceSentUniversal;
  late UINT64 paymentID;
  late Fee actualSourcePaymentFee;
  late Fee actualDestinationPaymentFee;
  late PaymentResponseExt ext;

  PaymentResponse(
    this.destination,
    this.destinationBalanceID,
    this.asset,
    this.sourceSentUniversal,
    this.paymentID,
    this.actualSourcePaymentFee,
    this.actualDestinationPaymentFee,
    this.ext,
  );

  PaymentResponse.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.destination = PublicKey.fromXdr(stream);
    this.destinationBalanceID = PublicKey.fromXdr(stream);
    this.asset = stringFromXdr(stream);
    this.sourceSentUniversal = longFromXdr(stream);
    this.paymentID = longFromXdr(stream);
    this.actualSourcePaymentFee = Fee.fromXdr(stream);
    this.actualDestinationPaymentFee = Fee.fromXdr(stream);
    this.ext = PaymentResponseExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    destination.toXdr(stream);
    destinationBalanceID.toXdr(stream);
    asset.toXdr(stream);
    sourceSentUniversal.toXdr(stream);
    paymentID.toXdr(stream);
    actualSourcePaymentFee.toXdr(stream);
    actualDestinationPaymentFee.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class PaymentResponseExt extends XdrEncodable {
  late LedgerVersion discriminant;

  PaymentResponseExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static PaymentResponseExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return PaymentResponseExtEmptyVersion.fromXdr(stream);
    }

    return PaymentResponseExtEmptyVersion.fromXdr(stream);
  }
}

class PaymentResponseExtEmptyVersion extends PaymentResponseExt {
  PaymentResponseExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  PaymentResponseExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class PaymentResult extends XdrEncodable {
  late PaymentResultCode discriminant;

  PaymentResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static PaymentResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case PaymentResultCode.SUCCESS:
        return PaymentResultSuccess.fromXdr(stream);
    }

    return PaymentResultSuccess.fromXdr(stream);
  }
}

class PaymentResultSuccess extends PaymentResult {
  PaymentResultSuccess(this.paymentResponse)
      : super(PaymentResultCode(PaymentResultCode.SUCCESS));
  late PaymentResponse paymentResponse;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    paymentResponse.toXdr(stream);
  }

  PaymentResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(PaymentResultCode(PaymentResultCode.SUCCESS)) {
    this.paymentResponse = PaymentResponse.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct PayoutOp
//  {
//      AssetCode asset; // asset, which holders will receive dividends
//      BalanceID sourceBalanceID; // balance, from which payout will be performed
//
//      uint64 maxPayoutAmount; // max amount of asset, that owner wants to pay out
//      uint64 minPayoutAmount; // min tokens amount which will be payed for one balance;
//      uint64 minAssetHolderAmount; // min tokens amount for which holder will received dividends
//
//      Fee fee;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PayoutOp extends XdrEncodable {
  late ASSETCODE asset;
  late BALANCEID sourceBalanceID;
  late UINT64 maxPayoutAmount;
  late UINT64 minPayoutAmount;
  late UINT64 minAssetHolderAmount;
  late Fee fee;
  late PayoutOpExt ext;

  PayoutOp(
    this.asset,
    this.sourceBalanceID,
    this.maxPayoutAmount,
    this.minPayoutAmount,
    this.minAssetHolderAmount,
    this.fee,
    this.ext,
  );

  PayoutOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.asset = stringFromXdr(stream);
    this.sourceBalanceID = PublicKey.fromXdr(stream);
    this.maxPayoutAmount = longFromXdr(stream);
    this.minPayoutAmount = longFromXdr(stream);
    this.minAssetHolderAmount = longFromXdr(stream);
    this.fee = Fee.fromXdr(stream);
    this.ext = PayoutOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    asset.toXdr(stream);
    sourceBalanceID.toXdr(stream);
    maxPayoutAmount.toXdr(stream);
    minPayoutAmount.toXdr(stream);
    minAssetHolderAmount.toXdr(stream);
    fee.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class PayoutOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  PayoutOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static PayoutOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return PayoutOpExtEmptyVersion.fromXdr(stream);
    }

    return PayoutOpExtEmptyVersion.fromXdr(stream);
  }
}

class PayoutOpExtEmptyVersion extends PayoutOpExt {
  PayoutOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  PayoutOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class PayoutResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_AMOUNT = -1;
  static const INVALID_ASSET = -2;
  static const ASSET_NOT_FOUND = -3;
  static const ASSET_NOT_TRANSFERABLE = -4;
  static const BALANCE_NOT_FOUND = -5;
  static const INSUFFICIENT_FEE_AMOUNT = -6;
  static const FEE_EXCEEDS_ACTUAL_AMOUNT = -7;
  static const TOTAL_FEE_OVERFLOW = -8;
  static const UNDERFUNDED = -9;
  static const HOLDERS_NOT_FOUND = -10;
  static const MIN_AMOUNT_TOO_BIG = -11;
  static const LINE_FULL = -12;
  static const STATS_OVERFLOW = -13;
  static const LIMITS_EXCEEDED = -14;
  static const INCORRECT_PRECISION = -15;
  late int value;

  PayoutResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  PayoutResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct PayoutResponse
//  {
//      AccountID receiverID;
//      BalanceID receiverBalanceID;
//      uint64 receivedAmount;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PayoutResponse extends XdrEncodable {
  late ACCOUNTID receiverID;
  late BALANCEID receiverBalanceID;
  late UINT64 receivedAmount;
  late PayoutResponseExt ext;

  PayoutResponse(
    this.receiverID,
    this.receiverBalanceID,
    this.receivedAmount,
    this.ext,
  );

  PayoutResponse.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.receiverID = PublicKey.fromXdr(stream);
    this.receiverBalanceID = PublicKey.fromXdr(stream);
    this.receivedAmount = longFromXdr(stream);
    this.ext = PayoutResponseExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    receiverID.toXdr(stream);
    receiverBalanceID.toXdr(stream);
    receivedAmount.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class PayoutResponseExt extends XdrEncodable {
  late LedgerVersion discriminant;

  PayoutResponseExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static PayoutResponseExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return PayoutResponseExtEmptyVersion.fromXdr(stream);
    }

    return PayoutResponseExtEmptyVersion.fromXdr(stream);
  }
}

class PayoutResponseExtEmptyVersion extends PayoutResponseExt {
  PayoutResponseExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  PayoutResponseExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct PayoutSuccessResult
//  {
//      PayoutResponse payoutResponses<>;
//      uint64 actualPayoutAmount;
//      Fee actualFee;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PayoutSuccessResult extends XdrEncodable {
  late List<PayoutResponse> payoutResponses;
  late UINT64 actualPayoutAmount;
  late Fee actualFee;
  late PayoutSuccessResultExt ext;

  PayoutSuccessResult(
    this.payoutResponses,
    this.actualPayoutAmount,
    this.actualFee,
    this.ext,
  );

  PayoutSuccessResult.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    length = intFromXdr(stream);
    payoutResponses = <PayoutResponse>[];
    while (length > 0) {
      payoutResponses.add(PayoutResponse.fromXdr(stream));
      length--;
    }

    this.actualPayoutAmount = longFromXdr(stream);
    this.actualFee = Fee.fromXdr(stream);
    this.ext = PayoutSuccessResultExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    payoutResponses.length.toXdr(stream);
    payoutResponses.forEach((element) {
      element.toXdr(stream);
    });
    actualPayoutAmount.toXdr(stream);
    actualFee.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class PayoutSuccessResultExt extends XdrEncodable {
  late LedgerVersion discriminant;

  PayoutSuccessResultExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static PayoutSuccessResultExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return PayoutSuccessResultExtEmptyVersion.fromXdr(stream);
    }

    return PayoutSuccessResultExtEmptyVersion.fromXdr(stream);
  }
}

class PayoutSuccessResultExtEmptyVersion extends PayoutSuccessResultExt {
  PayoutSuccessResultExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  PayoutSuccessResultExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class PayoutResult extends XdrEncodable {
  late PayoutResultCode discriminant;

  PayoutResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static PayoutResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case PayoutResultCode.SUCCESS:
        return PayoutResultSuccess.fromXdr(stream);
    }

    return PayoutResultSuccess.fromXdr(stream);
  }
}

class PayoutResultSuccess extends PayoutResult {
  PayoutResultSuccess(this.success)
      : super(PayoutResultCode(PayoutResultCode.SUCCESS));
  late PayoutSuccessResult success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  PayoutResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(PayoutResultCode(PayoutResultCode.SUCCESS)) {
    this.success = PayoutSuccessResult.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: `RemoveAssetPairOp` removes specified asset pair
//  struct RemoveAssetPairOp
//  {
//      //: Defines a base asset of an asset pair
//      AssetCode base;
//      //: Defines a base asset of an asset pair
//      AssetCode quote;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class RemoveAssetPairOp extends XdrEncodable {
  late ASSETCODE base;
  late ASSETCODE quote;
  late RemoveAssetPairOpExt ext;

  RemoveAssetPairOp(
    this.base,
    this.quote,
    this.ext,
  );

  RemoveAssetPairOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.base = stringFromXdr(stream);
    this.quote = stringFromXdr(stream);
    this.ext = RemoveAssetPairOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    base.toXdr(stream);
    quote.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class RemoveAssetPairOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  RemoveAssetPairOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static RemoveAssetPairOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return RemoveAssetPairOpExtEmptyVersion.fromXdr(stream);
    }

    return RemoveAssetPairOpExtEmptyVersion.fromXdr(stream);
  }
}

class RemoveAssetPairOpExtEmptyVersion extends RemoveAssetPairOpExt {
  RemoveAssetPairOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  RemoveAssetPairOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class RemoveAssetPairResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const HAS_ACTIVE_OFFERS = -2;
  static const HAS_ACTIVE_SALES = -3;
  static const INVALID_ASSET_CODE = -4;
  late int value;

  RemoveAssetPairResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  RemoveAssetPairResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Result of successful `RemoveAssetPairOp` application
//  struct RemoveAssetPairSuccess
//  {
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class RemoveAssetPairSuccess extends XdrEncodable {
  late RemoveAssetPairSuccessExt ext;

  RemoveAssetPairSuccess(
    this.ext,
  );

  RemoveAssetPairSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = RemoveAssetPairSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class RemoveAssetPairSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  RemoveAssetPairSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static RemoveAssetPairSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return RemoveAssetPairSuccessExtEmptyVersion.fromXdr(stream);
    }

    return RemoveAssetPairSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class RemoveAssetPairSuccessExtEmptyVersion extends RemoveAssetPairSuccessExt {
  RemoveAssetPairSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  RemoveAssetPairSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class RemoveAssetPairResult extends XdrEncodable {
  late RemoveAssetPairResultCode discriminant;

  RemoveAssetPairResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static RemoveAssetPairResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case RemoveAssetPairResultCode.SUCCESS:
        return RemoveAssetPairResultSuccess.fromXdr(stream);
    }

    return RemoveAssetPairResultSuccess.fromXdr(stream);
  }
}

class RemoveAssetPairResultSuccess extends RemoveAssetPairResult {
  RemoveAssetPairResultSuccess(this.success)
      : super(RemoveAssetPairResultCode(RemoveAssetPairResultCode.SUCCESS));
  late RemoveAssetPairSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  RemoveAssetPairResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(RemoveAssetPairResultCode(RemoveAssetPairResultCode.SUCCESS)) {
    this.success = RemoveAssetPairSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: `RemoveAssetOp` changes the state of specified asset to removed
//  struct RemoveAssetOp
//  {
//      //: Defines an asset
//      AssetCode code;
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class RemoveAssetOp extends XdrEncodable {
  late ASSETCODE code;
  late RemoveAssetOpExt ext;

  RemoveAssetOp(
    this.code,
    this.ext,
  );

  RemoveAssetOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.code = stringFromXdr(stream);
    this.ext = RemoveAssetOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    code.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class RemoveAssetOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  RemoveAssetOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static RemoveAssetOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return RemoveAssetOpExtEmptyVersion.fromXdr(stream);
    }

    return RemoveAssetOpExtEmptyVersion.fromXdr(stream);
  }
}

class RemoveAssetOpExtEmptyVersion extends RemoveAssetOpExt {
  RemoveAssetOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  RemoveAssetOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class RemoveAssetResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_ASSET_CODE = -1;
  static const HAS_PAIR = -2;
  static const HAS_ACTIVE_OFFERS = -3;
  static const HAS_ACTIVE_SALES = -4;
  static const HAS_ACTIVE_ATOMIC_SWAPS = -5;
  static const HAS_ACTIVE_SWAPS = -6;
  static const CANNOT_REMOVE_STATS_QUOTE_ASSET = -7;
  static const HAS_PENDING_MOVEMENTS = -8;
  late int value;

  RemoveAssetResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  RemoveAssetResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Result of successful `RemoveAssetOp` application
//  struct RemoveAssetSuccess
//  {
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class RemoveAssetSuccess extends XdrEncodable {
  late RemoveAssetSuccessExt ext;

  RemoveAssetSuccess(
    this.ext,
  );

  RemoveAssetSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = RemoveAssetSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class RemoveAssetSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  RemoveAssetSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static RemoveAssetSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return RemoveAssetSuccessExtEmptyVersion.fromXdr(stream);
    }

    return RemoveAssetSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class RemoveAssetSuccessExtEmptyVersion extends RemoveAssetSuccessExt {
  RemoveAssetSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  RemoveAssetSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class RemoveAssetResult extends XdrEncodable {
  late RemoveAssetResultCode discriminant;

  RemoveAssetResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static RemoveAssetResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case RemoveAssetResultCode.SUCCESS:
        return RemoveAssetResultSuccess.fromXdr(stream);
    }

    return RemoveAssetResultSuccess.fromXdr(stream);
  }
}

class RemoveAssetResultSuccess extends RemoveAssetResult {
  RemoveAssetResultSuccess(this.success)
      : super(RemoveAssetResultCode(RemoveAssetResultCode.SUCCESS));
  late RemoveAssetSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  RemoveAssetResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(RemoveAssetResultCode(RemoveAssetResultCode.SUCCESS)) {
    this.success = RemoveAssetSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct RemoveDataOp
//  {
//      //: ID of the data to remove
//      uint64 dataID;
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class RemoveDataOp extends XdrEncodable {
  late UINT64 dataID;
  late EmptyExt ext;

  RemoveDataOp(
    this.dataID,
    this.ext,
  );

  RemoveDataOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.dataID = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    dataID.toXdr(stream);
    ext.toXdr(stream);
  }
}

class RemoveDataResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const NOT_AUTHORIZED = -2;
  late int value;

  RemoveDataResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  RemoveDataResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class RemoveDataResult extends XdrEncodable {
  late RemoveDataResultCode discriminant;

  RemoveDataResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static RemoveDataResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case RemoveDataResultCode.SUCCESS:
        return RemoveDataResultSuccess.fromXdr(stream);
    }

    return RemoveDataResultSuccess.fromXdr(stream);
  }
}

class RemoveDataResultSuccess extends RemoveDataResult {
  RemoveDataResultSuccess(this.ext)
      : super(RemoveDataResultCode(RemoveDataResultCode.SUCCESS));
  late EmptyExt ext;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ext.toXdr(stream);
  }

  RemoveDataResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(RemoveDataResultCode(RemoveDataResultCode.SUCCESS)) {
    this.ext = EmptyExt.fromXdr(stream);
  }
}

class ReviewRequestOpAction extends XdrEncodable {
  static const APPROVE = 1;
  static const REJECT = 2;
  static const PERMANENT_REJECT = 3;
  late int value;

  ReviewRequestOpAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ReviewRequestOpAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Review details of a Limits Update request
//  struct LimitsUpdateDetails {
//      //: Limits entry containing new limits to set
//      LimitsV2Entry newLimitsV2;
//
//      //:reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LimitsUpdateDetails extends XdrEncodable {
  late LimitsV2Entry newLimitsV2;
  late LimitsUpdateDetailsExt ext;

  LimitsUpdateDetails(
    this.newLimitsV2,
    this.ext,
  );

  LimitsUpdateDetails.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.newLimitsV2 = LimitsV2Entry.fromXdr(stream);
    this.ext = LimitsUpdateDetailsExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    newLimitsV2.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LimitsUpdateDetailsExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LimitsUpdateDetailsExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LimitsUpdateDetailsExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LimitsUpdateDetailsExtEmptyVersion.fromXdr(stream);
    }

    return LimitsUpdateDetailsExtEmptyVersion.fromXdr(stream);
  }
}

class LimitsUpdateDetailsExtEmptyVersion extends LimitsUpdateDetailsExt {
  LimitsUpdateDetailsExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LimitsUpdateDetailsExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Review details of a Withdraw Request
//  struct WithdrawalDetails {
//      //: External details updated on a Withdraw review
//      string externalDetails<>;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class WithdrawalDetails extends XdrEncodable {
  late String externalDetails;
  late WithdrawalDetailsExt ext;

  WithdrawalDetails(
    this.externalDetails,
    this.ext,
  );

  WithdrawalDetails.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.externalDetails = stringFromXdr(stream);
    this.ext = WithdrawalDetailsExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    externalDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class WithdrawalDetailsExt extends XdrEncodable {
  late LedgerVersion discriminant;

  WithdrawalDetailsExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static WithdrawalDetailsExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return WithdrawalDetailsExtEmptyVersion.fromXdr(stream);
    }

    return WithdrawalDetailsExtEmptyVersion.fromXdr(stream);
  }
}

class WithdrawalDetailsExtEmptyVersion extends WithdrawalDetailsExt {
  WithdrawalDetailsExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  WithdrawalDetailsExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Details of AML Alert
//  struct AMLAlertDetails {
//      //: Comment on reason of AML Alert
//      string comment<>;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AMLAlertDetails extends XdrEncodable {
  late String comment;
  late AMLAlertDetailsExt ext;

  AMLAlertDetails(
    this.comment,
    this.ext,
  );

  AMLAlertDetails.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.comment = stringFromXdr(stream);
    this.ext = AMLAlertDetailsExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    comment.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AMLAlertDetailsExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AMLAlertDetailsExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AMLAlertDetailsExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AMLAlertDetailsExtEmptyVersion.fromXdr(stream);
    }

    return AMLAlertDetailsExtEmptyVersion.fromXdr(stream);
  }
}

class AMLAlertDetailsExtEmptyVersion extends AMLAlertDetailsExt {
  AMLAlertDetailsExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AMLAlertDetailsExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct ContractDetails {
//      longstring details;
//
//      // Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//              void;
//      }
//      ext;
//  };

//  ===========================================================================
class ContractDetails extends XdrEncodable {
  late LONGSTRING details;
  late ContractDetailsExt ext;

  ContractDetails(
    this.details,
    this.ext,
  );

  ContractDetails.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.details = stringFromXdr(stream);
    this.ext = ContractDetailsExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ContractDetailsExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ContractDetailsExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ContractDetailsExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ContractDetailsExtEmptyVersion.fromXdr(stream);
    }

    return ContractDetailsExtEmptyVersion.fromXdr(stream);
  }
}

class ContractDetailsExtEmptyVersion extends ContractDetailsExt {
  ContractDetailsExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ContractDetailsExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Details of a payment reviewable request
//  struct BillPayDetails {
//      //: Details of payment
//      PaymentOp paymentDetails;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class BillPayDetails extends XdrEncodable {
  late PaymentOp paymentDetails;
  late BillPayDetailsExt ext;

  BillPayDetails(
    this.paymentDetails,
    this.ext,
  );

  BillPayDetails.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.paymentDetails = PaymentOp.fromXdr(stream);
    this.ext = BillPayDetailsExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    paymentDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class BillPayDetailsExt extends XdrEncodable {
  late LedgerVersion discriminant;

  BillPayDetailsExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static BillPayDetailsExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return BillPayDetailsExtEmptyVersion.fromXdr(stream);
    }

    return BillPayDetailsExtEmptyVersion.fromXdr(stream);
  }
}

class BillPayDetailsExtEmptyVersion extends BillPayDetailsExt {
  BillPayDetailsExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  BillPayDetailsExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Details of a request review
//  struct ReviewDetails {
//      //: Tasks to add to pending
//      uint32 tasksToAdd;
//      //: Tasks to remove from pending
//      uint32 tasksToRemove;
//      //: Details of the current review
//      string externalDetails<>;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ReviewDetails extends XdrEncodable {
  late UINT32 tasksToAdd;
  late UINT32 tasksToRemove;
  late String externalDetails;
  late ReviewDetailsExt ext;

  ReviewDetails(
    this.tasksToAdd,
    this.tasksToRemove,
    this.externalDetails,
    this.ext,
  );

  ReviewDetails.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.tasksToAdd = intFromXdr(stream);
    this.tasksToRemove = intFromXdr(stream);
    this.externalDetails = stringFromXdr(stream);
    this.ext = ReviewDetailsExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    tasksToAdd.toXdr(stream);
    tasksToRemove.toXdr(stream);
    externalDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ReviewDetailsExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ReviewDetailsExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ReviewDetailsExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ReviewDetailsExtEmptyVersion.fromXdr(stream);
    }

    return ReviewDetailsExtEmptyVersion.fromXdr(stream);
  }
}

class ReviewDetailsExtEmptyVersion extends ReviewDetailsExt {
  ReviewDetailsExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ReviewDetailsExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Extended result of the review request operation containing details specific to a Create Sale Request
//  struct SaleExtended {
//      //: ID of the newly created sale as a result of Create Sale Request successful review
//      uint64 saleID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SaleExtended extends XdrEncodable {
  late UINT64 saleID;
  late SaleExtendedExt ext;

  SaleExtended(
    this.saleID,
    this.ext,
  );

  SaleExtended.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.saleID = longFromXdr(stream);
    this.ext = SaleExtendedExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class SaleExtendedExt extends XdrEncodable {
  late LedgerVersion discriminant;

  SaleExtendedExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SaleExtendedExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return SaleExtendedExtEmptyVersion.fromXdr(stream);
    }

    return SaleExtendedExtEmptyVersion.fromXdr(stream);
  }
}

class SaleExtendedExtEmptyVersion extends SaleExtendedExt {
  SaleExtendedExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  SaleExtendedExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Extended result of the review request operation containing details specific to a Create Atomic Swap Bid Request
//  struct AtomicSwapAskExtended
//  {
//      //: ID of the newly created ask as a result of Create Atomic Swap Ask Request successful review
//      uint64 askID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AtomicSwapAskExtended extends XdrEncodable {
  late UINT64 askID;
  late AtomicSwapAskExtendedExt ext;

  AtomicSwapAskExtended(
    this.askID,
    this.ext,
  );

  AtomicSwapAskExtended.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.askID = longFromXdr(stream);
    this.ext = AtomicSwapAskExtendedExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    askID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AtomicSwapAskExtendedExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AtomicSwapAskExtendedExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AtomicSwapAskExtendedExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AtomicSwapAskExtendedExtEmptyVersion.fromXdr(stream);
    }

    return AtomicSwapAskExtendedExtEmptyVersion.fromXdr(stream);
  }
}

class AtomicSwapAskExtendedExtEmptyVersion extends AtomicSwapAskExtendedExt {
  AtomicSwapAskExtendedExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AtomicSwapAskExtendedExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Extended result of the review request operation containing details specific to a `CREATE_POLL` request
//  struct CreatePollExtended
//  {
//      //: ID of the newly created poll
//      uint64 pollID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreatePollExtended extends XdrEncodable {
  late UINT64 pollID;
  late CreatePollExtendedExt ext;

  CreatePollExtended(
    this.pollID,
    this.ext,
  );

  CreatePollExtended.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.pollID = longFromXdr(stream);
    this.ext = CreatePollExtendedExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreatePollExtendedExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreatePollExtendedExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreatePollExtendedExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreatePollExtendedExtEmptyVersion.fromXdr(stream);
    }

    return CreatePollExtendedExtEmptyVersion.fromXdr(stream);
  }
}

class CreatePollExtendedExtEmptyVersion extends CreatePollExtendedExt {
  CreatePollExtendedExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreatePollExtendedExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Extended result of a review request operation containing details specific to a Create Atomic Swap Request
//  struct AtomicSwapBidExtended
//  {
//      //: ID of a ask to apply atomic swap to
//      uint64 askID;
//      //: AccountID of a ask owner
//      AccountID askOwnerID;
//      //: Account id of an bid owner
//      AccountID bidOwnerID;
//      //: Base asset for the atomic swap
//      AssetCode baseAsset;
//      //: Quote asset for the atomic swap
//      AssetCode quoteAsset;
//      //: Amount in base asset to exchange
//      uint64 baseAmount;
//      //: Amount in quote asset to exchange
//      uint64 quoteAmount;
//      //: Price of base asset in terms of quote
//      uint64 price;
//      //: Balance in base asset of a ask owner
//      BalanceID askOwnerBaseBalanceID;
//      //: Balance in base asset of an bid owner
//      BalanceID bidOwnerBaseBalanceID;
//      //: Amount which was unlocked on bid owner base balance after bid removing
//      uint64 unlockedAmount;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//              void;
//      }
//      ext;
//  };

//  ===========================================================================
class AtomicSwapBidExtended extends XdrEncodable {
  late UINT64 askID;
  late ACCOUNTID askOwnerID;
  late ACCOUNTID bidOwnerID;
  late ASSETCODE baseAsset;
  late ASSETCODE quoteAsset;
  late UINT64 baseAmount;
  late UINT64 quoteAmount;
  late UINT64 price;
  late BALANCEID askOwnerBaseBalanceID;
  late BALANCEID bidOwnerBaseBalanceID;
  late UINT64 unlockedAmount;
  late AtomicSwapBidExtendedExt ext;

  AtomicSwapBidExtended(
    this.askID,
    this.askOwnerID,
    this.bidOwnerID,
    this.baseAsset,
    this.quoteAsset,
    this.baseAmount,
    this.quoteAmount,
    this.price,
    this.askOwnerBaseBalanceID,
    this.bidOwnerBaseBalanceID,
    this.unlockedAmount,
    this.ext,
  );

  AtomicSwapBidExtended.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.askID = longFromXdr(stream);
    this.askOwnerID = PublicKey.fromXdr(stream);
    this.bidOwnerID = PublicKey.fromXdr(stream);
    this.baseAsset = stringFromXdr(stream);
    this.quoteAsset = stringFromXdr(stream);
    this.baseAmount = longFromXdr(stream);
    this.quoteAmount = longFromXdr(stream);
    this.price = longFromXdr(stream);
    this.askOwnerBaseBalanceID = PublicKey.fromXdr(stream);
    this.bidOwnerBaseBalanceID = PublicKey.fromXdr(stream);
    this.unlockedAmount = longFromXdr(stream);
    this.ext = AtomicSwapBidExtendedExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    askID.toXdr(stream);
    askOwnerID.toXdr(stream);
    bidOwnerID.toXdr(stream);
    baseAsset.toXdr(stream);
    quoteAsset.toXdr(stream);
    baseAmount.toXdr(stream);
    quoteAmount.toXdr(stream);
    price.toXdr(stream);
    askOwnerBaseBalanceID.toXdr(stream);
    bidOwnerBaseBalanceID.toXdr(stream);
    unlockedAmount.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AtomicSwapBidExtendedExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AtomicSwapBidExtendedExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AtomicSwapBidExtendedExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AtomicSwapBidExtendedExtEmptyVersion.fromXdr(stream);
    }

    return AtomicSwapBidExtendedExtEmptyVersion.fromXdr(stream);
  }
}

class AtomicSwapBidExtendedExtEmptyVersion extends AtomicSwapBidExtendedExt {
  AtomicSwapBidExtendedExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AtomicSwapBidExtendedExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct CreateDeferredPaymentResult
//  {
//      uint64 deferredPaymentID;
//      AccountID destination;
//      AccountID source;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateDeferredPaymentResult extends XdrEncodable {
  late UINT64 deferredPaymentID;
  late ACCOUNTID destination;
  late ACCOUNTID source;
  late EmptyExt ext;

  CreateDeferredPaymentResult(
    this.deferredPaymentID,
    this.destination,
    this.source,
    this.ext,
  );

  CreateDeferredPaymentResult.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.deferredPaymentID = longFromXdr(stream);
    this.destination = PublicKey.fromXdr(stream);
    this.source = PublicKey.fromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    deferredPaymentID.toXdr(stream);
    destination.toXdr(stream);
    source.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct DataCreationExtended {
//      //: Owner of the created data entry
//      AccountID owner;
//      //: ID of the created data entry
//      uint64 id;
//      //: Security type of the created data entry
//      uint64 type;
//  };

//  ===========================================================================
class DataCreationExtended extends XdrEncodable {
  late ACCOUNTID owner;
  late UINT64 id;
  late UINT64 type;

  DataCreationExtended(
    this.owner,
    this.id,
    this.type,
  );

  DataCreationExtended.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.owner = PublicKey.fromXdr(stream);
    this.id = longFromXdr(stream);
    this.type = longFromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    owner.toXdr(stream);
    id.toXdr(stream);
    type.toXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Extended result of a Review Request operation containing details specific to certain request types
//  struct ExtendedResult {
//      //: Indicates whether or not the request that is being reviewed was applied
//      bool fulfilled;
//      //: typeExt is used to pass ReviewableRequestType along with details specific to a request type
//      union switch(ReviewableRequestType requestType) {
//      case CREATE_SALE:
//          SaleExtended saleExtended;
//      case NONE:
//          void;
//      case CREATE_ATOMIC_SWAP_BID:
//          AtomicSwapBidExtended atomicSwapBidExtended;
//      case CREATE_ATOMIC_SWAP_ASK:
//          AtomicSwapAskExtended atomicSwapAskExtended;
//      case CREATE_POLL:
//          CreatePollExtended createPoll;
//      case MANAGE_OFFER:
//          ManageOfferResult manageOfferResult;
//      case CREATE_PAYMENT:
//          PaymentResult paymentResult;
//      case PERFORM_REDEMPTION:
//          CreateRedemptionRequestResult createRedemptionResult;
//      case DATA_CREATION:
//          DataCreationExtended dataCreationExtended;
//      case CREATE_DEFERRED_PAYMENT:
//          CreateDeferredPaymentResult createDeferredPaymentResult;
//      case CLOSE_DEFERRED_PAYMENT:
//           CloseDeferredPaymentResult closeDeferredPaymentResult;
//
//      } typeExt;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ExtendedResult extends XdrEncodable {
  late bool fulfilled;
  late ExtendedResultTypeExt typeExt;
  late ExtendedResultExt ext;

  ExtendedResult(
    this.fulfilled,
    this.typeExt,
    this.ext,
  );

  ExtendedResult.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.fulfilled = boolFromXdr(stream);
    this.typeExt = ExtendedResultTypeExt.fromXdr(stream);
    this.ext = ExtendedResultExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    fulfilled.toXdr(stream);
    typeExt.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ExtendedResultTypeExt extends XdrEncodable {
  late ReviewableRequestType discriminant;

  ExtendedResultTypeExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ExtendedResultTypeExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ReviewableRequestType.CREATE_SALE:
        return ExtendedResultTypeExtCreateSale.fromXdr(stream);
      case ReviewableRequestType.NONE:
        return ExtendedResultTypeExtNone.fromXdr(stream);
      case ReviewableRequestType.CREATE_ATOMIC_SWAP_BID:
        return ExtendedResultTypeExtCreateAtomicSwapBid.fromXdr(stream);
      case ReviewableRequestType.CREATE_ATOMIC_SWAP_ASK:
        return ExtendedResultTypeExtCreateAtomicSwapAsk.fromXdr(stream);
      case ReviewableRequestType.CREATE_POLL:
        return ExtendedResultTypeExtCreatePoll.fromXdr(stream);
      case ReviewableRequestType.MANAGE_OFFER:
        return ExtendedResultTypeExtManageOffer.fromXdr(stream);
      case ReviewableRequestType.CREATE_PAYMENT:
        return ExtendedResultTypeExtCreatePayment.fromXdr(stream);
      case ReviewableRequestType.PERFORM_REDEMPTION:
        return ExtendedResultTypeExtPerformRedemption.fromXdr(stream);
      case ReviewableRequestType.DATA_CREATION:
        return ExtendedResultTypeExtDataCreation.fromXdr(stream);
      case ReviewableRequestType.CREATE_DEFERRED_PAYMENT:
        return ExtendedResultTypeExtCreateDeferredPayment.fromXdr(stream);
      case ReviewableRequestType.CLOSE_DEFERRED_PAYMENT:
        return ExtendedResultTypeExtCloseDeferredPayment.fromXdr(stream);
    }

    return ExtendedResultTypeExtCreateSale.fromXdr(stream);
  }
}

class ExtendedResultTypeExtCreateSale extends ExtendedResultTypeExt {
  ExtendedResultTypeExtCreateSale(this.saleExtended)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_SALE));
  late SaleExtended saleExtended;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    saleExtended.toXdr(stream);
  }

  ExtendedResultTypeExtCreateSale.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_SALE)) {
    this.saleExtended = SaleExtended.fromXdr(stream);
  }
}

class ExtendedResultTypeExtNone extends ExtendedResultTypeExt {
  ExtendedResultTypeExtNone()
      : super(ReviewableRequestType(ReviewableRequestType.NONE));

  ExtendedResultTypeExtNone.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.NONE)) {}
}

class ExtendedResultTypeExtCreateAtomicSwapBid extends ExtendedResultTypeExt {
  ExtendedResultTypeExtCreateAtomicSwapBid(this.atomicSwapBidExtended)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_ATOMIC_SWAP_BID));
  late AtomicSwapBidExtended atomicSwapBidExtended;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    atomicSwapBidExtended.toXdr(stream);
  }

  ExtendedResultTypeExtCreateAtomicSwapBid.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_ATOMIC_SWAP_BID)) {
    this.atomicSwapBidExtended = AtomicSwapBidExtended.fromXdr(stream);
  }
}

class ExtendedResultTypeExtCreateAtomicSwapAsk extends ExtendedResultTypeExt {
  ExtendedResultTypeExtCreateAtomicSwapAsk(this.atomicSwapAskExtended)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_ATOMIC_SWAP_ASK));
  late AtomicSwapAskExtended atomicSwapAskExtended;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    atomicSwapAskExtended.toXdr(stream);
  }

  ExtendedResultTypeExtCreateAtomicSwapAsk.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_ATOMIC_SWAP_ASK)) {
    this.atomicSwapAskExtended = AtomicSwapAskExtended.fromXdr(stream);
  }
}

class ExtendedResultTypeExtCreatePoll extends ExtendedResultTypeExt {
  ExtendedResultTypeExtCreatePoll(this.createPoll)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_POLL));
  late CreatePollExtended createPoll;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPoll.toXdr(stream);
  }

  ExtendedResultTypeExtCreatePoll.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_POLL)) {
    this.createPoll = CreatePollExtended.fromXdr(stream);
  }
}

class ExtendedResultTypeExtManageOffer extends ExtendedResultTypeExt {
  ExtendedResultTypeExtManageOffer(this.manageOfferResult)
      : super(ReviewableRequestType(ReviewableRequestType.MANAGE_OFFER));
  late ManageOfferResult manageOfferResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageOfferResult.toXdr(stream);
  }

  ExtendedResultTypeExtManageOffer.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.MANAGE_OFFER)) {
    this.manageOfferResult = ManageOfferResult.fromXdr(stream);
  }
}

class ExtendedResultTypeExtCreatePayment extends ExtendedResultTypeExt {
  ExtendedResultTypeExtCreatePayment(this.paymentResult)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_PAYMENT));
  late PaymentResult paymentResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    paymentResult.toXdr(stream);
  }

  ExtendedResultTypeExtCreatePayment.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_PAYMENT)) {
    this.paymentResult = PaymentResult.fromXdr(stream);
  }
}

class ExtendedResultTypeExtPerformRedemption extends ExtendedResultTypeExt {
  ExtendedResultTypeExtPerformRedemption(this.createRedemptionResult)
      : super(ReviewableRequestType(ReviewableRequestType.PERFORM_REDEMPTION));
  late CreateRedemptionRequestResult createRedemptionResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createRedemptionResult.toXdr(stream);
  }

  ExtendedResultTypeExtPerformRedemption.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.PERFORM_REDEMPTION)) {
    this.createRedemptionResult = CreateRedemptionRequestResult.fromXdr(stream);
  }
}

class ExtendedResultTypeExtDataCreation extends ExtendedResultTypeExt {
  ExtendedResultTypeExtDataCreation(this.dataCreationExtended)
      : super(ReviewableRequestType(ReviewableRequestType.DATA_CREATION));
  late DataCreationExtended dataCreationExtended;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dataCreationExtended.toXdr(stream);
  }

  ExtendedResultTypeExtDataCreation.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.DATA_CREATION)) {
    this.dataCreationExtended = DataCreationExtended.fromXdr(stream);
  }
}

class ExtendedResultTypeExtCreateDeferredPayment extends ExtendedResultTypeExt {
  ExtendedResultTypeExtCreateDeferredPayment(this.createDeferredPaymentResult)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_DEFERRED_PAYMENT));
  late CreateDeferredPaymentResult createDeferredPaymentResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDeferredPaymentResult.toXdr(stream);
  }

  ExtendedResultTypeExtCreateDeferredPayment.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_DEFERRED_PAYMENT)) {
    this.createDeferredPaymentResult =
        CreateDeferredPaymentResult.fromXdr(stream);
  }
}

class ExtendedResultTypeExtCloseDeferredPayment extends ExtendedResultTypeExt {
  ExtendedResultTypeExtCloseDeferredPayment(this.closeDeferredPaymentResult)
      : super(ReviewableRequestType(
            ReviewableRequestType.CLOSE_DEFERRED_PAYMENT));
  late CloseDeferredPaymentResult closeDeferredPaymentResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    closeDeferredPaymentResult.toXdr(stream);
  }

  ExtendedResultTypeExtCloseDeferredPayment.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(
            ReviewableRequestType.CLOSE_DEFERRED_PAYMENT)) {
    this.closeDeferredPaymentResult =
        CloseDeferredPaymentResult.fromXdr(stream);
  }
}

abstract class ExtendedResultExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ExtendedResultExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ExtendedResultExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ExtendedResultExtEmptyVersion.fromXdr(stream);
    }

    return ExtendedResultExtEmptyVersion.fromXdr(stream);
  }
}

class ExtendedResultExtEmptyVersion extends ExtendedResultExt {
  ExtendedResultExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ExtendedResultExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Review Request operation
//  struct ReviewRequestOp
//  {
//      //: ID of a request that is being reviewed
//      uint64 requestID;
//      //: Hash of a request that is being reviewed
//      Hash requestHash;
//      //: requestDetails is used to pass request type along with details specific to it.
//      union switch(ReviewableRequestType requestType) {
//      case CREATE_WITHDRAW:
//          WithdrawalDetails withdrawal;
//      case UPDATE_LIMITS:
//          LimitsUpdateDetails limitsUpdate;
//      case CREATE_AML_ALERT:
//          AMLAlertDetails amlAlertDetails;
//      case CREATE_INVOICE:
//          BillPayDetails billPay;
//      case MANAGE_CONTRACT:
//          ContractDetails contract;
//      default:
//          void;
//      } requestDetails;
//      //: Review action defines an action performed on the pending ReviewableRequest
//      ReviewRequestOpAction action;
//      //: Contains reject reason
//      longstring reason;
//      //: Details of the ReviewRequest operation
//      ReviewDetails reviewDetails;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ReviewRequestOp extends XdrEncodable {
  late UINT64 requestID;
  late HASH requestHash;
  late ReviewRequestOpRequestDetails requestDetails;
  late ReviewRequestOpAction action;
  late LONGSTRING reason;
  late ReviewDetails reviewDetails;
  late ReviewRequestOpExt ext;

  ReviewRequestOp(
    this.requestID,
    this.requestHash,
    this.requestDetails,
    this.action,
    this.reason,
    this.reviewDetails,
    this.ext,
  );

  ReviewRequestOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.requestID = longFromXdr(stream);
    this.requestHash = HASH.fromXdr(stream);
    this.requestDetails = ReviewRequestOpRequestDetails.fromXdr(stream);
    this.action = ReviewRequestOpAction.fromXdr(stream);
    this.reason = stringFromXdr(stream);
    this.reviewDetails = ReviewDetails.fromXdr(stream);
    this.ext = ReviewRequestOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    requestHash.toXdr(stream);
    requestDetails.toXdr(stream);
    action.toXdr(stream);
    reason.toXdr(stream);
    reviewDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ReviewRequestOpRequestDetails extends XdrEncodable {
  late ReviewableRequestType discriminant;

  ReviewRequestOpRequestDetails(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ReviewRequestOpRequestDetails fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ReviewableRequestType.CREATE_WITHDRAW:
        return ReviewRequestOpRequestDetailsCreateWithdraw.fromXdr(stream);
      case ReviewableRequestType.UPDATE_LIMITS:
        return ReviewRequestOpRequestDetailsUpdateLimits.fromXdr(stream);
      case ReviewableRequestType.CREATE_AML_ALERT:
        return ReviewRequestOpRequestDetailsCreateAmlAlert.fromXdr(stream);
      case ReviewableRequestType.CREATE_INVOICE:
        return ReviewRequestOpRequestDetailsCreateInvoice.fromXdr(stream);
      case ReviewableRequestType.MANAGE_CONTRACT:
        return ReviewRequestOpRequestDetailsManageContract.fromXdr(stream);
    }

    return ReviewRequestOpRequestDetailsCreateWithdraw.fromXdr(stream);
  }
}

class ReviewRequestOpRequestDetailsCreateWithdraw
    extends ReviewRequestOpRequestDetails {
  ReviewRequestOpRequestDetailsCreateWithdraw(this.withdrawal)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_WITHDRAW));
  late WithdrawalDetails withdrawal;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    withdrawal.toXdr(stream);
  }

  ReviewRequestOpRequestDetailsCreateWithdraw.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_WITHDRAW)) {
    this.withdrawal = WithdrawalDetails.fromXdr(stream);
  }
}

class ReviewRequestOpRequestDetailsUpdateLimits
    extends ReviewRequestOpRequestDetails {
  ReviewRequestOpRequestDetailsUpdateLimits(this.limitsUpdate)
      : super(ReviewableRequestType(ReviewableRequestType.UPDATE_LIMITS));
  late LimitsUpdateDetails limitsUpdate;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    limitsUpdate.toXdr(stream);
  }

  ReviewRequestOpRequestDetailsUpdateLimits.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.UPDATE_LIMITS)) {
    this.limitsUpdate = LimitsUpdateDetails.fromXdr(stream);
  }
}

class ReviewRequestOpRequestDetailsCreateAmlAlert
    extends ReviewRequestOpRequestDetails {
  ReviewRequestOpRequestDetailsCreateAmlAlert(this.amlAlertDetails)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_AML_ALERT));
  late AMLAlertDetails amlAlertDetails;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    amlAlertDetails.toXdr(stream);
  }

  ReviewRequestOpRequestDetailsCreateAmlAlert.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_AML_ALERT)) {
    this.amlAlertDetails = AMLAlertDetails.fromXdr(stream);
  }
}

class ReviewRequestOpRequestDetailsCreateInvoice
    extends ReviewRequestOpRequestDetails {
  ReviewRequestOpRequestDetailsCreateInvoice(this.billPay)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_INVOICE));
  late BillPayDetails billPay;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    billPay.toXdr(stream);
  }

  ReviewRequestOpRequestDetailsCreateInvoice.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_INVOICE)) {
    this.billPay = BillPayDetails.fromXdr(stream);
  }
}

class ReviewRequestOpRequestDetailsManageContract
    extends ReviewRequestOpRequestDetails {
  ReviewRequestOpRequestDetailsManageContract(this.contract)
      : super(ReviewableRequestType(ReviewableRequestType.MANAGE_CONTRACT));
  late ContractDetails contract;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    contract.toXdr(stream);
  }

  ReviewRequestOpRequestDetailsManageContract.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.MANAGE_CONTRACT)) {
    this.contract = ContractDetails.fromXdr(stream);
  }
}

abstract class ReviewRequestOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ReviewRequestOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ReviewRequestOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ReviewRequestOpExtEmptyVersion.fromXdr(stream);
    }

    return ReviewRequestOpExtEmptyVersion.fromXdr(stream);
  }
}

class ReviewRequestOpExtEmptyVersion extends ReviewRequestOpExt {
  ReviewRequestOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ReviewRequestOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ReviewRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_REASON = -1;
  static const INVALID_ACTION = -2;
  static const HASH_MISMATCHED = -3;
  static const NOT_FOUND = -4;
  static const TYPE_MISMATCHED = -5;
  static const REJECT_NOT_ALLOWED = -6;
  static const INVALID_EXTERNAL_DETAILS = -7;
  static const REQUESTOR_IS_BLOCKED = -8;
  static const PERMANENT_REJECT_NOT_ALLOWED = -9;
  static const REMOVING_NOT_SET_TASKS = -100;
  static const ASSET_ALREADY_EXISTS = -200;
  static const ASSET_DOES_NOT_EXISTS = -210;
  static const MAX_ISSUANCE_AMOUNT_EXCEEDED = -400;
  static const INSUFFICIENT_AVAILABLE_FOR_ISSUANCE_AMOUNT = -410;
  static const FULL_LINE = -420;
  static const SYSTEM_TASKS_NOT_ALLOWED = -430;
  static const INCORRECT_PRECISION = -440;
  static const BASE_ASSET_DOES_NOT_EXISTS = -500;
  static const HARD_CAP_WILL_EXCEED_MAX_ISSUANCE = -510;
  static const INSUFFICIENT_PREISSUED_FOR_HARD_CAP = -520;
  static const BASE_ASSET_NOT_FOUND = -530;
  static const ASSET_PAIR_NOT_FOUND = -540;
  static const QUOTE_ASSET_NOT_FOUND = -550;
  static const NON_ZERO_TASKS_TO_REMOVE_NOT_ALLOWED = -600;
  static const ACCOUNT_ROLE_TO_SET_DOES_NOT_EXIST = -610;
  static const SALE_NOT_FOUND = -700;
  static const AMOUNT_MISMATCHED = -1010;
  static const DESTINATION_BALANCE_MISMATCHED = -1020;
  static const NOT_ALLOWED_ACCOUNT_DESTINATION = -1030;
  static const REQUIRED_SOURCE_PAY_FOR_DESTINATION = -1040;
  static const SOURCE_BALANCE_MISMATCHED = -1050;
  static const CONTRACT_NOT_FOUND = -1060;
  static const INVOICE_RECEIVER_BALANCE_LOCK_AMOUNT_OVERFLOW = -1070;
  static const INVOICE_ALREADY_APPROVED = -1080;
  static const PAYMENT_V2_MALFORMED = -1100;
  static const UNDERFUNDED = -1110;
  static const LINE_FULL = -1120;
  static const DESTINATION_BALANCE_NOT_FOUND = -1130;
  static const BALANCE_ASSETS_MISMATCHED = -1140;
  static const SRC_BALANCE_NOT_FOUND = -1150;
  static const REFERENCE_DUPLICATION = -1160;
  static const STATS_OVERFLOW = -1170;
  static const LIMITS_EXCEEDED = -1180;
  static const NOT_ALLOWED_BY_ASSET_POLICY = -1190;
  static const INVALID_DESTINATION_FEE = -1200;
  static const INVALID_DESTINATION_FEE_ASSET = -1210;
  static const FEE_ASSET_MISMATCHED = -1220;
  static const INSUFFICIENT_FEE_AMOUNT = -1230;
  static const BALANCE_TO_CHARGE_FEE_FROM_NOT_FOUND = -1240;
  static const PAYMENT_AMOUNT_IS_LESS_THAN_DEST_FEE = -1250;
  static const DESTINATION_ACCOUNT_NOT_FOUND = -1260;
  static const CANNOT_CREATE_FOR_ACC_ID_AND_ACC_TYPE = 1300;
  static const INVALID_LIMITS = 1310;
  static const ACCOUNT_NOT_FOUND = -1311;
  static const ROLE_NOT_FOUND = -1312;
  static const CONTRACT_DETAILS_TOO_LONG = -1400;
  static const BASE_ASSET_CANNOT_BE_SWAPPED = -1500;
  static const QUOTE_ASSET_CANNOT_BE_SWAPPED = -1501;
  static const ATOMIC_SWAP_BID_OWNER_FULL_LINE = -1504;
  static const INVALID_SIGNER_DATA = -1600;
  static const MANAGE_OFFER_FAILED = -1700;
  static const PAYMENT_FAILED = -1800;
  static const DATA_NOT_FOUND = -1900;
  late int value;

  ReviewRequestResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ReviewRequestResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class ReviewRequestResult extends XdrEncodable {
  late ReviewRequestResultCode discriminant;

  ReviewRequestResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ReviewRequestResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ReviewRequestResultCode.SUCCESS:
        return ReviewRequestResultSuccess.fromXdr(stream);
      case ReviewRequestResultCode.MANAGE_OFFER_FAILED:
        return ReviewRequestResultManageOfferFailed.fromXdr(stream);
      case ReviewRequestResultCode.PAYMENT_FAILED:
        return ReviewRequestResultPaymentFailed.fromXdr(stream);
    }

    return ReviewRequestResultSuccess.fromXdr(stream);
  }
}

class ReviewRequestResultSuccess extends ReviewRequestResult {
  ReviewRequestResultSuccess(this.success)
      : super(ReviewRequestResultCode(ReviewRequestResultCode.SUCCESS));
  late ExtendedResult success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  ReviewRequestResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(ReviewRequestResultCode(ReviewRequestResultCode.SUCCESS)) {
    this.success = ExtendedResult.fromXdr(stream);
  }
}

class ReviewRequestResultManageOfferFailed extends ReviewRequestResult {
  ReviewRequestResultManageOfferFailed(this.manageOfferCode)
      : super(ReviewRequestResultCode(
            ReviewRequestResultCode.MANAGE_OFFER_FAILED));
  late ManageOfferResultCode manageOfferCode;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageOfferCode.toXdr(stream);
  }

  ReviewRequestResultManageOfferFailed.fromXdr(XdrDataInputStream stream)
      : super(ReviewRequestResultCode(
            ReviewRequestResultCode.MANAGE_OFFER_FAILED)) {
    this.manageOfferCode = ManageOfferResultCode.fromXdr(stream);
  }
}

class ReviewRequestResultPaymentFailed extends ReviewRequestResult {
  ReviewRequestResultPaymentFailed(this.paymentCode)
      : super(ReviewRequestResultCode(ReviewRequestResultCode.PAYMENT_FAILED));
  late PaymentResultCode paymentCode;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    paymentCode.toXdr(stream);
  }

  ReviewRequestResultPaymentFailed.fromXdr(XdrDataInputStream stream)
      : super(ReviewRequestResultCode(ReviewRequestResultCode.PAYMENT_FAILED)) {
    this.paymentCode = PaymentResultCode.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  //: Allows to establish or remove a relationship between a particular fee entry with the different entities
//      struct SetFeesOp
//      {
//          //: Fee entry to set
//          FeeEntry* fee;
//          //: `isDelete` indicates that a fee should be either set or removed
//          bool isDelete;
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      };

//  ===========================================================================
class SetFeesOp extends XdrEncodable {
  late FeeEntry? fee;
  late bool isDelete;
  late SetFeesOpExt ext;

  SetFeesOp(
    this.fee,
    this.isDelete,
    this.ext,
  );

  SetFeesOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    if (boolFromXdr(stream)) {
      this.fee = FeeEntry.fromXdr(stream);
    } else {
      this.fee = null;
    }
    this.isDelete = boolFromXdr(stream);
    this.ext = SetFeesOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    if (fee != null) {
      true.toXdr(stream);
      fee?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    isDelete.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class SetFeesOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  SetFeesOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SetFeesOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return SetFeesOpExtEmptyVersion.fromXdr(stream);
    }

    return SetFeesOpExtEmptyVersion.fromXdr(stream);
  }
}

class SetFeesOpExtEmptyVersion extends SetFeesOpExt {
  SetFeesOpExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  SetFeesOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class SetFeesResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_AMOUNT = -1;
  static const INVALID_FEE_TYPE = -2;
  static const ASSET_NOT_FOUND = -3;
  static const INVALID_ASSET = -4;
  static const MALFORMED = -5;
  static const MALFORMED_RANGE = -6;
  static const RANGE_OVERLAP = -7;
  static const NOT_FOUND = -8;
  static const SUB_TYPE_NOT_EXIST = -9;
  static const INVALID_FEE_VERSION = -10;
  static const INVALID_FEE_ASSET = -11;
  static const FEE_ASSET_NOT_ALLOWED = -12;
  static const CROSS_ASSET_FEE_NOT_ALLOWED = -13;
  static const FEE_ASSET_NOT_FOUND = -14;
  static const ASSET_PAIR_NOT_FOUND = -15;
  static const INVALID_ASSET_PAIR_PRICE = -16;
  static const INVALID_FEE_HASH = -17;
  static const INVALID_AMOUNT_PRECISION = -18;
  static const ACCOUNT_NOT_FOUND = -19;
  static const ROLE_NOT_FOUND = -20;
  late int value;

  SetFeesResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  SetFeesResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class SetFeesResult extends XdrEncodable {
  late SetFeesResultCode discriminant;

  SetFeesResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SetFeesResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case SetFeesResultCode.SUCCESS:
        return SetFeesResultSuccess.fromXdr(stream);
    }

    return SetFeesResultSuccess.fromXdr(stream);
  }
}

class SetFeesResultSuccess extends SetFeesResult {
  SetFeesResultSuccess(this.success)
      : super(SetFeesResultCode(SetFeesResultCode.SUCCESS));
  late SetFeesResultSuccessSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  SetFeesResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(SetFeesResultCode(SetFeesResultCode.SUCCESS)) {
    this.success = SetFeesResultSuccessSuccess.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//                  //: reserved for future use
//                  union switch (LedgerVersion v)
//                  {
//                  case EMPTY_VERSION:
//                      void;
//                  }
//                  ext;
//              }

//  ===========================================================================
class SetFeesResultSuccessSuccess extends XdrEncodable {
  late SetFeesResultSuccessExt ext;

  SetFeesResultSuccessSuccess(
    this.ext,
  );

  SetFeesResultSuccessSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = SetFeesResultSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class SetFeesResultSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  SetFeesResultSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SetFeesResultSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return SetFeesResultSuccessExtEmptyVersion.fromXdr(stream);
    }

    return SetFeesResultSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class SetFeesResultSuccessExtEmptyVersion extends SetFeesResultSuccessExt {
  SetFeesResultSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  SetFeesResultSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

// === xdr source ============================================================

//  //: StampOp is used to save current ledger hash and current license hash
//  struct StampOp
//  {
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class StampOp extends XdrEncodable {
  late StampOpExt ext;

  StampOp(
    this.ext,
  );

  StampOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ext = StampOpExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}

abstract class StampOpExt extends XdrEncodable {
  late LedgerVersion discriminant;

  StampOpExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static StampOpExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return StampOpExtEmptyVersion.fromXdr(stream);
    }

    return StampOpExtEmptyVersion.fromXdr(stream);
  }
}

class StampOpExtEmptyVersion extends StampOpExt {
  StampOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  StampOpExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class StampResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  late int value;

  StampResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  StampResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: StampSuccess is used to pass saved ledger hash and license hash
//  struct StampSuccess {
//      //: ledger hash saved into a database
//      Hash ledgerHash;
//
//      //: current license hash
//      Hash licenseHash;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class StampSuccess extends XdrEncodable {
  late HASH ledgerHash;
  late HASH licenseHash;
  late StampSuccessExt ext;

  StampSuccess(
    this.ledgerHash,
    this.licenseHash,
    this.ext,
  );

  StampSuccess.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ledgerHash = HASH.fromXdr(stream);
    this.licenseHash = HASH.fromXdr(stream);
    this.ext = StampSuccessExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ledgerHash.toXdr(stream);
    licenseHash.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class StampSuccessExt extends XdrEncodable {
  late LedgerVersion discriminant;

  StampSuccessExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static StampSuccessExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return StampSuccessExtEmptyVersion.fromXdr(stream);
    }

    return StampSuccessExtEmptyVersion.fromXdr(stream);
  }
}

class StampSuccessExtEmptyVersion extends StampSuccessExt {
  StampSuccessExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  StampSuccessExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

abstract class StampResult extends XdrEncodable {
  late StampResultCode discriminant;

  StampResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static StampResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case StampResultCode.SUCCESS:
        return StampResultSuccess.fromXdr(stream);
    }

    return StampResultSuccess.fromXdr(stream);
  }
}

class StampResultSuccess extends StampResult {
  StampResultSuccess(this.success)
      : super(StampResultCode(StampResultCode.SUCCESS));
  late StampSuccess success;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }

  StampResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(StampResultCode(StampResultCode.SUCCESS)) {
    this.success = StampSuccess.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct UpdateDataOp
//  {
//      //: ID of the data entry to update
//      uint64 dataID;
//      //: New value to set
//      longstring value;
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class UpdateDataOp extends XdrEncodable {
  late UINT64 dataID;
  late LONGSTRING value;
  late EmptyExt ext;

  UpdateDataOp(
    this.dataID,
    this.value,
    this.ext,
  );

  UpdateDataOp.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.dataID = longFromXdr(stream);
    this.value = stringFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    dataID.toXdr(stream);
    value.toXdr(stream);
    ext.toXdr(stream);
  }
}

class UpdateDataResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_DATA = -1;
  static const NOT_FOUND = -2;
  static const NOT_AUTHORIZED = -3;
  late int value;

  UpdateDataResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  UpdateDataResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class UpdateDataResult extends XdrEncodable {
  late UpdateDataResultCode discriminant;

  UpdateDataResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static UpdateDataResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case UpdateDataResultCode.SUCCESS:
        return UpdateDataResultSuccess.fromXdr(stream);
    }

    return UpdateDataResultSuccess.fromXdr(stream);
  }
}

class UpdateDataResultSuccess extends UpdateDataResult {
  UpdateDataResultSuccess(this.ext)
      : super(UpdateDataResultCode(UpdateDataResultCode.SUCCESS));
  late EmptyExt ext;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ext.toXdr(stream);
  }

  UpdateDataResultSuccess.fromXdr(XdrDataInputStream stream)
      : super(UpdateDataResultCode(UpdateDataResultCode.SUCCESS)) {
    this.ext = EmptyExt.fromXdr(stream);
  }
}

class ErrorCode extends XdrEncodable {
  static const MISC = 0;
  static const DATA = 1;
  static const CONF = 2;
  static const AUTH = 3;
  static const LOAD = 4;
  late int value;

  ErrorCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  ErrorCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct Error
//  {
//      ErrorCode code;
//      string msg<100>;
//  };

//  ===========================================================================
class Error extends XdrEncodable {
  late ErrorCode code;
  late String msg;

  Error(
    this.code,
    this.msg,
  );

  Error.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.code = ErrorCode.fromXdr(stream);
    this.msg = stringFromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    code.toXdr(stream);
    msg.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct AuthCert
//  {
//      Curve25519Public pubkey;
//      uint64 expiration;
//      Signature sig;
//  };

//  ===========================================================================
class AuthCert extends XdrEncodable {
  late Curve25519Public pubkey;
  late UINT64 expiration;
  late SIGNATURE sig;

  AuthCert(
    this.pubkey,
    this.expiration,
    this.sig,
  );

  AuthCert.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.pubkey = Curve25519Public.fromXdr(stream);
    this.expiration = longFromXdr(stream);
    this.sig = opaqueFromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    pubkey.toXdr(stream);
    expiration.toXdr(stream);
    sig.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct Hello
//  {
//      uint32 ledgerVersion;
//      uint32 overlayVersion;
//      uint32 overlayMinVersion;
//      Hash networkID;
//      string versionStr<100>;
//      int listeningPort;
//      NodeID peerID;
//      AuthCert cert;
//      uint256 nonce;
//  };

//  ===========================================================================
class Hello extends XdrEncodable {
  late UINT32 ledgerVersion;
  late UINT32 overlayVersion;
  late UINT32 overlayMinVersion;
  late HASH networkID;
  late String versionStr;
  late int listeningPort;
  late NODEID peerID;
  late AuthCert cert;
  late UINT256 nonce;

  Hello(
    this.ledgerVersion,
    this.overlayVersion,
    this.overlayMinVersion,
    this.networkID,
    this.versionStr,
    this.listeningPort,
    this.peerID,
    this.cert,
    this.nonce,
  );

  Hello.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ledgerVersion = intFromXdr(stream);
    this.overlayVersion = intFromXdr(stream);
    this.overlayMinVersion = intFromXdr(stream);
    this.networkID = HASH.fromXdr(stream);
    this.versionStr = stringFromXdr(stream);
    this.listeningPort = intFromXdr(stream);
    this.peerID = PublicKey.fromXdr(stream);
    this.cert = AuthCert.fromXdr(stream);
    this.nonce = UINT256.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ledgerVersion.toXdr(stream);
    overlayVersion.toXdr(stream);
    overlayMinVersion.toXdr(stream);
    networkID.toXdr(stream);
    versionStr.toXdr(stream);
    listeningPort.toXdr(stream);
    peerID.toXdr(stream);
    cert.toXdr(stream);
    nonce.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct Auth
//  {
//      // Empty message, just to confirm
//      // establishment of MAC keys.
//      int unused;
//  };

//  ===========================================================================
class Auth extends XdrEncodable {
  late int unused;

  Auth(
    this.unused,
  );

  Auth.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.unused = intFromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    unused.toXdr(stream);
  }
}

class IPAddrType extends XdrEncodable {
  static const IPv4 = 0;
  static const IPv6 = 1;
  late int value;

  IPAddrType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  IPAddrType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct PeerAddress
//  {
//      union switch (IPAddrType type)
//      {
//      case IPv4:
//          opaque ipv4[4];
//      case IPv6:
//          opaque ipv6[16];
//      }
//      ip;
//      uint32 port;
//      uint32 numFailures;
//  };

//  ===========================================================================
class PeerAddress extends XdrEncodable {
  late PeerAddressIp ip;
  late UINT32 port;
  late UINT32 numFailures;

  PeerAddress(
    this.ip,
    this.port,
    this.numFailures,
  );

  PeerAddress.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.ip = PeerAddressIp.fromXdr(stream);
    this.port = intFromXdr(stream);
    this.numFailures = intFromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ip.toXdr(stream);
    port.toXdr(stream);
    numFailures.toXdr(stream);
  }
}

abstract class PeerAddressIp extends XdrEncodable {
  late IPAddrType discriminant;

  PeerAddressIp(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static PeerAddressIp fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case IPAddrType.IPv4:
        return PeerAddressIpIpv4.fromXdr(stream);
      case IPAddrType.IPv6:
        return PeerAddressIpIpv6.fromXdr(stream);
    }

    return PeerAddressIpIpv4.fromXdr(stream);
  }
}

class PeerAddressIpIpv4 extends PeerAddressIp {
  PeerAddressIpIpv4(this.ipv4) : super(IPAddrType(IPAddrType.IPv4));
  late XdrByteArrayFixed4 ipv4;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ipv4.toXdr(stream);
  }

  PeerAddressIpIpv4.fromXdr(XdrDataInputStream stream)
      : super(IPAddrType(IPAddrType.IPv4)) {
    var length = 0;
    this.ipv4 = XdrByteArrayFixed4.fromXdr(stream);
  }
}

class PeerAddressIpIpv6 extends PeerAddressIp {
  PeerAddressIpIpv6(this.ipv6) : super(IPAddrType(IPAddrType.IPv6));
  late XdrByteArrayFixed16 ipv6;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ipv6.toXdr(stream);
  }

  PeerAddressIpIpv6.fromXdr(XdrDataInputStream stream)
      : super(IPAddrType(IPAddrType.IPv6)) {
    var length = 0;
    this.ipv6 = XdrByteArrayFixed16.fromXdr(stream);
  }
}

class MessageType extends XdrEncodable {
  static const ERROR_MSG = 0;
  static const AUTH = 2;
  static const DONT_HAVE = 3;
  static const GET_PEERS = 4;
  static const PEERS = 5;
  static const GET_TX_SET = 6;
  static const TX_SET = 7;
  static const TRANSACTION = 8;
  static const GET_SCP_QUORUMSET = 9;
  static const SCP_QUORUMSET = 10;
  static const SCP_MESSAGE = 11;
  static const GET_SCP_STATE = 12;
  static const HELLO = 13;
  late int value;

  MessageType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  MessageType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct DontHave
//  {
//      MessageType type;
//      uint256 reqHash;
//  };

//  ===========================================================================
class DontHave extends XdrEncodable {
  late MessageType type;
  late UINT256 reqHash;

  DontHave(
    this.type,
    this.reqHash,
  );

  DontHave.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.type = MessageType.fromXdr(stream);
    this.reqHash = UINT256.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    reqHash.toXdr(stream);
  }
}

abstract class StellarMessage extends XdrEncodable {
  late MessageType discriminant;

  StellarMessage(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static StellarMessage fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case MessageType.ERROR_MSG:
        return StellarMessageErrorMsg.fromXdr(stream);
      case MessageType.HELLO:
        return StellarMessageHello.fromXdr(stream);
      case MessageType.AUTH:
        return StellarMessageAuth.fromXdr(stream);
      case MessageType.DONT_HAVE:
        return StellarMessageDontHave.fromXdr(stream);
      case MessageType.GET_PEERS:
        return StellarMessageGetPeers.fromXdr(stream);
      case MessageType.PEERS:
        return StellarMessagePeers.fromXdr(stream);
      case MessageType.GET_TX_SET:
        return StellarMessageGetTxSet.fromXdr(stream);
      case MessageType.TX_SET:
        return StellarMessageTxSet.fromXdr(stream);
      case MessageType.TRANSACTION:
        return StellarMessageTransaction.fromXdr(stream);
      case MessageType.GET_SCP_QUORUMSET:
        return StellarMessageGetScpQuorumset.fromXdr(stream);
      case MessageType.SCP_QUORUMSET:
        return StellarMessageScpQuorumset.fromXdr(stream);
      case MessageType.SCP_MESSAGE:
        return StellarMessageScpMessage.fromXdr(stream);
      case MessageType.GET_SCP_STATE:
        return StellarMessageGetScpState.fromXdr(stream);
    }

    return StellarMessageErrorMsg.fromXdr(stream);
  }
}

class StellarMessageErrorMsg extends StellarMessage {
  StellarMessageErrorMsg(this.error)
      : super(MessageType(MessageType.ERROR_MSG));
  late Error error;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    error.toXdr(stream);
  }

  StellarMessageErrorMsg.fromXdr(XdrDataInputStream stream)
      : super(MessageType(MessageType.ERROR_MSG)) {
    this.error = Error.fromXdr(stream);
  }
}

class StellarMessageHello extends StellarMessage {
  StellarMessageHello(this.hello) : super(MessageType(MessageType.HELLO));
  late Hello hello;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    hello.toXdr(stream);
  }

  StellarMessageHello.fromXdr(XdrDataInputStream stream)
      : super(MessageType(MessageType.HELLO)) {
    this.hello = Hello.fromXdr(stream);
  }
}

class StellarMessageAuth extends StellarMessage {
  StellarMessageAuth(this.auth) : super(MessageType(MessageType.AUTH));
  late Auth auth;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    auth.toXdr(stream);
  }

  StellarMessageAuth.fromXdr(XdrDataInputStream stream)
      : super(MessageType(MessageType.AUTH)) {
    this.auth = Auth.fromXdr(stream);
  }
}

class StellarMessageDontHave extends StellarMessage {
  StellarMessageDontHave(this.dontHave)
      : super(MessageType(MessageType.DONT_HAVE));
  late DontHave dontHave;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dontHave.toXdr(stream);
  }

  StellarMessageDontHave.fromXdr(XdrDataInputStream stream)
      : super(MessageType(MessageType.DONT_HAVE)) {
    this.dontHave = DontHave.fromXdr(stream);
  }
}

class StellarMessageGetPeers extends StellarMessage {
  StellarMessageGetPeers() : super(MessageType(MessageType.GET_PEERS));

  StellarMessageGetPeers.fromXdr(XdrDataInputStream stream)
      : super(MessageType(MessageType.GET_PEERS)) {}
}

class StellarMessagePeers extends StellarMessage {
  StellarMessagePeers(this.peers) : super(MessageType(MessageType.PEERS));
  late List<PeerAddress> peers;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    peers.length.toXdr(stream);
    peers.forEach((element) {
      element.toXdr(stream);
    });
  }

  StellarMessagePeers.fromXdr(XdrDataInputStream stream)
      : super(MessageType(MessageType.PEERS)) {
    var length = 0;
    length = intFromXdr(stream);
    peers = <PeerAddress>[];
    while (length > 0) {
      peers.add(PeerAddress.fromXdr(stream));
      length--;
    }
  }
}

class StellarMessageGetTxSet extends StellarMessage {
  StellarMessageGetTxSet(this.txSetHash)
      : super(MessageType(MessageType.GET_TX_SET));
  late UINT256 txSetHash;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    txSetHash.toXdr(stream);
  }

  StellarMessageGetTxSet.fromXdr(XdrDataInputStream stream)
      : super(MessageType(MessageType.GET_TX_SET)) {
    var length = 0;
    this.txSetHash = UINT256.fromXdr(stream);
  }
}

class StellarMessageTxSet extends StellarMessage {
  StellarMessageTxSet(this.txSet) : super(MessageType(MessageType.TX_SET));
  late TransactionSet txSet;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    txSet.toXdr(stream);
  }

  StellarMessageTxSet.fromXdr(XdrDataInputStream stream)
      : super(MessageType(MessageType.TX_SET)) {
    this.txSet = TransactionSet.fromXdr(stream);
  }
}

class StellarMessageTransaction extends StellarMessage {
  StellarMessageTransaction(this.transaction)
      : super(MessageType(MessageType.TRANSACTION));
  late TransactionEnvelope transaction;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    transaction.toXdr(stream);
  }

  StellarMessageTransaction.fromXdr(XdrDataInputStream stream)
      : super(MessageType(MessageType.TRANSACTION)) {
    this.transaction = TransactionEnvelope.fromXdr(stream);
  }
}

class StellarMessageGetScpQuorumset extends StellarMessage {
  StellarMessageGetScpQuorumset(this.qSetHash)
      : super(MessageType(MessageType.GET_SCP_QUORUMSET));
  late UINT256 qSetHash;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    qSetHash.toXdr(stream);
  }

  StellarMessageGetScpQuorumset.fromXdr(XdrDataInputStream stream)
      : super(MessageType(MessageType.GET_SCP_QUORUMSET)) {
    var length = 0;
    this.qSetHash = UINT256.fromXdr(stream);
  }
}

class StellarMessageScpQuorumset extends StellarMessage {
  StellarMessageScpQuorumset(this.qSet)
      : super(MessageType(MessageType.SCP_QUORUMSET));
  late SCPQuorumSet qSet;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    qSet.toXdr(stream);
  }

  StellarMessageScpQuorumset.fromXdr(XdrDataInputStream stream)
      : super(MessageType(MessageType.SCP_QUORUMSET)) {
    this.qSet = SCPQuorumSet.fromXdr(stream);
  }
}

class StellarMessageScpMessage extends StellarMessage {
  StellarMessageScpMessage(this.envelope)
      : super(MessageType(MessageType.SCP_MESSAGE));
  late SCPEnvelope envelope;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    envelope.toXdr(stream);
  }

  StellarMessageScpMessage.fromXdr(XdrDataInputStream stream)
      : super(MessageType(MessageType.SCP_MESSAGE)) {
    this.envelope = SCPEnvelope.fromXdr(stream);
  }
}

class StellarMessageGetScpState extends StellarMessage {
  StellarMessageGetScpState(this.getSCPLedgerSeq)
      : super(MessageType(MessageType.GET_SCP_STATE));
  late UINT32 getSCPLedgerSeq;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    getSCPLedgerSeq.toXdr(stream);
  }

  StellarMessageGetScpState.fromXdr(XdrDataInputStream stream)
      : super(MessageType(MessageType.GET_SCP_STATE)) {
    var length = 0;
    this.getSCPLedgerSeq = intFromXdr(stream);
  }
}

abstract class AuthenticatedMessage extends XdrEncodable {
  late LedgerVersion discriminant;

  AuthenticatedMessage(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AuthenticatedMessage fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AuthenticatedMessageEmptyVersion.fromXdr(stream);
    }

    return AuthenticatedMessageEmptyVersion.fromXdr(stream);
  }
}

class AuthenticatedMessageEmptyVersion extends AuthenticatedMessage {
  AuthenticatedMessageEmptyVersion(this.v0)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
  late AuthenticatedMessageV0V0 v0;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    v0.toXdr(stream);
  }

  AuthenticatedMessageEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {
    this.v0 = AuthenticatedMessageV0V0.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//  {
//     uint64 sequence;
//     StellarMessage message;
//     HmacSha256Mac mac;
//      }

//  ===========================================================================
class AuthenticatedMessageV0V0 extends XdrEncodable {
  late UINT64 sequence;
  late StellarMessage message;
  late HmacSha256Mac mac;

  AuthenticatedMessageV0V0(
    this.sequence,
    this.message,
    this.mac,
  );

  AuthenticatedMessageV0V0.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.sequence = longFromXdr(stream);
    this.message = StellarMessage.fromXdr(stream);
    this.mac = HmacSha256Mac.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    sequence.toXdr(stream);
    message.toXdr(stream);
    mac.toXdr(stream);
  }
}

abstract class ReviewableRequestResource extends XdrEncodable {
  late ReviewableRequestType discriminant;

  ReviewableRequestResource(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ReviewableRequestResource fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case ReviewableRequestType.CREATE_SALE:
        return ReviewableRequestResourceCreateSale.fromXdr(stream);
      case ReviewableRequestType.CREATE_ISSUANCE:
        return ReviewableRequestResourceCreateIssuance.fromXdr(stream);
      case ReviewableRequestType.CREATE_WITHDRAW:
        return ReviewableRequestResourceCreateWithdraw.fromXdr(stream);
      case ReviewableRequestType.CREATE_ATOMIC_SWAP_ASK:
        return ReviewableRequestResourceCreateAtomicSwapAsk.fromXdr(stream);
      case ReviewableRequestType.CREATE_ATOMIC_SWAP_BID:
        return ReviewableRequestResourceCreateAtomicSwapBid.fromXdr(stream);
      case ReviewableRequestType.CREATE_POLL:
        return ReviewableRequestResourceCreatePoll.fromXdr(stream);
      case ReviewableRequestType.MANAGE_OFFER:
        return ReviewableRequestResourceManageOffer.fromXdr(stream);
      case ReviewableRequestType.CREATE_PAYMENT:
        return ReviewableRequestResourceCreatePayment.fromXdr(stream);
      case ReviewableRequestType.PERFORM_REDEMPTION:
        return ReviewableRequestResourcePerformRedemption.fromXdr(stream);
      case ReviewableRequestType.DATA_CREATION:
        return ReviewableRequestResourceDataCreation.fromXdr(stream);
      case ReviewableRequestType.DATA_UPDATE:
        return ReviewableRequestResourceDataUpdate.fromXdr(stream);
      case ReviewableRequestType.DATA_REMOVE:
        return ReviewableRequestResourceDataRemove.fromXdr(stream);
      case ReviewableRequestType.CREATE_DEFERRED_PAYMENT:
        return ReviewableRequestResourceCreateDeferredPayment.fromXdr(stream);
      case ReviewableRequestType.CLOSE_DEFERRED_PAYMENT:
        return ReviewableRequestResourceCloseDeferredPayment.fromXdr(stream);
    }

    return ReviewableRequestResourceCreateSale.fromXdr(stream);
  }
}

class ReviewableRequestResourceCreateSale extends ReviewableRequestResource {
  ReviewableRequestResourceCreateSale(this.createSale)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_SALE));
  late ReviewableRequestResourceCreateSaleCreateSale createSale;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createSale.toXdr(stream);
  }

  ReviewableRequestResourceCreateSale.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_SALE)) {
    this.createSale =
        ReviewableRequestResourceCreateSaleCreateSale.fromXdr(stream);
  }
}

class ReviewableRequestResourceCreateIssuance
    extends ReviewableRequestResource {
  ReviewableRequestResourceCreateIssuance(this.createIssuance)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_ISSUANCE));
  late ReviewableRequestResourceCreateIssuanceCreateIssuance createIssuance;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createIssuance.toXdr(stream);
  }

  ReviewableRequestResourceCreateIssuance.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_ISSUANCE)) {
    this.createIssuance =
        ReviewableRequestResourceCreateIssuanceCreateIssuance.fromXdr(stream);
  }
}

class ReviewableRequestResourceCreateWithdraw
    extends ReviewableRequestResource {
  ReviewableRequestResourceCreateWithdraw(this.createWithdraw)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_WITHDRAW));
  late ReviewableRequestResourceCreateWithdrawCreateWithdraw createWithdraw;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createWithdraw.toXdr(stream);
  }

  ReviewableRequestResourceCreateWithdraw.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_WITHDRAW)) {
    this.createWithdraw =
        ReviewableRequestResourceCreateWithdrawCreateWithdraw.fromXdr(stream);
  }
}

class ReviewableRequestResourceCreateAtomicSwapAsk
    extends ReviewableRequestResource {
  ReviewableRequestResourceCreateAtomicSwapAsk(this.createAtomicSwapAskExt)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_ATOMIC_SWAP_ASK));
  late ReviewableRequestResourceCreateAtomicSwapAskExt createAtomicSwapAskExt;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapAskExt.toXdr(stream);
  }

  ReviewableRequestResourceCreateAtomicSwapAsk.fromXdr(
      XdrDataInputStream stream)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_ATOMIC_SWAP_ASK)) {
    this.createAtomicSwapAskExt =
        ReviewableRequestResourceCreateAtomicSwapAskExt.fromXdr(stream);
  }
}

class ReviewableRequestResourceCreateAtomicSwapBid
    extends ReviewableRequestResource {
  ReviewableRequestResourceCreateAtomicSwapBid(this.createAtomicSwapBidExt)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_ATOMIC_SWAP_BID));
  late ReviewableRequestResourceCreateAtomicSwapBidExt createAtomicSwapBidExt;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapBidExt.toXdr(stream);
  }

  ReviewableRequestResourceCreateAtomicSwapBid.fromXdr(
      XdrDataInputStream stream)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_ATOMIC_SWAP_BID)) {
    this.createAtomicSwapBidExt =
        ReviewableRequestResourceCreateAtomicSwapBidExt.fromXdr(stream);
  }
}

class ReviewableRequestResourceCreatePoll extends ReviewableRequestResource {
  ReviewableRequestResourceCreatePoll(this.createPoll)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_POLL));
  late ReviewableRequestResourceCreatePollCreatePoll createPoll;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPoll.toXdr(stream);
  }

  ReviewableRequestResourceCreatePoll.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_POLL)) {
    this.createPoll =
        ReviewableRequestResourceCreatePollCreatePoll.fromXdr(stream);
  }
}

class ReviewableRequestResourceManageOffer extends ReviewableRequestResource {
  ReviewableRequestResourceManageOffer(this.manageOffer)
      : super(ReviewableRequestType(ReviewableRequestType.MANAGE_OFFER));
  late ReviewableRequestResourceManageOfferManageOffer manageOffer;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageOffer.toXdr(stream);
  }

  ReviewableRequestResourceManageOffer.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.MANAGE_OFFER)) {
    this.manageOffer =
        ReviewableRequestResourceManageOfferManageOffer.fromXdr(stream);
  }
}

class ReviewableRequestResourceCreatePayment extends ReviewableRequestResource {
  ReviewableRequestResourceCreatePayment(this.createPayment)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_PAYMENT));
  late ReviewableRequestResourceCreatePaymentCreatePayment createPayment;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPayment.toXdr(stream);
  }

  ReviewableRequestResourceCreatePayment.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.CREATE_PAYMENT)) {
    this.createPayment =
        ReviewableRequestResourceCreatePaymentCreatePayment.fromXdr(stream);
  }
}

class ReviewableRequestResourcePerformRedemption
    extends ReviewableRequestResource {
  ReviewableRequestResourcePerformRedemption(this.performRedemption)
      : super(ReviewableRequestType(ReviewableRequestType.PERFORM_REDEMPTION));
  late ReviewableRequestResourcePerformRedemptionPerformRedemption
      performRedemption;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    performRedemption.toXdr(stream);
  }

  ReviewableRequestResourcePerformRedemption.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.PERFORM_REDEMPTION)) {
    this.performRedemption =
        ReviewableRequestResourcePerformRedemptionPerformRedemption.fromXdr(
            stream);
  }
}

class ReviewableRequestResourceDataCreation extends ReviewableRequestResource {
  ReviewableRequestResourceDataCreation(this.dataCreation)
      : super(ReviewableRequestType(ReviewableRequestType.DATA_CREATION));
  late ReviewableRequestResourceDataCreationDataCreation dataCreation;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dataCreation.toXdr(stream);
  }

  ReviewableRequestResourceDataCreation.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.DATA_CREATION)) {
    this.dataCreation =
        ReviewableRequestResourceDataCreationDataCreation.fromXdr(stream);
  }
}

class ReviewableRequestResourceDataUpdate extends ReviewableRequestResource {
  ReviewableRequestResourceDataUpdate(this.dataUpdate)
      : super(ReviewableRequestType(ReviewableRequestType.DATA_UPDATE));
  late ReviewableRequestResourceDataUpdateDataUpdate dataUpdate;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dataUpdate.toXdr(stream);
  }

  ReviewableRequestResourceDataUpdate.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.DATA_UPDATE)) {
    this.dataUpdate =
        ReviewableRequestResourceDataUpdateDataUpdate.fromXdr(stream);
  }
}

class ReviewableRequestResourceDataRemove extends ReviewableRequestResource {
  ReviewableRequestResourceDataRemove(this.dataRemove)
      : super(ReviewableRequestType(ReviewableRequestType.DATA_REMOVE));
  late ReviewableRequestResourceDataRemoveDataRemove dataRemove;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dataRemove.toXdr(stream);
  }

  ReviewableRequestResourceDataRemove.fromXdr(XdrDataInputStream stream)
      : super(ReviewableRequestType(ReviewableRequestType.DATA_REMOVE)) {
    this.dataRemove =
        ReviewableRequestResourceDataRemoveDataRemove.fromXdr(stream);
  }
}

class ReviewableRequestResourceCreateDeferredPayment
    extends ReviewableRequestResource {
  ReviewableRequestResourceCreateDeferredPayment(this.createDeferredPayment)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_DEFERRED_PAYMENT));
  late ReviewableRequestResourceCreateDeferredPaymentCreateDeferredPayment
      createDeferredPayment;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDeferredPayment.toXdr(stream);
  }

  ReviewableRequestResourceCreateDeferredPayment.fromXdr(
      XdrDataInputStream stream)
      : super(ReviewableRequestType(
            ReviewableRequestType.CREATE_DEFERRED_PAYMENT)) {
    this.createDeferredPayment =
        ReviewableRequestResourceCreateDeferredPaymentCreateDeferredPayment
            .fromXdr(stream);
  }
}

class ReviewableRequestResourceCloseDeferredPayment
    extends ReviewableRequestResource {
  ReviewableRequestResourceCloseDeferredPayment(this.closeDeferredPayment)
      : super(ReviewableRequestType(
            ReviewableRequestType.CLOSE_DEFERRED_PAYMENT));
  late ReviewableRequestResourceCloseDeferredPaymentCloseDeferredPayment
      closeDeferredPayment;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    closeDeferredPayment.toXdr(stream);
  }

  ReviewableRequestResourceCloseDeferredPayment.fromXdr(
      XdrDataInputStream stream)
      : super(ReviewableRequestType(
            ReviewableRequestType.CLOSE_DEFERRED_PAYMENT)) {
    this.closeDeferredPayment =
        ReviewableRequestResourceCloseDeferredPaymentCloseDeferredPayment
            .fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: type of sale
//          uint64 type;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceCreateSaleCreateSale extends XdrEncodable {
  late UINT64 type;
  late EmptyExt ext;

  ReviewableRequestResourceCreateSaleCreateSale(
    this.type,
    this.ext,
  );

  ReviewableRequestResourceCreateSaleCreateSale.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.type = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: code of asset
//          AssetCode assetCode;
//          //: type of asset
//          uint64 assetType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceCreateIssuanceCreateIssuance
    extends XdrEncodable {
  late ASSETCODE assetCode;
  late UINT64 assetType;
  late EmptyExt ext;

  ReviewableRequestResourceCreateIssuanceCreateIssuance(
    this.assetCode,
    this.assetType,
    this.ext,
  );

  ReviewableRequestResourceCreateIssuanceCreateIssuance.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.assetCode = stringFromXdr(stream);
    this.assetType = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: code of asset
//          AssetCode assetCode;
//          //: type of asset
//          uint64 assetType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceCreateWithdrawCreateWithdraw
    extends XdrEncodable {
  late ASSETCODE assetCode;
  late UINT64 assetType;
  late EmptyExt ext;

  ReviewableRequestResourceCreateWithdrawCreateWithdraw(
    this.assetCode,
    this.assetType,
    this.ext,
  );

  ReviewableRequestResourceCreateWithdrawCreateWithdraw.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.assetCode = stringFromXdr(stream);
    this.assetType = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ReviewableRequestResourceCreateAtomicSwapAskExt
    extends XdrEncodable {
  late LedgerVersion discriminant;

  ReviewableRequestResourceCreateAtomicSwapAskExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ReviewableRequestResourceCreateAtomicSwapAskExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ReviewableRequestResourceCreateAtomicSwapAskExtEmptyVersion
            .fromXdr(stream);
      case LedgerVersion.ATOMIC_SWAP_RETURNING:
        return ReviewableRequestResourceCreateAtomicSwapAskExtAtomicSwapReturning
            .fromXdr(stream);
    }

    return ReviewableRequestResourceCreateAtomicSwapAskExtEmptyVersion.fromXdr(
        stream);
  }
}

class ReviewableRequestResourceCreateAtomicSwapAskExtEmptyVersion
    extends ReviewableRequestResourceCreateAtomicSwapAskExt {
  ReviewableRequestResourceCreateAtomicSwapAskExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ReviewableRequestResourceCreateAtomicSwapAskExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ReviewableRequestResourceCreateAtomicSwapAskExtAtomicSwapReturning
    extends ReviewableRequestResourceCreateAtomicSwapAskExt {
  ReviewableRequestResourceCreateAtomicSwapAskExtAtomicSwapReturning(
      this.createAtomicSwapAsk)
      : super(LedgerVersion(LedgerVersion.ATOMIC_SWAP_RETURNING));
  late ReviewableRequestResourceCreateAtomicSwapAskExtCreateAtomicSwapAskCreateAtomicSwapAsk
      createAtomicSwapAsk;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapAsk.toXdr(stream);
  }

  ReviewableRequestResourceCreateAtomicSwapAskExtAtomicSwapReturning.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.ATOMIC_SWAP_RETURNING)) {
    this.createAtomicSwapAsk =
        ReviewableRequestResourceCreateAtomicSwapAskExtCreateAtomicSwapAskCreateAtomicSwapAsk
            .fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              //: code of asset
//              AssetCode assetCode;
//              //: type of asset
//              uint64 assetType;
//
//              //: reserved for future extension
//              EmptyExt ext;
//          }

//  ===========================================================================
class ReviewableRequestResourceCreateAtomicSwapAskExtCreateAtomicSwapAskCreateAtomicSwapAsk
    extends XdrEncodable {
  late ASSETCODE assetCode;
  late UINT64 assetType;
  late EmptyExt ext;

  ReviewableRequestResourceCreateAtomicSwapAskExtCreateAtomicSwapAskCreateAtomicSwapAsk(
    this.assetCode,
    this.assetType,
    this.ext,
  );

  ReviewableRequestResourceCreateAtomicSwapAskExtCreateAtomicSwapAskCreateAtomicSwapAsk.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.assetCode = stringFromXdr(stream);
    this.assetType = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ReviewableRequestResourceCreateAtomicSwapBidExt
    extends XdrEncodable {
  late LedgerVersion discriminant;

  ReviewableRequestResourceCreateAtomicSwapBidExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ReviewableRequestResourceCreateAtomicSwapBidExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ReviewableRequestResourceCreateAtomicSwapBidExtEmptyVersion
            .fromXdr(stream);
      case LedgerVersion.ATOMIC_SWAP_RETURNING:
        return ReviewableRequestResourceCreateAtomicSwapBidExtAtomicSwapReturning
            .fromXdr(stream);
    }

    return ReviewableRequestResourceCreateAtomicSwapBidExtEmptyVersion.fromXdr(
        stream);
  }
}

class ReviewableRequestResourceCreateAtomicSwapBidExtEmptyVersion
    extends ReviewableRequestResourceCreateAtomicSwapBidExt {
  ReviewableRequestResourceCreateAtomicSwapBidExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ReviewableRequestResourceCreateAtomicSwapBidExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ReviewableRequestResourceCreateAtomicSwapBidExtAtomicSwapReturning
    extends ReviewableRequestResourceCreateAtomicSwapBidExt {
  ReviewableRequestResourceCreateAtomicSwapBidExtAtomicSwapReturning(
      this.createAtomicSwapBid)
      : super(LedgerVersion(LedgerVersion.ATOMIC_SWAP_RETURNING));
  late ReviewableRequestResourceCreateAtomicSwapBidExtCreateAtomicSwapBidCreateAtomicSwapBid
      createAtomicSwapBid;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapBid.toXdr(stream);
  }

  ReviewableRequestResourceCreateAtomicSwapBidExtAtomicSwapReturning.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.ATOMIC_SWAP_RETURNING)) {
    this.createAtomicSwapBid =
        ReviewableRequestResourceCreateAtomicSwapBidExtCreateAtomicSwapBidCreateAtomicSwapBid
            .fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              //: code of asset
//              AssetCode assetCode;
//              //: type of asset
//              uint64 assetType;
//
//              //: reserved for future extension
//              EmptyExt ext;
//          }

//  ===========================================================================
class ReviewableRequestResourceCreateAtomicSwapBidExtCreateAtomicSwapBidCreateAtomicSwapBid
    extends XdrEncodable {
  late ASSETCODE assetCode;
  late UINT64 assetType;
  late EmptyExt ext;

  ReviewableRequestResourceCreateAtomicSwapBidExtCreateAtomicSwapBidCreateAtomicSwapBid(
    this.assetCode,
    this.assetType,
    this.ext,
  );

  ReviewableRequestResourceCreateAtomicSwapBidExtCreateAtomicSwapBidCreateAtomicSwapBid.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.assetCode = stringFromXdr(stream);
    this.assetType = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct
//      {
//          //: permission type of poll
//          uint32 permissionType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceCreatePollCreatePoll extends XdrEncodable {
  late UINT32 permissionType;
  late EmptyExt ext;

  ReviewableRequestResourceCreatePollCreatePoll(
    this.permissionType,
    this.ext,
  );

  ReviewableRequestResourceCreatePollCreatePoll.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.permissionType = intFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    permissionType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: type of base asset
//          uint64 baseAssetType;
//          //: type of quote asset
//          uint64 quoteAssetType;
//
//          //: code of base asset
//          AssetCode baseAssetCode;
//          //: code of quote asset
//          AssetCode quoteAssetCode;
//
//          bool isBuy;
//          //: 0 means creation,
//          //: 1 means removing,
//          //: 2 means participate in sale,
//          //: 3 means remove participation in sale,
//          //: UINT32_MAX means any action.
//          uint32 manageAction;
//
//          //: ID of the order book.
//          uint64 orderBookID;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceManageOfferManageOffer extends XdrEncodable {
  late UINT64 baseAssetType;
  late UINT64 quoteAssetType;
  late ASSETCODE baseAssetCode;
  late ASSETCODE quoteAssetCode;
  late bool isBuy;
  late UINT32 manageAction;
  late UINT64 orderBookID;
  late EmptyExt ext;

  ReviewableRequestResourceManageOfferManageOffer(
    this.baseAssetType,
    this.quoteAssetType,
    this.baseAssetCode,
    this.quoteAssetCode,
    this.isBuy,
    this.manageAction,
    this.orderBookID,
    this.ext,
  );

  ReviewableRequestResourceManageOfferManageOffer.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.baseAssetType = longFromXdr(stream);
    this.quoteAssetType = longFromXdr(stream);
    this.baseAssetCode = stringFromXdr(stream);
    this.quoteAssetCode = stringFromXdr(stream);
    this.isBuy = boolFromXdr(stream);
    this.manageAction = intFromXdr(stream);
    this.orderBookID = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    baseAssetType.toXdr(stream);
    quoteAssetType.toXdr(stream);
    baseAssetCode.toXdr(stream);
    quoteAssetCode.toXdr(stream);
    isBuy.toXdr(stream);
    manageAction.toXdr(stream);
    orderBookID.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Code of asset in which payment is being made
//          AssetCode assetCode;
//          //: Type of asset in which payment is being made
//          uint64 assetType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceCreatePaymentCreatePayment extends XdrEncodable {
  late ASSETCODE assetCode;
  late UINT64 assetType;
  late EmptyExt ext;

  ReviewableRequestResourceCreatePaymentCreatePayment(
    this.assetCode,
    this.assetType,
    this.ext,
  );

  ReviewableRequestResourceCreatePaymentCreatePayment.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.assetCode = stringFromXdr(stream);
    this.assetType = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Code of asset in which redemption is being made
//          AssetCode assetCode;
//          //: Type of asset in which redemption is being made
//          uint64 assetType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourcePerformRedemptionPerformRedemption
    extends XdrEncodable {
  late ASSETCODE assetCode;
  late UINT64 assetType;
  late EmptyExt ext;

  ReviewableRequestResourcePerformRedemptionPerformRedemption(
    this.assetCode,
    this.assetType,
    this.ext,
  );

  ReviewableRequestResourcePerformRedemptionPerformRedemption.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.assetCode = stringFromXdr(stream);
    this.assetType = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Numeric type of the data
//          uint64 type;
//          //: Reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceDataCreationDataCreation extends XdrEncodable {
  late UINT64 type;
  late EmptyExt ext;

  ReviewableRequestResourceDataCreationDataCreation(
    this.type,
    this.ext,
  );

  ReviewableRequestResourceDataCreationDataCreation.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.type = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Numeric type of the data
//          uint64 type;
//          //: Reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceDataUpdateDataUpdate extends XdrEncodable {
  late UINT64 type;
  late EmptyExt ext;

  ReviewableRequestResourceDataUpdateDataUpdate(
    this.type,
    this.ext,
  );

  ReviewableRequestResourceDataUpdateDataUpdate.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.type = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Numeric type of the data
//          uint64 type;
//          //: Reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceDataRemoveDataRemove extends XdrEncodable {
  late UINT64 type;
  late EmptyExt ext;

  ReviewableRequestResourceDataRemoveDataRemove(
    this.type,
    this.ext,
  );

  ReviewableRequestResourceDataRemoveDataRemove.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.type = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          AssetCode assetCode;
//
//          uint64 assetType;
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceCreateDeferredPaymentCreateDeferredPayment
    extends XdrEncodable {
  late ASSETCODE assetCode;
  late UINT64 assetType;
  late EmptyExt ext;

  ReviewableRequestResourceCreateDeferredPaymentCreateDeferredPayment(
    this.assetCode,
    this.assetType,
    this.ext,
  );

  ReviewableRequestResourceCreateDeferredPaymentCreateDeferredPayment.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.assetCode = stringFromXdr(stream);
    this.assetType = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          AssetCode assetCode;
//
//          uint64 assetType;
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceCloseDeferredPaymentCloseDeferredPayment
    extends XdrEncodable {
  late ASSETCODE assetCode;
  late UINT64 assetType;
  late EmptyExt ext;

  ReviewableRequestResourceCloseDeferredPaymentCloseDeferredPayment(
    this.assetCode,
    this.assetType,
    this.ext,
  );

  ReviewableRequestResourceCloseDeferredPaymentCloseDeferredPayment.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.assetCode = stringFromXdr(stream);
    this.assetType = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: Describes custom rule resource that can be used outside of the Core for flexible access control
//  struct CustomRuleResource {
//      //: Action attributes
//      longstring *action;
//      //: Resource attributes
//      longstring resource;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class CustomRuleResource extends XdrEncodable {
  late LONGSTRING? action;
  late LONGSTRING resource;
  late EmptyExt ext;

  CustomRuleResource(
    this.action,
    this.resource,
    this.ext,
  );

  CustomRuleResource.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    if (boolFromXdr(stream)) {
      this.action = stringFromXdr(stream);
    } else {
      this.action = null;
    }
    this.resource = stringFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    if (action != null) {
      true.toXdr(stream);
      action?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    resource.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AccountRuleResource extends XdrEncodable {
  late LedgerEntryType discriminant;

  AccountRuleResource(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AccountRuleResource fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerEntryType.ASSET:
        return AccountRuleResourceAsset.fromXdr(stream);
      case LedgerEntryType.REVIEWABLE_REQUEST:
        return AccountRuleResourceReviewableRequest.fromXdr(stream);
      case LedgerEntryType.ANY:
        return AccountRuleResourceAny.fromXdr(stream);
      case LedgerEntryType.OFFER_ENTRY:
        return AccountRuleResourceOfferEntry.fromXdr(stream);
      case LedgerEntryType.SALE:
        return AccountRuleResourceSale.fromXdr(stream);
      case LedgerEntryType.ATOMIC_SWAP_ASK:
        return AccountRuleResourceAtomicSwapAsk.fromXdr(stream);
      case LedgerEntryType.KEY_VALUE:
        return AccountRuleResourceKeyValue.fromXdr(stream);
      case LedgerEntryType.POLL:
        return AccountRuleResourcePoll.fromXdr(stream);
      case LedgerEntryType.VOTE:
        return AccountRuleResourceVote.fromXdr(stream);
      case LedgerEntryType.INITIATE_KYC_RECOVERY:
        return AccountRuleResourceInitiateKycRecovery.fromXdr(stream);
      case LedgerEntryType.ACCOUNT_SPECIFIC_RULE:
        return AccountRuleResourceAccountSpecificRule.fromXdr(stream);
      case LedgerEntryType.SWAP:
        return AccountRuleResourceSwap.fromXdr(stream);
      case LedgerEntryType.DATA:
        return AccountRuleResourceData.fromXdr(stream);
      case LedgerEntryType.CUSTOM:
        return AccountRuleResourceCustom.fromXdr(stream);
    }

    return AccountRuleResourceAsset.fromXdr(stream);
  }
}

class AccountRuleResourceAsset extends AccountRuleResource {
  AccountRuleResourceAsset(this.asset)
      : super(LedgerEntryType(LedgerEntryType.ASSET));
  late AccountRuleResourceAssetAsset asset;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    asset.toXdr(stream);
  }

  AccountRuleResourceAsset.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ASSET)) {
    this.asset = AccountRuleResourceAssetAsset.fromXdr(stream);
  }
}

class AccountRuleResourceReviewableRequest extends AccountRuleResource {
  AccountRuleResourceReviewableRequest(this.reviewableRequest)
      : super(LedgerEntryType(LedgerEntryType.REVIEWABLE_REQUEST));
  late AccountRuleResourceReviewableRequestReviewableRequest reviewableRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reviewableRequest.toXdr(stream);
  }

  AccountRuleResourceReviewableRequest.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.REVIEWABLE_REQUEST)) {
    this.reviewableRequest =
        AccountRuleResourceReviewableRequestReviewableRequest.fromXdr(stream);
  }
}

class AccountRuleResourceAny extends AccountRuleResource {
  AccountRuleResourceAny() : super(LedgerEntryType(LedgerEntryType.ANY));

  AccountRuleResourceAny.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ANY)) {}
}

class AccountRuleResourceOfferEntry extends AccountRuleResource {
  AccountRuleResourceOfferEntry(this.offer)
      : super(LedgerEntryType(LedgerEntryType.OFFER_ENTRY));
  late AccountRuleResourceOfferOffer offer;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    offer.toXdr(stream);
  }

  AccountRuleResourceOfferEntry.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.OFFER_ENTRY)) {
    this.offer = AccountRuleResourceOfferOffer.fromXdr(stream);
  }
}

class AccountRuleResourceSale extends AccountRuleResource {
  AccountRuleResourceSale(this.sale)
      : super(LedgerEntryType(LedgerEntryType.SALE));
  late AccountRuleResourceSaleSale sale;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    sale.toXdr(stream);
  }

  AccountRuleResourceSale.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SALE)) {
    this.sale = AccountRuleResourceSaleSale.fromXdr(stream);
  }
}

class AccountRuleResourceAtomicSwapAsk extends AccountRuleResource {
  AccountRuleResourceAtomicSwapAsk(this.atomicSwapAsk)
      : super(LedgerEntryType(LedgerEntryType.ATOMIC_SWAP_ASK));
  late AccountRuleResourceAtomicSwapAskAtomicSwapAsk atomicSwapAsk;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    atomicSwapAsk.toXdr(stream);
  }

  AccountRuleResourceAtomicSwapAsk.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ATOMIC_SWAP_ASK)) {
    this.atomicSwapAsk =
        AccountRuleResourceAtomicSwapAskAtomicSwapAsk.fromXdr(stream);
  }
}

class AccountRuleResourceKeyValue extends AccountRuleResource {
  AccountRuleResourceKeyValue(this.keyValue)
      : super(LedgerEntryType(LedgerEntryType.KEY_VALUE));
  late AccountRuleResourceKeyValueKeyValue keyValue;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    keyValue.toXdr(stream);
  }

  AccountRuleResourceKeyValue.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.KEY_VALUE)) {
    this.keyValue = AccountRuleResourceKeyValueKeyValue.fromXdr(stream);
  }
}

class AccountRuleResourcePoll extends AccountRuleResource {
  AccountRuleResourcePoll(this.poll)
      : super(LedgerEntryType(LedgerEntryType.POLL));
  late AccountRuleResourcePollPoll poll;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    poll.toXdr(stream);
  }

  AccountRuleResourcePoll.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.POLL)) {
    this.poll = AccountRuleResourcePollPoll.fromXdr(stream);
  }
}

class AccountRuleResourceVote extends AccountRuleResource {
  AccountRuleResourceVote(this.vote)
      : super(LedgerEntryType(LedgerEntryType.VOTE));
  late AccountRuleResourceVoteVote vote;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    vote.toXdr(stream);
  }

  AccountRuleResourceVote.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.VOTE)) {
    this.vote = AccountRuleResourceVoteVote.fromXdr(stream);
  }
}

class AccountRuleResourceInitiateKycRecovery extends AccountRuleResource {
  AccountRuleResourceInitiateKycRecovery(this.initiateKYCRecovery)
      : super(LedgerEntryType(LedgerEntryType.INITIATE_KYC_RECOVERY));
  late AccountRuleResourceInitiateKYCRecoveryInitiateKYCRecovery
      initiateKYCRecovery;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    initiateKYCRecovery.toXdr(stream);
  }

  AccountRuleResourceInitiateKycRecovery.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.INITIATE_KYC_RECOVERY)) {
    this.initiateKYCRecovery =
        AccountRuleResourceInitiateKYCRecoveryInitiateKYCRecovery.fromXdr(
            stream);
  }
}

class AccountRuleResourceAccountSpecificRule extends AccountRuleResource {
  AccountRuleResourceAccountSpecificRule(this.accountSpecificRuleExt)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_SPECIFIC_RULE));
  late AccountRuleResourceAccountSpecificRuleExt accountSpecificRuleExt;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountSpecificRuleExt.toXdr(stream);
  }

  AccountRuleResourceAccountSpecificRule.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_SPECIFIC_RULE)) {
    this.accountSpecificRuleExt =
        AccountRuleResourceAccountSpecificRuleExt.fromXdr(stream);
  }
}

class AccountRuleResourceSwap extends AccountRuleResource {
  AccountRuleResourceSwap(this.swap)
      : super(LedgerEntryType(LedgerEntryType.SWAP));
  late AccountRuleResourceSwapSwap swap;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    swap.toXdr(stream);
  }

  AccountRuleResourceSwap.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SWAP)) {
    this.swap = AccountRuleResourceSwapSwap.fromXdr(stream);
  }
}

class AccountRuleResourceData extends AccountRuleResource {
  AccountRuleResourceData(this.data)
      : super(LedgerEntryType(LedgerEntryType.DATA));
  late AccountRuleResourceDataData data;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    data.toXdr(stream);
  }

  AccountRuleResourceData.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.DATA)) {
    this.data = AccountRuleResourceDataData.fromXdr(stream);
  }
}

class AccountRuleResourceCustom extends AccountRuleResource {
  AccountRuleResourceCustom(this.custom)
      : super(LedgerEntryType(LedgerEntryType.CUSTOM));
  late CustomRuleResource custom;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    custom.toXdr(stream);
  }

  AccountRuleResourceCustom.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.CUSTOM)) {
    this.custom = CustomRuleResource.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          AssetCode assetCode;
//          uint64 assetType;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceAssetAsset extends XdrEncodable {
  late ASSETCODE assetCode;
  late UINT64 assetType;
  late EmptyExt ext;

  AccountRuleResourceAssetAsset(
    this.assetCode,
    this.assetType,
    this.ext,
  );

  AccountRuleResourceAssetAsset.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.assetCode = stringFromXdr(stream);
    this.assetType = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Describes properties of some reviewable request types that
//          //: can be used to restrict the usage of reviewable requests
//          ReviewableRequestResource details;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceReviewableRequestReviewableRequest
    extends XdrEncodable {
  late ReviewableRequestResource details;
  late EmptyExt ext;

  AccountRuleResourceReviewableRequestReviewableRequest(
    this.details,
    this.ext,
  );

  AccountRuleResourceReviewableRequestReviewableRequest.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.details = ReviewableRequestResource.fromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: type of base asset
//          uint64 baseAssetType;
//          //: type of quote asset
//          uint64 quoteAssetType;
//
//          //: code of base asset
//          AssetCode baseAssetCode;
//          //: code of quote asset
//          AssetCode quoteAssetCode;
//
//          bool isBuy;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceOfferOffer extends XdrEncodable {
  late UINT64 baseAssetType;
  late UINT64 quoteAssetType;
  late ASSETCODE baseAssetCode;
  late ASSETCODE quoteAssetCode;
  late bool isBuy;
  late EmptyExt ext;

  AccountRuleResourceOfferOffer(
    this.baseAssetType,
    this.quoteAssetType,
    this.baseAssetCode,
    this.quoteAssetCode,
    this.isBuy,
    this.ext,
  );

  AccountRuleResourceOfferOffer.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.baseAssetType = longFromXdr(stream);
    this.quoteAssetType = longFromXdr(stream);
    this.baseAssetCode = stringFromXdr(stream);
    this.quoteAssetCode = stringFromXdr(stream);
    this.isBuy = boolFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    baseAssetType.toXdr(stream);
    quoteAssetType.toXdr(stream);
    baseAssetCode.toXdr(stream);
    quoteAssetCode.toXdr(stream);
    isBuy.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          uint64 saleID;
//          uint64 saleType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceSaleSale extends XdrEncodable {
  late UINT64 saleID;
  late UINT64 saleType;
  late EmptyExt ext;

  AccountRuleResourceSaleSale(
    this.saleID,
    this.saleType,
    this.ext,
  );

  AccountRuleResourceSaleSale.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.saleID = longFromXdr(stream);
    this.saleType = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    saleType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          uint64 assetType;
//          AssetCode assetCode;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceAtomicSwapAskAtomicSwapAsk extends XdrEncodable {
  late UINT64 assetType;
  late ASSETCODE assetCode;
  late EmptyExt ext;

  AccountRuleResourceAtomicSwapAskAtomicSwapAsk(
    this.assetType,
    this.assetCode,
    this.ext,
  );

  AccountRuleResourceAtomicSwapAskAtomicSwapAsk.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.assetType = longFromXdr(stream);
    this.assetCode = stringFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    assetType.toXdr(stream);
    assetCode.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: prefix of key
//          longstring keyPrefix;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceKeyValueKeyValue extends XdrEncodable {
  late LONGSTRING keyPrefix;
  late EmptyExt ext;

  AccountRuleResourceKeyValueKeyValue(
    this.keyPrefix,
    this.ext,
  );

  AccountRuleResourceKeyValueKeyValue.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.keyPrefix = stringFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    keyPrefix.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: ID of the poll
//          uint64 pollID;
//
//          //: permission type of poll
//          uint32 permissionType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourcePollPoll extends XdrEncodable {
  late UINT64 pollID;
  late UINT32 permissionType;
  late EmptyExt ext;

  AccountRuleResourcePollPoll(
    this.pollID,
    this.permissionType,
    this.ext,
  );

  AccountRuleResourcePollPoll.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.pollID = longFromXdr(stream);
    this.permissionType = intFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    permissionType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: ID of the poll
//          uint64 pollID;
//
//          //: permission type of poll
//          uint32 permissionType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceVoteVote extends XdrEncodable {
  late UINT64 pollID;
  late UINT32 permissionType;
  late EmptyExt ext;

  AccountRuleResourceVoteVote(
    this.pollID,
    this.permissionType,
    this.ext,
  );

  AccountRuleResourceVoteVote.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.pollID = longFromXdr(stream);
    this.permissionType = intFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    permissionType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Role id
//          uint64 roleID;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceInitiateKYCRecoveryInitiateKYCRecovery
    extends XdrEncodable {
  late UINT64 roleID;
  late EmptyExt ext;

  AccountRuleResourceInitiateKYCRecoveryInitiateKYCRecovery(
    this.roleID,
    this.ext,
  );

  AccountRuleResourceInitiateKYCRecoveryInitiateKYCRecovery.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.roleID = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AccountRuleResourceAccountSpecificRuleExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AccountRuleResourceAccountSpecificRuleExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AccountRuleResourceAccountSpecificRuleExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AccountRuleResourceAccountSpecificRuleExtEmptyVersion.fromXdr(
            stream);
      case LedgerVersion.ADD_ACC_SPECIFIC_RULE_RESOURCE:
        return AccountRuleResourceAccountSpecificRuleExtAddAccSpecificRuleResource
            .fromXdr(stream);
    }

    return AccountRuleResourceAccountSpecificRuleExtEmptyVersion.fromXdr(
        stream);
  }
}

class AccountRuleResourceAccountSpecificRuleExtEmptyVersion
    extends AccountRuleResourceAccountSpecificRuleExt {
  AccountRuleResourceAccountSpecificRuleExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AccountRuleResourceAccountSpecificRuleExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class AccountRuleResourceAccountSpecificRuleExtAddAccSpecificRuleResource
    extends AccountRuleResourceAccountSpecificRuleExt {
  AccountRuleResourceAccountSpecificRuleExtAddAccSpecificRuleResource(
      this.accountSpecificRule)
      : super(LedgerVersion(LedgerVersion.ADD_ACC_SPECIFIC_RULE_RESOURCE));
  late AccountRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule
      accountSpecificRule;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountSpecificRule.toXdr(stream);
  }

  AccountRuleResourceAccountSpecificRuleExtAddAccSpecificRuleResource.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.ADD_ACC_SPECIFIC_RULE_RESOURCE)) {
    this.accountSpecificRule =
        AccountRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule
            .fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              //: Describes properties of some ledger key that
//              //: can be used to restrict the usage of account specific rules
//              LedgerKey ledgerKey;
//
//              //: reserved for future extension
//              EmptyExt ext;
//          }

//  ===========================================================================
class AccountRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule
    extends XdrEncodable {
  late LedgerKey ledgerKey;
  late EmptyExt ext;

  AccountRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule(
    this.ledgerKey,
    this.ext,
  );

  AccountRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.ledgerKey = LedgerKey.fromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ledgerKey.toXdr(stream);
    ext.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct
//      {
//          //: code of the asset
//          AssetCode assetCode;
//          //: type of asset
//          uint64 assetType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceSwapSwap extends XdrEncodable {
  late ASSETCODE assetCode;
  late UINT64 assetType;
  late EmptyExt ext;

  AccountRuleResourceSwapSwap(
    this.assetCode,
    this.assetType,
    this.ext,
  );

  AccountRuleResourceSwapSwap.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.assetCode = stringFromXdr(stream);
    this.assetType = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Numeric type of the data
//          uint64 type;
//          //: Reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceDataData extends XdrEncodable {
  late UINT64 type;
  late EmptyExt ext;

  AccountRuleResourceDataData(
    this.type,
    this.ext,
  );

  AccountRuleResourceDataData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.type = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    ext.toXdr(stream);
  }
}

class AccountRuleAction extends XdrEncodable {
  static const ANY = 1;
  static const CREATE = 2;
  static const CREATE_FOR_OTHER = 3;
  static const CREATE_WITH_TASKS = 4;
  static const MANAGE = 5;
  static const SEND = 6;
  static const WITHDRAW = 7;
  static const RECEIVE_ISSUANCE = 8;
  static const RECEIVE_PAYMENT = 9;
  static const RECEIVE_ATOMIC_SWAP = 10;
  static const PARTICIPATE = 11;
  static const BIND = 12;
  static const UPDATE_MAX_ISSUANCE = 13;
  static const CHECK = 14;
  static const CANCEL = 15;
  static const CLOSE = 16;
  static const REMOVE = 17;
  static const UPDATE_END_TIME = 18;
  static const CREATE_FOR_OTHER_WITH_TASKS = 19;
  static const REMOVE_FOR_OTHER = 20;
  static const EXCHANGE = 21;
  static const RECEIVE_REDEMPTION = 22;
  static const UPDATE = 23;
  static const UPDATE_FOR_OTHER = 24;
  static const CUSTOM = 25;
  late int value;

  AccountRuleAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  AccountRuleAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class SignerRuleResource extends XdrEncodable {
  late LedgerEntryType discriminant;

  SignerRuleResource(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SignerRuleResource fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerEntryType.REVIEWABLE_REQUEST:
        return SignerRuleResourceReviewableRequest.fromXdr(stream);
      case LedgerEntryType.ASSET:
        return SignerRuleResourceAsset.fromXdr(stream);
      case LedgerEntryType.ANY:
        return SignerRuleResourceAny.fromXdr(stream);
      case LedgerEntryType.OFFER_ENTRY:
        return SignerRuleResourceOfferEntry.fromXdr(stream);
      case LedgerEntryType.SALE:
        return SignerRuleResourceSale.fromXdr(stream);
      case LedgerEntryType.ATOMIC_SWAP_ASK:
        return SignerRuleResourceAtomicSwapAsk.fromXdr(stream);
      case LedgerEntryType.SIGNER_RULE:
        return SignerRuleResourceSignerRule.fromXdr(stream);
      case LedgerEntryType.SIGNER_ROLE:
        return SignerRuleResourceSignerRole.fromXdr(stream);
      case LedgerEntryType.SIGNER:
        return SignerRuleResourceSigner.fromXdr(stream);
      case LedgerEntryType.KEY_VALUE:
        return SignerRuleResourceKeyValue.fromXdr(stream);
      case LedgerEntryType.POLL:
        return SignerRuleResourcePoll.fromXdr(stream);
      case LedgerEntryType.VOTE:
        return SignerRuleResourceVote.fromXdr(stream);
      case LedgerEntryType.INITIATE_KYC_RECOVERY:
        return SignerRuleResourceInitiateKycRecovery.fromXdr(stream);
      case LedgerEntryType.ACCOUNT_SPECIFIC_RULE:
        return SignerRuleResourceAccountSpecificRule.fromXdr(stream);
      case LedgerEntryType.SWAP:
        return SignerRuleResourceSwap.fromXdr(stream);
      case LedgerEntryType.DATA:
        return SignerRuleResourceData.fromXdr(stream);
      case LedgerEntryType.CUSTOM:
        return SignerRuleResourceCustom.fromXdr(stream);
    }

    return SignerRuleResourceReviewableRequest.fromXdr(stream);
  }
}

class SignerRuleResourceReviewableRequest extends SignerRuleResource {
  SignerRuleResourceReviewableRequest(this.reviewableRequest)
      : super(LedgerEntryType(LedgerEntryType.REVIEWABLE_REQUEST));
  late SignerRuleResourceReviewableRequestReviewableRequest reviewableRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reviewableRequest.toXdr(stream);
  }

  SignerRuleResourceReviewableRequest.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.REVIEWABLE_REQUEST)) {
    this.reviewableRequest =
        SignerRuleResourceReviewableRequestReviewableRequest.fromXdr(stream);
  }
}

class SignerRuleResourceAsset extends SignerRuleResource {
  SignerRuleResourceAsset(this.asset)
      : super(LedgerEntryType(LedgerEntryType.ASSET));
  late SignerRuleResourceAssetAsset asset;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    asset.toXdr(stream);
  }

  SignerRuleResourceAsset.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ASSET)) {
    this.asset = SignerRuleResourceAssetAsset.fromXdr(stream);
  }
}

class SignerRuleResourceAny extends SignerRuleResource {
  SignerRuleResourceAny() : super(LedgerEntryType(LedgerEntryType.ANY));

  SignerRuleResourceAny.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ANY)) {}
}

class SignerRuleResourceOfferEntry extends SignerRuleResource {
  SignerRuleResourceOfferEntry(this.offer)
      : super(LedgerEntryType(LedgerEntryType.OFFER_ENTRY));
  late SignerRuleResourceOfferOffer offer;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    offer.toXdr(stream);
  }

  SignerRuleResourceOfferEntry.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.OFFER_ENTRY)) {
    this.offer = SignerRuleResourceOfferOffer.fromXdr(stream);
  }
}

class SignerRuleResourceSale extends SignerRuleResource {
  SignerRuleResourceSale(this.sale)
      : super(LedgerEntryType(LedgerEntryType.SALE));
  late SignerRuleResourceSaleSale sale;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    sale.toXdr(stream);
  }

  SignerRuleResourceSale.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SALE)) {
    this.sale = SignerRuleResourceSaleSale.fromXdr(stream);
  }
}

class SignerRuleResourceAtomicSwapAsk extends SignerRuleResource {
  SignerRuleResourceAtomicSwapAsk(this.atomicSwapAsk)
      : super(LedgerEntryType(LedgerEntryType.ATOMIC_SWAP_ASK));
  late SignerRuleResourceAtomicSwapAskAtomicSwapAsk atomicSwapAsk;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    atomicSwapAsk.toXdr(stream);
  }

  SignerRuleResourceAtomicSwapAsk.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ATOMIC_SWAP_ASK)) {
    this.atomicSwapAsk =
        SignerRuleResourceAtomicSwapAskAtomicSwapAsk.fromXdr(stream);
  }
}

class SignerRuleResourceSignerRule extends SignerRuleResource {
  SignerRuleResourceSignerRule(this.signerRule)
      : super(LedgerEntryType(LedgerEntryType.SIGNER_RULE));
  late SignerRuleResourceSignerRuleSignerRule signerRule;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signerRule.toXdr(stream);
  }

  SignerRuleResourceSignerRule.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SIGNER_RULE)) {
    this.signerRule = SignerRuleResourceSignerRuleSignerRule.fromXdr(stream);
  }
}

class SignerRuleResourceSignerRole extends SignerRuleResource {
  SignerRuleResourceSignerRole(this.signerRole)
      : super(LedgerEntryType(LedgerEntryType.SIGNER_ROLE));
  late SignerRuleResourceSignerRoleSignerRole signerRole;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signerRole.toXdr(stream);
  }

  SignerRuleResourceSignerRole.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SIGNER_ROLE)) {
    this.signerRole = SignerRuleResourceSignerRoleSignerRole.fromXdr(stream);
  }
}

class SignerRuleResourceSigner extends SignerRuleResource {
  SignerRuleResourceSigner(this.signer)
      : super(LedgerEntryType(LedgerEntryType.SIGNER));
  late SignerRuleResourceSignerSigner signer;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signer.toXdr(stream);
  }

  SignerRuleResourceSigner.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SIGNER)) {
    this.signer = SignerRuleResourceSignerSigner.fromXdr(stream);
  }
}

class SignerRuleResourceKeyValue extends SignerRuleResource {
  SignerRuleResourceKeyValue(this.keyValue)
      : super(LedgerEntryType(LedgerEntryType.KEY_VALUE));
  late SignerRuleResourceKeyValueKeyValue keyValue;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    keyValue.toXdr(stream);
  }

  SignerRuleResourceKeyValue.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.KEY_VALUE)) {
    this.keyValue = SignerRuleResourceKeyValueKeyValue.fromXdr(stream);
  }
}

class SignerRuleResourcePoll extends SignerRuleResource {
  SignerRuleResourcePoll(this.poll)
      : super(LedgerEntryType(LedgerEntryType.POLL));
  late SignerRuleResourcePollPoll poll;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    poll.toXdr(stream);
  }

  SignerRuleResourcePoll.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.POLL)) {
    this.poll = SignerRuleResourcePollPoll.fromXdr(stream);
  }
}

class SignerRuleResourceVote extends SignerRuleResource {
  SignerRuleResourceVote(this.vote)
      : super(LedgerEntryType(LedgerEntryType.VOTE));
  late SignerRuleResourceVoteVote vote;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    vote.toXdr(stream);
  }

  SignerRuleResourceVote.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.VOTE)) {
    this.vote = SignerRuleResourceVoteVote.fromXdr(stream);
  }
}

class SignerRuleResourceInitiateKycRecovery extends SignerRuleResource {
  SignerRuleResourceInitiateKycRecovery(this.initiateKYCRecovery)
      : super(LedgerEntryType(LedgerEntryType.INITIATE_KYC_RECOVERY));
  late SignerRuleResourceInitiateKYCRecoveryInitiateKYCRecovery
      initiateKYCRecovery;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    initiateKYCRecovery.toXdr(stream);
  }

  SignerRuleResourceInitiateKycRecovery.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.INITIATE_KYC_RECOVERY)) {
    this.initiateKYCRecovery =
        SignerRuleResourceInitiateKYCRecoveryInitiateKYCRecovery.fromXdr(
            stream);
  }
}

class SignerRuleResourceAccountSpecificRule extends SignerRuleResource {
  SignerRuleResourceAccountSpecificRule(this.accountSpecificRuleExt)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_SPECIFIC_RULE));
  late SignerRuleResourceAccountSpecificRuleExt accountSpecificRuleExt;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountSpecificRuleExt.toXdr(stream);
  }

  SignerRuleResourceAccountSpecificRule.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.ACCOUNT_SPECIFIC_RULE)) {
    this.accountSpecificRuleExt =
        SignerRuleResourceAccountSpecificRuleExt.fromXdr(stream);
  }
}

class SignerRuleResourceSwap extends SignerRuleResource {
  SignerRuleResourceSwap(this.swap)
      : super(LedgerEntryType(LedgerEntryType.SWAP));
  late SignerRuleResourceSwapSwap swap;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    swap.toXdr(stream);
  }

  SignerRuleResourceSwap.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.SWAP)) {
    this.swap = SignerRuleResourceSwapSwap.fromXdr(stream);
  }
}

class SignerRuleResourceData extends SignerRuleResource {
  SignerRuleResourceData(this.data)
      : super(LedgerEntryType(LedgerEntryType.DATA));
  late SignerRuleResourceDataData data;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    data.toXdr(stream);
  }

  SignerRuleResourceData.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.DATA)) {
    this.data = SignerRuleResourceDataData.fromXdr(stream);
  }
}

class SignerRuleResourceCustom extends SignerRuleResource {
  SignerRuleResourceCustom(this.custom)
      : super(LedgerEntryType(LedgerEntryType.CUSTOM));
  late CustomRuleResource custom;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    custom.toXdr(stream);
  }

  SignerRuleResourceCustom.fromXdr(XdrDataInputStream stream)
      : super(LedgerEntryType(LedgerEntryType.CUSTOM)) {
    this.custom = CustomRuleResource.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Describes properties of some reviewable request types that
//          //: can be used to restrict the usage of reviewable requests
//          ReviewableRequestResource details;
//
//          //: Bit mask of tasks that is allowed to add to reviewable request pending tasks
//          uint64 tasksToAdd;
//          //: Bit mask of tasks that is allowed to remove from reviewable request pending tasks
//          uint64 tasksToRemove;
//          //: Bit mask of tasks that is allowed to use as reviewable request pending tasks
//          uint64 allTasks;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceReviewableRequestReviewableRequest
    extends XdrEncodable {
  late ReviewableRequestResource details;
  late UINT64 tasksToAdd;
  late UINT64 tasksToRemove;
  late UINT64 allTasks;
  late EmptyExt ext;

  SignerRuleResourceReviewableRequestReviewableRequest(
    this.details,
    this.tasksToAdd,
    this.tasksToRemove,
    this.allTasks,
    this.ext,
  );

  SignerRuleResourceReviewableRequestReviewableRequest.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.details = ReviewableRequestResource.fromXdr(stream);
    this.tasksToAdd = longFromXdr(stream);
    this.tasksToRemove = longFromXdr(stream);
    this.allTasks = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    tasksToAdd.toXdr(stream);
    tasksToRemove.toXdr(stream);
    allTasks.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          AssetCode assetCode;
//          uint64 assetType;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceAssetAsset extends XdrEncodable {
  late ASSETCODE assetCode;
  late UINT64 assetType;
  late EmptyExt ext;

  SignerRuleResourceAssetAsset(
    this.assetCode,
    this.assetType,
    this.ext,
  );

  SignerRuleResourceAssetAsset.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.assetCode = stringFromXdr(stream);
    this.assetType = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: type of base asset
//          uint64 baseAssetType;
//          //: type of quote asset
//          uint64 quoteAssetType;
//
//          //: code of base asset
//          AssetCode baseAssetCode;
//          //: code of quote asset
//          AssetCode quoteAssetCode;
//
//          bool isBuy;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceOfferOffer extends XdrEncodable {
  late UINT64 baseAssetType;
  late UINT64 quoteAssetType;
  late ASSETCODE baseAssetCode;
  late ASSETCODE quoteAssetCode;
  late bool isBuy;
  late EmptyExt ext;

  SignerRuleResourceOfferOffer(
    this.baseAssetType,
    this.quoteAssetType,
    this.baseAssetCode,
    this.quoteAssetCode,
    this.isBuy,
    this.ext,
  );

  SignerRuleResourceOfferOffer.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.baseAssetType = longFromXdr(stream);
    this.quoteAssetType = longFromXdr(stream);
    this.baseAssetCode = stringFromXdr(stream);
    this.quoteAssetCode = stringFromXdr(stream);
    this.isBuy = boolFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    baseAssetType.toXdr(stream);
    quoteAssetType.toXdr(stream);
    baseAssetCode.toXdr(stream);
    quoteAssetCode.toXdr(stream);
    isBuy.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          uint64 saleID;
//          uint64 saleType;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceSaleSale extends XdrEncodable {
  late UINT64 saleID;
  late UINT64 saleType;
  late EmptyExt ext;

  SignerRuleResourceSaleSale(
    this.saleID,
    this.saleType,
    this.ext,
  );

  SignerRuleResourceSaleSale.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.saleID = longFromXdr(stream);
    this.saleType = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    saleType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          uint64 assetType;
//          AssetCode assetCode;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceAtomicSwapAskAtomicSwapAsk extends XdrEncodable {
  late UINT64 assetType;
  late ASSETCODE assetCode;
  late EmptyExt ext;

  SignerRuleResourceAtomicSwapAskAtomicSwapAsk(
    this.assetType,
    this.assetCode,
    this.ext,
  );

  SignerRuleResourceAtomicSwapAskAtomicSwapAsk.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.assetType = longFromXdr(stream);
    this.assetCode = stringFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    assetType.toXdr(stream);
    assetCode.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          bool isDefault;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceSignerRuleSignerRule extends XdrEncodable {
  late bool isDefault;
  late EmptyExt ext;

  SignerRuleResourceSignerRuleSignerRule(
    this.isDefault,
    this.ext,
  );

  SignerRuleResourceSignerRuleSignerRule.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.isDefault = boolFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    isDefault.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: For signer role creating resource will be triggered if `roleID` equals `0`
//          uint64 roleID;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceSignerRoleSignerRole extends XdrEncodable {
  late UINT64 roleID;
  late EmptyExt ext;

  SignerRuleResourceSignerRoleSignerRole(
    this.roleID,
    this.ext,
  );

  SignerRuleResourceSignerRoleSignerRole.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.roleID = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          uint64 roleID;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceSignerSigner extends XdrEncodable {
  late UINT64 roleID;
  late EmptyExt ext;

  SignerRuleResourceSignerSigner(
    this.roleID,
    this.ext,
  );

  SignerRuleResourceSignerSigner.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.roleID = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: prefix of key
//          longstring keyPrefix;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceKeyValueKeyValue extends XdrEncodable {
  late LONGSTRING keyPrefix;
  late EmptyExt ext;

  SignerRuleResourceKeyValueKeyValue(
    this.keyPrefix,
    this.ext,
  );

  SignerRuleResourceKeyValueKeyValue.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.keyPrefix = stringFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    keyPrefix.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: ID of the poll
//          uint64 pollID;
//
//          //: permission type of poll
//          uint32 permissionType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourcePollPoll extends XdrEncodable {
  late UINT64 pollID;
  late UINT32 permissionType;
  late EmptyExt ext;

  SignerRuleResourcePollPoll(
    this.pollID,
    this.permissionType,
    this.ext,
  );

  SignerRuleResourcePollPoll.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.pollID = longFromXdr(stream);
    this.permissionType = intFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    permissionType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: ID of the poll
//          uint64 pollID;
//
//          //: permission type of poll
//          uint32 permissionType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceVoteVote extends XdrEncodable {
  late UINT64 pollID;
  late UINT32 permissionType;
  late EmptyExt ext;

  SignerRuleResourceVoteVote(
    this.pollID,
    this.permissionType,
    this.ext,
  );

  SignerRuleResourceVoteVote.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.pollID = longFromXdr(stream);
    this.permissionType = intFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    permissionType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Role id
//          uint64 roleID;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceInitiateKYCRecoveryInitiateKYCRecovery
    extends XdrEncodable {
  late UINT64 roleID;
  late EmptyExt ext;

  SignerRuleResourceInitiateKYCRecoveryInitiateKYCRecovery(
    this.roleID,
    this.ext,
  );

  SignerRuleResourceInitiateKYCRecoveryInitiateKYCRecovery.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.roleID = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class SignerRuleResourceAccountSpecificRuleExt extends XdrEncodable {
  late LedgerVersion discriminant;

  SignerRuleResourceAccountSpecificRuleExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SignerRuleResourceAccountSpecificRuleExt fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return SignerRuleResourceAccountSpecificRuleExtEmptyVersion.fromXdr(
            stream);
      case LedgerVersion.ADD_ACC_SPECIFIC_RULE_RESOURCE:
        return SignerRuleResourceAccountSpecificRuleExtAddAccSpecificRuleResource
            .fromXdr(stream);
    }

    return SignerRuleResourceAccountSpecificRuleExtEmptyVersion.fromXdr(stream);
  }
}

class SignerRuleResourceAccountSpecificRuleExtEmptyVersion
    extends SignerRuleResourceAccountSpecificRuleExt {
  SignerRuleResourceAccountSpecificRuleExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  SignerRuleResourceAccountSpecificRuleExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class SignerRuleResourceAccountSpecificRuleExtAddAccSpecificRuleResource
    extends SignerRuleResourceAccountSpecificRuleExt {
  SignerRuleResourceAccountSpecificRuleExtAddAccSpecificRuleResource(
      this.accountSpecificRule)
      : super(LedgerVersion(LedgerVersion.ADD_ACC_SPECIFIC_RULE_RESOURCE));
  late SignerRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule
      accountSpecificRule;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountSpecificRule.toXdr(stream);
  }

  SignerRuleResourceAccountSpecificRuleExtAddAccSpecificRuleResource.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.ADD_ACC_SPECIFIC_RULE_RESOURCE)) {
    this.accountSpecificRule =
        SignerRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule
            .fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              //: Describes properties of some ledger key that
//              //: can be used to restrict the usage of account specific rules
//              LedgerKey ledgerKey;
//
//              //: reserved for future extension
//              EmptyExt ext;
//          }

//  ===========================================================================
class SignerRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule
    extends XdrEncodable {
  late LedgerKey ledgerKey;
  late EmptyExt ext;

  SignerRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule(
    this.ledgerKey,
    this.ext,
  );

  SignerRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule.fromXdr(
      XdrDataInputStream stream) {
    var length = 0;
    this.ledgerKey = LedgerKey.fromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    ledgerKey.toXdr(stream);
    ext.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct
//      {
//          //: code of the asset
//          AssetCode assetCode;
//          //: type of the asset
//          uint64 assetType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceSwapSwap extends XdrEncodable {
  late ASSETCODE assetCode;
  late UINT64 assetType;
  late EmptyExt ext;

  SignerRuleResourceSwapSwap(
    this.assetCode,
    this.assetType,
    this.ext,
  );

  SignerRuleResourceSwapSwap.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.assetCode = stringFromXdr(stream);
    this.assetType = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Numeric type of the data
//          uint64 type;
//          //: Reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceDataData extends XdrEncodable {
  late UINT64 type;
  late EmptyExt ext;

  SignerRuleResourceDataData(
    this.type,
    this.ext,
  );

  SignerRuleResourceDataData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.type = longFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    ext.toXdr(stream);
  }
}

class SignerRuleAction extends XdrEncodable {
  static const ANY = 1;
  static const CREATE = 2;
  static const CREATE_FOR_OTHER = 3;
  static const UPDATE = 4;
  static const MANAGE = 5;
  static const SEND = 6;
  static const REMOVE = 7;
  static const CANCEL = 8;
  static const REVIEW = 9;
  static const RECEIVE_ATOMIC_SWAP = 10;
  static const PARTICIPATE = 11;
  static const BIND = 12;
  static const UPDATE_MAX_ISSUANCE = 13;
  static const CHECK = 14;
  static const CLOSE = 15;
  static const UPDATE_END_TIME = 16;
  static const CREATE_WITH_TASKS = 17;
  static const CREATE_FOR_OTHER_WITH_TASKS = 18;
  static const REMOVE_FOR_OTHER = 19;
  static const EXCHANGE = 20;
  static const UPDATE_FOR_OTHER = 21;
  static const CUSTOM = 22;
  late int value;

  SignerRuleAction(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  SignerRuleAction.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Body of a reviewable AMLAlertRequest, contains parameters regarding AML alert
//  struct AMLAlertRequest {
//      //: Target balance to void tokens from
//      BalanceID balanceID;
//
//      //: Amount to void
//      uint64 amount;
//
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      //: Reserved for future use
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AMLAlertRequest extends XdrEncodable {
  late BALANCEID balanceID;
  late UINT64 amount;
  late LONGSTRING creatorDetails;
  late AMLAlertRequestExt ext;

  AMLAlertRequest(
    this.balanceID,
    this.amount,
    this.creatorDetails,
    this.ext,
  );

  AMLAlertRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.balanceID = PublicKey.fromXdr(stream);
    this.amount = longFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.ext = AMLAlertRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    balanceID.toXdr(stream);
    amount.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AMLAlertRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AMLAlertRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AMLAlertRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AMLAlertRequestExtEmptyVersion.fromXdr(stream);
    }

    return AMLAlertRequestExtEmptyVersion.fromXdr(stream);
  }
}

class AMLAlertRequestExtEmptyVersion extends AMLAlertRequestExt {
  AMLAlertRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AMLAlertRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: AssetCreationRequest is used to create an asset with provided parameters
//  struct AssetCreationRequest {
//      //: Code of an asset to create
//      AssetCode code;
//      //: Public key of a signer that will perform pre issuance
//      AccountID preissuedAssetSigner;
//      //: Maximal amount to be issued
//      uint64 maxIssuanceAmount;
//      //: Amount to pre issue on asset creation
//      uint64 initialPreissuedAmount;
//      //: Bit mask of policies to create an asset with
//      uint32 policies;
//      //: Arbitrary stringified JSON object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//       //: Type of asset, selected arbitrarily. Can be used to restrict the usage of an asset
//      uint64 type;
//      //: Used to keep track of rejected requests updates (`SequenceNumber` increases after each rejected AssetCreationRequest update)
//      uint32 sequenceNumber;
//      //: Number of significant decimal places
//      uint32 trailingDigitsCount;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AssetCreationRequest extends XdrEncodable {
  late ASSETCODE code;
  late ACCOUNTID preissuedAssetSigner;
  late UINT64 maxIssuanceAmount;
  late UINT64 initialPreissuedAmount;
  late UINT32 policies;
  late LONGSTRING creatorDetails;
  late UINT64 type;
  late UINT32 sequenceNumber;
  late UINT32 trailingDigitsCount;
  late AssetCreationRequestExt ext;

  AssetCreationRequest(
    this.code,
    this.preissuedAssetSigner,
    this.maxIssuanceAmount,
    this.initialPreissuedAmount,
    this.policies,
    this.creatorDetails,
    this.type,
    this.sequenceNumber,
    this.trailingDigitsCount,
    this.ext,
  );

  AssetCreationRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.code = stringFromXdr(stream);
    this.preissuedAssetSigner = PublicKey.fromXdr(stream);
    this.maxIssuanceAmount = longFromXdr(stream);
    this.initialPreissuedAmount = longFromXdr(stream);
    this.policies = intFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.type = longFromXdr(stream);
    this.sequenceNumber = intFromXdr(stream);
    this.trailingDigitsCount = intFromXdr(stream);
    this.ext = AssetCreationRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    code.toXdr(stream);
    preissuedAssetSigner.toXdr(stream);
    maxIssuanceAmount.toXdr(stream);
    initialPreissuedAmount.toXdr(stream);
    policies.toXdr(stream);
    creatorDetails.toXdr(stream);
    type.toXdr(stream);
    sequenceNumber.toXdr(stream);
    trailingDigitsCount.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AssetCreationRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AssetCreationRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AssetCreationRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AssetCreationRequestExtEmptyVersion.fromXdr(stream);
    }

    return AssetCreationRequestExtEmptyVersion.fromXdr(stream);
  }
}

class AssetCreationRequestExtEmptyVersion extends AssetCreationRequestExt {
  AssetCreationRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AssetCreationRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: AssetUpdateRequest is used to update an asset with provided parameters
//  struct AssetUpdateRequest {
//      //: Code of an asset to update
//      AssetCode code;
//      //: Arbitrary stringified JSON object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//      //: New policies to set will override the existing ones
//      uint32 policies;
//      //: Used to keep track of rejected requests update (`SequenceNumber` increases after each rejected AssetUpdateRequest update).
//      uint32 sequenceNumber;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AssetUpdateRequest extends XdrEncodable {
  late ASSETCODE code;
  late LONGSTRING creatorDetails;
  late UINT32 policies;
  late UINT32 sequenceNumber;
  late AssetUpdateRequestExt ext;

  AssetUpdateRequest(
    this.code,
    this.creatorDetails,
    this.policies,
    this.sequenceNumber,
    this.ext,
  );

  AssetUpdateRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.code = stringFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.policies = intFromXdr(stream);
    this.sequenceNumber = intFromXdr(stream);
    this.ext = AssetUpdateRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    code.toXdr(stream);
    creatorDetails.toXdr(stream);
    policies.toXdr(stream);
    sequenceNumber.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AssetUpdateRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AssetUpdateRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AssetUpdateRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AssetUpdateRequestExtEmptyVersion.fromXdr(stream);
    }

    return AssetUpdateRequestExtEmptyVersion.fromXdr(stream);
  }
}

class AssetUpdateRequestExtEmptyVersion extends AssetUpdateRequestExt {
  AssetUpdateRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AssetUpdateRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: AssetChangePreissuedSigner is used to update a pre issued asset signer
//  struct AssetChangePreissuedSigner
//  {
//      //: code of an asset to update
//      AssetCode code;
//      //: Public key of a signer that will be the new pre issuer
//      AccountID accountID;
//      //: Content signature of a pre issuer signer
//      //: Content equals hash of `<code>:<accountID>`
//      DecoratedSignature signature;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AssetChangePreissuedSigner extends XdrEncodable {
  late ASSETCODE code;
  late ACCOUNTID accountID;
  late DecoratedSignature signature;
  late AssetChangePreissuedSignerExt ext;

  AssetChangePreissuedSigner(
    this.code,
    this.accountID,
    this.signature,
    this.ext,
  );

  AssetChangePreissuedSigner.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.code = stringFromXdr(stream);
    this.accountID = PublicKey.fromXdr(stream);
    this.signature = DecoratedSignature.fromXdr(stream);
    this.ext = AssetChangePreissuedSignerExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    code.toXdr(stream);
    accountID.toXdr(stream);
    signature.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class AssetChangePreissuedSignerExt extends XdrEncodable {
  late LedgerVersion discriminant;

  AssetChangePreissuedSignerExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static AssetChangePreissuedSignerExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return AssetChangePreissuedSignerExtEmptyVersion.fromXdr(stream);
    }

    return AssetChangePreissuedSignerExtEmptyVersion.fromXdr(stream);
  }
}

class AssetChangePreissuedSignerExtEmptyVersion
    extends AssetChangePreissuedSignerExt {
  AssetChangePreissuedSignerExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  AssetChangePreissuedSignerExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: CreateAtomicSwapAskRequest is used to create atomic swap ask entry with passed fields
//  struct CreateAtomicSwapAskRequest
//  {
//      //: ID of balance with base asset
//      BalanceID baseBalance;
//      //: Amount to be sold through atomic swaps
//      uint64 amount;
//      //: Arbitrary stringified json object provided by a requester
//      longstring creatorDetails; // details set by requester
//      //: Array of assets with price which can be used to ask base asset
//      AtomicSwapAskQuoteAsset quoteAssets<>;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAtomicSwapAskRequest extends XdrEncodable {
  late BALANCEID baseBalance;
  late UINT64 amount;
  late LONGSTRING creatorDetails;
  late List<AtomicSwapAskQuoteAsset> quoteAssets;
  late CreateAtomicSwapAskRequestExt ext;

  CreateAtomicSwapAskRequest(
    this.baseBalance,
    this.amount,
    this.creatorDetails,
    this.quoteAssets,
    this.ext,
  );

  CreateAtomicSwapAskRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.baseBalance = PublicKey.fromXdr(stream);
    this.amount = longFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    length = intFromXdr(stream);
    quoteAssets = <AtomicSwapAskQuoteAsset>[];
    while (length > 0) {
      quoteAssets.add(AtomicSwapAskQuoteAsset.fromXdr(stream));
      length--;
    }

    this.ext = CreateAtomicSwapAskRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    baseBalance.toXdr(stream);
    amount.toXdr(stream);
    creatorDetails.toXdr(stream);
    quoteAssets.length.toXdr(stream);
    quoteAssets.forEach((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}

abstract class CreateAtomicSwapAskRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateAtomicSwapAskRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAtomicSwapAskRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateAtomicSwapAskRequestExtEmptyVersion.fromXdr(stream);
    }

    return CreateAtomicSwapAskRequestExtEmptyVersion.fromXdr(stream);
  }
}

class CreateAtomicSwapAskRequestExtEmptyVersion
    extends CreateAtomicSwapAskRequestExt {
  CreateAtomicSwapAskRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateAtomicSwapAskRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: CreateAtomicSwapBidRequest is used to create atomic swap bid request with passed fields
//  struct CreateAtomicSwapBidRequest
//  {
//      //: ID of existing bid
//      uint64 askID;
//      //: Amount in base asset to ask
//      uint64 baseAmount;
//      //: Code of asset which will be used to ask base asset
//      AssetCode quoteAsset;
//      //: Arbitrary stringified json object provided by a requester
//      longstring creatorDetails; // details set by requester
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAtomicSwapBidRequest extends XdrEncodable {
  late UINT64 askID;
  late UINT64 baseAmount;
  late ASSETCODE quoteAsset;
  late LONGSTRING creatorDetails;
  late CreateAtomicSwapBidRequestExt ext;

  CreateAtomicSwapBidRequest(
    this.askID,
    this.baseAmount,
    this.quoteAsset,
    this.creatorDetails,
    this.ext,
  );

  CreateAtomicSwapBidRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.askID = longFromXdr(stream);
    this.baseAmount = longFromXdr(stream);
    this.quoteAsset = stringFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.ext = CreateAtomicSwapBidRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    askID.toXdr(stream);
    baseAmount.toXdr(stream);
    quoteAsset.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateAtomicSwapBidRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateAtomicSwapBidRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAtomicSwapBidRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateAtomicSwapBidRequestExtEmptyVersion.fromXdr(stream);
    }

    return CreateAtomicSwapBidRequestExtEmptyVersion.fromXdr(stream);
  }
}

class CreateAtomicSwapBidRequestExtEmptyVersion
    extends CreateAtomicSwapBidRequestExt {
  CreateAtomicSwapBidRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateAtomicSwapBidRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct ChangeRoleRequest
//  {
//  	AccountID destinationAccount;
//  	uint64 accountRoleToSet;
//
//  	// Sequence number increases when request is rejected
//  	uint32 sequenceNumber;
//
//      longstring creatorDetails; // details set by requester
//
//      // Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ChangeRoleRequest extends XdrEncodable {
  late ACCOUNTID destinationAccount;
  late UINT64 accountRoleToSet;
  late UINT32 sequenceNumber;
  late LONGSTRING creatorDetails;
  late ChangeRoleRequestExt ext;

  ChangeRoleRequest(
    this.destinationAccount,
    this.accountRoleToSet,
    this.sequenceNumber,
    this.creatorDetails,
    this.ext,
  );

  ChangeRoleRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.destinationAccount = PublicKey.fromXdr(stream);
    this.accountRoleToSet = longFromXdr(stream);
    this.sequenceNumber = intFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.ext = ChangeRoleRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    destinationAccount.toXdr(stream);
    accountRoleToSet.toXdr(stream);
    sequenceNumber.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ChangeRoleRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ChangeRoleRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ChangeRoleRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ChangeRoleRequestExtEmptyVersion.fromXdr(stream);
    }

    return ChangeRoleRequestExtEmptyVersion.fromXdr(stream);
  }
}

class ChangeRoleRequestExtEmptyVersion extends ChangeRoleRequestExt {
  ChangeRoleRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ChangeRoleRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CloseDeferredPaymentDestinationType extends XdrEncodable {
  static const ACCOUNT = 0;
  static const BALANCE = 1;
  late int value;

  CloseDeferredPaymentDestinationType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CloseDeferredPaymentDestinationType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct CloseDeferredPaymentRequest {
//      uint64 deferredPaymentID;
//
//      //: `destination` defines the type of instance that receives the payment based on given PaymentDestinationType
//      union switch (CloseDeferredPaymentDestinationType type) {
//          case ACCOUNT:
//              AccountID accountID;
//          case BALANCE:
//              BalanceID balanceID;
//      } destination;
//
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      uint64 amount;
//
//      uint32 sequenceNumber;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class CloseDeferredPaymentRequest extends XdrEncodable {
  late UINT64 deferredPaymentID;
  late CloseDeferredPaymentRequestDestination destination;
  late LONGSTRING creatorDetails;
  late UINT64 amount;
  late UINT32 sequenceNumber;
  late EmptyExt ext;

  CloseDeferredPaymentRequest(
    this.deferredPaymentID,
    this.destination,
    this.creatorDetails,
    this.amount,
    this.sequenceNumber,
    this.ext,
  );

  CloseDeferredPaymentRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.deferredPaymentID = longFromXdr(stream);
    this.destination = CloseDeferredPaymentRequestDestination.fromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.amount = longFromXdr(stream);
    this.sequenceNumber = intFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    deferredPaymentID.toXdr(stream);
    destination.toXdr(stream);
    creatorDetails.toXdr(stream);
    amount.toXdr(stream);
    sequenceNumber.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CloseDeferredPaymentRequestDestination extends XdrEncodable {
  late CloseDeferredPaymentDestinationType discriminant;

  CloseDeferredPaymentRequestDestination(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CloseDeferredPaymentRequestDestination fromXdr(
      XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CloseDeferredPaymentDestinationType.ACCOUNT:
        return CloseDeferredPaymentRequestDestinationAccount.fromXdr(stream);
      case CloseDeferredPaymentDestinationType.BALANCE:
        return CloseDeferredPaymentRequestDestinationBalance.fromXdr(stream);
    }

    return CloseDeferredPaymentRequestDestinationAccount.fromXdr(stream);
  }
}

class CloseDeferredPaymentRequestDestinationAccount
    extends CloseDeferredPaymentRequestDestination {
  CloseDeferredPaymentRequestDestinationAccount(this.accountID)
      : super(CloseDeferredPaymentDestinationType(
            CloseDeferredPaymentDestinationType.ACCOUNT));
  late ACCOUNTID accountID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountID.toXdr(stream);
  }

  CloseDeferredPaymentRequestDestinationAccount.fromXdr(
      XdrDataInputStream stream)
      : super(CloseDeferredPaymentDestinationType(
            CloseDeferredPaymentDestinationType.ACCOUNT)) {
    var length = 0;
    this.accountID = PublicKey.fromXdr(stream);
  }
}

class CloseDeferredPaymentRequestDestinationBalance
    extends CloseDeferredPaymentRequestDestination {
  CloseDeferredPaymentRequestDestinationBalance(this.balanceID)
      : super(CloseDeferredPaymentDestinationType(
            CloseDeferredPaymentDestinationType.BALANCE));
  late BALANCEID balanceID;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    balanceID.toXdr(stream);
  }

  CloseDeferredPaymentRequestDestinationBalance.fromXdr(
      XdrDataInputStream stream)
      : super(CloseDeferredPaymentDestinationType(
            CloseDeferredPaymentDestinationType.BALANCE)) {
    var length = 0;
    this.balanceID = PublicKey.fromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct ContractRequest
//  {
//      AccountID customer;
//      AccountID escrow;
//      longstring creatorDetails; // details set by requester
//
//      uint64 startTime;
//      uint64 endTime;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ContractRequest extends XdrEncodable {
  late ACCOUNTID customer;
  late ACCOUNTID escrow;
  late LONGSTRING creatorDetails;
  late UINT64 startTime;
  late UINT64 endTime;
  late ContractRequestExt ext;

  ContractRequest(
    this.customer,
    this.escrow,
    this.creatorDetails,
    this.startTime,
    this.endTime,
    this.ext,
  );

  ContractRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.customer = PublicKey.fromXdr(stream);
    this.escrow = PublicKey.fromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.startTime = longFromXdr(stream);
    this.endTime = longFromXdr(stream);
    this.ext = ContractRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    customer.toXdr(stream);
    escrow.toXdr(stream);
    creatorDetails.toXdr(stream);
    startTime.toXdr(stream);
    endTime.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ContractRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ContractRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ContractRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ContractRequestExtEmptyVersion.fromXdr(stream);
    }

    return ContractRequestExtEmptyVersion.fromXdr(stream);
  }
}

class ContractRequestExtEmptyVersion extends ContractRequestExt {
  ContractRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ContractRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct DataCreationRequest {
//      //: Numeric type, used for access control
//      uint64 type;
//
//      // Sequence number increases when request is rejected
//  	uint32 sequenceNumber;
//
//      //: Owner of data to create
//      AccountID owner;
//
//      //: Value stored
//      longstring value;
//
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class DataCreationRequest extends XdrEncodable {
  late UINT64 type;
  late UINT32 sequenceNumber;
  late ACCOUNTID owner;
  late LONGSTRING value;
  late LONGSTRING creatorDetails;
  late DataCreationRequestExt ext;

  DataCreationRequest(
    this.type,
    this.sequenceNumber,
    this.owner,
    this.value,
    this.creatorDetails,
    this.ext,
  );

  DataCreationRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.type = longFromXdr(stream);
    this.sequenceNumber = intFromXdr(stream);
    this.owner = PublicKey.fromXdr(stream);
    this.value = stringFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.ext = DataCreationRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    sequenceNumber.toXdr(stream);
    owner.toXdr(stream);
    value.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class DataCreationRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  DataCreationRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static DataCreationRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return DataCreationRequestExtEmptyVersion.fromXdr(stream);
    }

    return DataCreationRequestExtEmptyVersion.fromXdr(stream);
  }
}

class DataCreationRequestExtEmptyVersion extends DataCreationRequestExt {
  DataCreationRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  DataCreationRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct CreateDeferredPaymentRequest {
//      BalanceID sourceBalance;
//      AccountID destination;
//
//      uint64 amount;
//      uint32 sequenceNumber;
//
//      longstring creatorDetails; // details set by requester
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateDeferredPaymentRequest extends XdrEncodable {
  late BALANCEID sourceBalance;
  late ACCOUNTID destination;
  late UINT64 amount;
  late UINT32 sequenceNumber;
  late LONGSTRING creatorDetails;
  late EmptyExt ext;

  CreateDeferredPaymentRequest(
    this.sourceBalance,
    this.destination,
    this.amount,
    this.sequenceNumber,
    this.creatorDetails,
    this.ext,
  );

  CreateDeferredPaymentRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.sourceBalance = PublicKey.fromXdr(stream);
    this.destination = PublicKey.fromXdr(stream);
    this.amount = longFromXdr(stream);
    this.sequenceNumber = intFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    sourceBalance.toXdr(stream);
    destination.toXdr(stream);
    amount.toXdr(stream);
    sequenceNumber.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  //: CreatePollRequest is used to create poll entry with passed fields
//  struct CreatePollRequest
//  {
//      //: is used to restrict using of poll through rules
//      uint32 permissionType;
//
//      //: Number of allowed choices
//      uint32 numberOfChoices;
//
//      //: Specification of poll
//      PollData data;
//
//      //: Arbitrary stringified json object with details about the poll
//      longstring creatorDetails; // details set by requester
//
//      //: The date from which voting in the poll will be allowed
//      uint64 startTime;
//
//      //: The date until which voting in the poll will be allowed
//      uint64 endTime;
//
//      //: ID of account which is responsible for poll result submitting
//      AccountID resultProviderID;
//
//      //: True means that signature of `resultProvider` is required to participate in poll voting
//      bool voteConfirmationRequired;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreatePollRequest extends XdrEncodable {
  late UINT32 permissionType;
  late UINT32 numberOfChoices;
  late PollData data;
  late LONGSTRING creatorDetails;
  late UINT64 startTime;
  late UINT64 endTime;
  late ACCOUNTID resultProviderID;
  late bool voteConfirmationRequired;
  late CreatePollRequestExt ext;

  CreatePollRequest(
    this.permissionType,
    this.numberOfChoices,
    this.data,
    this.creatorDetails,
    this.startTime,
    this.endTime,
    this.resultProviderID,
    this.voteConfirmationRequired,
    this.ext,
  );

  CreatePollRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.permissionType = intFromXdr(stream);
    this.numberOfChoices = intFromXdr(stream);
    this.data = PollData.fromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.startTime = longFromXdr(stream);
    this.endTime = longFromXdr(stream);
    this.resultProviderID = PublicKey.fromXdr(stream);
    this.voteConfirmationRequired = boolFromXdr(stream);
    this.ext = CreatePollRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    permissionType.toXdr(stream);
    numberOfChoices.toXdr(stream);
    data.toXdr(stream);
    creatorDetails.toXdr(stream);
    startTime.toXdr(stream);
    endTime.toXdr(stream);
    resultProviderID.toXdr(stream);
    voteConfirmationRequired.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreatePollRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreatePollRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreatePollRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreatePollRequestExtEmptyVersion.fromXdr(stream);
    }

    return CreatePollRequestExtEmptyVersion.fromXdr(stream);
  }
}

class CreatePollRequestExtEmptyVersion extends CreatePollRequestExt {
  CreatePollRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreatePollRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct InvoiceRequest
//  {
//      AssetCode asset;
//      uint64 amount; // not allowed to set 0
//      BalanceID senderBalance;
//      BalanceID receiverBalance;
//
//      uint64 *contractID;
//      bool isApproved;
//      longstring creatorDetails; // details set by requester
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class InvoiceRequest extends XdrEncodable {
  late ASSETCODE asset;
  late UINT64 amount;
  late BALANCEID senderBalance;
  late BALANCEID receiverBalance;
  late UINT64? contractID;
  late bool isApproved;
  late LONGSTRING creatorDetails;
  late InvoiceRequestExt ext;

  InvoiceRequest(
    this.asset,
    this.amount,
    this.senderBalance,
    this.receiverBalance,
    this.contractID,
    this.isApproved,
    this.creatorDetails,
    this.ext,
  );

  InvoiceRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.asset = stringFromXdr(stream);
    this.amount = longFromXdr(stream);
    this.senderBalance = PublicKey.fromXdr(stream);
    this.receiverBalance = PublicKey.fromXdr(stream);
    if (boolFromXdr(stream)) {
      this.contractID = longFromXdr(stream);
    } else {
      this.contractID = null;
    }
    this.isApproved = boolFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.ext = InvoiceRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    asset.toXdr(stream);
    amount.toXdr(stream);
    senderBalance.toXdr(stream);
    receiverBalance.toXdr(stream);
    if (contractID != null) {
      true.toXdr(stream);
      contractID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    isApproved.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class InvoiceRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  InvoiceRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static InvoiceRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return InvoiceRequestExtEmptyVersion.fromXdr(stream);
    }

    return InvoiceRequestExtEmptyVersion.fromXdr(stream);
  }
}

class InvoiceRequestExtEmptyVersion extends InvoiceRequestExt {
  InvoiceRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  InvoiceRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Is used to pass required values to perform pre issuance
//  struct PreIssuanceRequest
//  {
//      //: Code of an asset whose `available_for_issuance_amount` will increase
//      AssetCode asset;
//      //: Amount that will be added to current available for issuance amount
//      uint64 amount;
//      //: Pre issuer signer's signature of the `<reference>:<amount>:<asset>` hash
//      DecoratedSignature signature;
//      //: Unique string for such type of a reviewable request
//      string64 reference;
//      //: Arbitrary stringified json object provided by a requester
//      longstring creatorDetails; // details set by requester
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PreIssuanceRequest extends XdrEncodable {
  late ASSETCODE asset;
  late UINT64 amount;
  late DecoratedSignature signature;
  late STRING64 reference;
  late LONGSTRING creatorDetails;
  late PreIssuanceRequestExt ext;

  PreIssuanceRequest(
    this.asset,
    this.amount,
    this.signature,
    this.reference,
    this.creatorDetails,
    this.ext,
  );

  PreIssuanceRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.asset = stringFromXdr(stream);
    this.amount = longFromXdr(stream);
    this.signature = DecoratedSignature.fromXdr(stream);
    this.reference = stringFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.ext = PreIssuanceRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    asset.toXdr(stream);
    amount.toXdr(stream);
    signature.toXdr(stream);
    reference.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class PreIssuanceRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  PreIssuanceRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static PreIssuanceRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return PreIssuanceRequestExtEmptyVersion.fromXdr(stream);
    }

    return PreIssuanceRequestExtEmptyVersion.fromXdr(stream);
  }
}

class PreIssuanceRequestExtEmptyVersion extends PreIssuanceRequestExt {
  PreIssuanceRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  PreIssuanceRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Body of reviewable `IssuanceRequest`, contains parameters regarding issuance
//  struct IssuanceRequest {
//      //: Code of an asset to issue
//  	AssetCode asset;
//     //: Amount to issue
//  	uint64 amount;
//      //: Balance to issue on
//  	BalanceID receiver;
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//  	longstring creatorDetails; // details of the issuance (External system id, etc.)
//      //: Total fee to pay, consists of fixed fee and percent fee, calculated automatically
//  	Fee fee; //totalFee to be payed (calculated automatically)
//  	//: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//    ext;
//  };

//  ===========================================================================
class IssuanceRequest extends XdrEncodable {
  late ASSETCODE asset;
  late UINT64 amount;
  late BALANCEID receiver;
  late LONGSTRING creatorDetails;
  late Fee fee;
  late IssuanceRequestExt ext;

  IssuanceRequest(
    this.asset,
    this.amount,
    this.receiver,
    this.creatorDetails,
    this.fee,
    this.ext,
  );

  IssuanceRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.asset = stringFromXdr(stream);
    this.amount = longFromXdr(stream);
    this.receiver = PublicKey.fromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.fee = Fee.fromXdr(stream);
    this.ext = IssuanceRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    asset.toXdr(stream);
    amount.toXdr(stream);
    receiver.toXdr(stream);
    creatorDetails.toXdr(stream);
    fee.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class IssuanceRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  IssuanceRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static IssuanceRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return IssuanceRequestExtEmptyVersion.fromXdr(stream);
    }

    return IssuanceRequestExtEmptyVersion.fromXdr(stream);
  }
}

class IssuanceRequestExtEmptyVersion extends IssuanceRequestExt {
  IssuanceRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  IssuanceRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: KYCRecoveryRequest is used to change signers of target account
//  struct KYCRecoveryRequest {
//      //: Account to be recovered
//      AccountID targetAccount;
//      //: New signers for the target account
//      UpdateSignerData signersData<>;
//
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//      //: Sequence number increases when request is rejected
//      uint32 sequenceNumber;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class KYCRecoveryRequest extends XdrEncodable {
  late ACCOUNTID targetAccount;
  late List<UpdateSignerData> signersData;
  late LONGSTRING creatorDetails;
  late UINT32 sequenceNumber;
  late KYCRecoveryRequestExt ext;

  KYCRecoveryRequest(
    this.targetAccount,
    this.signersData,
    this.creatorDetails,
    this.sequenceNumber,
    this.ext,
  );

  KYCRecoveryRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.targetAccount = PublicKey.fromXdr(stream);
    length = intFromXdr(stream);
    signersData = <UpdateSignerData>[];
    while (length > 0) {
      signersData.add(UpdateSignerData.fromXdr(stream));
      length--;
    }

    this.creatorDetails = stringFromXdr(stream);
    this.sequenceNumber = intFromXdr(stream);
    this.ext = KYCRecoveryRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    targetAccount.toXdr(stream);
    signersData.length.toXdr(stream);
    signersData.forEach((element) {
      element.toXdr(stream);
    });
    creatorDetails.toXdr(stream);
    sequenceNumber.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class KYCRecoveryRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  KYCRecoveryRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static KYCRecoveryRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return KYCRecoveryRequestExtEmptyVersion.fromXdr(stream);
    }

    return KYCRecoveryRequestExtEmptyVersion.fromXdr(stream);
  }
}

class KYCRecoveryRequestExtEmptyVersion extends KYCRecoveryRequestExt {
  KYCRecoveryRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  KYCRecoveryRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: Body of reviewable `LimitsUpdateRequest` contains details regarding limit updates
//  struct LimitsUpdateRequest
//  {
//      //: Arbitrary stringified JSON object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LimitsUpdateRequest extends XdrEncodable {
  late LONGSTRING creatorDetails;
  late LimitsUpdateRequestExt ext;

  LimitsUpdateRequest(
    this.creatorDetails,
    this.ext,
  );

  LimitsUpdateRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.creatorDetails = stringFromXdr(stream);
    this.ext = LimitsUpdateRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class LimitsUpdateRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  LimitsUpdateRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static LimitsUpdateRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return LimitsUpdateRequestExtEmptyVersion.fromXdr(stream);
    }

    return LimitsUpdateRequestExtEmptyVersion.fromXdr(stream);
  }
}

class LimitsUpdateRequestExtEmptyVersion extends LimitsUpdateRequestExt {
  LimitsUpdateRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  LimitsUpdateRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct ManageOfferRequest
//  {
//      ManageOfferOp op;
//
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      case MOVEMENT_REQUESTS_DETAILS:
//          longstring creatorDetails;
//      } ext;
//  };

//  ===========================================================================
class ManageOfferRequest extends XdrEncodable {
  late ManageOfferOp op;
  late ManageOfferRequestExt ext;

  ManageOfferRequest(
    this.op,
    this.ext,
  );

  ManageOfferRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.op = ManageOfferOp.fromXdr(stream);
    this.ext = ManageOfferRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    op.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManageOfferRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  ManageOfferRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static ManageOfferRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return ManageOfferRequestExtEmptyVersion.fromXdr(stream);
      case LedgerVersion.MOVEMENT_REQUESTS_DETAILS:
        return ManageOfferRequestExtMovementRequestsDetails.fromXdr(stream);
    }

    return ManageOfferRequestExtEmptyVersion.fromXdr(stream);
  }
}

class ManageOfferRequestExtEmptyVersion extends ManageOfferRequestExt {
  ManageOfferRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  ManageOfferRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class ManageOfferRequestExtMovementRequestsDetails
    extends ManageOfferRequestExt {
  ManageOfferRequestExtMovementRequestsDetails(this.creatorDetails)
      : super(LedgerVersion(LedgerVersion.MOVEMENT_REQUESTS_DETAILS));
  late LONGSTRING creatorDetails;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    creatorDetails.toXdr(stream);
  }

  ManageOfferRequestExtMovementRequestsDetails.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.MOVEMENT_REQUESTS_DETAILS)) {
    var length = 0;
    this.creatorDetails = stringFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct CreatePaymentRequest
//  {
//      PaymentOp paymentOp;
//
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      case MOVEMENT_REQUESTS_DETAILS:
//          longstring creatorDetails;
//      } ext;
//  };

//  ===========================================================================
class CreatePaymentRequest extends XdrEncodable {
  late PaymentOp paymentOp;
  late CreatePaymentRequestExt ext;

  CreatePaymentRequest(
    this.paymentOp,
    this.ext,
  );

  CreatePaymentRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.paymentOp = PaymentOp.fromXdr(stream);
    this.ext = CreatePaymentRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    paymentOp.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreatePaymentRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreatePaymentRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreatePaymentRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreatePaymentRequestExtEmptyVersion.fromXdr(stream);
      case LedgerVersion.MOVEMENT_REQUESTS_DETAILS:
        return CreatePaymentRequestExtMovementRequestsDetails.fromXdr(stream);
    }

    return CreatePaymentRequestExtEmptyVersion.fromXdr(stream);
  }
}

class CreatePaymentRequestExtEmptyVersion extends CreatePaymentRequestExt {
  CreatePaymentRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreatePaymentRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class CreatePaymentRequestExtMovementRequestsDetails
    extends CreatePaymentRequestExt {
  CreatePaymentRequestExtMovementRequestsDetails(this.creatorDetails)
      : super(LedgerVersion(LedgerVersion.MOVEMENT_REQUESTS_DETAILS));
  late LONGSTRING creatorDetails;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    creatorDetails.toXdr(stream);
  }

  CreatePaymentRequestExtMovementRequestsDetails.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.MOVEMENT_REQUESTS_DETAILS)) {
    var length = 0;
    this.creatorDetails = stringFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Body of a reviewable RedemptionRequest, contains parameters regarding AML alert
//  struct RedemptionRequest {
//      //: Balance to charge assets from. Balance must be in asset owned by requester.
//      BalanceID sourceBalanceID;
//      //: Account to transfer funds
//      AccountID destination;
//
//      //: Amount of redemption
//      uint64 amount;
//
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class RedemptionRequest extends XdrEncodable {
  late BALANCEID sourceBalanceID;
  late ACCOUNTID destination;
  late UINT64 amount;
  late LONGSTRING creatorDetails;
  late RedemptionRequestExt ext;

  RedemptionRequest(
    this.sourceBalanceID,
    this.destination,
    this.amount,
    this.creatorDetails,
    this.ext,
  );

  RedemptionRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.sourceBalanceID = PublicKey.fromXdr(stream);
    this.destination = PublicKey.fromXdr(stream);
    this.amount = longFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.ext = RedemptionRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    sourceBalanceID.toXdr(stream);
    destination.toXdr(stream);
    amount.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class RedemptionRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  RedemptionRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static RedemptionRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return RedemptionRequestExtEmptyVersion.fromXdr(stream);
    }

    return RedemptionRequestExtEmptyVersion.fromXdr(stream);
  }
}

class RedemptionRequestExtEmptyVersion extends RedemptionRequestExt {
  RedemptionRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  RedemptionRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct DataRemoveRequest {
//      //: Id of the data entry
//      uint64 id;
//
//      // Sequence number increases when request is rejected
//  	uint32 sequenceNumber;
//
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class DataRemoveRequest extends XdrEncodable {
  late UINT64 id;
  late UINT32 sequenceNumber;
  late LONGSTRING creatorDetails;
  late DataRemoveRequestExt ext;

  DataRemoveRequest(
    this.id,
    this.sequenceNumber,
    this.creatorDetails,
    this.ext,
  );

  DataRemoveRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.sequenceNumber = intFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.ext = DataRemoveRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    sequenceNumber.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class DataRemoveRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  DataRemoveRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static DataRemoveRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return DataRemoveRequestExtEmptyVersion.fromXdr(stream);
    }

    return DataRemoveRequestExtEmptyVersion.fromXdr(stream);
  }
}

class DataRemoveRequestExtEmptyVersion extends DataRemoveRequestExt {
  DataRemoveRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  DataRemoveRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: SaleCreationRequestQuoteAsset is a structure that contains an asset code with price
//  struct SaleCreationRequestQuoteAsset {
//      //: AssetCode of quote asset
//      AssetCode quoteAsset; // asset in which participation will be accepted
//      //: Price of sale base asset in relation to a quote asset
//      uint64 price; // price for 1 baseAsset in relation to a quote asset
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SaleCreationRequestQuoteAsset extends XdrEncodable {
  late ASSETCODE quoteAsset;
  late UINT64 price;
  late SaleCreationRequestQuoteAssetExt ext;

  SaleCreationRequestQuoteAsset(
    this.quoteAsset,
    this.price,
    this.ext,
  );

  SaleCreationRequestQuoteAsset.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.quoteAsset = stringFromXdr(stream);
    this.price = longFromXdr(stream);
    this.ext = SaleCreationRequestQuoteAssetExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    quoteAsset.toXdr(stream);
    price.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class SaleCreationRequestQuoteAssetExt extends XdrEncodable {
  late LedgerVersion discriminant;

  SaleCreationRequestQuoteAssetExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SaleCreationRequestQuoteAssetExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return SaleCreationRequestQuoteAssetExtEmptyVersion.fromXdr(stream);
    }

    return SaleCreationRequestQuoteAssetExtEmptyVersion.fromXdr(stream);
  }
}

class SaleCreationRequestQuoteAssetExtEmptyVersion
    extends SaleCreationRequestQuoteAssetExt {
  SaleCreationRequestQuoteAssetExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  SaleCreationRequestQuoteAssetExtEmptyVersion.fromXdr(
      XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: CreateAccountSaleRuleData is used to pass necessary params to create a new account sale rule
//  struct CreateAccountSaleRuleData
//  {
//      //: Certain account for which rule is applied, null means rule is global
//      AccountID* accountID;
//      //: True if such rule is deniable, otherwise allows
//      bool forbids;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAccountSaleRuleData extends XdrEncodable {
  late ACCOUNTID? accountID;
  late bool forbids;
  late CreateAccountSaleRuleDataExt ext;

  CreateAccountSaleRuleData(
    this.accountID,
    this.forbids,
    this.ext,
  );

  CreateAccountSaleRuleData.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    if (boolFromXdr(stream)) {
      this.accountID = PublicKey.fromXdr(stream);
    } else {
      this.accountID = null;
    }
    this.forbids = boolFromXdr(stream);
    this.ext = CreateAccountSaleRuleDataExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    if (accountID != null) {
      true.toXdr(stream);
      accountID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    forbids.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class CreateAccountSaleRuleDataExt extends XdrEncodable {
  late LedgerVersion discriminant;

  CreateAccountSaleRuleDataExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static CreateAccountSaleRuleDataExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return CreateAccountSaleRuleDataExtEmptyVersion.fromXdr(stream);
    }

    return CreateAccountSaleRuleDataExtEmptyVersion.fromXdr(stream);
  }
}

class CreateAccountSaleRuleDataExtEmptyVersion
    extends CreateAccountSaleRuleDataExt {
  CreateAccountSaleRuleDataExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  CreateAccountSaleRuleDataExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: SaleCreationRequest is used to create a sale with provided parameters
//  struct SaleCreationRequest
//  {
//      //: Some custom sale type that can be used while setting account rules
//      uint64 saleType;
//      //: Asset code of an asset to sell on sale
//      AssetCode baseAsset; // asset for which sale will be performed
//      //: Asset code of an asset used to calculcate soft cap and hard cap
//      AssetCode defaultQuoteAsset; // asset for soft and hard cap
//      //: Time when the sale should start
//      uint64 startTime; // start time of the sale
//      //: Time when the sale should end
//      uint64 endTime; // close time of the sale
//      //: Minimal amount (in default quote asset) that has to be sold on sale for it to be considered successful
//      uint64 softCap; // minimum amount of quote asset to be received at which sale will be considered a successful
//      //: Maximal amount (in default quote asset) to be received during the sale. Sale closes immediately after reaching the hard cap
//      uint64 hardCap; // max amount of quote asset to be received
//      //: Arbitrary stringified JSON object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//      //: Parameters specific to a particular sale type
//      SaleTypeExt saleTypeExt;
//      //:
//      uint64 requiredBaseAssetForHardCap;
//      //: Used to keep track of rejected requests updates. `SequenceNumber` increases after each rejected SaleCreationRequest update.
//      uint32 sequenceNumber;
//      //: Array of quote assets that are available for participation
//      SaleCreationRequestQuoteAsset quoteAssets<100>;
//      //: Use `EMPTY_VERSION` to allow anyone participate in sale,
//      //: use `ADD_SALE_WHITELISTS` to specify sale participation rules
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      case ADD_SALE_WHITELISTS:
//          //: array of rules that define participation rules. One global rule must be specified.
//          CreateAccountSaleRuleData saleRules<>;
//      }
//      ext;
//  };

//  ===========================================================================
class SaleCreationRequest extends XdrEncodable {
  late UINT64 saleType;
  late ASSETCODE baseAsset;
  late ASSETCODE defaultQuoteAsset;
  late UINT64 startTime;
  late UINT64 endTime;
  late UINT64 softCap;
  late UINT64 hardCap;
  late LONGSTRING creatorDetails;
  late SaleTypeExt saleTypeExt;
  late UINT64 requiredBaseAssetForHardCap;
  late UINT32 sequenceNumber;
  late List<SaleCreationRequestQuoteAsset> quoteAssets;
  late SaleCreationRequestExt ext;

  SaleCreationRequest(
    this.saleType,
    this.baseAsset,
    this.defaultQuoteAsset,
    this.startTime,
    this.endTime,
    this.softCap,
    this.hardCap,
    this.creatorDetails,
    this.saleTypeExt,
    this.requiredBaseAssetForHardCap,
    this.sequenceNumber,
    this.quoteAssets,
    this.ext,
  );

  SaleCreationRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.saleType = longFromXdr(stream);
    this.baseAsset = stringFromXdr(stream);
    this.defaultQuoteAsset = stringFromXdr(stream);
    this.startTime = longFromXdr(stream);
    this.endTime = longFromXdr(stream);
    this.softCap = longFromXdr(stream);
    this.hardCap = longFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.saleTypeExt = SaleTypeExt.fromXdr(stream);
    this.requiredBaseAssetForHardCap = longFromXdr(stream);
    this.sequenceNumber = intFromXdr(stream);
    length = intFromXdr(stream);
    quoteAssets = <SaleCreationRequestQuoteAsset>[];
    while (length > 0) {
      quoteAssets.add(SaleCreationRequestQuoteAsset.fromXdr(stream));
      length--;
    }

    this.ext = SaleCreationRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    saleType.toXdr(stream);
    baseAsset.toXdr(stream);
    defaultQuoteAsset.toXdr(stream);
    startTime.toXdr(stream);
    endTime.toXdr(stream);
    softCap.toXdr(stream);
    hardCap.toXdr(stream);
    creatorDetails.toXdr(stream);
    saleTypeExt.toXdr(stream);
    requiredBaseAssetForHardCap.toXdr(stream);
    sequenceNumber.toXdr(stream);
    quoteAssets.length.toXdr(stream);
    quoteAssets.forEach((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}

abstract class SaleCreationRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  SaleCreationRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static SaleCreationRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return SaleCreationRequestExtEmptyVersion.fromXdr(stream);
      case LedgerVersion.ADD_SALE_WHITELISTS:
        return SaleCreationRequestExtAddSaleWhitelists.fromXdr(stream);
    }

    return SaleCreationRequestExtEmptyVersion.fromXdr(stream);
  }
}

class SaleCreationRequestExtEmptyVersion extends SaleCreationRequestExt {
  SaleCreationRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  SaleCreationRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class SaleCreationRequestExtAddSaleWhitelists extends SaleCreationRequestExt {
  SaleCreationRequestExtAddSaleWhitelists(this.saleRules)
      : super(LedgerVersion(LedgerVersion.ADD_SALE_WHITELISTS));
  late List<CreateAccountSaleRuleData> saleRules;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    saleRules.length.toXdr(stream);
    saleRules.forEach((element) {
      element.toXdr(stream);
    });
  }

  SaleCreationRequestExtAddSaleWhitelists.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.ADD_SALE_WHITELISTS)) {
    var length = 0;
    length = intFromXdr(stream);
    saleRules = <CreateAccountSaleRuleData>[];
    while (length > 0) {
      saleRules.add(CreateAccountSaleRuleData.fromXdr(stream));
      length--;
    }
  }
}
// === xdr source ============================================================

//  struct DataUpdateRequest {
//      //: Id of the data entry
//      uint64 id;
//
//      // Sequence number increases when request is rejected
//  	uint32 sequenceNumber;
//
//      //: Value stored
//      longstring value;
//
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class DataUpdateRequest extends XdrEncodable {
  late UINT64 id;
  late UINT32 sequenceNumber;
  late LONGSTRING value;
  late LONGSTRING creatorDetails;
  late DataUpdateRequestExt ext;

  DataUpdateRequest(
    this.id,
    this.sequenceNumber,
    this.value,
    this.creatorDetails,
    this.ext,
  );

  DataUpdateRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.id = longFromXdr(stream);
    this.sequenceNumber = intFromXdr(stream);
    this.value = stringFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.ext = DataUpdateRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    sequenceNumber.toXdr(stream);
    value.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class DataUpdateRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  DataUpdateRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static DataUpdateRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return DataUpdateRequestExtEmptyVersion.fromXdr(stream);
    }

    return DataUpdateRequestExtEmptyVersion.fromXdr(stream);
  }
}

class DataUpdateRequestExtEmptyVersion extends DataUpdateRequestExt {
  DataUpdateRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  DataUpdateRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: UpdateSaleDetailsRequest is used to update details of an existing sale
//  struct UpdateSaleDetailsRequest {
//      //: ID of the sale whose details should be updated
//      uint64 saleID; // ID of sale to update details
//      //: Arbitrary stringified JSON object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//      //: Used to keep track of rejected requests update.  `SequenceNumber increases` after each rejected UpdateSaleDetailsRequest update
//      uint32 sequenceNumber;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class UpdateSaleDetailsRequest extends XdrEncodable {
  late UINT64 saleID;
  late LONGSTRING creatorDetails;
  late UINT32 sequenceNumber;
  late UpdateSaleDetailsRequestExt ext;

  UpdateSaleDetailsRequest(
    this.saleID,
    this.creatorDetails,
    this.sequenceNumber,
    this.ext,
  );

  UpdateSaleDetailsRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.saleID = longFromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.sequenceNumber = intFromXdr(stream);
    this.ext = UpdateSaleDetailsRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    creatorDetails.toXdr(stream);
    sequenceNumber.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class UpdateSaleDetailsRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  UpdateSaleDetailsRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static UpdateSaleDetailsRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return UpdateSaleDetailsRequestExtEmptyVersion.fromXdr(stream);
    }

    return UpdateSaleDetailsRequestExtEmptyVersion.fromXdr(stream);
  }
}

class UpdateSaleDetailsRequestExtEmptyVersion
    extends UpdateSaleDetailsRequestExt {
  UpdateSaleDetailsRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  UpdateSaleDetailsRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: WithdrawalRequest contains details regarding a withdraw
//  struct WithdrawalRequest {
//      //: Balance to withdraw from
//      BalanceID balance; // balance id from which withdrawal will be performed
//      //: Amount to withdraw
//      uint64 amount; // amount to be withdrawn
//      //: Amount in stats quote asset
//      uint64 universalAmount; // amount in stats asset
//      //: Total fee to pay, contains fixed amount and calculated percent of the withdrawn amount
//      Fee fee; // expected fee to be paid
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class WithdrawalRequest extends XdrEncodable {
  late BALANCEID balance;
  late UINT64 amount;
  late UINT64 universalAmount;
  late Fee fee;
  late LONGSTRING creatorDetails;
  late WithdrawalRequestExt ext;

  WithdrawalRequest(
    this.balance,
    this.amount,
    this.universalAmount,
    this.fee,
    this.creatorDetails,
    this.ext,
  );

  WithdrawalRequest.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.balance = PublicKey.fromXdr(stream);
    this.amount = longFromXdr(stream);
    this.universalAmount = longFromXdr(stream);
    this.fee = Fee.fromXdr(stream);
    this.creatorDetails = stringFromXdr(stream);
    this.ext = WithdrawalRequestExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    balance.toXdr(stream);
    amount.toXdr(stream);
    universalAmount.toXdr(stream);
    fee.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class WithdrawalRequestExt extends XdrEncodable {
  late LedgerVersion discriminant;

  WithdrawalRequestExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static WithdrawalRequestExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return WithdrawalRequestExtEmptyVersion.fromXdr(stream);
    }

    return WithdrawalRequestExtEmptyVersion.fromXdr(stream);
  }
}

class WithdrawalRequestExtEmptyVersion extends WithdrawalRequestExt {
  WithdrawalRequestExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  WithdrawalRequestExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  //: An operation is the lowest unit of work that a transaction does
//  struct Operation
//  {
//      //: sourceAccount is the account used to run the operation
//      //: if not set, the runtime defaults to "sourceAccount" specified at
//      //: the transaction level
//      AccountID* sourceAccount;
//
//      union switch (OperationType type)
//      {
//      case CREATE_ACCOUNT:
//          CreateAccountOp createAccountOp;
//  	case CREATE_ISSUANCE_REQUEST:
//  		CreateIssuanceRequestOp createIssuanceRequestOp;
//      case SET_FEES:
//          SetFeesOp setFeesOp;
//  	case CREATE_WITHDRAWAL_REQUEST:
//  		CreateWithdrawalRequestOp createWithdrawalRequestOp;
//  	case MANAGE_BALANCE:
//  		ManageBalanceOp manageBalanceOp;
//      case MANAGE_ASSET:
//          ManageAssetOp manageAssetOp;
//      case CREATE_PREISSUANCE_REQUEST:
//          CreatePreIssuanceRequestOp createPreIssuanceRequest;
//      case MANAGE_LIMITS:
//          ManageLimitsOp manageLimitsOp;
//  	case MANAGE_ASSET_PAIR:
//  		ManageAssetPairOp manageAssetPairOp;
//  	case MANAGE_OFFER:
//  		ManageOfferOp manageOfferOp;
//      case MANAGE_INVOICE_REQUEST:
//          ManageInvoiceRequestOp manageInvoiceRequestOp;
//  	case REVIEW_REQUEST:
//  		ReviewRequestOp reviewRequestOp;
//  	case CREATE_SALE_REQUEST:
//  		CreateSaleCreationRequestOp createSaleCreationRequestOp;
//  	case CHECK_SALE_STATE:
//  		CheckSaleStateOp checkSaleStateOp;
//  	case PAYOUT:
//  	    PayoutOp payoutOp;
//  	case CREATE_AML_ALERT:
//  	    CreateAMLAlertRequestOp createAMLAlertRequestOp;
//  	case MANAGE_KEY_VALUE:
//  	    ManageKeyValueOp manageKeyValueOp;
//  	case CREATE_CHANGE_ROLE_REQUEST:
//  		CreateChangeRoleRequestOp createChangeRoleRequestOp;
//      case MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY:
//          ManageExternalSystemAccountIdPoolEntryOp manageExternalSystemAccountIdPoolEntryOp;
//      case BIND_EXTERNAL_SYSTEM_ACCOUNT_ID:
//          BindExternalSystemAccountIdOp bindExternalSystemAccountIdOp;
//      case PAYMENT:
//          PaymentOp paymentOp;
//      case MANAGE_SALE:
//          ManageSaleOp manageSaleOp;
//      case CREATE_MANAGE_LIMITS_REQUEST:
//          CreateManageLimitsRequestOp createManageLimitsRequestOp;
//      case MANAGE_CONTRACT_REQUEST:
//          ManageContractRequestOp manageContractRequestOp;
//      case MANAGE_CONTRACT:
//          ManageContractOp manageContractOp;
//      case CANCEL_SALE_REQUEST:
//          CancelSaleCreationRequestOp cancelSaleCreationRequestOp;
//      case CREATE_ATOMIC_SWAP_ASK_REQUEST:
//          CreateAtomicSwapAskRequestOp createAtomicSwapAskRequestOp;
//      case CANCEL_ATOMIC_SWAP_ASK:
//          CancelAtomicSwapAskOp cancelAtomicSwapAskOp;
//      case CREATE_ATOMIC_SWAP_BID_REQUEST:
//          CreateAtomicSwapBidRequestOp createAtomicSwapBidRequestOp;
//      case MANAGE_ACCOUNT_ROLE:
//          ManageAccountRoleOp manageAccountRoleOp;
//      case MANAGE_ACCOUNT_RULE:
//          ManageAccountRuleOp manageAccountRuleOp;
//      case MANAGE_SIGNER:
//          ManageSignerOp manageSignerOp;
//      case MANAGE_SIGNER_ROLE:
//          ManageSignerRoleOp manageSignerRoleOp;
//      case MANAGE_SIGNER_RULE:
//          ManageSignerRuleOp manageSignerRuleOp;
//      case STAMP:
//          StampOp stampOp;
//      case LICENSE:
//          LicenseOp licenseOp;
//      case MANAGE_CREATE_POLL_REQUEST:
//          ManageCreatePollRequestOp manageCreatePollRequestOp;
//      case MANAGE_POLL:
//          ManagePollOp managePollOp;
//      case MANAGE_VOTE:
//          ManageVoteOp manageVoteOp;
//      case MANAGE_ACCOUNT_SPECIFIC_RULE:
//          ManageAccountSpecificRuleOp manageAccountSpecificRuleOp;
//      case CANCEL_CHANGE_ROLE_REQUEST:
//          CancelChangeRoleRequestOp cancelChangeRoleRequestOp;
//      case REMOVE_ASSET_PAIR:
//          RemoveAssetPairOp removeAssetPairOp;
//      case INITIATE_KYC_RECOVERY:
//          InitiateKYCRecoveryOp initiateKYCRecoveryOp;
//      case CREATE_KYC_RECOVERY_REQUEST:
//          CreateKYCRecoveryRequestOp createKYCRecoveryRequestOp;
//      case CREATE_MANAGE_OFFER_REQUEST:
//          CreateManageOfferRequestOp createManageOfferRequestOp;
//      case CREATE_PAYMENT_REQUEST:
//          CreatePaymentRequestOp createPaymentRequestOp;
//      case REMOVE_ASSET:
//          RemoveAssetOp removeAssetOp;
//      case OPEN_SWAP:
//          OpenSwapOp openSwapOp;
//      case CLOSE_SWAP:
//          CloseSwapOp closeSwapOp;
//      case CREATE_REDEMPTION_REQUEST:
//          CreateRedemptionRequestOp createRedemptionRequestOp;
//      case CREATE_DATA:
//          CreateDataOp createDataOp;
//      case UPDATE_DATA:
//          UpdateDataOp updateDataOp;
//      case REMOVE_DATA:
//          RemoveDataOp removeDataOp;
//      case CREATE_DATA_CREATION_REQUEST:
//          CreateDataCreationRequestOp createDataCreationRequestOp;
//      case CANCEL_DATA_CREATION_REQUEST:
//          CancelDataCreationRequestOp cancelDataCreationRequestOp;
//      case CREATE_DATA_UPDATE_REQUEST:
//          CreateDataUpdateRequestOp createDataUpdateRequestOp;
//      case CREATE_DATA_REMOVE_REQUEST:
//          CreateDataRemoveRequestOp createDataRemoveRequestOp;
//      case CANCEL_DATA_UPDATE_REQUEST:
//          CancelDataUpdateRequestOp cancelDataUpdateRequestOp;
//      case CANCEL_DATA_REMOVE_REQUEST:
//          CancelDataRemoveRequestOp cancelDataRemoveRequestOp;
//      case CREATE_DEFERRED_PAYMENT_CREATION_REQUEST:
//          CreateDeferredPaymentCreationRequestOp createDeferredPaymentCreationRequestOp;
//      case CANCEL_DEFERRED_PAYMENT_CREATION_REQUEST:
//          CancelDeferredPaymentCreationRequestOp cancelDeferredPaymentCreationRequestOp;
//      case CREATE_CLOSE_DEFERRED_PAYMENT_REQUEST:
//          CreateCloseDeferredPaymentRequestOp createCloseDeferredPaymentRequestOp;
//      case CANCEL_CLOSE_DEFERRED_PAYMENT_REQUEST:
//          CancelCloseDeferredPaymentRequestOp cancelCloseDeferredPaymentRequestOp;
//
//      }
//
//      body;
//  };

//  ===========================================================================
class Operation extends XdrEncodable {
  late ACCOUNTID? sourceAccount;
  late OperationBody body;

  Operation(
    this.sourceAccount,
    this.body,
  );

  Operation.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    if (boolFromXdr(stream)) {
      this.sourceAccount = PublicKey.fromXdr(stream);
    } else {
      this.sourceAccount = null;
    }
    this.body = OperationBody.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    if (sourceAccount != null) {
      true.toXdr(stream);
      sourceAccount?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    body.toXdr(stream);
  }
}

abstract class OperationBody extends XdrEncodable {
  late OperationType discriminant;

  OperationBody(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static OperationBody fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case OperationType.CREATE_ACCOUNT:
        return OperationBodyCreateAccount.fromXdr(stream);
      case OperationType.CREATE_ISSUANCE_REQUEST:
        return OperationBodyCreateIssuanceRequest.fromXdr(stream);
      case OperationType.SET_FEES:
        return OperationBodySetFees.fromXdr(stream);
      case OperationType.CREATE_WITHDRAWAL_REQUEST:
        return OperationBodyCreateWithdrawalRequest.fromXdr(stream);
      case OperationType.MANAGE_BALANCE:
        return OperationBodyManageBalance.fromXdr(stream);
      case OperationType.MANAGE_ASSET:
        return OperationBodyManageAsset.fromXdr(stream);
      case OperationType.CREATE_PREISSUANCE_REQUEST:
        return OperationBodyCreatePreissuanceRequest.fromXdr(stream);
      case OperationType.MANAGE_LIMITS:
        return OperationBodyManageLimits.fromXdr(stream);
      case OperationType.MANAGE_ASSET_PAIR:
        return OperationBodyManageAssetPair.fromXdr(stream);
      case OperationType.MANAGE_OFFER:
        return OperationBodyManageOffer.fromXdr(stream);
      case OperationType.MANAGE_INVOICE_REQUEST:
        return OperationBodyManageInvoiceRequest.fromXdr(stream);
      case OperationType.REVIEW_REQUEST:
        return OperationBodyReviewRequest.fromXdr(stream);
      case OperationType.CREATE_SALE_REQUEST:
        return OperationBodyCreateSaleRequest.fromXdr(stream);
      case OperationType.CHECK_SALE_STATE:
        return OperationBodyCheckSaleState.fromXdr(stream);
      case OperationType.PAYOUT:
        return OperationBodyPayout.fromXdr(stream);
      case OperationType.CREATE_AML_ALERT:
        return OperationBodyCreateAmlAlert.fromXdr(stream);
      case OperationType.MANAGE_KEY_VALUE:
        return OperationBodyManageKeyValue.fromXdr(stream);
      case OperationType.CREATE_CHANGE_ROLE_REQUEST:
        return OperationBodyCreateChangeRoleRequest.fromXdr(stream);
      case OperationType.MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY:
        return OperationBodyManageExternalSystemAccountIdPoolEntry.fromXdr(
            stream);
      case OperationType.BIND_EXTERNAL_SYSTEM_ACCOUNT_ID:
        return OperationBodyBindExternalSystemAccountId.fromXdr(stream);
      case OperationType.PAYMENT:
        return OperationBodyPayment.fromXdr(stream);
      case OperationType.MANAGE_SALE:
        return OperationBodyManageSale.fromXdr(stream);
      case OperationType.CREATE_MANAGE_LIMITS_REQUEST:
        return OperationBodyCreateManageLimitsRequest.fromXdr(stream);
      case OperationType.MANAGE_CONTRACT_REQUEST:
        return OperationBodyManageContractRequest.fromXdr(stream);
      case OperationType.MANAGE_CONTRACT:
        return OperationBodyManageContract.fromXdr(stream);
      case OperationType.CANCEL_SALE_REQUEST:
        return OperationBodyCancelSaleRequest.fromXdr(stream);
      case OperationType.CREATE_ATOMIC_SWAP_ASK_REQUEST:
        return OperationBodyCreateAtomicSwapAskRequest.fromXdr(stream);
      case OperationType.CANCEL_ATOMIC_SWAP_ASK:
        return OperationBodyCancelAtomicSwapAsk.fromXdr(stream);
      case OperationType.CREATE_ATOMIC_SWAP_BID_REQUEST:
        return OperationBodyCreateAtomicSwapBidRequest.fromXdr(stream);
      case OperationType.MANAGE_ACCOUNT_ROLE:
        return OperationBodyManageAccountRole.fromXdr(stream);
      case OperationType.MANAGE_ACCOUNT_RULE:
        return OperationBodyManageAccountRule.fromXdr(stream);
      case OperationType.MANAGE_SIGNER:
        return OperationBodyManageSigner.fromXdr(stream);
      case OperationType.MANAGE_SIGNER_ROLE:
        return OperationBodyManageSignerRole.fromXdr(stream);
      case OperationType.MANAGE_SIGNER_RULE:
        return OperationBodyManageSignerRule.fromXdr(stream);
      case OperationType.STAMP:
        return OperationBodyStamp.fromXdr(stream);
      case OperationType.LICENSE:
        return OperationBodyLicense.fromXdr(stream);
      case OperationType.MANAGE_CREATE_POLL_REQUEST:
        return OperationBodyManageCreatePollRequest.fromXdr(stream);
      case OperationType.MANAGE_POLL:
        return OperationBodyManagePoll.fromXdr(stream);
      case OperationType.MANAGE_VOTE:
        return OperationBodyManageVote.fromXdr(stream);
      case OperationType.MANAGE_ACCOUNT_SPECIFIC_RULE:
        return OperationBodyManageAccountSpecificRule.fromXdr(stream);
      case OperationType.CANCEL_CHANGE_ROLE_REQUEST:
        return OperationBodyCancelChangeRoleRequest.fromXdr(stream);
      case OperationType.REMOVE_ASSET_PAIR:
        return OperationBodyRemoveAssetPair.fromXdr(stream);
      case OperationType.INITIATE_KYC_RECOVERY:
        return OperationBodyInitiateKycRecovery.fromXdr(stream);
      case OperationType.CREATE_KYC_RECOVERY_REQUEST:
        return OperationBodyCreateKycRecoveryRequest.fromXdr(stream);
      case OperationType.CREATE_MANAGE_OFFER_REQUEST:
        return OperationBodyCreateManageOfferRequest.fromXdr(stream);
      case OperationType.CREATE_PAYMENT_REQUEST:
        return OperationBodyCreatePaymentRequest.fromXdr(stream);
      case OperationType.REMOVE_ASSET:
        return OperationBodyRemoveAsset.fromXdr(stream);
      case OperationType.OPEN_SWAP:
        return OperationBodyOpenSwap.fromXdr(stream);
      case OperationType.CLOSE_SWAP:
        return OperationBodyCloseSwap.fromXdr(stream);
      case OperationType.CREATE_REDEMPTION_REQUEST:
        return OperationBodyCreateRedemptionRequest.fromXdr(stream);
      case OperationType.CREATE_DATA:
        return OperationBodyCreateData.fromXdr(stream);
      case OperationType.UPDATE_DATA:
        return OperationBodyUpdateData.fromXdr(stream);
      case OperationType.REMOVE_DATA:
        return OperationBodyRemoveData.fromXdr(stream);
      case OperationType.CREATE_DATA_CREATION_REQUEST:
        return OperationBodyCreateDataCreationRequest.fromXdr(stream);
      case OperationType.CANCEL_DATA_CREATION_REQUEST:
        return OperationBodyCancelDataCreationRequest.fromXdr(stream);
      case OperationType.CREATE_DATA_UPDATE_REQUEST:
        return OperationBodyCreateDataUpdateRequest.fromXdr(stream);
      case OperationType.CREATE_DATA_REMOVE_REQUEST:
        return OperationBodyCreateDataRemoveRequest.fromXdr(stream);
      case OperationType.CANCEL_DATA_UPDATE_REQUEST:
        return OperationBodyCancelDataUpdateRequest.fromXdr(stream);
      case OperationType.CANCEL_DATA_REMOVE_REQUEST:
        return OperationBodyCancelDataRemoveRequest.fromXdr(stream);
      case OperationType.CREATE_DEFERRED_PAYMENT_CREATION_REQUEST:
        return OperationBodyCreateDeferredPaymentCreationRequest.fromXdr(
            stream);
      case OperationType.CANCEL_DEFERRED_PAYMENT_CREATION_REQUEST:
        return OperationBodyCancelDeferredPaymentCreationRequest.fromXdr(
            stream);
      case OperationType.CREATE_CLOSE_DEFERRED_PAYMENT_REQUEST:
        return OperationBodyCreateCloseDeferredPaymentRequest.fromXdr(stream);
      case OperationType.CANCEL_CLOSE_DEFERRED_PAYMENT_REQUEST:
        return OperationBodyCancelCloseDeferredPaymentRequest.fromXdr(stream);
    }

    return OperationBodyCreateAccount.fromXdr(stream);
  }
}

class OperationBodyCreateAccount extends OperationBody {
  OperationBodyCreateAccount(this.createAccountOp)
      : super(OperationType(OperationType.CREATE_ACCOUNT));
  late CreateAccountOp createAccountOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAccountOp.toXdr(stream);
  }

  OperationBodyCreateAccount.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_ACCOUNT)) {
    this.createAccountOp = CreateAccountOp.fromXdr(stream);
  }
}

class OperationBodyCreateIssuanceRequest extends OperationBody {
  OperationBodyCreateIssuanceRequest(this.createIssuanceRequestOp)
      : super(OperationType(OperationType.CREATE_ISSUANCE_REQUEST));
  late CreateIssuanceRequestOp createIssuanceRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createIssuanceRequestOp.toXdr(stream);
  }

  OperationBodyCreateIssuanceRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_ISSUANCE_REQUEST)) {
    this.createIssuanceRequestOp = CreateIssuanceRequestOp.fromXdr(stream);
  }
}

class OperationBodySetFees extends OperationBody {
  OperationBodySetFees(this.setFeesOp)
      : super(OperationType(OperationType.SET_FEES));
  late SetFeesOp setFeesOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    setFeesOp.toXdr(stream);
  }

  OperationBodySetFees.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.SET_FEES)) {
    this.setFeesOp = SetFeesOp.fromXdr(stream);
  }
}

class OperationBodyCreateWithdrawalRequest extends OperationBody {
  OperationBodyCreateWithdrawalRequest(this.createWithdrawalRequestOp)
      : super(OperationType(OperationType.CREATE_WITHDRAWAL_REQUEST));
  late CreateWithdrawalRequestOp createWithdrawalRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createWithdrawalRequestOp.toXdr(stream);
  }

  OperationBodyCreateWithdrawalRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_WITHDRAWAL_REQUEST)) {
    this.createWithdrawalRequestOp = CreateWithdrawalRequestOp.fromXdr(stream);
  }
}

class OperationBodyManageBalance extends OperationBody {
  OperationBodyManageBalance(this.manageBalanceOp)
      : super(OperationType(OperationType.MANAGE_BALANCE));
  late ManageBalanceOp manageBalanceOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageBalanceOp.toXdr(stream);
  }

  OperationBodyManageBalance.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_BALANCE)) {
    this.manageBalanceOp = ManageBalanceOp.fromXdr(stream);
  }
}

class OperationBodyManageAsset extends OperationBody {
  OperationBodyManageAsset(this.manageAssetOp)
      : super(OperationType(OperationType.MANAGE_ASSET));
  late ManageAssetOp manageAssetOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAssetOp.toXdr(stream);
  }

  OperationBodyManageAsset.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_ASSET)) {
    this.manageAssetOp = ManageAssetOp.fromXdr(stream);
  }
}

class OperationBodyCreatePreissuanceRequest extends OperationBody {
  OperationBodyCreatePreissuanceRequest(this.createPreIssuanceRequest)
      : super(OperationType(OperationType.CREATE_PREISSUANCE_REQUEST));
  late CreatePreIssuanceRequestOp createPreIssuanceRequest;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPreIssuanceRequest.toXdr(stream);
  }

  OperationBodyCreatePreissuanceRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_PREISSUANCE_REQUEST)) {
    this.createPreIssuanceRequest = CreatePreIssuanceRequestOp.fromXdr(stream);
  }
}

class OperationBodyManageLimits extends OperationBody {
  OperationBodyManageLimits(this.manageLimitsOp)
      : super(OperationType(OperationType.MANAGE_LIMITS));
  late ManageLimitsOp manageLimitsOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageLimitsOp.toXdr(stream);
  }

  OperationBodyManageLimits.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_LIMITS)) {
    this.manageLimitsOp = ManageLimitsOp.fromXdr(stream);
  }
}

class OperationBodyManageAssetPair extends OperationBody {
  OperationBodyManageAssetPair(this.manageAssetPairOp)
      : super(OperationType(OperationType.MANAGE_ASSET_PAIR));
  late ManageAssetPairOp manageAssetPairOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAssetPairOp.toXdr(stream);
  }

  OperationBodyManageAssetPair.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_ASSET_PAIR)) {
    this.manageAssetPairOp = ManageAssetPairOp.fromXdr(stream);
  }
}

class OperationBodyManageOffer extends OperationBody {
  OperationBodyManageOffer(this.manageOfferOp)
      : super(OperationType(OperationType.MANAGE_OFFER));
  late ManageOfferOp manageOfferOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageOfferOp.toXdr(stream);
  }

  OperationBodyManageOffer.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_OFFER)) {
    this.manageOfferOp = ManageOfferOp.fromXdr(stream);
  }
}

class OperationBodyManageInvoiceRequest extends OperationBody {
  OperationBodyManageInvoiceRequest(this.manageInvoiceRequestOp)
      : super(OperationType(OperationType.MANAGE_INVOICE_REQUEST));
  late ManageInvoiceRequestOp manageInvoiceRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageInvoiceRequestOp.toXdr(stream);
  }

  OperationBodyManageInvoiceRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_INVOICE_REQUEST)) {
    this.manageInvoiceRequestOp = ManageInvoiceRequestOp.fromXdr(stream);
  }
}

class OperationBodyReviewRequest extends OperationBody {
  OperationBodyReviewRequest(this.reviewRequestOp)
      : super(OperationType(OperationType.REVIEW_REQUEST));
  late ReviewRequestOp reviewRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reviewRequestOp.toXdr(stream);
  }

  OperationBodyReviewRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.REVIEW_REQUEST)) {
    this.reviewRequestOp = ReviewRequestOp.fromXdr(stream);
  }
}

class OperationBodyCreateSaleRequest extends OperationBody {
  OperationBodyCreateSaleRequest(this.createSaleCreationRequestOp)
      : super(OperationType(OperationType.CREATE_SALE_REQUEST));
  late CreateSaleCreationRequestOp createSaleCreationRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createSaleCreationRequestOp.toXdr(stream);
  }

  OperationBodyCreateSaleRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_SALE_REQUEST)) {
    this.createSaleCreationRequestOp =
        CreateSaleCreationRequestOp.fromXdr(stream);
  }
}

class OperationBodyCheckSaleState extends OperationBody {
  OperationBodyCheckSaleState(this.checkSaleStateOp)
      : super(OperationType(OperationType.CHECK_SALE_STATE));
  late CheckSaleStateOp checkSaleStateOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    checkSaleStateOp.toXdr(stream);
  }

  OperationBodyCheckSaleState.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CHECK_SALE_STATE)) {
    this.checkSaleStateOp = CheckSaleStateOp.fromXdr(stream);
  }
}

class OperationBodyPayout extends OperationBody {
  OperationBodyPayout(this.payoutOp)
      : super(OperationType(OperationType.PAYOUT));
  late PayoutOp payoutOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    payoutOp.toXdr(stream);
  }

  OperationBodyPayout.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.PAYOUT)) {
    this.payoutOp = PayoutOp.fromXdr(stream);
  }
}

class OperationBodyCreateAmlAlert extends OperationBody {
  OperationBodyCreateAmlAlert(this.createAMLAlertRequestOp)
      : super(OperationType(OperationType.CREATE_AML_ALERT));
  late CreateAMLAlertRequestOp createAMLAlertRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAMLAlertRequestOp.toXdr(stream);
  }

  OperationBodyCreateAmlAlert.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_AML_ALERT)) {
    this.createAMLAlertRequestOp = CreateAMLAlertRequestOp.fromXdr(stream);
  }
}

class OperationBodyManageKeyValue extends OperationBody {
  OperationBodyManageKeyValue(this.manageKeyValueOp)
      : super(OperationType(OperationType.MANAGE_KEY_VALUE));
  late ManageKeyValueOp manageKeyValueOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageKeyValueOp.toXdr(stream);
  }

  OperationBodyManageKeyValue.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_KEY_VALUE)) {
    this.manageKeyValueOp = ManageKeyValueOp.fromXdr(stream);
  }
}

class OperationBodyCreateChangeRoleRequest extends OperationBody {
  OperationBodyCreateChangeRoleRequest(this.createChangeRoleRequestOp)
      : super(OperationType(OperationType.CREATE_CHANGE_ROLE_REQUEST));
  late CreateChangeRoleRequestOp createChangeRoleRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createChangeRoleRequestOp.toXdr(stream);
  }

  OperationBodyCreateChangeRoleRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_CHANGE_ROLE_REQUEST)) {
    this.createChangeRoleRequestOp = CreateChangeRoleRequestOp.fromXdr(stream);
  }
}

class OperationBodyManageExternalSystemAccountIdPoolEntry
    extends OperationBody {
  OperationBodyManageExternalSystemAccountIdPoolEntry(
      this.manageExternalSystemAccountIdPoolEntryOp)
      : super(OperationType(
            OperationType.MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY));
  late ManageExternalSystemAccountIdPoolEntryOp
      manageExternalSystemAccountIdPoolEntryOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageExternalSystemAccountIdPoolEntryOp.toXdr(stream);
  }

  OperationBodyManageExternalSystemAccountIdPoolEntry.fromXdr(
      XdrDataInputStream stream)
      : super(OperationType(
            OperationType.MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY)) {
    this.manageExternalSystemAccountIdPoolEntryOp =
        ManageExternalSystemAccountIdPoolEntryOp.fromXdr(stream);
  }
}

class OperationBodyBindExternalSystemAccountId extends OperationBody {
  OperationBodyBindExternalSystemAccountId(this.bindExternalSystemAccountIdOp)
      : super(OperationType(OperationType.BIND_EXTERNAL_SYSTEM_ACCOUNT_ID));
  late BindExternalSystemAccountIdOp bindExternalSystemAccountIdOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    bindExternalSystemAccountIdOp.toXdr(stream);
  }

  OperationBodyBindExternalSystemAccountId.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.BIND_EXTERNAL_SYSTEM_ACCOUNT_ID)) {
    this.bindExternalSystemAccountIdOp =
        BindExternalSystemAccountIdOp.fromXdr(stream);
  }
}

class OperationBodyPayment extends OperationBody {
  OperationBodyPayment(this.paymentOp)
      : super(OperationType(OperationType.PAYMENT));
  late PaymentOp paymentOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    paymentOp.toXdr(stream);
  }

  OperationBodyPayment.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.PAYMENT)) {
    this.paymentOp = PaymentOp.fromXdr(stream);
  }
}

class OperationBodyManageSale extends OperationBody {
  OperationBodyManageSale(this.manageSaleOp)
      : super(OperationType(OperationType.MANAGE_SALE));
  late ManageSaleOp manageSaleOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSaleOp.toXdr(stream);
  }

  OperationBodyManageSale.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_SALE)) {
    this.manageSaleOp = ManageSaleOp.fromXdr(stream);
  }
}

class OperationBodyCreateManageLimitsRequest extends OperationBody {
  OperationBodyCreateManageLimitsRequest(this.createManageLimitsRequestOp)
      : super(OperationType(OperationType.CREATE_MANAGE_LIMITS_REQUEST));
  late CreateManageLimitsRequestOp createManageLimitsRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createManageLimitsRequestOp.toXdr(stream);
  }

  OperationBodyCreateManageLimitsRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_MANAGE_LIMITS_REQUEST)) {
    this.createManageLimitsRequestOp =
        CreateManageLimitsRequestOp.fromXdr(stream);
  }
}

class OperationBodyManageContractRequest extends OperationBody {
  OperationBodyManageContractRequest(this.manageContractRequestOp)
      : super(OperationType(OperationType.MANAGE_CONTRACT_REQUEST));
  late ManageContractRequestOp manageContractRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageContractRequestOp.toXdr(stream);
  }

  OperationBodyManageContractRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_CONTRACT_REQUEST)) {
    this.manageContractRequestOp = ManageContractRequestOp.fromXdr(stream);
  }
}

class OperationBodyManageContract extends OperationBody {
  OperationBodyManageContract(this.manageContractOp)
      : super(OperationType(OperationType.MANAGE_CONTRACT));
  late ManageContractOp manageContractOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageContractOp.toXdr(stream);
  }

  OperationBodyManageContract.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_CONTRACT)) {
    this.manageContractOp = ManageContractOp.fromXdr(stream);
  }
}

class OperationBodyCancelSaleRequest extends OperationBody {
  OperationBodyCancelSaleRequest(this.cancelSaleCreationRequestOp)
      : super(OperationType(OperationType.CANCEL_SALE_REQUEST));
  late CancelSaleCreationRequestOp cancelSaleCreationRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelSaleCreationRequestOp.toXdr(stream);
  }

  OperationBodyCancelSaleRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CANCEL_SALE_REQUEST)) {
    this.cancelSaleCreationRequestOp =
        CancelSaleCreationRequestOp.fromXdr(stream);
  }
}

class OperationBodyCreateAtomicSwapAskRequest extends OperationBody {
  OperationBodyCreateAtomicSwapAskRequest(this.createAtomicSwapAskRequestOp)
      : super(OperationType(OperationType.CREATE_ATOMIC_SWAP_ASK_REQUEST));
  late CreateAtomicSwapAskRequestOp createAtomicSwapAskRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapAskRequestOp.toXdr(stream);
  }

  OperationBodyCreateAtomicSwapAskRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_ATOMIC_SWAP_ASK_REQUEST)) {
    this.createAtomicSwapAskRequestOp =
        CreateAtomicSwapAskRequestOp.fromXdr(stream);
  }
}

class OperationBodyCancelAtomicSwapAsk extends OperationBody {
  OperationBodyCancelAtomicSwapAsk(this.cancelAtomicSwapAskOp)
      : super(OperationType(OperationType.CANCEL_ATOMIC_SWAP_ASK));
  late CancelAtomicSwapAskOp cancelAtomicSwapAskOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelAtomicSwapAskOp.toXdr(stream);
  }

  OperationBodyCancelAtomicSwapAsk.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CANCEL_ATOMIC_SWAP_ASK)) {
    this.cancelAtomicSwapAskOp = CancelAtomicSwapAskOp.fromXdr(stream);
  }
}

class OperationBodyCreateAtomicSwapBidRequest extends OperationBody {
  OperationBodyCreateAtomicSwapBidRequest(this.createAtomicSwapBidRequestOp)
      : super(OperationType(OperationType.CREATE_ATOMIC_SWAP_BID_REQUEST));
  late CreateAtomicSwapBidRequestOp createAtomicSwapBidRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapBidRequestOp.toXdr(stream);
  }

  OperationBodyCreateAtomicSwapBidRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_ATOMIC_SWAP_BID_REQUEST)) {
    this.createAtomicSwapBidRequestOp =
        CreateAtomicSwapBidRequestOp.fromXdr(stream);
  }
}

class OperationBodyManageAccountRole extends OperationBody {
  OperationBodyManageAccountRole(this.manageAccountRoleOp)
      : super(OperationType(OperationType.MANAGE_ACCOUNT_ROLE));
  late ManageAccountRoleOp manageAccountRoleOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAccountRoleOp.toXdr(stream);
  }

  OperationBodyManageAccountRole.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_ACCOUNT_ROLE)) {
    this.manageAccountRoleOp = ManageAccountRoleOp.fromXdr(stream);
  }
}

class OperationBodyManageAccountRule extends OperationBody {
  OperationBodyManageAccountRule(this.manageAccountRuleOp)
      : super(OperationType(OperationType.MANAGE_ACCOUNT_RULE));
  late ManageAccountRuleOp manageAccountRuleOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAccountRuleOp.toXdr(stream);
  }

  OperationBodyManageAccountRule.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_ACCOUNT_RULE)) {
    this.manageAccountRuleOp = ManageAccountRuleOp.fromXdr(stream);
  }
}

class OperationBodyManageSigner extends OperationBody {
  OperationBodyManageSigner(this.manageSignerOp)
      : super(OperationType(OperationType.MANAGE_SIGNER));
  late ManageSignerOp manageSignerOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSignerOp.toXdr(stream);
  }

  OperationBodyManageSigner.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_SIGNER)) {
    this.manageSignerOp = ManageSignerOp.fromXdr(stream);
  }
}

class OperationBodyManageSignerRole extends OperationBody {
  OperationBodyManageSignerRole(this.manageSignerRoleOp)
      : super(OperationType(OperationType.MANAGE_SIGNER_ROLE));
  late ManageSignerRoleOp manageSignerRoleOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSignerRoleOp.toXdr(stream);
  }

  OperationBodyManageSignerRole.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_SIGNER_ROLE)) {
    this.manageSignerRoleOp = ManageSignerRoleOp.fromXdr(stream);
  }
}

class OperationBodyManageSignerRule extends OperationBody {
  OperationBodyManageSignerRule(this.manageSignerRuleOp)
      : super(OperationType(OperationType.MANAGE_SIGNER_RULE));
  late ManageSignerRuleOp manageSignerRuleOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSignerRuleOp.toXdr(stream);
  }

  OperationBodyManageSignerRule.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_SIGNER_RULE)) {
    this.manageSignerRuleOp = ManageSignerRuleOp.fromXdr(stream);
  }
}

class OperationBodyStamp extends OperationBody {
  OperationBodyStamp(this.stampOp) : super(OperationType(OperationType.STAMP));
  late StampOp stampOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    stampOp.toXdr(stream);
  }

  OperationBodyStamp.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.STAMP)) {
    this.stampOp = StampOp.fromXdr(stream);
  }
}

class OperationBodyLicense extends OperationBody {
  OperationBodyLicense(this.licenseOp)
      : super(OperationType(OperationType.LICENSE));
  late LicenseOp licenseOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    licenseOp.toXdr(stream);
  }

  OperationBodyLicense.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.LICENSE)) {
    this.licenseOp = LicenseOp.fromXdr(stream);
  }
}

class OperationBodyManageCreatePollRequest extends OperationBody {
  OperationBodyManageCreatePollRequest(this.manageCreatePollRequestOp)
      : super(OperationType(OperationType.MANAGE_CREATE_POLL_REQUEST));
  late ManageCreatePollRequestOp manageCreatePollRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageCreatePollRequestOp.toXdr(stream);
  }

  OperationBodyManageCreatePollRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_CREATE_POLL_REQUEST)) {
    this.manageCreatePollRequestOp = ManageCreatePollRequestOp.fromXdr(stream);
  }
}

class OperationBodyManagePoll extends OperationBody {
  OperationBodyManagePoll(this.managePollOp)
      : super(OperationType(OperationType.MANAGE_POLL));
  late ManagePollOp managePollOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    managePollOp.toXdr(stream);
  }

  OperationBodyManagePoll.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_POLL)) {
    this.managePollOp = ManagePollOp.fromXdr(stream);
  }
}

class OperationBodyManageVote extends OperationBody {
  OperationBodyManageVote(this.manageVoteOp)
      : super(OperationType(OperationType.MANAGE_VOTE));
  late ManageVoteOp manageVoteOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageVoteOp.toXdr(stream);
  }

  OperationBodyManageVote.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_VOTE)) {
    this.manageVoteOp = ManageVoteOp.fromXdr(stream);
  }
}

class OperationBodyManageAccountSpecificRule extends OperationBody {
  OperationBodyManageAccountSpecificRule(this.manageAccountSpecificRuleOp)
      : super(OperationType(OperationType.MANAGE_ACCOUNT_SPECIFIC_RULE));
  late ManageAccountSpecificRuleOp manageAccountSpecificRuleOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAccountSpecificRuleOp.toXdr(stream);
  }

  OperationBodyManageAccountSpecificRule.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_ACCOUNT_SPECIFIC_RULE)) {
    this.manageAccountSpecificRuleOp =
        ManageAccountSpecificRuleOp.fromXdr(stream);
  }
}

class OperationBodyCancelChangeRoleRequest extends OperationBody {
  OperationBodyCancelChangeRoleRequest(this.cancelChangeRoleRequestOp)
      : super(OperationType(OperationType.CANCEL_CHANGE_ROLE_REQUEST));
  late CancelChangeRoleRequestOp cancelChangeRoleRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelChangeRoleRequestOp.toXdr(stream);
  }

  OperationBodyCancelChangeRoleRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CANCEL_CHANGE_ROLE_REQUEST)) {
    this.cancelChangeRoleRequestOp = CancelChangeRoleRequestOp.fromXdr(stream);
  }
}

class OperationBodyRemoveAssetPair extends OperationBody {
  OperationBodyRemoveAssetPair(this.removeAssetPairOp)
      : super(OperationType(OperationType.REMOVE_ASSET_PAIR));
  late RemoveAssetPairOp removeAssetPairOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeAssetPairOp.toXdr(stream);
  }

  OperationBodyRemoveAssetPair.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.REMOVE_ASSET_PAIR)) {
    this.removeAssetPairOp = RemoveAssetPairOp.fromXdr(stream);
  }
}

class OperationBodyInitiateKycRecovery extends OperationBody {
  OperationBodyInitiateKycRecovery(this.initiateKYCRecoveryOp)
      : super(OperationType(OperationType.INITIATE_KYC_RECOVERY));
  late InitiateKYCRecoveryOp initiateKYCRecoveryOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    initiateKYCRecoveryOp.toXdr(stream);
  }

  OperationBodyInitiateKycRecovery.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.INITIATE_KYC_RECOVERY)) {
    this.initiateKYCRecoveryOp = InitiateKYCRecoveryOp.fromXdr(stream);
  }
}

class OperationBodyCreateKycRecoveryRequest extends OperationBody {
  OperationBodyCreateKycRecoveryRequest(this.createKYCRecoveryRequestOp)
      : super(OperationType(OperationType.CREATE_KYC_RECOVERY_REQUEST));
  late CreateKYCRecoveryRequestOp createKYCRecoveryRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createKYCRecoveryRequestOp.toXdr(stream);
  }

  OperationBodyCreateKycRecoveryRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_KYC_RECOVERY_REQUEST)) {
    this.createKYCRecoveryRequestOp =
        CreateKYCRecoveryRequestOp.fromXdr(stream);
  }
}

class OperationBodyCreateManageOfferRequest extends OperationBody {
  OperationBodyCreateManageOfferRequest(this.createManageOfferRequestOp)
      : super(OperationType(OperationType.CREATE_MANAGE_OFFER_REQUEST));
  late CreateManageOfferRequestOp createManageOfferRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createManageOfferRequestOp.toXdr(stream);
  }

  OperationBodyCreateManageOfferRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_MANAGE_OFFER_REQUEST)) {
    this.createManageOfferRequestOp =
        CreateManageOfferRequestOp.fromXdr(stream);
  }
}

class OperationBodyCreatePaymentRequest extends OperationBody {
  OperationBodyCreatePaymentRequest(this.createPaymentRequestOp)
      : super(OperationType(OperationType.CREATE_PAYMENT_REQUEST));
  late CreatePaymentRequestOp createPaymentRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPaymentRequestOp.toXdr(stream);
  }

  OperationBodyCreatePaymentRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_PAYMENT_REQUEST)) {
    this.createPaymentRequestOp = CreatePaymentRequestOp.fromXdr(stream);
  }
}

class OperationBodyRemoveAsset extends OperationBody {
  OperationBodyRemoveAsset(this.removeAssetOp)
      : super(OperationType(OperationType.REMOVE_ASSET));
  late RemoveAssetOp removeAssetOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeAssetOp.toXdr(stream);
  }

  OperationBodyRemoveAsset.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.REMOVE_ASSET)) {
    this.removeAssetOp = RemoveAssetOp.fromXdr(stream);
  }
}

class OperationBodyOpenSwap extends OperationBody {
  OperationBodyOpenSwap(this.openSwapOp)
      : super(OperationType(OperationType.OPEN_SWAP));
  late OpenSwapOp openSwapOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    openSwapOp.toXdr(stream);
  }

  OperationBodyOpenSwap.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.OPEN_SWAP)) {
    this.openSwapOp = OpenSwapOp.fromXdr(stream);
  }
}

class OperationBodyCloseSwap extends OperationBody {
  OperationBodyCloseSwap(this.closeSwapOp)
      : super(OperationType(OperationType.CLOSE_SWAP));
  late CloseSwapOp closeSwapOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    closeSwapOp.toXdr(stream);
  }

  OperationBodyCloseSwap.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CLOSE_SWAP)) {
    this.closeSwapOp = CloseSwapOp.fromXdr(stream);
  }
}

class OperationBodyCreateRedemptionRequest extends OperationBody {
  OperationBodyCreateRedemptionRequest(this.createRedemptionRequestOp)
      : super(OperationType(OperationType.CREATE_REDEMPTION_REQUEST));
  late CreateRedemptionRequestOp createRedemptionRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createRedemptionRequestOp.toXdr(stream);
  }

  OperationBodyCreateRedemptionRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_REDEMPTION_REQUEST)) {
    this.createRedemptionRequestOp = CreateRedemptionRequestOp.fromXdr(stream);
  }
}

class OperationBodyCreateData extends OperationBody {
  OperationBodyCreateData(this.createDataOp)
      : super(OperationType(OperationType.CREATE_DATA));
  late CreateDataOp createDataOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataOp.toXdr(stream);
  }

  OperationBodyCreateData.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_DATA)) {
    this.createDataOp = CreateDataOp.fromXdr(stream);
  }
}

class OperationBodyUpdateData extends OperationBody {
  OperationBodyUpdateData(this.updateDataOp)
      : super(OperationType(OperationType.UPDATE_DATA));
  late UpdateDataOp updateDataOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateDataOp.toXdr(stream);
  }

  OperationBodyUpdateData.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.UPDATE_DATA)) {
    this.updateDataOp = UpdateDataOp.fromXdr(stream);
  }
}

class OperationBodyRemoveData extends OperationBody {
  OperationBodyRemoveData(this.removeDataOp)
      : super(OperationType(OperationType.REMOVE_DATA));
  late RemoveDataOp removeDataOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeDataOp.toXdr(stream);
  }

  OperationBodyRemoveData.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.REMOVE_DATA)) {
    this.removeDataOp = RemoveDataOp.fromXdr(stream);
  }
}

class OperationBodyCreateDataCreationRequest extends OperationBody {
  OperationBodyCreateDataCreationRequest(this.createDataCreationRequestOp)
      : super(OperationType(OperationType.CREATE_DATA_CREATION_REQUEST));
  late CreateDataCreationRequestOp createDataCreationRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataCreationRequestOp.toXdr(stream);
  }

  OperationBodyCreateDataCreationRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_DATA_CREATION_REQUEST)) {
    this.createDataCreationRequestOp =
        CreateDataCreationRequestOp.fromXdr(stream);
  }
}

class OperationBodyCancelDataCreationRequest extends OperationBody {
  OperationBodyCancelDataCreationRequest(this.cancelDataCreationRequestOp)
      : super(OperationType(OperationType.CANCEL_DATA_CREATION_REQUEST));
  late CancelDataCreationRequestOp cancelDataCreationRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDataCreationRequestOp.toXdr(stream);
  }

  OperationBodyCancelDataCreationRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CANCEL_DATA_CREATION_REQUEST)) {
    this.cancelDataCreationRequestOp =
        CancelDataCreationRequestOp.fromXdr(stream);
  }
}

class OperationBodyCreateDataUpdateRequest extends OperationBody {
  OperationBodyCreateDataUpdateRequest(this.createDataUpdateRequestOp)
      : super(OperationType(OperationType.CREATE_DATA_UPDATE_REQUEST));
  late CreateDataUpdateRequestOp createDataUpdateRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataUpdateRequestOp.toXdr(stream);
  }

  OperationBodyCreateDataUpdateRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_DATA_UPDATE_REQUEST)) {
    this.createDataUpdateRequestOp = CreateDataUpdateRequestOp.fromXdr(stream);
  }
}

class OperationBodyCreateDataRemoveRequest extends OperationBody {
  OperationBodyCreateDataRemoveRequest(this.createDataRemoveRequestOp)
      : super(OperationType(OperationType.CREATE_DATA_REMOVE_REQUEST));
  late CreateDataRemoveRequestOp createDataRemoveRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataRemoveRequestOp.toXdr(stream);
  }

  OperationBodyCreateDataRemoveRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_DATA_REMOVE_REQUEST)) {
    this.createDataRemoveRequestOp = CreateDataRemoveRequestOp.fromXdr(stream);
  }
}

class OperationBodyCancelDataUpdateRequest extends OperationBody {
  OperationBodyCancelDataUpdateRequest(this.cancelDataUpdateRequestOp)
      : super(OperationType(OperationType.CANCEL_DATA_UPDATE_REQUEST));
  late CancelDataUpdateRequestOp cancelDataUpdateRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDataUpdateRequestOp.toXdr(stream);
  }

  OperationBodyCancelDataUpdateRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CANCEL_DATA_UPDATE_REQUEST)) {
    this.cancelDataUpdateRequestOp = CancelDataUpdateRequestOp.fromXdr(stream);
  }
}

class OperationBodyCancelDataRemoveRequest extends OperationBody {
  OperationBodyCancelDataRemoveRequest(this.cancelDataRemoveRequestOp)
      : super(OperationType(OperationType.CANCEL_DATA_REMOVE_REQUEST));
  late CancelDataRemoveRequestOp cancelDataRemoveRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDataRemoveRequestOp.toXdr(stream);
  }

  OperationBodyCancelDataRemoveRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CANCEL_DATA_REMOVE_REQUEST)) {
    this.cancelDataRemoveRequestOp = CancelDataRemoveRequestOp.fromXdr(stream);
  }
}

class OperationBodyCreateDeferredPaymentCreationRequest extends OperationBody {
  OperationBodyCreateDeferredPaymentCreationRequest(
      this.createDeferredPaymentCreationRequestOp)
      : super(OperationType(
            OperationType.CREATE_DEFERRED_PAYMENT_CREATION_REQUEST));
  late CreateDeferredPaymentCreationRequestOp
      createDeferredPaymentCreationRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDeferredPaymentCreationRequestOp.toXdr(stream);
  }

  OperationBodyCreateDeferredPaymentCreationRequest.fromXdr(
      XdrDataInputStream stream)
      : super(OperationType(
            OperationType.CREATE_DEFERRED_PAYMENT_CREATION_REQUEST)) {
    this.createDeferredPaymentCreationRequestOp =
        CreateDeferredPaymentCreationRequestOp.fromXdr(stream);
  }
}

class OperationBodyCancelDeferredPaymentCreationRequest extends OperationBody {
  OperationBodyCancelDeferredPaymentCreationRequest(
      this.cancelDeferredPaymentCreationRequestOp)
      : super(OperationType(
            OperationType.CANCEL_DEFERRED_PAYMENT_CREATION_REQUEST));
  late CancelDeferredPaymentCreationRequestOp
      cancelDeferredPaymentCreationRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDeferredPaymentCreationRequestOp.toXdr(stream);
  }

  OperationBodyCancelDeferredPaymentCreationRequest.fromXdr(
      XdrDataInputStream stream)
      : super(OperationType(
            OperationType.CANCEL_DEFERRED_PAYMENT_CREATION_REQUEST)) {
    this.cancelDeferredPaymentCreationRequestOp =
        CancelDeferredPaymentCreationRequestOp.fromXdr(stream);
  }
}

class OperationBodyCreateCloseDeferredPaymentRequest extends OperationBody {
  OperationBodyCreateCloseDeferredPaymentRequest(
      this.createCloseDeferredPaymentRequestOp)
      : super(
            OperationType(OperationType.CREATE_CLOSE_DEFERRED_PAYMENT_REQUEST));
  late CreateCloseDeferredPaymentRequestOp createCloseDeferredPaymentRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createCloseDeferredPaymentRequestOp.toXdr(stream);
  }

  OperationBodyCreateCloseDeferredPaymentRequest.fromXdr(
      XdrDataInputStream stream)
      : super(OperationType(
            OperationType.CREATE_CLOSE_DEFERRED_PAYMENT_REQUEST)) {
    this.createCloseDeferredPaymentRequestOp =
        CreateCloseDeferredPaymentRequestOp.fromXdr(stream);
  }
}

class OperationBodyCancelCloseDeferredPaymentRequest extends OperationBody {
  OperationBodyCancelCloseDeferredPaymentRequest(
      this.cancelCloseDeferredPaymentRequestOp)
      : super(
            OperationType(OperationType.CANCEL_CLOSE_DEFERRED_PAYMENT_REQUEST));
  late CancelCloseDeferredPaymentRequestOp cancelCloseDeferredPaymentRequestOp;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelCloseDeferredPaymentRequestOp.toXdr(stream);
  }

  OperationBodyCancelCloseDeferredPaymentRequest.fromXdr(
      XdrDataInputStream stream)
      : super(OperationType(
            OperationType.CANCEL_CLOSE_DEFERRED_PAYMENT_REQUEST)) {
    this.cancelCloseDeferredPaymentRequestOp =
        CancelCloseDeferredPaymentRequestOp.fromXdr(stream);
  }
}

class MemoType extends XdrEncodable {
  static const MEMO_NONE = 0;
  static const MEMO_TEXT = 1;
  static const MEMO_ID = 2;
  static const MEMO_HASH = 3;
  static const MEMO_RETURN = 4;
  late int value;

  MemoType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  MemoType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class Memo extends XdrEncodable {
  late MemoType discriminant;

  Memo(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static Memo fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case MemoType.MEMO_NONE:
        return MemoMemoNone.fromXdr(stream);
      case MemoType.MEMO_TEXT:
        return MemoMemoText.fromXdr(stream);
      case MemoType.MEMO_ID:
        return MemoMemoId.fromXdr(stream);
      case MemoType.MEMO_HASH:
        return MemoMemoHash.fromXdr(stream);
      case MemoType.MEMO_RETURN:
        return MemoMemoReturn.fromXdr(stream);
    }

    return MemoMemoNone.fromXdr(stream);
  }
}

class MemoMemoNone extends Memo {
  MemoMemoNone() : super(MemoType(MemoType.MEMO_NONE));

  MemoMemoNone.fromXdr(XdrDataInputStream stream)
      : super(MemoType(MemoType.MEMO_NONE)) {}
}

class MemoMemoText extends Memo {
  MemoMemoText(this.text) : super(MemoType(MemoType.MEMO_TEXT));
  late String text;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    text.toXdr(stream);
  }

  MemoMemoText.fromXdr(XdrDataInputStream stream)
      : super(MemoType(MemoType.MEMO_TEXT)) {
    var length = 0;
    this.text = stringFromXdr(stream);
  }
}

class MemoMemoId extends Memo {
  MemoMemoId(this.id) : super(MemoType(MemoType.MEMO_ID));
  late UINT64 id;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    id.toXdr(stream);
  }

  MemoMemoId.fromXdr(XdrDataInputStream stream)
      : super(MemoType(MemoType.MEMO_ID)) {
    var length = 0;
    this.id = longFromXdr(stream);
  }
}

class MemoMemoHash extends Memo {
  MemoMemoHash(this.hash) : super(MemoType(MemoType.MEMO_HASH));
  late HASH hash;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    hash.toXdr(stream);
  }

  MemoMemoHash.fromXdr(XdrDataInputStream stream)
      : super(MemoType(MemoType.MEMO_HASH)) {
    var length = 0;
    this.hash = HASH.fromXdr(stream);
  }
}

class MemoMemoReturn extends Memo {
  MemoMemoReturn(this.retHash) : super(MemoType(MemoType.MEMO_RETURN));
  late HASH retHash;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    retHash.toXdr(stream);
  }

  MemoMemoReturn.fromXdr(XdrDataInputStream stream)
      : super(MemoType(MemoType.MEMO_RETURN)) {
    var length = 0;
    this.retHash = HASH.fromXdr(stream);
  }
}

// === xdr source ============================================================

//  struct TimeBounds
//  {
//      //: specifies inclusive min ledger close time after which transaction is valid
//      uint64 minTime;
//      //: specifies inclusive max ledger close time before which transaction is valid.
//      //: note: transaction will be rejected if max time exceeds close time of current ledger on more then [`tx_expiration_period`](https://tokend.gitlab.io/horizon/#operation/info)
//      uint64 maxTime; // 0 here means no maxTime
//  };

//  ===========================================================================
class TimeBounds extends XdrEncodable {
  late UINT64 minTime;
  late UINT64 maxTime;

  TimeBounds(
    this.minTime,
    this.maxTime,
  );

  TimeBounds.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.minTime = longFromXdr(stream);
    this.maxTime = longFromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    minTime.toXdr(stream);
    maxTime.toXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Transaction is a container for a set of operations
//  //:    - is executed by an account
//  //:    - operations are executed in order as one ACID transaction
//  //: (either all operations are applied or none are if any returns a failing code)
//  struct Transaction
//  {
//      //: account used to run the transaction
//      AccountID sourceAccount;
//
//      //: random number used to ensure there is no hash collisions
//      Salt salt;
//
//      //: validity range (inclusive) for the last ledger close time
//      TimeBounds timeBounds;
//
//      //: allows to attach additional data to the transactions
//      Memo memo;
//
//      //: list of operations to be applied. Max size is 100
//      Operation operations<100>;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class Transaction extends XdrEncodable {
  late ACCOUNTID sourceAccount;
  late SALT salt;
  late TimeBounds timeBounds;
  late Memo memo;
  late List<Operation> operations;
  late TransactionExt ext;

  Transaction(
    this.sourceAccount,
    this.salt,
    this.timeBounds,
    this.memo,
    this.operations,
    this.ext,
  );

  Transaction.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.sourceAccount = PublicKey.fromXdr(stream);
    this.salt = longFromXdr(stream);
    this.timeBounds = TimeBounds.fromXdr(stream);
    this.memo = Memo.fromXdr(stream);
    length = intFromXdr(stream);
    operations = <Operation>[];
    while (length > 0) {
      operations.add(Operation.fromXdr(stream));
      length--;
    }

    this.ext = TransactionExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    sourceAccount.toXdr(stream);
    salt.toXdr(stream);
    timeBounds.toXdr(stream);
    memo.toXdr(stream);
    operations.length.toXdr(stream);
    operations.forEach((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}

abstract class TransactionExt extends XdrEncodable {
  late LedgerVersion discriminant;

  TransactionExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static TransactionExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return TransactionExtEmptyVersion.fromXdr(stream);
    }

    return TransactionExtEmptyVersion.fromXdr(stream);
  }
}

class TransactionExtEmptyVersion extends TransactionExt {
  TransactionExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  TransactionExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct TransactionEnvelope
//  {
//      Transaction tx;
//      //: list of signatures used to authorize transaction
//      DecoratedSignature signatures<20>;
//  };

//  ===========================================================================
class TransactionEnvelope extends XdrEncodable {
  late Transaction tx;
  late List<DecoratedSignature> signatures;

  TransactionEnvelope(
    this.tx,
    this.signatures,
  );

  TransactionEnvelope.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.tx = Transaction.fromXdr(stream);
    length = intFromXdr(stream);
    signatures = <DecoratedSignature>[];
    while (length > 0) {
      signatures.add(DecoratedSignature.fromXdr(stream));
      length--;
    }
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    tx.toXdr(stream);
    signatures.length.toXdr(stream);
    signatures.forEach((element) {
      element.toXdr(stream);
    });
  }
}

class OperationResultCode extends XdrEncodable {
  static const opINNER = 0;
  static const opBAD_AUTH = -1;
  static const opNO_ACCOUNT = -2;
  static const opNOT_ALLOWED = -3;
  static const opACCOUNT_BLOCKED = -4;
  static const opNO_COUNTERPARTY = -5;
  static const opCOUNTERPARTY_BLOCKED = -6;
  static const opCOUNTERPARTY_WRONG_TYPE = -7;
  static const opBAD_AUTH_EXTRA = -8;
  static const opNO_ROLE_PERMISSION = -9;
  static const opNO_ENTRY = -10;
  static const opNOT_SUPPORTED = -11;
  static const opLICENSE_VIOLATION = -12;
  static const opSKIPPED = -13;
  late int value;

  OperationResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  OperationResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Defines requirements for tx or operation which were not fulfilled
//  struct AccountRuleRequirement
//  {
//  	//: defines resources to which access was denied
//      AccountRuleResource resource;
//  	//: defines action which was denied
//      AccountRuleAction action;
//  	//: defines account for which requirements were not met
//  	AccountID account;
//
//  	//: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class AccountRuleRequirement extends XdrEncodable {
  late AccountRuleResource resource;
  late AccountRuleAction action;
  late ACCOUNTID account;
  late EmptyExt ext;

  AccountRuleRequirement(
    this.resource,
    this.action,
    this.account,
    this.ext,
  );

  AccountRuleRequirement.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.resource = AccountRuleResource.fromXdr(stream);
    this.action = AccountRuleAction.fromXdr(stream);
    this.account = PublicKey.fromXdr(stream);
    this.ext = EmptyExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    resource.toXdr(stream);
    action.toXdr(stream);
    account.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class OperationResult extends XdrEncodable {
  late OperationResultCode discriminant;

  OperationResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static OperationResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case OperationResultCode.opINNER:
        return OperationResultOpinner.fromXdr(stream);
      case OperationResultCode.opNO_ENTRY:
        return OperationResultOpnoEntry.fromXdr(stream);
      case OperationResultCode.opNO_ROLE_PERMISSION:
        return OperationResultOpnoRolePermission.fromXdr(stream);
    }

    return OperationResultOpinner.fromXdr(stream);
  }
}

class OperationResultOpinner extends OperationResult {
  OperationResultOpinner(this.tr)
      : super(OperationResultCode(OperationResultCode.opINNER));
  late OperationResultTr tr;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    tr.toXdr(stream);
  }

  OperationResultOpinner.fromXdr(XdrDataInputStream stream)
      : super(OperationResultCode(OperationResultCode.opINNER)) {
    this.tr = OperationResultTr.fromXdr(stream);
  }
}

class OperationResultOpnoEntry extends OperationResult {
  OperationResultOpnoEntry(this.entryType)
      : super(OperationResultCode(OperationResultCode.opNO_ENTRY));
  late LedgerEntryType entryType;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    entryType.toXdr(stream);
  }

  OperationResultOpnoEntry.fromXdr(XdrDataInputStream stream)
      : super(OperationResultCode(OperationResultCode.opNO_ENTRY)) {
    this.entryType = LedgerEntryType.fromXdr(stream);
  }
}

class OperationResultOpnoRolePermission extends OperationResult {
  OperationResultOpnoRolePermission(this.requirement)
      : super(OperationResultCode(OperationResultCode.opNO_ROLE_PERMISSION));
  late AccountRuleRequirement requirement;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    requirement.toXdr(stream);
  }

  OperationResultOpnoRolePermission.fromXdr(XdrDataInputStream stream)
      : super(OperationResultCode(OperationResultCode.opNO_ROLE_PERMISSION)) {
    this.requirement = AccountRuleRequirement.fromXdr(stream);
  }
}

abstract class OperationResultTr extends XdrEncodable {
  late OperationType discriminant;

  OperationResultTr(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static OperationResultTr fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case OperationType.CREATE_ACCOUNT:
        return OperationResultTrCreateAccount.fromXdr(stream);
      case OperationType.CREATE_ISSUANCE_REQUEST:
        return OperationResultTrCreateIssuanceRequest.fromXdr(stream);
      case OperationType.SET_FEES:
        return OperationResultTrSetFees.fromXdr(stream);
      case OperationType.CREATE_WITHDRAWAL_REQUEST:
        return OperationResultTrCreateWithdrawalRequest.fromXdr(stream);
      case OperationType.MANAGE_BALANCE:
        return OperationResultTrManageBalance.fromXdr(stream);
      case OperationType.MANAGE_ASSET:
        return OperationResultTrManageAsset.fromXdr(stream);
      case OperationType.CREATE_PREISSUANCE_REQUEST:
        return OperationResultTrCreatePreissuanceRequest.fromXdr(stream);
      case OperationType.MANAGE_LIMITS:
        return OperationResultTrManageLimits.fromXdr(stream);
      case OperationType.MANAGE_ASSET_PAIR:
        return OperationResultTrManageAssetPair.fromXdr(stream);
      case OperationType.MANAGE_OFFER:
        return OperationResultTrManageOffer.fromXdr(stream);
      case OperationType.MANAGE_INVOICE_REQUEST:
        return OperationResultTrManageInvoiceRequest.fromXdr(stream);
      case OperationType.REVIEW_REQUEST:
        return OperationResultTrReviewRequest.fromXdr(stream);
      case OperationType.CREATE_SALE_REQUEST:
        return OperationResultTrCreateSaleRequest.fromXdr(stream);
      case OperationType.CHECK_SALE_STATE:
        return OperationResultTrCheckSaleState.fromXdr(stream);
      case OperationType.PAYOUT:
        return OperationResultTrPayout.fromXdr(stream);
      case OperationType.CREATE_AML_ALERT:
        return OperationResultTrCreateAmlAlert.fromXdr(stream);
      case OperationType.MANAGE_KEY_VALUE:
        return OperationResultTrManageKeyValue.fromXdr(stream);
      case OperationType.CREATE_CHANGE_ROLE_REQUEST:
        return OperationResultTrCreateChangeRoleRequest.fromXdr(stream);
      case OperationType.MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY:
        return OperationResultTrManageExternalSystemAccountIdPoolEntry.fromXdr(
            stream);
      case OperationType.BIND_EXTERNAL_SYSTEM_ACCOUNT_ID:
        return OperationResultTrBindExternalSystemAccountId.fromXdr(stream);
      case OperationType.PAYMENT:
        return OperationResultTrPayment.fromXdr(stream);
      case OperationType.MANAGE_SALE:
        return OperationResultTrManageSale.fromXdr(stream);
      case OperationType.CREATE_MANAGE_LIMITS_REQUEST:
        return OperationResultTrCreateManageLimitsRequest.fromXdr(stream);
      case OperationType.MANAGE_CONTRACT_REQUEST:
        return OperationResultTrManageContractRequest.fromXdr(stream);
      case OperationType.MANAGE_CONTRACT:
        return OperationResultTrManageContract.fromXdr(stream);
      case OperationType.CANCEL_SALE_REQUEST:
        return OperationResultTrCancelSaleRequest.fromXdr(stream);
      case OperationType.CREATE_ATOMIC_SWAP_ASK_REQUEST:
        return OperationResultTrCreateAtomicSwapAskRequest.fromXdr(stream);
      case OperationType.CANCEL_ATOMIC_SWAP_ASK:
        return OperationResultTrCancelAtomicSwapAsk.fromXdr(stream);
      case OperationType.CREATE_ATOMIC_SWAP_BID_REQUEST:
        return OperationResultTrCreateAtomicSwapBidRequest.fromXdr(stream);
      case OperationType.MANAGE_ACCOUNT_ROLE:
        return OperationResultTrManageAccountRole.fromXdr(stream);
      case OperationType.MANAGE_ACCOUNT_RULE:
        return OperationResultTrManageAccountRule.fromXdr(stream);
      case OperationType.MANAGE_SIGNER:
        return OperationResultTrManageSigner.fromXdr(stream);
      case OperationType.MANAGE_SIGNER_ROLE:
        return OperationResultTrManageSignerRole.fromXdr(stream);
      case OperationType.MANAGE_SIGNER_RULE:
        return OperationResultTrManageSignerRule.fromXdr(stream);
      case OperationType.STAMP:
        return OperationResultTrStamp.fromXdr(stream);
      case OperationType.LICENSE:
        return OperationResultTrLicense.fromXdr(stream);
      case OperationType.MANAGE_POLL:
        return OperationResultTrManagePoll.fromXdr(stream);
      case OperationType.MANAGE_CREATE_POLL_REQUEST:
        return OperationResultTrManageCreatePollRequest.fromXdr(stream);
      case OperationType.MANAGE_VOTE:
        return OperationResultTrManageVote.fromXdr(stream);
      case OperationType.MANAGE_ACCOUNT_SPECIFIC_RULE:
        return OperationResultTrManageAccountSpecificRule.fromXdr(stream);
      case OperationType.CANCEL_CHANGE_ROLE_REQUEST:
        return OperationResultTrCancelChangeRoleRequest.fromXdr(stream);
      case OperationType.REMOVE_ASSET_PAIR:
        return OperationResultTrRemoveAssetPair.fromXdr(stream);
      case OperationType.CREATE_KYC_RECOVERY_REQUEST:
        return OperationResultTrCreateKycRecoveryRequest.fromXdr(stream);
      case OperationType.INITIATE_KYC_RECOVERY:
        return OperationResultTrInitiateKycRecovery.fromXdr(stream);
      case OperationType.CREATE_MANAGE_OFFER_REQUEST:
        return OperationResultTrCreateManageOfferRequest.fromXdr(stream);
      case OperationType.CREATE_PAYMENT_REQUEST:
        return OperationResultTrCreatePaymentRequest.fromXdr(stream);
      case OperationType.REMOVE_ASSET:
        return OperationResultTrRemoveAsset.fromXdr(stream);
      case OperationType.OPEN_SWAP:
        return OperationResultTrOpenSwap.fromXdr(stream);
      case OperationType.CLOSE_SWAP:
        return OperationResultTrCloseSwap.fromXdr(stream);
      case OperationType.CREATE_REDEMPTION_REQUEST:
        return OperationResultTrCreateRedemptionRequest.fromXdr(stream);
      case OperationType.CREATE_DATA:
        return OperationResultTrCreateData.fromXdr(stream);
      case OperationType.UPDATE_DATA:
        return OperationResultTrUpdateData.fromXdr(stream);
      case OperationType.REMOVE_DATA:
        return OperationResultTrRemoveData.fromXdr(stream);
      case OperationType.CREATE_DATA_CREATION_REQUEST:
        return OperationResultTrCreateDataCreationRequest.fromXdr(stream);
      case OperationType.CANCEL_DATA_CREATION_REQUEST:
        return OperationResultTrCancelDataCreationRequest.fromXdr(stream);
      case OperationType.CREATE_DATA_UPDATE_REQUEST:
        return OperationResultTrCreateDataUpdateRequest.fromXdr(stream);
      case OperationType.CREATE_DATA_REMOVE_REQUEST:
        return OperationResultTrCreateDataRemoveRequest.fromXdr(stream);
      case OperationType.CANCEL_DATA_UPDATE_REQUEST:
        return OperationResultTrCancelDataUpdateRequest.fromXdr(stream);
      case OperationType.CANCEL_DATA_REMOVE_REQUEST:
        return OperationResultTrCancelDataRemoveRequest.fromXdr(stream);
      case OperationType.CREATE_DEFERRED_PAYMENT_CREATION_REQUEST:
        return OperationResultTrCreateDeferredPaymentCreationRequest.fromXdr(
            stream);
      case OperationType.CANCEL_DEFERRED_PAYMENT_CREATION_REQUEST:
        return OperationResultTrCancelDeferredPaymentCreationRequest.fromXdr(
            stream);
      case OperationType.CREATE_CLOSE_DEFERRED_PAYMENT_REQUEST:
        return OperationResultTrCreateCloseDeferredPaymentRequest.fromXdr(
            stream);
      case OperationType.CANCEL_CLOSE_DEFERRED_PAYMENT_REQUEST:
        return OperationResultTrCancelCloseDeferredPaymentRequest.fromXdr(
            stream);
    }

    return OperationResultTrCreateAccount.fromXdr(stream);
  }
}

class OperationResultTrCreateAccount extends OperationResultTr {
  OperationResultTrCreateAccount(this.createAccountResult)
      : super(OperationType(OperationType.CREATE_ACCOUNT));
  late CreateAccountResult createAccountResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAccountResult.toXdr(stream);
  }

  OperationResultTrCreateAccount.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_ACCOUNT)) {
    this.createAccountResult = CreateAccountResult.fromXdr(stream);
  }
}

class OperationResultTrCreateIssuanceRequest extends OperationResultTr {
  OperationResultTrCreateIssuanceRequest(this.createIssuanceRequestResult)
      : super(OperationType(OperationType.CREATE_ISSUANCE_REQUEST));
  late CreateIssuanceRequestResult createIssuanceRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createIssuanceRequestResult.toXdr(stream);
  }

  OperationResultTrCreateIssuanceRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_ISSUANCE_REQUEST)) {
    this.createIssuanceRequestResult =
        CreateIssuanceRequestResult.fromXdr(stream);
  }
}

class OperationResultTrSetFees extends OperationResultTr {
  OperationResultTrSetFees(this.setFeesResult)
      : super(OperationType(OperationType.SET_FEES));
  late SetFeesResult setFeesResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    setFeesResult.toXdr(stream);
  }

  OperationResultTrSetFees.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.SET_FEES)) {
    this.setFeesResult = SetFeesResult.fromXdr(stream);
  }
}

class OperationResultTrCreateWithdrawalRequest extends OperationResultTr {
  OperationResultTrCreateWithdrawalRequest(this.createWithdrawalRequestResult)
      : super(OperationType(OperationType.CREATE_WITHDRAWAL_REQUEST));
  late CreateWithdrawalRequestResult createWithdrawalRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createWithdrawalRequestResult.toXdr(stream);
  }

  OperationResultTrCreateWithdrawalRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_WITHDRAWAL_REQUEST)) {
    this.createWithdrawalRequestResult =
        CreateWithdrawalRequestResult.fromXdr(stream);
  }
}

class OperationResultTrManageBalance extends OperationResultTr {
  OperationResultTrManageBalance(this.manageBalanceResult)
      : super(OperationType(OperationType.MANAGE_BALANCE));
  late ManageBalanceResult manageBalanceResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageBalanceResult.toXdr(stream);
  }

  OperationResultTrManageBalance.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_BALANCE)) {
    this.manageBalanceResult = ManageBalanceResult.fromXdr(stream);
  }
}

class OperationResultTrManageAsset extends OperationResultTr {
  OperationResultTrManageAsset(this.manageAssetResult)
      : super(OperationType(OperationType.MANAGE_ASSET));
  late ManageAssetResult manageAssetResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAssetResult.toXdr(stream);
  }

  OperationResultTrManageAsset.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_ASSET)) {
    this.manageAssetResult = ManageAssetResult.fromXdr(stream);
  }
}

class OperationResultTrCreatePreissuanceRequest extends OperationResultTr {
  OperationResultTrCreatePreissuanceRequest(this.createPreIssuanceRequestResult)
      : super(OperationType(OperationType.CREATE_PREISSUANCE_REQUEST));
  late CreatePreIssuanceRequestResult createPreIssuanceRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPreIssuanceRequestResult.toXdr(stream);
  }

  OperationResultTrCreatePreissuanceRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_PREISSUANCE_REQUEST)) {
    this.createPreIssuanceRequestResult =
        CreatePreIssuanceRequestResult.fromXdr(stream);
  }
}

class OperationResultTrManageLimits extends OperationResultTr {
  OperationResultTrManageLimits(this.manageLimitsResult)
      : super(OperationType(OperationType.MANAGE_LIMITS));
  late ManageLimitsResult manageLimitsResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageLimitsResult.toXdr(stream);
  }

  OperationResultTrManageLimits.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_LIMITS)) {
    this.manageLimitsResult = ManageLimitsResult.fromXdr(stream);
  }
}

class OperationResultTrManageAssetPair extends OperationResultTr {
  OperationResultTrManageAssetPair(this.manageAssetPairResult)
      : super(OperationType(OperationType.MANAGE_ASSET_PAIR));
  late ManageAssetPairResult manageAssetPairResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAssetPairResult.toXdr(stream);
  }

  OperationResultTrManageAssetPair.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_ASSET_PAIR)) {
    this.manageAssetPairResult = ManageAssetPairResult.fromXdr(stream);
  }
}

class OperationResultTrManageOffer extends OperationResultTr {
  OperationResultTrManageOffer(this.manageOfferResult)
      : super(OperationType(OperationType.MANAGE_OFFER));
  late ManageOfferResult manageOfferResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageOfferResult.toXdr(stream);
  }

  OperationResultTrManageOffer.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_OFFER)) {
    this.manageOfferResult = ManageOfferResult.fromXdr(stream);
  }
}

class OperationResultTrManageInvoiceRequest extends OperationResultTr {
  OperationResultTrManageInvoiceRequest(this.manageInvoiceRequestResult)
      : super(OperationType(OperationType.MANAGE_INVOICE_REQUEST));
  late ManageInvoiceRequestResult manageInvoiceRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageInvoiceRequestResult.toXdr(stream);
  }

  OperationResultTrManageInvoiceRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_INVOICE_REQUEST)) {
    this.manageInvoiceRequestResult =
        ManageInvoiceRequestResult.fromXdr(stream);
  }
}

class OperationResultTrReviewRequest extends OperationResultTr {
  OperationResultTrReviewRequest(this.reviewRequestResult)
      : super(OperationType(OperationType.REVIEW_REQUEST));
  late ReviewRequestResult reviewRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reviewRequestResult.toXdr(stream);
  }

  OperationResultTrReviewRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.REVIEW_REQUEST)) {
    this.reviewRequestResult = ReviewRequestResult.fromXdr(stream);
  }
}

class OperationResultTrCreateSaleRequest extends OperationResultTr {
  OperationResultTrCreateSaleRequest(this.createSaleCreationRequestResult)
      : super(OperationType(OperationType.CREATE_SALE_REQUEST));
  late CreateSaleCreationRequestResult createSaleCreationRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createSaleCreationRequestResult.toXdr(stream);
  }

  OperationResultTrCreateSaleRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_SALE_REQUEST)) {
    this.createSaleCreationRequestResult =
        CreateSaleCreationRequestResult.fromXdr(stream);
  }
}

class OperationResultTrCheckSaleState extends OperationResultTr {
  OperationResultTrCheckSaleState(this.checkSaleStateResult)
      : super(OperationType(OperationType.CHECK_SALE_STATE));
  late CheckSaleStateResult checkSaleStateResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    checkSaleStateResult.toXdr(stream);
  }

  OperationResultTrCheckSaleState.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CHECK_SALE_STATE)) {
    this.checkSaleStateResult = CheckSaleStateResult.fromXdr(stream);
  }
}

class OperationResultTrPayout extends OperationResultTr {
  OperationResultTrPayout(this.payoutResult)
      : super(OperationType(OperationType.PAYOUT));
  late PayoutResult payoutResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    payoutResult.toXdr(stream);
  }

  OperationResultTrPayout.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.PAYOUT)) {
    this.payoutResult = PayoutResult.fromXdr(stream);
  }
}

class OperationResultTrCreateAmlAlert extends OperationResultTr {
  OperationResultTrCreateAmlAlert(this.createAMLAlertRequestResult)
      : super(OperationType(OperationType.CREATE_AML_ALERT));
  late CreateAMLAlertRequestResult createAMLAlertRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAMLAlertRequestResult.toXdr(stream);
  }

  OperationResultTrCreateAmlAlert.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_AML_ALERT)) {
    this.createAMLAlertRequestResult =
        CreateAMLAlertRequestResult.fromXdr(stream);
  }
}

class OperationResultTrManageKeyValue extends OperationResultTr {
  OperationResultTrManageKeyValue(this.manageKeyValueResult)
      : super(OperationType(OperationType.MANAGE_KEY_VALUE));
  late ManageKeyValueResult manageKeyValueResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageKeyValueResult.toXdr(stream);
  }

  OperationResultTrManageKeyValue.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_KEY_VALUE)) {
    this.manageKeyValueResult = ManageKeyValueResult.fromXdr(stream);
  }
}

class OperationResultTrCreateChangeRoleRequest extends OperationResultTr {
  OperationResultTrCreateChangeRoleRequest(this.createChangeRoleRequestResult)
      : super(OperationType(OperationType.CREATE_CHANGE_ROLE_REQUEST));
  late CreateChangeRoleRequestResult createChangeRoleRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createChangeRoleRequestResult.toXdr(stream);
  }

  OperationResultTrCreateChangeRoleRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_CHANGE_ROLE_REQUEST)) {
    this.createChangeRoleRequestResult =
        CreateChangeRoleRequestResult.fromXdr(stream);
  }
}

class OperationResultTrManageExternalSystemAccountIdPoolEntry
    extends OperationResultTr {
  OperationResultTrManageExternalSystemAccountIdPoolEntry(
      this.manageExternalSystemAccountIdPoolEntryResult)
      : super(OperationType(
            OperationType.MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY));
  late ManageExternalSystemAccountIdPoolEntryResult
      manageExternalSystemAccountIdPoolEntryResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageExternalSystemAccountIdPoolEntryResult.toXdr(stream);
  }

  OperationResultTrManageExternalSystemAccountIdPoolEntry.fromXdr(
      XdrDataInputStream stream)
      : super(OperationType(
            OperationType.MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY)) {
    this.manageExternalSystemAccountIdPoolEntryResult =
        ManageExternalSystemAccountIdPoolEntryResult.fromXdr(stream);
  }
}

class OperationResultTrBindExternalSystemAccountId extends OperationResultTr {
  OperationResultTrBindExternalSystemAccountId(
      this.bindExternalSystemAccountIdResult)
      : super(OperationType(OperationType.BIND_EXTERNAL_SYSTEM_ACCOUNT_ID));
  late BindExternalSystemAccountIdResult bindExternalSystemAccountIdResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    bindExternalSystemAccountIdResult.toXdr(stream);
  }

  OperationResultTrBindExternalSystemAccountId.fromXdr(
      XdrDataInputStream stream)
      : super(OperationType(OperationType.BIND_EXTERNAL_SYSTEM_ACCOUNT_ID)) {
    this.bindExternalSystemAccountIdResult =
        BindExternalSystemAccountIdResult.fromXdr(stream);
  }
}

class OperationResultTrPayment extends OperationResultTr {
  OperationResultTrPayment(this.paymentResult)
      : super(OperationType(OperationType.PAYMENT));
  late PaymentResult paymentResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    paymentResult.toXdr(stream);
  }

  OperationResultTrPayment.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.PAYMENT)) {
    this.paymentResult = PaymentResult.fromXdr(stream);
  }
}

class OperationResultTrManageSale extends OperationResultTr {
  OperationResultTrManageSale(this.manageSaleResult)
      : super(OperationType(OperationType.MANAGE_SALE));
  late ManageSaleResult manageSaleResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSaleResult.toXdr(stream);
  }

  OperationResultTrManageSale.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_SALE)) {
    this.manageSaleResult = ManageSaleResult.fromXdr(stream);
  }
}

class OperationResultTrCreateManageLimitsRequest extends OperationResultTr {
  OperationResultTrCreateManageLimitsRequest(
      this.createManageLimitsRequestResult)
      : super(OperationType(OperationType.CREATE_MANAGE_LIMITS_REQUEST));
  late CreateManageLimitsRequestResult createManageLimitsRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createManageLimitsRequestResult.toXdr(stream);
  }

  OperationResultTrCreateManageLimitsRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_MANAGE_LIMITS_REQUEST)) {
    this.createManageLimitsRequestResult =
        CreateManageLimitsRequestResult.fromXdr(stream);
  }
}

class OperationResultTrManageContractRequest extends OperationResultTr {
  OperationResultTrManageContractRequest(this.manageContractRequestResult)
      : super(OperationType(OperationType.MANAGE_CONTRACT_REQUEST));
  late ManageContractRequestResult manageContractRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageContractRequestResult.toXdr(stream);
  }

  OperationResultTrManageContractRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_CONTRACT_REQUEST)) {
    this.manageContractRequestResult =
        ManageContractRequestResult.fromXdr(stream);
  }
}

class OperationResultTrManageContract extends OperationResultTr {
  OperationResultTrManageContract(this.manageContractResult)
      : super(OperationType(OperationType.MANAGE_CONTRACT));
  late ManageContractResult manageContractResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageContractResult.toXdr(stream);
  }

  OperationResultTrManageContract.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_CONTRACT)) {
    this.manageContractResult = ManageContractResult.fromXdr(stream);
  }
}

class OperationResultTrCancelSaleRequest extends OperationResultTr {
  OperationResultTrCancelSaleRequest(this.cancelSaleCreationRequestResult)
      : super(OperationType(OperationType.CANCEL_SALE_REQUEST));
  late CancelSaleCreationRequestResult cancelSaleCreationRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelSaleCreationRequestResult.toXdr(stream);
  }

  OperationResultTrCancelSaleRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CANCEL_SALE_REQUEST)) {
    this.cancelSaleCreationRequestResult =
        CancelSaleCreationRequestResult.fromXdr(stream);
  }
}

class OperationResultTrCreateAtomicSwapAskRequest extends OperationResultTr {
  OperationResultTrCreateAtomicSwapAskRequest(
      this.createAtomicSwapAskRequestResult)
      : super(OperationType(OperationType.CREATE_ATOMIC_SWAP_ASK_REQUEST));
  late CreateAtomicSwapAskRequestResult createAtomicSwapAskRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapAskRequestResult.toXdr(stream);
  }

  OperationResultTrCreateAtomicSwapAskRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_ATOMIC_SWAP_ASK_REQUEST)) {
    this.createAtomicSwapAskRequestResult =
        CreateAtomicSwapAskRequestResult.fromXdr(stream);
  }
}

class OperationResultTrCancelAtomicSwapAsk extends OperationResultTr {
  OperationResultTrCancelAtomicSwapAsk(this.cancelAtomicSwapAskResult)
      : super(OperationType(OperationType.CANCEL_ATOMIC_SWAP_ASK));
  late CancelAtomicSwapAskResult cancelAtomicSwapAskResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelAtomicSwapAskResult.toXdr(stream);
  }

  OperationResultTrCancelAtomicSwapAsk.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CANCEL_ATOMIC_SWAP_ASK)) {
    this.cancelAtomicSwapAskResult = CancelAtomicSwapAskResult.fromXdr(stream);
  }
}

class OperationResultTrCreateAtomicSwapBidRequest extends OperationResultTr {
  OperationResultTrCreateAtomicSwapBidRequest(
      this.createAtomicSwapBidRequestResult)
      : super(OperationType(OperationType.CREATE_ATOMIC_SWAP_BID_REQUEST));
  late CreateAtomicSwapBidRequestResult createAtomicSwapBidRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapBidRequestResult.toXdr(stream);
  }

  OperationResultTrCreateAtomicSwapBidRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_ATOMIC_SWAP_BID_REQUEST)) {
    this.createAtomicSwapBidRequestResult =
        CreateAtomicSwapBidRequestResult.fromXdr(stream);
  }
}

class OperationResultTrManageAccountRole extends OperationResultTr {
  OperationResultTrManageAccountRole(this.manageAccountRoleResult)
      : super(OperationType(OperationType.MANAGE_ACCOUNT_ROLE));
  late ManageAccountRoleResult manageAccountRoleResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAccountRoleResult.toXdr(stream);
  }

  OperationResultTrManageAccountRole.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_ACCOUNT_ROLE)) {
    this.manageAccountRoleResult = ManageAccountRoleResult.fromXdr(stream);
  }
}

class OperationResultTrManageAccountRule extends OperationResultTr {
  OperationResultTrManageAccountRule(this.manageAccountRuleResult)
      : super(OperationType(OperationType.MANAGE_ACCOUNT_RULE));
  late ManageAccountRuleResult manageAccountRuleResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAccountRuleResult.toXdr(stream);
  }

  OperationResultTrManageAccountRule.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_ACCOUNT_RULE)) {
    this.manageAccountRuleResult = ManageAccountRuleResult.fromXdr(stream);
  }
}

class OperationResultTrManageSigner extends OperationResultTr {
  OperationResultTrManageSigner(this.manageSignerResult)
      : super(OperationType(OperationType.MANAGE_SIGNER));
  late ManageSignerResult manageSignerResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSignerResult.toXdr(stream);
  }

  OperationResultTrManageSigner.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_SIGNER)) {
    this.manageSignerResult = ManageSignerResult.fromXdr(stream);
  }
}

class OperationResultTrManageSignerRole extends OperationResultTr {
  OperationResultTrManageSignerRole(this.manageSignerRoleResult)
      : super(OperationType(OperationType.MANAGE_SIGNER_ROLE));
  late ManageSignerRoleResult manageSignerRoleResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSignerRoleResult.toXdr(stream);
  }

  OperationResultTrManageSignerRole.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_SIGNER_ROLE)) {
    this.manageSignerRoleResult = ManageSignerRoleResult.fromXdr(stream);
  }
}

class OperationResultTrManageSignerRule extends OperationResultTr {
  OperationResultTrManageSignerRule(this.manageSignerRuleResult)
      : super(OperationType(OperationType.MANAGE_SIGNER_RULE));
  late ManageSignerRuleResult manageSignerRuleResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSignerRuleResult.toXdr(stream);
  }

  OperationResultTrManageSignerRule.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_SIGNER_RULE)) {
    this.manageSignerRuleResult = ManageSignerRuleResult.fromXdr(stream);
  }
}

class OperationResultTrStamp extends OperationResultTr {
  OperationResultTrStamp(this.stampResult)
      : super(OperationType(OperationType.STAMP));
  late StampResult stampResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    stampResult.toXdr(stream);
  }

  OperationResultTrStamp.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.STAMP)) {
    this.stampResult = StampResult.fromXdr(stream);
  }
}

class OperationResultTrLicense extends OperationResultTr {
  OperationResultTrLicense(this.licenseResult)
      : super(OperationType(OperationType.LICENSE));
  late LicenseResult licenseResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    licenseResult.toXdr(stream);
  }

  OperationResultTrLicense.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.LICENSE)) {
    this.licenseResult = LicenseResult.fromXdr(stream);
  }
}

class OperationResultTrManagePoll extends OperationResultTr {
  OperationResultTrManagePoll(this.managePollResult)
      : super(OperationType(OperationType.MANAGE_POLL));
  late ManagePollResult managePollResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    managePollResult.toXdr(stream);
  }

  OperationResultTrManagePoll.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_POLL)) {
    this.managePollResult = ManagePollResult.fromXdr(stream);
  }
}

class OperationResultTrManageCreatePollRequest extends OperationResultTr {
  OperationResultTrManageCreatePollRequest(this.manageCreatePollRequestResult)
      : super(OperationType(OperationType.MANAGE_CREATE_POLL_REQUEST));
  late ManageCreatePollRequestResult manageCreatePollRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageCreatePollRequestResult.toXdr(stream);
  }

  OperationResultTrManageCreatePollRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_CREATE_POLL_REQUEST)) {
    this.manageCreatePollRequestResult =
        ManageCreatePollRequestResult.fromXdr(stream);
  }
}

class OperationResultTrManageVote extends OperationResultTr {
  OperationResultTrManageVote(this.manageVoteResult)
      : super(OperationType(OperationType.MANAGE_VOTE));
  late ManageVoteResult manageVoteResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageVoteResult.toXdr(stream);
  }

  OperationResultTrManageVote.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_VOTE)) {
    this.manageVoteResult = ManageVoteResult.fromXdr(stream);
  }
}

class OperationResultTrManageAccountSpecificRule extends OperationResultTr {
  OperationResultTrManageAccountSpecificRule(
      this.manageAccountSpecificRuleResult)
      : super(OperationType(OperationType.MANAGE_ACCOUNT_SPECIFIC_RULE));
  late ManageAccountSpecificRuleResult manageAccountSpecificRuleResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAccountSpecificRuleResult.toXdr(stream);
  }

  OperationResultTrManageAccountSpecificRule.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.MANAGE_ACCOUNT_SPECIFIC_RULE)) {
    this.manageAccountSpecificRuleResult =
        ManageAccountSpecificRuleResult.fromXdr(stream);
  }
}

class OperationResultTrCancelChangeRoleRequest extends OperationResultTr {
  OperationResultTrCancelChangeRoleRequest(this.cancelChangeRoleRequestResult)
      : super(OperationType(OperationType.CANCEL_CHANGE_ROLE_REQUEST));
  late CancelChangeRoleRequestResult cancelChangeRoleRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelChangeRoleRequestResult.toXdr(stream);
  }

  OperationResultTrCancelChangeRoleRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CANCEL_CHANGE_ROLE_REQUEST)) {
    this.cancelChangeRoleRequestResult =
        CancelChangeRoleRequestResult.fromXdr(stream);
  }
}

class OperationResultTrRemoveAssetPair extends OperationResultTr {
  OperationResultTrRemoveAssetPair(this.removeAssetPairResult)
      : super(OperationType(OperationType.REMOVE_ASSET_PAIR));
  late RemoveAssetPairResult removeAssetPairResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeAssetPairResult.toXdr(stream);
  }

  OperationResultTrRemoveAssetPair.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.REMOVE_ASSET_PAIR)) {
    this.removeAssetPairResult = RemoveAssetPairResult.fromXdr(stream);
  }
}

class OperationResultTrCreateKycRecoveryRequest extends OperationResultTr {
  OperationResultTrCreateKycRecoveryRequest(this.createKYCRecoveryRequestResult)
      : super(OperationType(OperationType.CREATE_KYC_RECOVERY_REQUEST));
  late CreateKYCRecoveryRequestResult createKYCRecoveryRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createKYCRecoveryRequestResult.toXdr(stream);
  }

  OperationResultTrCreateKycRecoveryRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_KYC_RECOVERY_REQUEST)) {
    this.createKYCRecoveryRequestResult =
        CreateKYCRecoveryRequestResult.fromXdr(stream);
  }
}

class OperationResultTrInitiateKycRecovery extends OperationResultTr {
  OperationResultTrInitiateKycRecovery(this.initiateKYCRecoveryResult)
      : super(OperationType(OperationType.INITIATE_KYC_RECOVERY));
  late InitiateKYCRecoveryResult initiateKYCRecoveryResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    initiateKYCRecoveryResult.toXdr(stream);
  }

  OperationResultTrInitiateKycRecovery.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.INITIATE_KYC_RECOVERY)) {
    this.initiateKYCRecoveryResult = InitiateKYCRecoveryResult.fromXdr(stream);
  }
}

class OperationResultTrCreateManageOfferRequest extends OperationResultTr {
  OperationResultTrCreateManageOfferRequest(this.createManageOfferRequestResult)
      : super(OperationType(OperationType.CREATE_MANAGE_OFFER_REQUEST));
  late CreateManageOfferRequestResult createManageOfferRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createManageOfferRequestResult.toXdr(stream);
  }

  OperationResultTrCreateManageOfferRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_MANAGE_OFFER_REQUEST)) {
    this.createManageOfferRequestResult =
        CreateManageOfferRequestResult.fromXdr(stream);
  }
}

class OperationResultTrCreatePaymentRequest extends OperationResultTr {
  OperationResultTrCreatePaymentRequest(this.createPaymentRequestResult)
      : super(OperationType(OperationType.CREATE_PAYMENT_REQUEST));
  late CreatePaymentRequestResult createPaymentRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPaymentRequestResult.toXdr(stream);
  }

  OperationResultTrCreatePaymentRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_PAYMENT_REQUEST)) {
    this.createPaymentRequestResult =
        CreatePaymentRequestResult.fromXdr(stream);
  }
}

class OperationResultTrRemoveAsset extends OperationResultTr {
  OperationResultTrRemoveAsset(this.removeAssetResult)
      : super(OperationType(OperationType.REMOVE_ASSET));
  late RemoveAssetResult removeAssetResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeAssetResult.toXdr(stream);
  }

  OperationResultTrRemoveAsset.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.REMOVE_ASSET)) {
    this.removeAssetResult = RemoveAssetResult.fromXdr(stream);
  }
}

class OperationResultTrOpenSwap extends OperationResultTr {
  OperationResultTrOpenSwap(this.openSwapResult)
      : super(OperationType(OperationType.OPEN_SWAP));
  late OpenSwapResult openSwapResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    openSwapResult.toXdr(stream);
  }

  OperationResultTrOpenSwap.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.OPEN_SWAP)) {
    this.openSwapResult = OpenSwapResult.fromXdr(stream);
  }
}

class OperationResultTrCloseSwap extends OperationResultTr {
  OperationResultTrCloseSwap(this.closeSwapResult)
      : super(OperationType(OperationType.CLOSE_SWAP));
  late CloseSwapResult closeSwapResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    closeSwapResult.toXdr(stream);
  }

  OperationResultTrCloseSwap.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CLOSE_SWAP)) {
    this.closeSwapResult = CloseSwapResult.fromXdr(stream);
  }
}

class OperationResultTrCreateRedemptionRequest extends OperationResultTr {
  OperationResultTrCreateRedemptionRequest(this.createRedemptionRequestResult)
      : super(OperationType(OperationType.CREATE_REDEMPTION_REQUEST));
  late CreateRedemptionRequestResult createRedemptionRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createRedemptionRequestResult.toXdr(stream);
  }

  OperationResultTrCreateRedemptionRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_REDEMPTION_REQUEST)) {
    this.createRedemptionRequestResult =
        CreateRedemptionRequestResult.fromXdr(stream);
  }
}

class OperationResultTrCreateData extends OperationResultTr {
  OperationResultTrCreateData(this.createDataResult)
      : super(OperationType(OperationType.CREATE_DATA));
  late CreateDataResult createDataResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataResult.toXdr(stream);
  }

  OperationResultTrCreateData.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_DATA)) {
    this.createDataResult = CreateDataResult.fromXdr(stream);
  }
}

class OperationResultTrUpdateData extends OperationResultTr {
  OperationResultTrUpdateData(this.updateDataResult)
      : super(OperationType(OperationType.UPDATE_DATA));
  late UpdateDataResult updateDataResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateDataResult.toXdr(stream);
  }

  OperationResultTrUpdateData.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.UPDATE_DATA)) {
    this.updateDataResult = UpdateDataResult.fromXdr(stream);
  }
}

class OperationResultTrRemoveData extends OperationResultTr {
  OperationResultTrRemoveData(this.removeDataResult)
      : super(OperationType(OperationType.REMOVE_DATA));
  late RemoveDataResult removeDataResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeDataResult.toXdr(stream);
  }

  OperationResultTrRemoveData.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.REMOVE_DATA)) {
    this.removeDataResult = RemoveDataResult.fromXdr(stream);
  }
}

class OperationResultTrCreateDataCreationRequest extends OperationResultTr {
  OperationResultTrCreateDataCreationRequest(
      this.createDataCreationRequestResult)
      : super(OperationType(OperationType.CREATE_DATA_CREATION_REQUEST));
  late CreateDataCreationRequestResult createDataCreationRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataCreationRequestResult.toXdr(stream);
  }

  OperationResultTrCreateDataCreationRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_DATA_CREATION_REQUEST)) {
    this.createDataCreationRequestResult =
        CreateDataCreationRequestResult.fromXdr(stream);
  }
}

class OperationResultTrCancelDataCreationRequest extends OperationResultTr {
  OperationResultTrCancelDataCreationRequest(
      this.cancelDataCreationRequestResult)
      : super(OperationType(OperationType.CANCEL_DATA_CREATION_REQUEST));
  late CancelDataCreationRequestResult cancelDataCreationRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDataCreationRequestResult.toXdr(stream);
  }

  OperationResultTrCancelDataCreationRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CANCEL_DATA_CREATION_REQUEST)) {
    this.cancelDataCreationRequestResult =
        CancelDataCreationRequestResult.fromXdr(stream);
  }
}

class OperationResultTrCreateDataUpdateRequest extends OperationResultTr {
  OperationResultTrCreateDataUpdateRequest(this.createDataUpdateRequestResult)
      : super(OperationType(OperationType.CREATE_DATA_UPDATE_REQUEST));
  late CreateDataUpdateRequestResult createDataUpdateRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataUpdateRequestResult.toXdr(stream);
  }

  OperationResultTrCreateDataUpdateRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_DATA_UPDATE_REQUEST)) {
    this.createDataUpdateRequestResult =
        CreateDataUpdateRequestResult.fromXdr(stream);
  }
}

class OperationResultTrCreateDataRemoveRequest extends OperationResultTr {
  OperationResultTrCreateDataRemoveRequest(this.createDataRemoveRequestResult)
      : super(OperationType(OperationType.CREATE_DATA_REMOVE_REQUEST));
  late CreateDataRemoveRequestResult createDataRemoveRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataRemoveRequestResult.toXdr(stream);
  }

  OperationResultTrCreateDataRemoveRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CREATE_DATA_REMOVE_REQUEST)) {
    this.createDataRemoveRequestResult =
        CreateDataRemoveRequestResult.fromXdr(stream);
  }
}

class OperationResultTrCancelDataUpdateRequest extends OperationResultTr {
  OperationResultTrCancelDataUpdateRequest(this.cancelDataUpdateRequestResult)
      : super(OperationType(OperationType.CANCEL_DATA_UPDATE_REQUEST));
  late CancelDataUpdateRequestResult cancelDataUpdateRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDataUpdateRequestResult.toXdr(stream);
  }

  OperationResultTrCancelDataUpdateRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CANCEL_DATA_UPDATE_REQUEST)) {
    this.cancelDataUpdateRequestResult =
        CancelDataUpdateRequestResult.fromXdr(stream);
  }
}

class OperationResultTrCancelDataRemoveRequest extends OperationResultTr {
  OperationResultTrCancelDataRemoveRequest(this.cancelDataRemoveRequestResult)
      : super(OperationType(OperationType.CANCEL_DATA_REMOVE_REQUEST));
  late CancelDataRemoveRequestResult cancelDataRemoveRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDataRemoveRequestResult.toXdr(stream);
  }

  OperationResultTrCancelDataRemoveRequest.fromXdr(XdrDataInputStream stream)
      : super(OperationType(OperationType.CANCEL_DATA_REMOVE_REQUEST)) {
    this.cancelDataRemoveRequestResult =
        CancelDataRemoveRequestResult.fromXdr(stream);
  }
}

class OperationResultTrCreateDeferredPaymentCreationRequest
    extends OperationResultTr {
  OperationResultTrCreateDeferredPaymentCreationRequest(
      this.createDeferredPaymentCreationRequestResult)
      : super(OperationType(
            OperationType.CREATE_DEFERRED_PAYMENT_CREATION_REQUEST));
  late CreateDeferredPaymentCreationRequestResult
      createDeferredPaymentCreationRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDeferredPaymentCreationRequestResult.toXdr(stream);
  }

  OperationResultTrCreateDeferredPaymentCreationRequest.fromXdr(
      XdrDataInputStream stream)
      : super(OperationType(
            OperationType.CREATE_DEFERRED_PAYMENT_CREATION_REQUEST)) {
    this.createDeferredPaymentCreationRequestResult =
        CreateDeferredPaymentCreationRequestResult.fromXdr(stream);
  }
}

class OperationResultTrCancelDeferredPaymentCreationRequest
    extends OperationResultTr {
  OperationResultTrCancelDeferredPaymentCreationRequest(
      this.cancelDeferredPaymentCreationRequestResult)
      : super(OperationType(
            OperationType.CANCEL_DEFERRED_PAYMENT_CREATION_REQUEST));
  late CancelDeferredPaymentCreationRequestResult
      cancelDeferredPaymentCreationRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDeferredPaymentCreationRequestResult.toXdr(stream);
  }

  OperationResultTrCancelDeferredPaymentCreationRequest.fromXdr(
      XdrDataInputStream stream)
      : super(OperationType(
            OperationType.CANCEL_DEFERRED_PAYMENT_CREATION_REQUEST)) {
    this.cancelDeferredPaymentCreationRequestResult =
        CancelDeferredPaymentCreationRequestResult.fromXdr(stream);
  }
}

class OperationResultTrCreateCloseDeferredPaymentRequest
    extends OperationResultTr {
  OperationResultTrCreateCloseDeferredPaymentRequest(
      this.createCloseDeferredPaymentRequestResult)
      : super(
            OperationType(OperationType.CREATE_CLOSE_DEFERRED_PAYMENT_REQUEST));
  late CreateCloseDeferredPaymentRequestResult
      createCloseDeferredPaymentRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createCloseDeferredPaymentRequestResult.toXdr(stream);
  }

  OperationResultTrCreateCloseDeferredPaymentRequest.fromXdr(
      XdrDataInputStream stream)
      : super(OperationType(
            OperationType.CREATE_CLOSE_DEFERRED_PAYMENT_REQUEST)) {
    this.createCloseDeferredPaymentRequestResult =
        CreateCloseDeferredPaymentRequestResult.fromXdr(stream);
  }
}

class OperationResultTrCancelCloseDeferredPaymentRequest
    extends OperationResultTr {
  OperationResultTrCancelCloseDeferredPaymentRequest(
      this.cancelCloseDeferredPaymentRequestResult)
      : super(
            OperationType(OperationType.CANCEL_CLOSE_DEFERRED_PAYMENT_REQUEST));
  late CancelCloseDeferredPaymentRequestResult
      cancelCloseDeferredPaymentRequestResult;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelCloseDeferredPaymentRequestResult.toXdr(stream);
  }

  OperationResultTrCancelCloseDeferredPaymentRequest.fromXdr(
      XdrDataInputStream stream)
      : super(OperationType(
            OperationType.CANCEL_CLOSE_DEFERRED_PAYMENT_REQUEST)) {
    this.cancelCloseDeferredPaymentRequestResult =
        CancelCloseDeferredPaymentRequestResult.fromXdr(stream);
  }
}

class TransactionResultCode extends XdrEncodable {
  static const txSUCCESS = 0;
  static const txFAILED = -1;
  static const txTOO_EARLY = -2;
  static const txTOO_LATE = -3;
  static const txMISSING_OPERATION = -4;
  static const txBAD_AUTH = -5;
  static const txNO_ACCOUNT = -6;
  static const txBAD_AUTH_EXTRA = -7;
  static const txINTERNAL_ERROR = -8;
  static const txACCOUNT_BLOCKED = -9;
  static const txDUPLICATION = -10;
  static const txINSUFFICIENT_FEE = -11;
  static const txSOURCE_UNDERFUNDED = -12;
  static const txCOMMISSION_LINE_FULL = -13;
  static const txFEE_INCORRECT_PRECISION = -14;
  static const txNO_ROLE_PERMISSION = -15;
  late int value;

  TransactionResultCode(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  TransactionResultCode.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct OperationFee
//  {
//      OperationType operationType;
//      uint64 amount;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class OperationFee extends XdrEncodable {
  late OperationType operationType;
  late UINT64 amount;
  late OperationFeeExt ext;

  OperationFee(
    this.operationType,
    this.amount,
    this.ext,
  );

  OperationFee.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.operationType = OperationType.fromXdr(stream);
    this.amount = longFromXdr(stream);
    this.ext = OperationFeeExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    operationType.toXdr(stream);
    amount.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class OperationFeeExt extends XdrEncodable {
  late LedgerVersion discriminant;

  OperationFeeExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static OperationFeeExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return OperationFeeExtEmptyVersion.fromXdr(stream);
    }

    return OperationFeeExtEmptyVersion.fromXdr(stream);
  }
}

class OperationFeeExtEmptyVersion extends OperationFeeExt {
  OperationFeeExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  OperationFeeExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}
// === xdr source ============================================================

//  struct TransactionResult
//  {
//      int64 feeCharged; // actual fee charged for the transaction
//
//      union switch (TransactionResultCode code)
//      {
//      case txSUCCESS:
//      case txFAILED:
//          OperationResult results<>;
//      case txNO_ROLE_PERMISSION:
//          AccountRuleRequirement requirement;
//      default:
//          void;
//      }
//      result;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class TransactionResult extends XdrEncodable {
  late INT64 feeCharged;
  late TransactionResultResult result;
  late TransactionResultExt ext;

  TransactionResult(
    this.feeCharged,
    this.result,
    this.ext,
  );

  TransactionResult.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.feeCharged = longFromXdr(stream);
    this.result = TransactionResultResult.fromXdr(stream);
    this.ext = TransactionResultExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    feeCharged.toXdr(stream);
    result.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class TransactionResultResult extends XdrEncodable {
  late TransactionResultCode discriminant;

  TransactionResultResult(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static TransactionResultResult fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case TransactionResultCode.txSUCCESS:
        return TransactionResultResultTxsuccess.fromXdr(stream);
      case TransactionResultCode.txFAILED:
        return TransactionResultResultTxfailed.fromXdr(stream);
      case TransactionResultCode.txNO_ROLE_PERMISSION:
        return TransactionResultResultTxnoRolePermission.fromXdr(stream);
    }

    return TransactionResultResultTxsuccess.fromXdr(stream);
  }
}

class TransactionResultResultTxsuccess extends TransactionResultResult {
  TransactionResultResultTxsuccess(this.results)
      : super(TransactionResultCode(TransactionResultCode.txSUCCESS));
  late List<OperationResult> results;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    results.length.toXdr(stream);
    results.forEach((element) {
      element.toXdr(stream);
    });
  }

  TransactionResultResultTxsuccess.fromXdr(XdrDataInputStream stream)
      : super(TransactionResultCode(TransactionResultCode.txSUCCESS)) {
    var length = 0;
    length = intFromXdr(stream);
    results = <OperationResult>[];
    while (length > 0) {
      results.add(OperationResult.fromXdr(stream));
      length--;
    }
  }
}

class TransactionResultResultTxfailed extends TransactionResultResult {
  TransactionResultResultTxfailed(this.results)
      : super(TransactionResultCode(TransactionResultCode.txFAILED));
  late List<OperationResult> results;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    results.length.toXdr(stream);
    results.forEach((element) {
      element.toXdr(stream);
    });
  }

  TransactionResultResultTxfailed.fromXdr(XdrDataInputStream stream)
      : super(TransactionResultCode(TransactionResultCode.txFAILED)) {
    var length = 0;
    length = intFromXdr(stream);
    results = <OperationResult>[];
    while (length > 0) {
      results.add(OperationResult.fromXdr(stream));
      length--;
    }
  }
}

class TransactionResultResultTxnoRolePermission
    extends TransactionResultResult {
  TransactionResultResultTxnoRolePermission(this.requirement)
      : super(
            TransactionResultCode(TransactionResultCode.txNO_ROLE_PERMISSION));
  late AccountRuleRequirement requirement;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    requirement.toXdr(stream);
  }

  TransactionResultResultTxnoRolePermission.fromXdr(XdrDataInputStream stream)
      : super(
            TransactionResultCode(TransactionResultCode.txNO_ROLE_PERMISSION)) {
    this.requirement = AccountRuleRequirement.fromXdr(stream);
  }
}

abstract class TransactionResultExt extends XdrEncodable {
  late LedgerVersion discriminant;

  TransactionResultExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static TransactionResultExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return TransactionResultExtEmptyVersion.fromXdr(stream);
    }

    return TransactionResultExtEmptyVersion.fromXdr(stream);
  }
}

class TransactionResultExtEmptyVersion extends TransactionResultExt {
  TransactionResultExtEmptyVersion()
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  TransactionResultExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class LedgerVersion extends XdrEncodable {
  static const EMPTY_VERSION = 0;
  static const CHECK_SET_FEE_ACCOUNT_EXISTING = 1;
  static const FIX_PAYMENT_STATS = 2;
  static const ADD_INVEST_FEE = 3;
  static const ADD_SALE_WHITELISTS = 4;
  static const ASSET_PAIR_RESTRICTIONS = 5;
  static const FIX_CHANGE_TO_NON_EXISTING_ROLE = 6;
  static const FIX_REVERSE_SALE_PAIR = 7;
  static const FIX_NOT_CHECKING_SET_TASKS_PERMISSIONS = 8;
  static const UNLIMITED_ADMIN_COUNT = 9;
  static const FIX_AML_ALERT_ERROR_CODES = 10;
  static const FIX_EXT_SYS_ACC_EXPIRATION_TIME = 11;
  static const FIX_CHANGE_ROLE_REJECT_TASKS = 12;
  static const FIX_SAME_ASSET_PAIR = 13;
  static const ATOMIC_SWAP_RETURNING = 14;
  static const FIX_INVEST_FEE = 15;
  static const ADD_ACC_SPECIFIC_RULE_RESOURCE = 16;
  static const FIX_SIGNER_CHANGES_REMOVE = 17;
  static const FIX_DEPOSIT_STATS = 18;
  static const FIX_CREATE_KYC_RECOVERY_PERMISSIONS = 19;
  static const CLEAR_DATABASE_CACHE = 20;
  static const FIX_ISSUANCE_REVIEWER = 21;
  static const MARK_ASSET_AS_DELETED = 22;
  static const FIX_MAX_SUBJECT_SIZE = 23;
  static const FIX_MOVEMENT_REVIEW = 24;
  static const FIX_SIGNATURE_CHECK = 25;
  static const FIX_AUTOREVIEW = 26;
  static const MOVEMENT_REQUESTS_DETAILS = 27;
  static const FIX_CRASH_CORE_WITH_PAYMENT = 28;
  static const FIX_INVEST_TO_IMMEDIATE_SALE = 29;
  static const FIX_PAYMENT_TASKS_WILDCARD_VALUE = 30;
  static const FIX_CHANGE_ROLE_REQUEST_REQUESTOR = 31;
  late int value;

  LedgerVersion(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  LedgerVersion.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class EmptyExt extends XdrEncodable {
  late LedgerVersion discriminant;

  EmptyExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static EmptyExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return EmptyExtEmptyVersion.fromXdr(stream);
    }

    return EmptyExtEmptyVersion.fromXdr(stream);
  }
}

class EmptyExtEmptyVersion extends EmptyExt {
  EmptyExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  EmptyExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

typedef HASH = XdrByteArrayFixed32;
typedef UINT256 = XdrByteArrayFixed32;
typedef UINT32 = int;
typedef INT32 = int;
typedef UINT64 = Int64;
typedef INT64 = Int64;

class CryptoKeyType extends XdrEncodable {
  static const KEY_TYPE_ED25519 = 0;
  late int value;

  CryptoKeyType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  CryptoKeyType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

class PublicKeyType extends XdrEncodable {
  static const PUBLIC_KEY_TYPE_ED25519 = 0;
  late int value;

  PublicKeyType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  PublicKeyType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

abstract class PublicKey extends XdrEncodable {
  late CryptoKeyType discriminant;

  PublicKey(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static PublicKey fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case CryptoKeyType.KEY_TYPE_ED25519:
        return PublicKeyKeyTypeEd25519.fromXdr(stream);
    }

    return PublicKeyKeyTypeEd25519.fromXdr(stream);
  }
}

class PublicKeyKeyTypeEd25519 extends PublicKey {
  PublicKeyKeyTypeEd25519(this.ed25519)
      : super(CryptoKeyType(CryptoKeyType.KEY_TYPE_ED25519));
  late UINT256 ed25519;

  @override
  toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ed25519.toXdr(stream);
  }

  PublicKeyKeyTypeEd25519.fromXdr(XdrDataInputStream stream)
      : super(CryptoKeyType(CryptoKeyType.KEY_TYPE_ED25519)) {
    var length = 0;
    this.ed25519 = UINT256.fromXdr(stream);
  }
}

class LedgerEntryType extends XdrEncodable {
  static const ANY = 1;
  static const ACCOUNT = 2;
  static const SIGNER = 3;
  static const FEE = 4;
  static const BALANCE = 5;
  static const PAYMENT_REQUEST = 6;
  static const ASSET = 7;
  static const REFERENCE_ENTRY = 8;
  static const STATISTICS = 9;
  static const TRUST = 10;
  static const ACCOUNT_LIMITS = 11;
  static const ASSET_PAIR = 12;
  static const OFFER_ENTRY = 13;
  static const REVIEWABLE_REQUEST = 15;
  static const EXTERNAL_SYSTEM_ACCOUNT_ID = 16;
  static const SALE = 17;
  static const ACCOUNT_KYC = 18;
  static const EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY = 19;
  static const KEY_VALUE = 20;
  static const LIMITS_V2 = 22;
  static const STATISTICS_V2 = 23;
  static const PENDING_STATISTICS = 24;
  static const CONTRACT = 25;
  static const ACCOUNT_ROLE = 26;
  static const ACCOUNT_RULE = 27;
  static const ATOMIC_SWAP_ASK = 28;
  static const TRANSACTION = 29;
  static const SIGNER_RULE = 30;
  static const SIGNER_ROLE = 31;
  static const STAMP = 32;
  static const LICENSE = 33;
  static const POLL = 34;
  static const VOTE = 35;
  static const ACCOUNT_SPECIFIC_RULE = 36;
  static const INITIATE_KYC_RECOVERY = 37;
  static const SWAP = 38;
  static const DATA = 39;
  static const CUSTOM = 40;
  static const DEFERRED_PAYMENT = 41;
  late int value;

  LedgerEntryType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  LedgerEntryType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}

typedef SIGNATURE = Uint8List;
typedef SIGNATUREHINT = XdrByteArrayFixed4;
typedef NODEID = PublicKey;
// === xdr source ============================================================

//  struct Curve25519Secret
//  {
//          opaque key[32];
//  };

//  ===========================================================================
class Curve25519Secret extends XdrEncodable {
  late XdrByteArrayFixed32 key;

  Curve25519Secret(
    this.key,
  );

  Curve25519Secret.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.key = XdrByteArrayFixed32.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    key.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct Curve25519Public
//  {
//          opaque key[32];
//  };

//  ===========================================================================
class Curve25519Public extends XdrEncodable {
  late XdrByteArrayFixed32 key;

  Curve25519Public(
    this.key,
  );

  Curve25519Public.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.key = XdrByteArrayFixed32.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    key.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct HmacSha256Key
//  {
//          opaque key[32];
//  };

//  ===========================================================================
class HmacSha256Key extends XdrEncodable {
  late XdrByteArrayFixed32 key;

  HmacSha256Key(
    this.key,
  );

  HmacSha256Key.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.key = XdrByteArrayFixed32.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    key.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct HmacSha256Mac
//  {
//          opaque mac[32];
//  };

//  ===========================================================================
class HmacSha256Mac extends XdrEncodable {
  late XdrByteArrayFixed32 mac;

  HmacSha256Mac(
    this.mac,
  );

  HmacSha256Mac.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.mac = XdrByteArrayFixed32.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    mac.toXdr(stream);
  }
}

typedef ACCOUNTID = PublicKey;
typedef BALANCEID = PublicKey;
typedef THRESHOLDS = XdrByteArrayFixed4;
typedef STRING32 = String;
typedef STRING64 = String;
typedef STRING256 = String;
typedef LONGSTRING = String;
typedef ASSETCODE = String;
typedef SALT = UINT64;
typedef DATAVALUE = Uint8List;
// === xdr source ============================================================

//  //: `Fee` is used to unite fixed and percent fee amounts
//  struct Fee {
//      //: Fixed amount to pay for the operation
//  	uint64 fixed;
//  	//: Part of the managed amount in percents
//  	uint64 percent;
//
//      //: reserved for future use
//      union switch(LedgerVersion v)
//      {
//          case EMPTY_VERSION:
//              void;
//      }
//      ext;
//  };

//  ===========================================================================
class Fee extends XdrEncodable {
  late UINT64 fixed;
  late UINT64 percent;
  late FeeExt ext;

  Fee(
    this.fixed,
    this.percent,
    this.ext,
  );

  Fee.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.fixed = longFromXdr(stream);
    this.percent = longFromXdr(stream);
    this.ext = FeeExt.fromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    fixed.toXdr(stream);
    percent.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class FeeExt extends XdrEncodable {
  late LedgerVersion discriminant;

  FeeExt(this.discriminant);

  @override
  toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }

  static FeeExt fromXdr(XdrDataInputStream stream) {
    var discriminant = intFromXdr(stream);

    switch (discriminant) {
      case LedgerVersion.EMPTY_VERSION:
        return FeeExtEmptyVersion.fromXdr(stream);
    }

    return FeeExtEmptyVersion.fromXdr(stream);
  }
}

class FeeExtEmptyVersion extends FeeExt {
  FeeExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));

  FeeExtEmptyVersion.fromXdr(XdrDataInputStream stream)
      : super(LedgerVersion(LedgerVersion.EMPTY_VERSION)) {}
}

class OperationType extends XdrEncodable {
  static const CREATE_ACCOUNT = 1;
  static const CREATE_ISSUANCE_REQUEST = 3;
  static const SET_FEES = 5;
  static const CREATE_WITHDRAWAL_REQUEST = 7;
  static const MANAGE_BALANCE = 9;
  static const MANAGE_ASSET = 11;
  static const CREATE_PREISSUANCE_REQUEST = 12;
  static const MANAGE_LIMITS = 13;
  static const MANAGE_ASSET_PAIR = 15;
  static const MANAGE_OFFER = 16;
  static const MANAGE_INVOICE_REQUEST = 17;
  static const REVIEW_REQUEST = 18;
  static const CREATE_SALE_REQUEST = 19;
  static const CHECK_SALE_STATE = 20;
  static const CREATE_AML_ALERT = 21;
  static const CREATE_CHANGE_ROLE_REQUEST = 22;
  static const PAYMENT = 23;
  static const MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY = 24;
  static const BIND_EXTERNAL_SYSTEM_ACCOUNT_ID = 25;
  static const MANAGE_SALE = 26;
  static const MANAGE_KEY_VALUE = 27;
  static const CREATE_MANAGE_LIMITS_REQUEST = 28;
  static const MANAGE_CONTRACT_REQUEST = 29;
  static const MANAGE_CONTRACT = 30;
  static const CANCEL_SALE_REQUEST = 31;
  static const PAYOUT = 32;
  static const MANAGE_ACCOUNT_ROLE = 33;
  static const MANAGE_ACCOUNT_RULE = 34;
  static const CREATE_ATOMIC_SWAP_ASK_REQUEST = 35;
  static const CANCEL_ATOMIC_SWAP_ASK = 36;
  static const CREATE_ATOMIC_SWAP_BID_REQUEST = 37;
  static const MANAGE_SIGNER = 38;
  static const MANAGE_SIGNER_ROLE = 39;
  static const MANAGE_SIGNER_RULE = 40;
  static const STAMP = 41;
  static const LICENSE = 42;
  static const MANAGE_CREATE_POLL_REQUEST = 43;
  static const MANAGE_POLL = 44;
  static const MANAGE_VOTE = 45;
  static const MANAGE_ACCOUNT_SPECIFIC_RULE = 46;
  static const CANCEL_CHANGE_ROLE_REQUEST = 47;
  static const INITIATE_KYC_RECOVERY = 48;
  static const CREATE_KYC_RECOVERY_REQUEST = 49;
  static const REMOVE_ASSET_PAIR = 50;
  static const CREATE_MANAGE_OFFER_REQUEST = 51;
  static const CREATE_PAYMENT_REQUEST = 52;
  static const REMOVE_ASSET = 53;
  static const OPEN_SWAP = 54;
  static const CLOSE_SWAP = 55;
  static const CREATE_REDEMPTION_REQUEST = 56;
  static const CREATE_DATA = 57;
  static const UPDATE_DATA = 58;
  static const REMOVE_DATA = 59;
  static const CREATE_DATA_CREATION_REQUEST = 60;
  static const CANCEL_DATA_CREATION_REQUEST = 61;
  static const CREATE_DATA_UPDATE_REQUEST = 62;
  static const CREATE_DATA_REMOVE_REQUEST = 63;
  static const CANCEL_DATA_UPDATE_REQUEST = 64;
  static const CANCEL_DATA_REMOVE_REQUEST = 65;
  static const CREATE_DEFERRED_PAYMENT_CREATION_REQUEST = 66;
  static const CANCEL_DEFERRED_PAYMENT_CREATION_REQUEST = 67;
  static const CREATE_CLOSE_DEFERRED_PAYMENT_REQUEST = 68;
  static const CANCEL_CLOSE_DEFERRED_PAYMENT_REQUEST = 69;
  late int value;

  OperationType(this.value);

  @override
  toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

  OperationType.fromXdr(XdrDataInputStream stream) {
    this.value = intFromXdr(stream);
  }
}
// === xdr source ============================================================

//  struct DecoratedSignature
//  {
//      SignatureHint hint;  // last 4 bytes of the public key, used as a hint
//      Signature signature; // actual signature
//  };

//  ===========================================================================
class DecoratedSignature extends XdrEncodable {
  late SIGNATUREHINT hint;
  late SIGNATURE signature;

  DecoratedSignature(
    this.hint,
    this.signature,
  );

  DecoratedSignature.fromXdr(XdrDataInputStream stream) {
    var length = 0;
    this.hint = SIGNATUREHINT.fromXdr(stream);
    this.signature = opaqueFromXdr(stream);
  }

  @override
  toXdr(XdrDataOutputStream stream) {
    hint.toXdr(stream);
    signature.toXdr(stream);
  }
}
