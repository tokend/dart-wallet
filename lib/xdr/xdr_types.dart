// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import 'package:stellar/stellar.dart';

import 'utils/dependencies.dart';

typedef VALUE = Uint8List;
// === xdr source ============================================================

//  struct SCPBallot
//  {
//      uint32 counter; // n
//      Value value;    // x
//  };

//  ===========================================================================
class SCPBallot extends XdrEncodable  {
  UINT32 counter;
  VALUE value;

  SCPBallot(
      this.counter,
      this.value,
      );

  @override toXdr(XdrDataOutputStream stream) {
    counter.toXdr(stream);
    value.toXdr(stream);
  }
}
class SCPStatementType extends XdrEncodable {
  static const PREPARE = 0;
  static const CONFIRM = 1;
  static const EXTERNALIZE = 2;
  static const NOMINATE = 3;
  int value;
  SCPStatementType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct SCPNomination
//  {
//      Hash quorumSetHash; // D
//      Value votes<>;      // X
//      Value accepted<>;   // Y
//  };

//  ===========================================================================
class SCPNomination extends XdrEncodable  {
  HASH quorumSetHash;
  List<VALUE> votes;
  List<VALUE> accepted;

  SCPNomination(
      this.quorumSetHash,
      this.votes,
      this.accepted,
      );

  @override toXdr(XdrDataOutputStream stream) {
    quorumSetHash.toXdr(stream);
    votes.length.toXdr(stream);
    votes.forEach ((element) {
      element.toXdr(stream);
    });
    accepted.length.toXdr(stream);
    accepted.forEach ((element) {
      element.toXdr(stream);
    });
  }
}
// === xdr source ============================================================

//  struct SCPStatement
//  {
//      NodeID nodeID;    // v
//      uint64 slotIndex; // i
//
//      union switch (SCPStatementType type)
//      {
//      case PREPARE:
//          struct
//          {
//              Hash quorumSetHash;       // D
//              SCPBallot ballot;         // b
//              SCPBallot* prepared;      // p
//              SCPBallot* preparedPrime; // p'
//              uint32 nC;                // c.n
//              uint32 nH;                // h.n
//          } prepare;
//      case CONFIRM:
//          struct
//          {
//              SCPBallot ballot;   // b
//              uint32 nPrepared;   // p.n
//              uint32 nCommit;     // c.n
//              uint32 nH;          // h.n
//              Hash quorumSetHash; // D
//          } confirm;
//      case EXTERNALIZE:
//          struct
//          {
//              SCPBallot commit;         // c
//              uint32 nH;                // h.n
//              Hash commitQuorumSetHash; // D used before EXTERNALIZE
//          } externalize;
//      case NOMINATE:
//          SCPNomination nominate;
//      }
//      pledges;
//  };

//  ===========================================================================
class SCPStatement extends XdrEncodable  {
  NODEID nodeID;
  UINT64 slotIndex;
  SCPStatementPledges pledges;

  SCPStatement(
      this.nodeID,
      this.slotIndex,
      this.pledges,
      );

  @override toXdr(XdrDataOutputStream stream) {
    nodeID.toXdr(stream);
    slotIndex.toXdr(stream);
    pledges.toXdr(stream);
  }
}
abstract class SCPStatementPledges extends XdrEncodable {
  SCPStatementType discriminant;
  SCPStatementPledges(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SCPStatementPledgesPrepare extends SCPStatementPledges {
  SCPStatementPledgesPrepare(this.prepare) : super(SCPStatementType(SCPStatementType.PREPARE));
  late SCPStatementPreparePrepare prepare;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    prepare.toXdr(stream);
  }
}

class SCPStatementPledgesConfirm extends SCPStatementPledges {
  SCPStatementPledgesConfirm(this.confirm) : super(SCPStatementType(SCPStatementType.CONFIRM));
  late SCPStatementConfirmConfirm confirm;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    confirm.toXdr(stream);
  }
}

class SCPStatementPledgesExternalize extends SCPStatementPledges {
  SCPStatementPledgesExternalize(this.externalize) : super(SCPStatementType(SCPStatementType.EXTERNALIZE));
  late SCPStatementExternalizeExternalize externalize;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    externalize.toXdr(stream);
  }
}

class SCPStatementPledgesNominate extends SCPStatementPledges {
  SCPStatementPledgesNominate(this.nominate) : super(SCPStatementType(SCPStatementType.NOMINATE));
  late SCPNomination nominate;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    nominate.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              Hash quorumSetHash;       // D
//              SCPBallot ballot;         // b
//              SCPBallot* prepared;      // p
//              SCPBallot* preparedPrime; // p'
//              uint32 nC;                // c.n
//              uint32 nH;                // h.n
//          }

//  ===========================================================================
class SCPStatementPreparePrepare extends XdrEncodable  {
  HASH quorumSetHash;
  SCPBallot ballot;
  SCPBallot? prepared;
  SCPBallot? preparedPrime;
  UINT32 nC;
  UINT32 nH;

  SCPStatementPreparePrepare(
      this.quorumSetHash,
      this.ballot,
      this.prepared,
      this.preparedPrime,
      this.nC,
      this.nH,
      );

  @override toXdr(XdrDataOutputStream stream) {
    quorumSetHash.toXdr(stream);
    ballot.toXdr(stream);
    if (prepared != null) {
      true.toXdr(stream);
      prepared?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    if (preparedPrime != null) {
      true.toXdr(stream);
      preparedPrime?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    nC.toXdr(stream);
    nH.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              SCPBallot ballot;   // b
//              uint32 nPrepared;   // p.n
//              uint32 nCommit;     // c.n
//              uint32 nH;          // h.n
//              Hash quorumSetHash; // D
//          }

//  ===========================================================================
class SCPStatementConfirmConfirm extends XdrEncodable  {
  SCPBallot ballot;
  UINT32 nPrepared;
  UINT32 nCommit;
  UINT32 nH;
  HASH quorumSetHash;

  SCPStatementConfirmConfirm(
      this.ballot,
      this.nPrepared,
      this.nCommit,
      this.nH,
      this.quorumSetHash,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ballot.toXdr(stream);
    nPrepared.toXdr(stream);
    nCommit.toXdr(stream);
    nH.toXdr(stream);
    quorumSetHash.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              SCPBallot commit;         // c
//              uint32 nH;                // h.n
//              Hash commitQuorumSetHash; // D used before EXTERNALIZE
//          }

//  ===========================================================================
class SCPStatementExternalizeExternalize extends XdrEncodable  {
  SCPBallot commit;
  UINT32 nH;
  HASH commitQuorumSetHash;

  SCPStatementExternalizeExternalize(
      this.commit,
      this.nH,
      this.commitQuorumSetHash,
      );

  @override toXdr(XdrDataOutputStream stream) {
    commit.toXdr(stream);
    nH.toXdr(stream);
    commitQuorumSetHash.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct SCPEnvelope
//  {
//      SCPStatement statement;
//      Signature signature;
//  };

//  ===========================================================================
class SCPEnvelope extends XdrEncodable  {
  SCPStatement statement;
  SIGNATURE signature;

  SCPEnvelope(
      this.statement,
      this.signature,
      );

  @override toXdr(XdrDataOutputStream stream) {
    statement.toXdr(stream);
    signature.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct SCPQuorumSet
//  {
//      uint32 threshold;
//      PublicKey validators<>;
//      SCPQuorumSet innerSets<>;
//  };

//  ===========================================================================
class SCPQuorumSet extends XdrEncodable  {
  UINT32 threshold;
  List<PublicKey> validators;
  List<SCPQuorumSet> innerSets;

  SCPQuorumSet(
      this.threshold,
      this.validators,
      this.innerSets,
      );

  @override toXdr(XdrDataOutputStream stream) {
    threshold.toXdr(stream);
    validators.length.toXdr(stream);
    validators.forEach ((element) {
      element.toXdr(stream);
    });
    innerSets.length.toXdr(stream);
    innerSets.forEach ((element) {
      element.toXdr(stream);
    });
  }
}
// === xdr source ============================================================

//  struct AccountKYCEntry
//  {
//      AccountID accountID;
//      longstring KYCData;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AccountKYCEntry extends XdrEncodable  {
  ACCOUNTID accountID;
  LONGSTRING KYCData;
  AccountKYCEntryExt ext;

  AccountKYCEntry(
      this.accountID,
      this.KYCData,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    KYCData.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AccountKYCEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  AccountKYCEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AccountKYCEntryExtEmptyVersion extends AccountKYCEntryExt {
  AccountKYCEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct AccountLimitsEntry
//  {
//      AccountID accountID;
//      Limits limits;
//
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AccountLimitsEntry extends XdrEncodable  {
  ACCOUNTID accountID;
  Limits limits;
  AccountLimitsEntryExt ext;

  AccountLimitsEntry(
      this.accountID,
      this.limits,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    limits.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AccountLimitsEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  AccountLimitsEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AccountLimitsEntryExtEmptyVersion extends AccountLimitsEntryExt {
  AccountLimitsEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct AccountRoleEntry
//  {
//      uint64 id;
//
//      uint64 ruleIDs<>;
//
//      longstring details;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AccountRoleEntry extends XdrEncodable  {
  UINT64 id;
  List<UINT64> ruleIDs;
  LONGSTRING details;
  AccountRoleEntryExt ext;

  AccountRoleEntry(
      this.id,
      this.ruleIDs,
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ruleIDs.length.toXdr(stream);
    ruleIDs.forEach ((element) {
      element.toXdr(stream);
    });
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AccountRoleEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  AccountRoleEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AccountRoleEntryExtEmptyVersion extends AccountRoleEntryExt {
  AccountRoleEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct AccountRuleEntry
//  {
//      uint64 id;
//
//      AccountRuleResource resource;
//      AccountRuleAction action;
//
//      bool forbids;
//
//      longstring details;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AccountRuleEntry extends XdrEncodable  {
  UINT64 id;
  AccountRuleResource resource;
  AccountRuleAction action;
  bool forbids;
  LONGSTRING details;
  AccountRuleEntryExt ext;

  AccountRuleEntry(
      this.id,
      this.resource,
      this.action,
      this.forbids,
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    resource.toXdr(stream);
    action.toXdr(stream);
    forbids.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AccountRuleEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  AccountRuleEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AccountRuleEntryExtEmptyVersion extends AccountRuleEntryExt {
  AccountRuleEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct AccountSpecificRuleEntry
//  {
//      uint64 id;
//
//      LedgerKey ledgerKey;
//      AccountID* accountID;
//      bool forbids;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AccountSpecificRuleEntry extends XdrEncodable  {
  UINT64 id;
  LedgerKey ledgerKey;
  ACCOUNTID? accountID;
  bool forbids;
  AccountSpecificRuleEntryExt ext;

  AccountSpecificRuleEntry(
      this.id,
      this.ledgerKey,
      this.accountID,
      this.forbids,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ledgerKey.toXdr(stream);
    if (accountID != null) {
      true.toXdr(stream);
      accountID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    forbids.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AccountSpecificRuleEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  AccountSpecificRuleEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AccountSpecificRuleEntryExtEmptyVersion extends AccountSpecificRuleEntryExt {
  AccountSpecificRuleEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct Limits
//  {
//      int64 dailyOut;
//      int64 weeklyOut;
//      int64 monthlyOut;
//      int64 annualOut;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class Limits extends XdrEncodable  {
  INT64 dailyOut;
  INT64 weeklyOut;
  INT64 monthlyOut;
  INT64 annualOut;
  LimitsExt ext;

  Limits(
      this.dailyOut,
      this.weeklyOut,
      this.monthlyOut,
      this.annualOut,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    dailyOut.toXdr(stream);
    weeklyOut.toXdr(stream);
    monthlyOut.toXdr(stream);
    annualOut.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LimitsExt extends XdrEncodable {
  LedgerVersion discriminant;
  LimitsExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LimitsExtEmptyVersion extends LimitsExt {
  LimitsExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct AccountEntry
//  {
//      AccountID accountID;      // master public key for this account
//
//      // Referral marketing
//      AccountID* referrer; // parent account
//
//      // sequenctial ID - unique identifier of the account, used by ingesting applications to
//      // identify account, while keeping size of index small
//      uint64 sequentialID;
//
//  	uint64 roleID;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AccountEntry extends XdrEncodable  {
  ACCOUNTID accountID;
  ACCOUNTID? referrer;
  UINT64 sequentialID;
  UINT64 roleID;
  AccountEntryExt ext;

  AccountEntry(
      this.accountID,
      this.referrer,
      this.sequentialID,
      this.roleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    if (referrer != null) {
      true.toXdr(stream);
      referrer?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    sequentialID.toXdr(stream);
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AccountEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  AccountEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AccountEntryExtEmptyVersion extends AccountEntryExt {
  AccountEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class AssetPairPolicy extends XdrEncodable {
  static const TRADEABLE_SECONDARY_MARKET = 1;
  static const PHYSICAL_PRICE_RESTRICTION = 2;
  static const CURRENT_PRICE_RESTRICTION = 4;
  int value;
  AssetPairPolicy(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: `AssetPairEntry` is used in system to group different assets into pairs and set particular policies and properties for them
//  struct AssetPairEntry
//  {
//      //: Code of base asset of the asset pair
//      AssetCode base;
//      //: Code of quote asset of the asset pair
//      AssetCode quote;
//
//      //: defines an asset pair price as quote asset divided by base asset (i.e., amount of quote asset per 1 base asset)
//      int64 currentPrice;
//      //: Price of the asset pair assigned on creation. Can only be updated by application
//      //: the `ManageAssetPair` operation with action `UPDATE_PRICE`
//      int64 physicalPrice;
//
//      //: Price of the asset pair assigned on creation. Can only be updated by application
//      //: the `ManageAssetPair` operation with action `UPDATE_PRICE`
//      int64 physicalPriceCorrection;
//
//      //: Max price step in percent. User is allowed to set offer only if both of
//      //: `price < (1 - maxPriceStep) * currentPrice` and `price > (1 + maxPriceStep) * currentPrice` are `true`
//      int64 maxPriceStep;
//
//      //: Bitmask of asset policies set by creator or corrected by `ManageAssetPair` operations
//      int32 policies;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AssetPairEntry extends XdrEncodable  {
  ASSETCODE base;
  ASSETCODE quote;
  INT64 currentPrice;
  INT64 physicalPrice;
  INT64 physicalPriceCorrection;
  INT64 maxPriceStep;
  INT32 policies;
  AssetPairEntryExt ext;

  AssetPairEntry(
      this.base,
      this.quote,
      this.currentPrice,
      this.physicalPrice,
      this.physicalPriceCorrection,
      this.maxPriceStep,
      this.policies,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    base.toXdr(stream);
    quote.toXdr(stream);
    currentPrice.toXdr(stream);
    physicalPrice.toXdr(stream);
    physicalPriceCorrection.toXdr(stream);
    maxPriceStep.toXdr(stream);
    policies.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AssetPairEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  AssetPairEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AssetPairEntryExtEmptyVersion extends AssetPairEntryExt {
  AssetPairEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class AssetPolicy extends XdrEncodable {
  static const TRANSFERABLE = 1;
  static const BASE_ASSET = 2;
  static const STATS_QUOTE_ASSET = 4;
  static const WITHDRAWABLE = 8;
  static const ISSUANCE_MANUAL_REVIEW_REQUIRED = 16;
  static const CAN_BE_BASE_IN_ATOMIC_SWAP = 32;
  static const CAN_BE_QUOTE_IN_ATOMIC_SWAP = 64;
  static const SWAPPABLE = 128;
  int value;
  AssetPolicy(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct AssetEntry
//  {
//      //: Code of the asset
//      AssetCode code;
//      //: Owner(creator) of the asset
//  	AccountID owner;
//  	//: Account responsible for preissuance of the asset
//  	AccountID preissuedAssetSigner;
//      //: Arbitrary stringified JSON object that can be used to attach data to asset
//  	longstring details;
//  	//: Maximal amount of tokens that can be issued
//  	uint64 maxIssuanceAmount;
//  	//: Amount of tokens available for issuance
//  	uint64 availableForIssueance;
//  	//: Amount of tokens issued already
//  	uint64 issued;
//  	//: Amount of tokens to be issued which is locked. `pendingIssuance+issued <= maxIssuanceAmount`
//  	uint64 pendingIssuance;
//  	//: Policies of the asset
//      uint32 policies;
//      //: Used to restrict usage. Used in account rules
//      uint64 type;
//      //: Number of decimal places. Must be <= 6
//      uint32 trailingDigitsCount;
//
//      //: Reserved for future use
//      EmptyExt ext;
//  };

//  ===========================================================================
class AssetEntry extends XdrEncodable  {
  ASSETCODE code;
  ACCOUNTID owner;
  ACCOUNTID preissuedAssetSigner;
  LONGSTRING details;
  UINT64 maxIssuanceAmount;
  UINT64 availableForIssueance;
  UINT64 issued;
  UINT64 pendingIssuance;
  UINT32 policies;
  UINT64 type;
  UINT32 trailingDigitsCount;
  EmptyExt ext;

  AssetEntry(
      this.code,
      this.owner,
      this.preissuedAssetSigner,
      this.details,
      this.maxIssuanceAmount,
      this.availableForIssueance,
      this.issued,
      this.pendingIssuance,
      this.policies,
      this.type,
      this.trailingDigitsCount,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    code.toXdr(stream);
    owner.toXdr(stream);
    preissuedAssetSigner.toXdr(stream);
    details.toXdr(stream);
    maxIssuanceAmount.toXdr(stream);
    availableForIssueance.toXdr(stream);
    issued.toXdr(stream);
    pendingIssuance.toXdr(stream);
    policies.toXdr(stream);
    type.toXdr(stream);
    trailingDigitsCount.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  //: AtomicSwapAskQuoteAsset represents asset with price which can be used to buy base asset
//  struct AtomicSwapAskQuoteAsset
//  {
//      //: Code of quote asset
//      AssetCode quoteAsset;
//      //: amount of quote asset which is needed to buy one base asset
//      uint64 price;
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AtomicSwapAskQuoteAsset extends XdrEncodable  {
  ASSETCODE quoteAsset;
  UINT64 price;
  AtomicSwapAskQuoteAssetExt ext;

  AtomicSwapAskQuoteAsset(
      this.quoteAsset,
      this.price,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    quoteAsset.toXdr(stream);
    price.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AtomicSwapAskQuoteAssetExt extends XdrEncodable {
  LedgerVersion discriminant;
  AtomicSwapAskQuoteAssetExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AtomicSwapAskQuoteAssetExtEmptyVersion extends AtomicSwapAskQuoteAssetExt {
  AtomicSwapAskQuoteAssetExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct AtomicSwapAskEntry
//  {
//      uint64 id;
//      AccountID ownerID;
//      AssetCode baseAsset;
//      BalanceID baseBalance;
//      uint64 amount;
//      uint64 lockedAmount;
//      uint64 createdAt;
//
//      bool isCancelled;
//
//      longstring details;
//
//      AtomicSwapAskQuoteAsset quoteAssets<>;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AtomicSwapAskEntry extends XdrEncodable  {
  UINT64 id;
  ACCOUNTID ownerID;
  ASSETCODE baseAsset;
  BALANCEID baseBalance;
  UINT64 amount;
  UINT64 lockedAmount;
  UINT64 createdAt;
  bool isCancelled;
  LONGSTRING details;
  List<AtomicSwapAskQuoteAsset> quoteAssets;
  AtomicSwapAskEntryExt ext;

  AtomicSwapAskEntry(
      this.id,
      this.ownerID,
      this.baseAsset,
      this.baseBalance,
      this.amount,
      this.lockedAmount,
      this.createdAt,
      this.isCancelled,
      this.details,
      this.quoteAssets,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ownerID.toXdr(stream);
    baseAsset.toXdr(stream);
    baseBalance.toXdr(stream);
    amount.toXdr(stream);
    lockedAmount.toXdr(stream);
    createdAt.toXdr(stream);
    isCancelled.toXdr(stream);
    details.toXdr(stream);
    quoteAssets.length.toXdr(stream);
    quoteAssets.forEach ((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}
abstract class AtomicSwapAskEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  AtomicSwapAskEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AtomicSwapAskEntryExtEmptyVersion extends AtomicSwapAskEntryExt {
  AtomicSwapAskEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct BalanceEntry
//  {
//      BalanceID balanceID;
//  	// sequential ID - unique identifier of the balance, used by ingesting applications to
//  	// identify account, while keeping size of index small
//      uint64 sequentialID;
//      AssetCode asset;
//      AccountID accountID;
//      uint64 amount;
//      uint64 locked;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class BalanceEntry extends XdrEncodable  {
  BALANCEID balanceID;
  UINT64 sequentialID;
  ASSETCODE asset;
  ACCOUNTID accountID;
  UINT64 amount;
  UINT64 locked;
  BalanceEntryExt ext;

  BalanceEntry(
      this.balanceID,
      this.sequentialID,
      this.asset,
      this.accountID,
      this.amount,
      this.locked,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    balanceID.toXdr(stream);
    sequentialID.toXdr(stream);
    asset.toXdr(stream);
    accountID.toXdr(stream);
    amount.toXdr(stream);
    locked.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class BalanceEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  BalanceEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class BalanceEntryExtEmptyVersion extends BalanceEntryExt {
  BalanceEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ContractState extends XdrEncodable {
  static const NO_CONFIRMATIONS = 0;
  static const CUSTOMER_CONFIRMED = 1;
  static const CONTRACTOR_CONFIRMED = 2;
  static const DISPUTING = 4;
  static const REVERTING_RESOLVE = 8;
  static const NOT_REVERTING_RESOLVE = 16;
  int value;
  ContractState(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct ContractEntry
//  {
//      uint64 contractID;
//
//      AccountID contractor;
//      AccountID customer;
//      AccountID escrow;
//
//      uint64 startTime;
//      uint64 endTime;
//      uint64 invoiceRequestsIDs<>;
//      longstring initialDetails;
//
//      uint32 state;
//      longstring customerDetails;
//
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ContractEntry extends XdrEncodable  {
  UINT64 contractID;
  ACCOUNTID contractor;
  ACCOUNTID customer;
  ACCOUNTID escrow;
  UINT64 startTime;
  UINT64 endTime;
  List<UINT64> invoiceRequestsIDs;
  LONGSTRING initialDetails;
  UINT32 state;
  LONGSTRING customerDetails;
  ContractEntryExt ext;

  ContractEntry(
      this.contractID,
      this.contractor,
      this.customer,
      this.escrow,
      this.startTime,
      this.endTime,
      this.invoiceRequestsIDs,
      this.initialDetails,
      this.state,
      this.customerDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    contractID.toXdr(stream);
    contractor.toXdr(stream);
    customer.toXdr(stream);
    escrow.toXdr(stream);
    startTime.toXdr(stream);
    endTime.toXdr(stream);
    invoiceRequestsIDs.length.toXdr(stream);
    invoiceRequestsIDs.forEach ((element) {
      element.toXdr(stream);
    });
    initialDetails.toXdr(stream);
    state.toXdr(stream);
    customerDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ContractEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  ContractEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ContractEntryExtEmptyVersion extends ContractEntryExt {
  ContractEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct DataEntry
//  {
//      //: ID of the data entry
//      uint64 id;
//      //: Numeric type, used for access control
//      uint64 type;
//      //: Value stored
//      longstring value;
//
//      //: Creator of the entry
//      AccountID owner;
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class DataEntry extends XdrEncodable  {
  UINT64 id;
  UINT64 type;
  LONGSTRING value;
  ACCOUNTID owner;
  EmptyExt ext;

  DataEntry(
      this.id,
      this.type,
      this.value,
      this.owner,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    type.toXdr(stream);
    value.toXdr(stream);
    owner.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct DeferredPaymentEntry
//  {
//      //: ID of the deferred payment entry
//      uint64 id;
//
//      uint64 amount;
//
//      longstring details;
//
//      //: Creator of the entry
//      AccountID source;
//      BalanceID sourceBalance;
//
//      AccountID destination;
//
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class DeferredPaymentEntry extends XdrEncodable  {
  UINT64 id;
  UINT64 amount;
  LONGSTRING details;
  ACCOUNTID source;
  BALANCEID sourceBalance;
  ACCOUNTID destination;
  EmptyExt ext;

  DeferredPaymentEntry(
      this.id,
      this.amount,
      this.details,
      this.source,
      this.sourceBalance,
      this.destination,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    amount.toXdr(stream);
    details.toXdr(stream);
    source.toXdr(stream);
    sourceBalance.toXdr(stream);
    destination.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct ExternalSystemAccountIDPoolEntry
//  {
//      uint64 poolEntryID;
//      int32 externalSystemType;
//      longstring data;
//      AccountID* accountID;
//      uint64 expiresAt;
//      uint64 bindedAt;
//      uint64 parent;
//      bool isDeleted;
//
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//         void;
//      }
//      ext;
//  };

//  ===========================================================================
class ExternalSystemAccountIDPoolEntry extends XdrEncodable  {
  UINT64 poolEntryID;
  INT32 externalSystemType;
  LONGSTRING data;
  ACCOUNTID? accountID;
  UINT64 expiresAt;
  UINT64 bindedAt;
  UINT64 parent;
  bool isDeleted;
  ExternalSystemAccountIDPoolEntryExt ext;

  ExternalSystemAccountIDPoolEntry(
      this.poolEntryID,
      this.externalSystemType,
      this.data,
      this.accountID,
      this.expiresAt,
      this.bindedAt,
      this.parent,
      this.isDeleted,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    poolEntryID.toXdr(stream);
    externalSystemType.toXdr(stream);
    data.toXdr(stream);
    if (accountID != null) {
      true.toXdr(stream);
      accountID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    expiresAt.toXdr(stream);
    bindedAt.toXdr(stream);
    parent.toXdr(stream);
    isDeleted.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ExternalSystemAccountIDPoolEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  ExternalSystemAccountIDPoolEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ExternalSystemAccountIDPoolEntryExtEmptyVersion extends ExternalSystemAccountIDPoolEntryExt {
  ExternalSystemAccountIDPoolEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct ExternalSystemAccountID
//  {
//      AccountID accountID;
//      int32 externalSystemType;
//  	longstring data;
//
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ExternalSystemAccountID extends XdrEncodable  {
  ACCOUNTID accountID;
  INT32 externalSystemType;
  LONGSTRING data;
  ExternalSystemAccountIDExt ext;

  ExternalSystemAccountID(
      this.accountID,
      this.externalSystemType,
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    externalSystemType.toXdr(stream);
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ExternalSystemAccountIDExt extends XdrEncodable {
  LedgerVersion discriminant;
  ExternalSystemAccountIDExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ExternalSystemAccountIDExtEmptyVersion extends ExternalSystemAccountIDExt {
  ExternalSystemAccountIDExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class FeeType extends XdrEncodable {
  static const PAYMENT_FEE = 0;
  static const OFFER_FEE = 1;
  static const WITHDRAWAL_FEE = 2;
  static const ISSUANCE_FEE = 3;
  static const INVEST_FEE = 4;
  static const CAPITAL_DEPLOYMENT_FEE = 5;
  static const OPERATION_FEE = 6;
  static const PAYOUT_FEE = 7;
  static const ATOMIC_SWAP_SALE_FEE = 8;
  static const ATOMIC_SWAP_PURCHASE_FEE = 9;
  static const SWAP_FEE = 10;
  int value;
  FeeType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
class EmissionFeeType extends XdrEncodable {
  static const PRIMARY_MARKET = 1;
  static const SECONDARY_MARKET = 2;
  int value;
  EmissionFeeType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
class PaymentFeeType extends XdrEncodable {
  static const OUTGOING = 1;
  static const INCOMING = 2;
  int value;
  PaymentFeeType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: `FeeEntry` is used in the system configuration to set fees for different assets, operations (according to FeeType), particular account roles, particular accounts,
//  //: or globally (only if both parameters particular account role and paticular account are not specified).
//  struct FeeEntry
//  {
//      //: Type of a particular fee depending on the operation (e.g., PAYMENT_FEE for payment operation, WITHDRAWAL_FEE for withdrawal operation, etc.)
//      FeeType feeType;
//      //: Code of an asset used in the operation for which the fee will be charged
//      AssetCode asset;
//
//      //: Fixed amount of fee that will be charged for the operation
//      int64 fixedFee;
//      //: Percent from the operation amount that will be charged for the corresponding operation
//      int64 percentFee;
//
//      //: (optional) Account for which a fee is set in the system
//      AccountID* accountID;
//      //: (optional) Account for which a fee is set in the system
//      uint64*    accountRole;
//      //: Defines a `subtype` of a fee if such exists (e.g., `OUTGOING` or `INCOMING` for `PAYMENT_FEE`)
//      int64 subtype;
//
//      //: Defines the lower bound of operation amount for which this fee is applicable
//      int64 lowerBound;
//      //: Defines the upper bound of operation amount for which this fee is applicable
//      int64 upperBound;
//
//      //: Hash of `type:<feeType>asset:<asset>subtype:<subtype>`
//      //: (Add `accountID:<accountID>` or `accountRole:<accountRole>` if corresponding fields are defined)
//      Hash hash;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class FeeEntry extends XdrEncodable  {
  FeeType feeType;
  ASSETCODE asset;
  INT64 fixedFee;
  INT64 percentFee;
  ACCOUNTID? accountID;
  UINT64? accountRole;
  INT64 subtype;
  INT64 lowerBound;
  INT64 upperBound;
  HASH hash;
  FeeEntryExt ext;

  FeeEntry(
      this.feeType,
      this.asset,
      this.fixedFee,
      this.percentFee,
      this.accountID,
      this.accountRole,
      this.subtype,
      this.lowerBound,
      this.upperBound,
      this.hash,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    feeType.toXdr(stream);
    asset.toXdr(stream);
    fixedFee.toXdr(stream);
    percentFee.toXdr(stream);
    if (accountID != null) {
      true.toXdr(stream);
      accountID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    if (accountRole != null) {
      true.toXdr(stream);
      accountRole?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    subtype.toXdr(stream);
    lowerBound.toXdr(stream);
    upperBound.toXdr(stream);
    hash.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class FeeEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  FeeEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class FeeEntryExtEmptyVersion extends FeeEntryExt {
  FeeEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class KeyValueEntryType extends XdrEncodable {
  static const UINT32 = 1;
  static const STRING = 2;
  static const UINT64 = 3;
  int value;
  KeyValueEntryType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class KeyValueEntryValue extends XdrEncodable {
  KeyValueEntryType discriminant;
  KeyValueEntryValue(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class KeyValueEntryValueUint32 extends KeyValueEntryValue {
  KeyValueEntryValueUint32(this.ui32Value) : super(KeyValueEntryType(KeyValueEntryType.UINT32));
  late UINT32 ui32Value;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ui32Value.toXdr(stream);
  }
}

class KeyValueEntryValueString extends KeyValueEntryValue {
  KeyValueEntryValueString(this.stringValue) : super(KeyValueEntryType(KeyValueEntryType.STRING));
  late String stringValue;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    stringValue.toXdr(stream);
  }
}

class KeyValueEntryValueUint64 extends KeyValueEntryValue {
  KeyValueEntryValueUint64(this.ui64Value) : super(KeyValueEntryType(KeyValueEntryType.UINT64));
  late UINT64 ui64Value;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ui64Value.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: `KeyValueEntry` is an entry used to store key mapped values
//      struct KeyValueEntry
//      {
//          //: String value that must be unique among other keys for kev-value pairs
//          longstring key;
//
//          //: Value that corresponds to particular key (depending on `KeyValueEntryType`,
//          //: the value can be either uint32, or uint64, or string)
//          KeyValueEntryValue value;
//
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//              case EMPTY_VERSION:
//                  void;
//          }
//          ext;
//      };

//  ===========================================================================
class KeyValueEntry extends XdrEncodable  {
  LONGSTRING key;
  KeyValueEntryValue value;
  KeyValueEntryExt ext;

  KeyValueEntry(
      this.key,
      this.value,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    key.toXdr(stream);
    value.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class KeyValueEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  KeyValueEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class KeyValueEntryExtEmptyVersion extends KeyValueEntryExt {
  KeyValueEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct LicenseEntry
//  {
//      uint64 adminCount;
//      uint64 dueDate;
//      Hash ledgerHash;
//      Hash prevLicenseHash;
//      DecoratedSignature signatures<>;
//
//       // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LicenseEntry extends XdrEncodable  {
  UINT64 adminCount;
  UINT64 dueDate;
  HASH ledgerHash;
  HASH prevLicenseHash;
  List<DecoratedSignature> signatures;
  LicenseEntryExt ext;

  LicenseEntry(
      this.adminCount,
      this.dueDate,
      this.ledgerHash,
      this.prevLicenseHash,
      this.signatures,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    adminCount.toXdr(stream);
    dueDate.toXdr(stream);
    ledgerHash.toXdr(stream);
    prevLicenseHash.toXdr(stream);
    signatures.length.toXdr(stream);
    signatures.forEach ((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}
abstract class LicenseEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  LicenseEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LicenseEntryExtEmptyVersion extends LicenseEntryExt {
  LicenseEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class StatsOpType extends XdrEncodable {
  static const PAYMENT_OUT = 1;
  static const WITHDRAW = 2;
  static const SPEND = 3;
  static const DEPOSIT = 4;
  static const PAYOUT = 5;
  int value;
  StatsOpType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: `LimitsV2Entry` is used in the system configuration to set limits (daily, weekly, montly, annual)
//  //: for different assets, operations (according to StatsOpType), particular account roles, particular accounts,
//  //: or globally (only if both parameters particular account role and paticular account are not specified),
//  struct LimitsV2Entry
//  {
//      //: ID of limits entry
//      uint64      id;
//      //: (optional) ID of an account role that will be imposed with limits
//      uint64*     accountRole;
//      //: (optional) ID of an account that will be imposed with limits
//      AccountID*  accountID;
//      //: Operation type that will be imposed with limits. See `enum StatsOpType`
//      StatsOpType statsOpType;
//      //: Asset that will be imposed with limits
//      AssetCode   assetCode;
//      //: `isConvertNeeded` indicates whether or not the asset conversion is needed for the limits entry.
//      //: If this field is `true`, limits are applied to all balances of an account (to every asset that account owns).
//      //: Otherwise, limits from particular limits entry are applied only to  balances with `AssetCode` provided by entry.
//      bool        isConvertNeeded;
//
//      //: daily out limit
//      uint64 dailyOut;
//      //: weekly out limit
//      uint64 weeklyOut;
//      //: monthly out limit
//      uint64 monthlyOut;
//      //: annual out limit
//      uint64 annualOut;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LimitsV2Entry extends XdrEncodable  {
  UINT64 id;
  UINT64? accountRole;
  ACCOUNTID? accountID;
  StatsOpType statsOpType;
  ASSETCODE assetCode;
  bool isConvertNeeded;
  UINT64 dailyOut;
  UINT64 weeklyOut;
  UINT64 monthlyOut;
  UINT64 annualOut;
  LimitsV2EntryExt ext;

  LimitsV2Entry(
      this.id,
      this.accountRole,
      this.accountID,
      this.statsOpType,
      this.assetCode,
      this.isConvertNeeded,
      this.dailyOut,
      this.weeklyOut,
      this.monthlyOut,
      this.annualOut,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    if (accountRole != null) {
      true.toXdr(stream);
      accountRole?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    if (accountID != null) {
      true.toXdr(stream);
      accountID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    statsOpType.toXdr(stream);
    assetCode.toXdr(stream);
    isConvertNeeded.toXdr(stream);
    dailyOut.toXdr(stream);
    weeklyOut.toXdr(stream);
    monthlyOut.toXdr(stream);
    annualOut.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LimitsV2EntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  LimitsV2EntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LimitsV2EntryExtEmptyVersion extends LimitsV2EntryExt {
  LimitsV2EntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct OfferEntry
//  {
//      uint64 offerID;
//  	uint64 orderBookID;
//  	AccountID ownerID;
//  	bool isBuy;
//      AssetCode base; // A
//      AssetCode quote;  // B
//  	BalanceID baseBalance;
//  	BalanceID quoteBalance;
//      int64 baseAmount;
//  	int64 quoteAmount;
//  	uint64 createdAt;
//  	int64 fee;
//
//      int64 percentFee;
//
//  	// price of A in terms of B
//      int64 price;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class OfferEntry extends XdrEncodable  {
  UINT64 offerID;
  UINT64 orderBookID;
  ACCOUNTID ownerID;
  bool isBuy;
  ASSETCODE base;
  ASSETCODE quote;
  BALANCEID baseBalance;
  BALANCEID quoteBalance;
  INT64 baseAmount;
  INT64 quoteAmount;
  UINT64 createdAt;
  INT64 fee;
  INT64 percentFee;
  INT64 price;
  OfferEntryExt ext;

  OfferEntry(
      this.offerID,
      this.orderBookID,
      this.ownerID,
      this.isBuy,
      this.base,
      this.quote,
      this.baseBalance,
      this.quoteBalance,
      this.baseAmount,
      this.quoteAmount,
      this.createdAt,
      this.fee,
      this.percentFee,
      this.price,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    offerID.toXdr(stream);
    orderBookID.toXdr(stream);
    ownerID.toXdr(stream);
    isBuy.toXdr(stream);
    base.toXdr(stream);
    quote.toXdr(stream);
    baseBalance.toXdr(stream);
    quoteBalance.toXdr(stream);
    baseAmount.toXdr(stream);
    quoteAmount.toXdr(stream);
    createdAt.toXdr(stream);
    fee.toXdr(stream);
    percentFee.toXdr(stream);
    price.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class OfferEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  OfferEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class OfferEntryExtEmptyVersion extends OfferEntryExt {
  OfferEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct PendingStatisticsEntry
//  {
//      uint64 statisticsID;
//      uint64 requestID;
//      uint64 amount;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PendingStatisticsEntry extends XdrEncodable  {
  UINT64 statisticsID;
  UINT64 requestID;
  UINT64 amount;
  PendingStatisticsEntryExt ext;

  PendingStatisticsEntry(
      this.statisticsID,
      this.requestID,
      this.amount,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    statisticsID.toXdr(stream);
    requestID.toXdr(stream);
    amount.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class PendingStatisticsEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  PendingStatisticsEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class PendingStatisticsEntryExtEmptyVersion extends PendingStatisticsEntryExt {
  PendingStatisticsEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class PollType extends XdrEncodable {
  static const SINGLE_CHOICE = 0;
  int value;
  PollType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class PollData extends XdrEncodable {
  PollType discriminant;
  PollData(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class PollDataSingleChoice extends PollData {
  PollDataSingleChoice(this.ext) : super(PollType(PollType.SINGLE_CHOICE));
  late EmptyExt ext;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ext.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct PollEntry
//  {
//      uint64 id;
//      uint32 permissionType;
//
//      uint32 numberOfChoices;
//      PollData data;
//
//      uint64 startTime;
//      uint64 endTime;
//
//      AccountID ownerID;
//      AccountID resultProviderID;
//
//      bool voteConfirmationRequired;
//
//      longstring details;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class PollEntry extends XdrEncodable  {
  UINT64 id;
  UINT32 permissionType;
  UINT32 numberOfChoices;
  PollData data;
  UINT64 startTime;
  UINT64 endTime;
  ACCOUNTID ownerID;
  ACCOUNTID resultProviderID;
  bool voteConfirmationRequired;
  LONGSTRING details;
  EmptyExt ext;

  PollEntry(
      this.id,
      this.permissionType,
      this.numberOfChoices,
      this.data,
      this.startTime,
      this.endTime,
      this.ownerID,
      this.resultProviderID,
      this.voteConfirmationRequired,
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    permissionType.toXdr(stream);
    numberOfChoices.toXdr(stream);
    data.toXdr(stream);
    startTime.toXdr(stream);
    endTime.toXdr(stream);
    ownerID.toXdr(stream);
    resultProviderID.toXdr(stream);
    voteConfirmationRequired.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct ReferenceEntry
//  {
//  	AccountID sender;
//      string64 reference;
//
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ReferenceEntry extends XdrEncodable  {
  ACCOUNTID sender;
  STRING64 reference;
  ReferenceEntryExt ext;

  ReferenceEntry(
      this.sender,
      this.reference,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    sender.toXdr(stream);
    reference.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ReferenceEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  ReferenceEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ReferenceEntryExtEmptyVersion extends ReferenceEntryExt {
  ReferenceEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ReviewableRequestType extends XdrEncodable {
  static const NONE = 0;
  static const ANY = 1;
  static const CREATE_PRE_ISSUANCE = 2;
  static const CREATE_ISSUANCE = 3;
  static const CREATE_WITHDRAW = 4;
  static const CREATE_SALE = 5;
  static const UPDATE_LIMITS = 6;
  static const CREATE_AML_ALERT = 7;
  static const CHANGE_ROLE = 8;
  static const UPDATE_SALE_DETAILS = 9;
  static const CREATE_ASSET = 10;
  static const CREATE_INVOICE = 11;
  static const MANAGE_CONTRACT = 12;
  static const UPDATE_ASSET = 13;
  static const CREATE_POLL = 14;
  static const CREATE_ATOMIC_SWAP_ASK = 16;
  static const CREATE_ATOMIC_SWAP_BID = 17;
  static const KYC_RECOVERY = 18;
  static const MANAGE_OFFER = 19;
  static const CREATE_PAYMENT = 20;
  static const PERFORM_REDEMPTION = 21;
  static const DATA_CREATION = 22;
  static const DATA_UPDATE = 23;
  static const DATA_REMOVE = 24;
  static const CREATE_DEFERRED_PAYMENT = 25;
  static const CLOSE_DEFERRED_PAYMENT = 26;
  int value;
  ReviewableRequestType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct TasksExt {
//      // Tasks are represented by a bitmask
//      uint32 allTasks;
//      uint32 pendingTasks;
//
//      // External details vector consists of comments written by request reviewers
//      longstring externalDetails<>;
//
//      // Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class TasksExt extends XdrEncodable  {
  UINT32 allTasks;
  UINT32 pendingTasks;
  List<LONGSTRING> externalDetails;
  TasksExtExt ext;

  TasksExt(
      this.allTasks,
      this.pendingTasks,
      this.externalDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    allTasks.toXdr(stream);
    pendingTasks.toXdr(stream);
    externalDetails.length.toXdr(stream);
    externalDetails.forEach ((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}
abstract class TasksExtExt extends XdrEncodable {
  LedgerVersion discriminant;
  TasksExtExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class TasksExtExtEmptyVersion extends TasksExtExt {
  TasksExtExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct ReviewableRequestEntry {
//  	uint64 requestID;
//  	Hash hash; // hash of the request body
//  	AccountID requestor;
//  	longstring rejectReason;
//  	AccountID reviewer;
//  	string64* reference; // reference for request which will act as an unique key for the request (will reject request with the same reference from same requestor)
//  	int64 createdAt; // when request was created
//
//  	union switch (ReviewableRequestType type) {
//  		case CREATE_ASSET:
//  			AssetCreationRequest assetCreationRequest;
//  		case UPDATE_ASSET:
//  			AssetUpdateRequest assetUpdateRequest;
//  		case CREATE_PRE_ISSUANCE:
//  			PreIssuanceRequest preIssuanceRequest;
//  		case CREATE_ISSUANCE:
//  			IssuanceRequest issuanceRequest;
//  		case CREATE_WITHDRAW:
//  			WithdrawalRequest withdrawalRequest;
//  		case CREATE_SALE:
//  			SaleCreationRequest saleCreationRequest;
//          case UPDATE_LIMITS:
//              LimitsUpdateRequest limitsUpdateRequest;
//          case CREATE_AML_ALERT:
//              AMLAlertRequest amlAlertRequest;
//          case CHANGE_ROLE:
//              ChangeRoleRequest changeRoleRequest;
//          case UPDATE_SALE_DETAILS:
//              UpdateSaleDetailsRequest updateSaleDetailsRequest;
//          case CREATE_INVOICE:
//              InvoiceRequest invoiceRequest;
//          case MANAGE_CONTRACT:
//              ContractRequest contractRequest;
//          case CREATE_ATOMIC_SWAP_ASK:
//              CreateAtomicSwapAskRequest createAtomicSwapAskRequest;
//          case CREATE_ATOMIC_SWAP_BID:
//              CreateAtomicSwapBidRequest createAtomicSwapBidRequest;
//          case CREATE_POLL:
//              CreatePollRequest createPollRequest;
//          case KYC_RECOVERY:
//              KYCRecoveryRequest kycRecoveryRequest;
//  		case MANAGE_OFFER:
//  			ManageOfferRequest manageOfferRequest;
//  		case CREATE_PAYMENT:
//  			CreatePaymentRequest createPaymentRequest;
//          case PERFORM_REDEMPTION:
//              RedemptionRequest redemptionRequest;
//          case DATA_CREATION:
//              DataCreationRequest dataCreationRequest;
//          case DATA_UPDATE:
//              DataUpdateRequest dataUpdateRequest;
//          case DATA_REMOVE:
//              DataRemoveRequest dataRemoveRequest;
//          case CREATE_DEFERRED_PAYMENT:
//              CreateDeferredPaymentRequest createDeferredPaymentRequest;
//          case CLOSE_DEFERRED_PAYMENT:
//              CloseDeferredPaymentRequest closeDeferredPaymentRequest;
//
//  	} body;
//
//  	TasksExt tasks;
//
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//  	}
//      ext;
//  };

//  ===========================================================================
class ReviewableRequestEntry extends XdrEncodable  {
  UINT64 requestID;
  HASH hash;
  ACCOUNTID requestor;
  LONGSTRING rejectReason;
  ACCOUNTID reviewer;
  STRING64? reference;
  INT64 createdAt;
  ReviewableRequestEntryBody body;
  TasksExt tasks;
  ReviewableRequestEntryExt ext;

  ReviewableRequestEntry(
      this.requestID,
      this.hash,
      this.requestor,
      this.rejectReason,
      this.reviewer,
      this.reference,
      this.createdAt,
      this.body,
      this.tasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    hash.toXdr(stream);
    requestor.toXdr(stream);
    rejectReason.toXdr(stream);
    reviewer.toXdr(stream);
    if (reference != null) {
      true.toXdr(stream);
      reference?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    createdAt.toXdr(stream);
    body.toXdr(stream);
    tasks.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ReviewableRequestEntryBody extends XdrEncodable {
  ReviewableRequestType discriminant;
  ReviewableRequestEntryBody(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateAsset extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateAsset(this.assetCreationRequest) : super(ReviewableRequestType(ReviewableRequestType.CREATE_ASSET));
  late AssetCreationRequest assetCreationRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    assetCreationRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyUpdateAsset extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyUpdateAsset(this.assetUpdateRequest) : super(ReviewableRequestType(ReviewableRequestType.UPDATE_ASSET));
  late AssetUpdateRequest assetUpdateRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    assetUpdateRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreatePreIssuance extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreatePreIssuance(this.preIssuanceRequest) : super(ReviewableRequestType(ReviewableRequestType.CREATE_PRE_ISSUANCE));
  late PreIssuanceRequest preIssuanceRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    preIssuanceRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateIssuance extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateIssuance(this.issuanceRequest) : super(ReviewableRequestType(ReviewableRequestType.CREATE_ISSUANCE));
  late IssuanceRequest issuanceRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    issuanceRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateWithdraw extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateWithdraw(this.withdrawalRequest) : super(ReviewableRequestType(ReviewableRequestType.CREATE_WITHDRAW));
  late WithdrawalRequest withdrawalRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    withdrawalRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateSale extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateSale(this.saleCreationRequest) : super(ReviewableRequestType(ReviewableRequestType.CREATE_SALE));
  late SaleCreationRequest saleCreationRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    saleCreationRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyUpdateLimits extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyUpdateLimits(this.limitsUpdateRequest) : super(ReviewableRequestType(ReviewableRequestType.UPDATE_LIMITS));
  late LimitsUpdateRequest limitsUpdateRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    limitsUpdateRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateAmlAlert extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateAmlAlert(this.amlAlertRequest) : super(ReviewableRequestType(ReviewableRequestType.CREATE_AML_ALERT));
  late AMLAlertRequest amlAlertRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    amlAlertRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyChangeRole extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyChangeRole(this.changeRoleRequest) : super(ReviewableRequestType(ReviewableRequestType.CHANGE_ROLE));
  late ChangeRoleRequest changeRoleRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    changeRoleRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyUpdateSaleDetails extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyUpdateSaleDetails(this.updateSaleDetailsRequest) : super(ReviewableRequestType(ReviewableRequestType.UPDATE_SALE_DETAILS));
  late UpdateSaleDetailsRequest updateSaleDetailsRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateSaleDetailsRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateInvoice extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateInvoice(this.invoiceRequest) : super(ReviewableRequestType(ReviewableRequestType.CREATE_INVOICE));
  late InvoiceRequest invoiceRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    invoiceRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyManageContract extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyManageContract(this.contractRequest) : super(ReviewableRequestType(ReviewableRequestType.MANAGE_CONTRACT));
  late ContractRequest contractRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    contractRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateAtomicSwapAsk extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateAtomicSwapAsk(this.createAtomicSwapAskRequest) : super(ReviewableRequestType(ReviewableRequestType.CREATE_ATOMIC_SWAP_ASK));
  late CreateAtomicSwapAskRequest createAtomicSwapAskRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapAskRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateAtomicSwapBid extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateAtomicSwapBid(this.createAtomicSwapBidRequest) : super(ReviewableRequestType(ReviewableRequestType.CREATE_ATOMIC_SWAP_BID));
  late CreateAtomicSwapBidRequest createAtomicSwapBidRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapBidRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreatePoll extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreatePoll(this.createPollRequest) : super(ReviewableRequestType(ReviewableRequestType.CREATE_POLL));
  late CreatePollRequest createPollRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPollRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyKycRecovery extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyKycRecovery(this.kycRecoveryRequest) : super(ReviewableRequestType(ReviewableRequestType.KYC_RECOVERY));
  late KYCRecoveryRequest kycRecoveryRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    kycRecoveryRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyManageOffer extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyManageOffer(this.manageOfferRequest) : super(ReviewableRequestType(ReviewableRequestType.MANAGE_OFFER));
  late ManageOfferRequest manageOfferRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageOfferRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreatePayment extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreatePayment(this.createPaymentRequest) : super(ReviewableRequestType(ReviewableRequestType.CREATE_PAYMENT));
  late CreatePaymentRequest createPaymentRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPaymentRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyPerformRedemption extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyPerformRedemption(this.redemptionRequest) : super(ReviewableRequestType(ReviewableRequestType.PERFORM_REDEMPTION));
  late RedemptionRequest redemptionRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    redemptionRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyDataCreation extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyDataCreation(this.dataCreationRequest) : super(ReviewableRequestType(ReviewableRequestType.DATA_CREATION));
  late DataCreationRequest dataCreationRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dataCreationRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyDataUpdate extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyDataUpdate(this.dataUpdateRequest) : super(ReviewableRequestType(ReviewableRequestType.DATA_UPDATE));
  late DataUpdateRequest dataUpdateRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dataUpdateRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyDataRemove extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyDataRemove(this.dataRemoveRequest) : super(ReviewableRequestType(ReviewableRequestType.DATA_REMOVE));
  late DataRemoveRequest dataRemoveRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dataRemoveRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyCreateDeferredPayment extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCreateDeferredPayment(this.createDeferredPaymentRequest) : super(ReviewableRequestType(ReviewableRequestType.CREATE_DEFERRED_PAYMENT));
  late CreateDeferredPaymentRequest createDeferredPaymentRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDeferredPaymentRequest.toXdr(stream);
  }
}

class ReviewableRequestEntryBodyCloseDeferredPayment extends ReviewableRequestEntryBody {
  ReviewableRequestEntryBodyCloseDeferredPayment(this.closeDeferredPaymentRequest) : super(ReviewableRequestType(ReviewableRequestType.CLOSE_DEFERRED_PAYMENT));
  late CloseDeferredPaymentRequest closeDeferredPaymentRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    closeDeferredPaymentRequest.toXdr(stream);
  }
}

abstract class ReviewableRequestEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  ReviewableRequestEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ReviewableRequestEntryExtEmptyVersion extends ReviewableRequestEntryExt {
  ReviewableRequestEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class SaleType extends XdrEncodable {
  static const BASIC_SALE = 1;
  static const CROWD_FUNDING = 2;
  static const FIXED_PRICE = 3;
  static const IMMEDIATE = 4;
  int value;
  SaleType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct FixedPriceSale {
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class FixedPriceSale extends XdrEncodable  {
  FixedPriceSaleExt ext;

  FixedPriceSale(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class FixedPriceSaleExt extends XdrEncodable {
  LedgerVersion discriminant;
  FixedPriceSaleExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class FixedPriceSaleExtEmptyVersion extends FixedPriceSaleExt {
  FixedPriceSaleExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct CrowdFundingSale {
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CrowdFundingSale extends XdrEncodable  {
  CrowdFundingSaleExt ext;

  CrowdFundingSale(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class CrowdFundingSaleExt extends XdrEncodable {
  LedgerVersion discriminant;
  CrowdFundingSaleExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CrowdFundingSaleExtEmptyVersion extends CrowdFundingSaleExt {
  CrowdFundingSaleExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct BasicSale {
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class BasicSale extends XdrEncodable  {
  BasicSaleExt ext;

  BasicSale(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class BasicSaleExt extends XdrEncodable {
  LedgerVersion discriminant;
  BasicSaleExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class BasicSaleExtEmptyVersion extends BasicSaleExt {
  BasicSaleExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct ImmediateSale {
//      EmptyExt ext;
//  };

//  ===========================================================================
class ImmediateSale extends XdrEncodable  {
  EmptyExt ext;

  ImmediateSale(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class SaleTypeExt extends XdrEncodable {
  SaleType discriminant;
  SaleTypeExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SaleTypeExtBasicSale extends SaleTypeExt {
  SaleTypeExtBasicSale(this.basicSale) : super(SaleType(SaleType.BASIC_SALE));
  late BasicSale basicSale;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    basicSale.toXdr(stream);
  }
}

class SaleTypeExtCrowdFunding extends SaleTypeExt {
  SaleTypeExtCrowdFunding(this.crowdFundingSale) : super(SaleType(SaleType.CROWD_FUNDING));
  late CrowdFundingSale crowdFundingSale;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    crowdFundingSale.toXdr(stream);
  }
}

class SaleTypeExtFixedPrice extends SaleTypeExt {
  SaleTypeExtFixedPrice(this.fixedPriceSale) : super(SaleType(SaleType.FIXED_PRICE));
  late FixedPriceSale fixedPriceSale;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    fixedPriceSale.toXdr(stream);
  }
}

class SaleTypeExtImmediate extends SaleTypeExt {
  SaleTypeExtImmediate(this.immediateSale) : super(SaleType(SaleType.IMMEDIATE));
  late ImmediateSale immediateSale;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    immediateSale.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct SaleQuoteAsset {
//  	AssetCode quoteAsset; // asset in which participation will be accepted
//  	uint64 price; // price for 1 baseAsset in terms of quote asset
//  	BalanceID quoteBalance;
//  	uint64 currentCap; // current capitalization
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SaleQuoteAsset extends XdrEncodable  {
  ASSETCODE quoteAsset;
  UINT64 price;
  BALANCEID quoteBalance;
  UINT64 currentCap;
  SaleQuoteAssetExt ext;

  SaleQuoteAsset(
      this.quoteAsset,
      this.price,
      this.quoteBalance,
      this.currentCap,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    quoteAsset.toXdr(stream);
    price.toXdr(stream);
    quoteBalance.toXdr(stream);
    currentCap.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class SaleQuoteAssetExt extends XdrEncodable {
  LedgerVersion discriminant;
  SaleQuoteAssetExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SaleQuoteAssetExtEmptyVersion extends SaleQuoteAssetExt {
  SaleQuoteAssetExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct SaleEntry
//  {
//  	uint64 saleID;
//  	uint64 saleType;
//  	AccountID ownerID;
//      AssetCode baseAsset; // asset for which sale will be performed
//  	uint64 startTime; // start time of the sale
//  	uint64 endTime; // close time of the sale
//  	AssetCode defaultQuoteAsset; // asset for soft and hard cap
//  	uint64 softCap; // minimum amount of quote asset to be received at which sale will be considered a successful
//  	uint64 hardCap; // max amount of quote asset to be received
//  	uint64 currentCapInBase;
//  	uint64 maxAmountToBeSold;
//  	longstring details; // sale specific details
//  	SaleQuoteAsset quoteAssets<100>;
//
//  	BalanceID baseBalance;
//      SaleTypeExt saleTypeExt;
//
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      case ADD_SALE_WHITELISTS:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SaleEntry extends XdrEncodable  {
  UINT64 saleID;
  UINT64 saleType;
  ACCOUNTID ownerID;
  ASSETCODE baseAsset;
  UINT64 startTime;
  UINT64 endTime;
  ASSETCODE defaultQuoteAsset;
  UINT64 softCap;
  UINT64 hardCap;
  UINT64 currentCapInBase;
  UINT64 maxAmountToBeSold;
  LONGSTRING details;
  List<SaleQuoteAsset> quoteAssets;
  BALANCEID baseBalance;
  SaleTypeExt saleTypeExt;
  SaleEntryExt ext;

  SaleEntry(
      this.saleID,
      this.saleType,
      this.ownerID,
      this.baseAsset,
      this.startTime,
      this.endTime,
      this.defaultQuoteAsset,
      this.softCap,
      this.hardCap,
      this.currentCapInBase,
      this.maxAmountToBeSold,
      this.details,
      this.quoteAssets,
      this.baseBalance,
      this.saleTypeExt,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    saleType.toXdr(stream);
    ownerID.toXdr(stream);
    baseAsset.toXdr(stream);
    startTime.toXdr(stream);
    endTime.toXdr(stream);
    defaultQuoteAsset.toXdr(stream);
    softCap.toXdr(stream);
    hardCap.toXdr(stream);
    currentCapInBase.toXdr(stream);
    maxAmountToBeSold.toXdr(stream);
    details.toXdr(stream);
    quoteAssets.length.toXdr(stream);
    quoteAssets.forEach ((element) {
      element.toXdr(stream);
    });
    baseBalance.toXdr(stream);
    saleTypeExt.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class SaleEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  SaleEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SaleEntryExtEmptyVersion extends SaleEntryExt {
  SaleEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class SaleEntryExtAddSaleWhitelists extends SaleEntryExt {
  SaleEntryExtAddSaleWhitelists() : super(LedgerVersion(LedgerVersion.ADD_SALE_WHITELISTS));
}
// === xdr source ============================================================

//  struct SignerRoleEntry
//  {
//      uint64 id;
//      uint64 ruleIDs<>;
//
//      AccountID ownerID;
//
//      longstring details;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SignerRoleEntry extends XdrEncodable  {
  UINT64 id;
  List<UINT64> ruleIDs;
  ACCOUNTID ownerID;
  LONGSTRING details;
  SignerRoleEntryExt ext;

  SignerRoleEntry(
      this.id,
      this.ruleIDs,
      this.ownerID,
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ruleIDs.length.toXdr(stream);
    ruleIDs.forEach ((element) {
      element.toXdr(stream);
    });
    ownerID.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class SignerRoleEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  SignerRoleEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SignerRoleEntryExtEmptyVersion extends SignerRoleEntryExt {
  SignerRoleEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct SignerRuleEntry
//  {
//      uint64 id;
//
//      SignerRuleResource resource;
//      SignerRuleAction action;
//
//      bool forbids;
//      bool isDefault; // default rules will be in each role
//
//      longstring details;
//
//      AccountID ownerID;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SignerRuleEntry extends XdrEncodable  {
  UINT64 id;
  SignerRuleResource resource;
  SignerRuleAction action;
  bool forbids;
  bool isDefault;
  LONGSTRING details;
  ACCOUNTID ownerID;
  SignerRuleEntryExt ext;

  SignerRuleEntry(
      this.id,
      this.resource,
      this.action,
      this.forbids,
      this.isDefault,
      this.details,
      this.ownerID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    resource.toXdr(stream);
    action.toXdr(stream);
    forbids.toXdr(stream);
    isDefault.toXdr(stream);
    details.toXdr(stream);
    ownerID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class SignerRuleEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  SignerRuleEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SignerRuleEntryExtEmptyVersion extends SignerRuleEntryExt {
  SignerRuleEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct SignerEntry
//  {
//      PublicKey pubKey;
//      AccountID accountID; // account to which signer had attached
//
//      uint32 weight; // threshold for all SignerRules equals 1000
//  	uint32 identity;
//
//  	longstring details;
//
//  	uint64 roleID;
//
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SignerEntry extends XdrEncodable  {
  PublicKey pubKey;
  ACCOUNTID accountID;
  UINT32 weight;
  UINT32 identity;
  LONGSTRING details;
  UINT64 roleID;
  SignerEntryExt ext;

  SignerEntry(
      this.pubKey,
      this.accountID,
      this.weight,
      this.identity,
      this.details,
      this.roleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    pubKey.toXdr(stream);
    accountID.toXdr(stream);
    weight.toXdr(stream);
    identity.toXdr(stream);
    details.toXdr(stream);
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class SignerEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  SignerEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SignerEntryExtEmptyVersion extends SignerEntryExt {
  SignerEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct StampEntry
//  {
//      Hash ledgerHash;
//      Hash licenseHash;
//
//       // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class StampEntry extends XdrEncodable  {
  HASH ledgerHash;
  HASH licenseHash;
  StampEntryExt ext;

  StampEntry(
      this.ledgerHash,
      this.licenseHash,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ledgerHash.toXdr(stream);
    licenseHash.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class StampEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  StampEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class StampEntryExtEmptyVersion extends StampEntryExt {
  StampEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct StatisticsV2Entry
//  {
//      uint64      id;
//  	AccountID   accountID;
//  	StatsOpType statsOpType;
//      AssetCode   assetCode;
//      bool        isConvertNeeded;
//
//  	uint64 dailyOutcome;
//  	uint64 weeklyOutcome;
//  	uint64 monthlyOutcome;
//  	uint64 annualOutcome;
//
//  	int64 updatedAt;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class StatisticsV2Entry extends XdrEncodable  {
  UINT64 id;
  ACCOUNTID accountID;
  StatsOpType statsOpType;
  ASSETCODE assetCode;
  bool isConvertNeeded;
  UINT64 dailyOutcome;
  UINT64 weeklyOutcome;
  UINT64 monthlyOutcome;
  UINT64 annualOutcome;
  INT64 updatedAt;
  StatisticsV2EntryExt ext;

  StatisticsV2Entry(
      this.id,
      this.accountID,
      this.statsOpType,
      this.assetCode,
      this.isConvertNeeded,
      this.dailyOutcome,
      this.weeklyOutcome,
      this.monthlyOutcome,
      this.annualOutcome,
      this.updatedAt,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    accountID.toXdr(stream);
    statsOpType.toXdr(stream);
    assetCode.toXdr(stream);
    isConvertNeeded.toXdr(stream);
    dailyOutcome.toXdr(stream);
    weeklyOutcome.toXdr(stream);
    monthlyOutcome.toXdr(stream);
    annualOutcome.toXdr(stream);
    updatedAt.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class StatisticsV2EntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  StatisticsV2EntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class StatisticsV2EntryExtEmptyVersion extends StatisticsV2EntryExt {
  StatisticsV2EntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct StatisticsEntry
//  {
//  	AccountID accountID;
//
//  	uint64 dailyOutcome;
//  	uint64 weeklyOutcome;
//  	uint64 monthlyOutcome;
//  	uint64 annualOutcome;
//
//  	int64 updatedAt;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class StatisticsEntry extends XdrEncodable  {
  ACCOUNTID accountID;
  UINT64 dailyOutcome;
  UINT64 weeklyOutcome;
  UINT64 monthlyOutcome;
  UINT64 annualOutcome;
  INT64 updatedAt;
  StatisticsEntryExt ext;

  StatisticsEntry(
      this.accountID,
      this.dailyOutcome,
      this.weeklyOutcome,
      this.monthlyOutcome,
      this.annualOutcome,
      this.updatedAt,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    dailyOutcome.toXdr(stream);
    weeklyOutcome.toXdr(stream);
    monthlyOutcome.toXdr(stream);
    annualOutcome.toXdr(stream);
    updatedAt.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class StatisticsEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  StatisticsEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class StatisticsEntryExtEmptyVersion extends StatisticsEntryExt {
  StatisticsEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct SwapEntry
//  {
//      uint64 id;
//
//      Hash secretHash;
//
//      AccountID source;
//      BalanceID sourceBalance;
//
//      BalanceID destinationBalance;
//
//      longstring details;
//
//      uint64 amount;
//
//      int64 createdAt;
//      int64 lockTime;
//
//  	uint64 fee;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class SwapEntry extends XdrEncodable  {
  UINT64 id;
  HASH secretHash;
  ACCOUNTID source;
  BALANCEID sourceBalance;
  BALANCEID destinationBalance;
  LONGSTRING details;
  UINT64 amount;
  INT64 createdAt;
  INT64 lockTime;
  UINT64 fee;
  EmptyExt ext;

  SwapEntry(
      this.id,
      this.secretHash,
      this.source,
      this.sourceBalance,
      this.destinationBalance,
      this.details,
      this.amount,
      this.createdAt,
      this.lockTime,
      this.fee,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    secretHash.toXdr(stream);
    source.toXdr(stream);
    sourceBalance.toXdr(stream);
    destinationBalance.toXdr(stream);
    details.toXdr(stream);
    amount.toXdr(stream);
    createdAt.toXdr(stream);
    lockTime.toXdr(stream);
    fee.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct SingleChoiceVote
//  {
//      uint32 choice;
//      EmptyExt ext;
//  };

//  ===========================================================================
class SingleChoiceVote extends XdrEncodable  {
  UINT32 choice;
  EmptyExt ext;

  SingleChoiceVote(
      this.choice,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    choice.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class VoteData extends XdrEncodable {
  PollType discriminant;
  VoteData(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class VoteDataSingleChoice extends VoteData {
  VoteDataSingleChoice(this.single) : super(PollType(PollType.SINGLE_CHOICE));
  late SingleChoiceVote single;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    single.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct VoteEntry
//  {
//      uint64 pollID;
//
//      AccountID voterID;
//
//      VoteData data;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class VoteEntry extends XdrEncodable  {
  UINT64 pollID;
  ACCOUNTID voterID;
  VoteData data;
  EmptyExt ext;

  VoteEntry(
      this.pollID,
      this.voterID,
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    voterID.toXdr(stream);
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
class ThresholdIndexes extends XdrEncodable {
  static const MASTER_WEIGHT = 0;
  static const LOW = 1;
  static const MED = 2;
  static const HIGH = 3;
  int value;
  ThresholdIndexes(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct LedgerEntry
//  {
//      uint32 lastModifiedLedgerSeq; // ledger the LedgerEntry was last changed
//
//      union switch (LedgerEntryType type)
//      {
//      case ACCOUNT:
//          AccountEntry account;
//      case SIGNER:
//          SignerEntry signer;
//      case FEE:
//          FeeEntry feeState;
//      case BALANCE:
//          BalanceEntry balance;
//      case ASSET:
//          AssetEntry asset;
//      case REFERENCE_ENTRY:
//          ReferenceEntry reference;
//      case STATISTICS:
//          StatisticsEntry stats;
//      case ACCOUNT_LIMITS:
//          AccountLimitsEntry accountLimits;
//  	case ASSET_PAIR:
//  		AssetPairEntry assetPair;
//  	case OFFER_ENTRY:
//  		OfferEntry offer;
//  	case REVIEWABLE_REQUEST:
//  		ReviewableRequestEntry reviewableRequest;
//  	case EXTERNAL_SYSTEM_ACCOUNT_ID:
//  		ExternalSystemAccountID externalSystemAccountID;
//  	case SALE:
//  		SaleEntry sale;
//  	case KEY_VALUE:
//  	    KeyValueEntry keyValue;
//  	case ACCOUNT_KYC:
//          AccountKYCEntry accountKYC;
//      case EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY:
//          ExternalSystemAccountIDPoolEntry externalSystemAccountIDPoolEntry;
//      case LIMITS_V2:
//          LimitsV2Entry limitsV2;
//      case STATISTICS_V2:
//          StatisticsV2Entry statisticsV2;
//      case PENDING_STATISTICS:
//          PendingStatisticsEntry pendingStatistics;
//      case CONTRACT:
//          ContractEntry contract;
//      case ATOMIC_SWAP_ASK:
//          AtomicSwapAskEntry atomicSwapAsk;
//      case ACCOUNT_ROLE:
//          AccountRoleEntry accountRole;
//      case ACCOUNT_RULE:
//          AccountRuleEntry accountRule;
//      case SIGNER_RULE:
//          SignerRuleEntry signerRule;
//      case SIGNER_ROLE:
//          SignerRoleEntry signerRole;
//      case LICENSE:
//          LicenseEntry license;
//      case STAMP:
//          StampEntry stamp;
//      case POLL:
//          PollEntry poll;
//      case VOTE:
//          VoteEntry vote;
//      case ACCOUNT_SPECIFIC_RULE:
//          AccountSpecificRuleEntry accountSpecificRule;
//      case SWAP:
//          SwapEntry swap;
//      case DATA:
//          DataEntry data;
//      case DEFERRED_PAYMENT:
//          DeferredPaymentEntry deferredPayment;
//      }
//      data;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LedgerEntry extends XdrEncodable  {
  UINT32 lastModifiedLedgerSeq;
  LedgerEntryData data;
  LedgerEntryExt ext;

  LedgerEntry(
      this.lastModifiedLedgerSeq,
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    lastModifiedLedgerSeq.toXdr(stream);
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerEntryData extends XdrEncodable {
  LedgerEntryType discriminant;
  LedgerEntryData(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerEntryDataAccount extends LedgerEntryData {
  LedgerEntryDataAccount(this.account) : super(LedgerEntryType(LedgerEntryType.ACCOUNT));
  late AccountEntry account;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    account.toXdr(stream);
  }
}

class LedgerEntryDataSigner extends LedgerEntryData {
  LedgerEntryDataSigner(this.signer) : super(LedgerEntryType(LedgerEntryType.SIGNER));
  late SignerEntry signer;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signer.toXdr(stream);
  }
}

class LedgerEntryDataFee extends LedgerEntryData {
  LedgerEntryDataFee(this.feeState) : super(LedgerEntryType(LedgerEntryType.FEE));
  late FeeEntry feeState;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    feeState.toXdr(stream);
  }
}

class LedgerEntryDataBalance extends LedgerEntryData {
  LedgerEntryDataBalance(this.balance) : super(LedgerEntryType(LedgerEntryType.BALANCE));
  late BalanceEntry balance;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    balance.toXdr(stream);
  }
}

class LedgerEntryDataAsset extends LedgerEntryData {
  LedgerEntryDataAsset(this.asset) : super(LedgerEntryType(LedgerEntryType.ASSET));
  late AssetEntry asset;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    asset.toXdr(stream);
  }
}

class LedgerEntryDataReferenceEntry extends LedgerEntryData {
  LedgerEntryDataReferenceEntry(this.reference) : super(LedgerEntryType(LedgerEntryType.REFERENCE_ENTRY));
  late ReferenceEntry reference;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reference.toXdr(stream);
  }
}

class LedgerEntryDataStatistics extends LedgerEntryData {
  LedgerEntryDataStatistics(this.stats) : super(LedgerEntryType(LedgerEntryType.STATISTICS));
  late StatisticsEntry stats;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    stats.toXdr(stream);
  }
}

class LedgerEntryDataAccountLimits extends LedgerEntryData {
  LedgerEntryDataAccountLimits(this.accountLimits) : super(LedgerEntryType(LedgerEntryType.ACCOUNT_LIMITS));
  late AccountLimitsEntry accountLimits;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountLimits.toXdr(stream);
  }
}

class LedgerEntryDataAssetPair extends LedgerEntryData {
  LedgerEntryDataAssetPair(this.assetPair) : super(LedgerEntryType(LedgerEntryType.ASSET_PAIR));
  late AssetPairEntry assetPair;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    assetPair.toXdr(stream);
  }
}

class LedgerEntryDataOfferEntry extends LedgerEntryData {
  LedgerEntryDataOfferEntry(this.offer) : super(LedgerEntryType(LedgerEntryType.OFFER_ENTRY));
  late OfferEntry offer;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    offer.toXdr(stream);
  }
}

class LedgerEntryDataReviewableRequest extends LedgerEntryData {
  LedgerEntryDataReviewableRequest(this.reviewableRequest) : super(LedgerEntryType(LedgerEntryType.REVIEWABLE_REQUEST));
  late ReviewableRequestEntry reviewableRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reviewableRequest.toXdr(stream);
  }
}

class LedgerEntryDataExternalSystemAccountId extends LedgerEntryData {
  LedgerEntryDataExternalSystemAccountId(this.externalSystemAccountID) : super(LedgerEntryType(LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID));
  late ExternalSystemAccountID externalSystemAccountID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    externalSystemAccountID.toXdr(stream);
  }
}

class LedgerEntryDataSale extends LedgerEntryData {
  LedgerEntryDataSale(this.sale) : super(LedgerEntryType(LedgerEntryType.SALE));
  late SaleEntry sale;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    sale.toXdr(stream);
  }
}

class LedgerEntryDataKeyValue extends LedgerEntryData {
  LedgerEntryDataKeyValue(this.keyValue) : super(LedgerEntryType(LedgerEntryType.KEY_VALUE));
  late KeyValueEntry keyValue;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    keyValue.toXdr(stream);
  }
}

class LedgerEntryDataAccountKyc extends LedgerEntryData {
  LedgerEntryDataAccountKyc(this.accountKYC) : super(LedgerEntryType(LedgerEntryType.ACCOUNT_KYC));
  late AccountKYCEntry accountKYC;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountKYC.toXdr(stream);
  }
}

class LedgerEntryDataExternalSystemAccountIdPoolEntry extends LedgerEntryData {
  LedgerEntryDataExternalSystemAccountIdPoolEntry(this.externalSystemAccountIDPoolEntry) : super(LedgerEntryType(LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY));
  late ExternalSystemAccountIDPoolEntry externalSystemAccountIDPoolEntry;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    externalSystemAccountIDPoolEntry.toXdr(stream);
  }
}

class LedgerEntryDataLimitsV2 extends LedgerEntryData {
  LedgerEntryDataLimitsV2(this.limitsV2) : super(LedgerEntryType(LedgerEntryType.LIMITS_V2));
  late LimitsV2Entry limitsV2;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    limitsV2.toXdr(stream);
  }
}

class LedgerEntryDataStatisticsV2 extends LedgerEntryData {
  LedgerEntryDataStatisticsV2(this.statisticsV2) : super(LedgerEntryType(LedgerEntryType.STATISTICS_V2));
  late StatisticsV2Entry statisticsV2;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    statisticsV2.toXdr(stream);
  }
}

class LedgerEntryDataPendingStatistics extends LedgerEntryData {
  LedgerEntryDataPendingStatistics(this.pendingStatistics) : super(LedgerEntryType(LedgerEntryType.PENDING_STATISTICS));
  late PendingStatisticsEntry pendingStatistics;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    pendingStatistics.toXdr(stream);
  }
}

class LedgerEntryDataContract extends LedgerEntryData {
  LedgerEntryDataContract(this.contract) : super(LedgerEntryType(LedgerEntryType.CONTRACT));
  late ContractEntry contract;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    contract.toXdr(stream);
  }
}

class LedgerEntryDataAtomicSwapAsk extends LedgerEntryData {
  LedgerEntryDataAtomicSwapAsk(this.atomicSwapAsk) : super(LedgerEntryType(LedgerEntryType.ATOMIC_SWAP_ASK));
  late AtomicSwapAskEntry atomicSwapAsk;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    atomicSwapAsk.toXdr(stream);
  }
}

class LedgerEntryDataAccountRole extends LedgerEntryData {
  LedgerEntryDataAccountRole(this.accountRole) : super(LedgerEntryType(LedgerEntryType.ACCOUNT_ROLE));
  late AccountRoleEntry accountRole;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountRole.toXdr(stream);
  }
}

class LedgerEntryDataAccountRule extends LedgerEntryData {
  LedgerEntryDataAccountRule(this.accountRule) : super(LedgerEntryType(LedgerEntryType.ACCOUNT_RULE));
  late AccountRuleEntry accountRule;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountRule.toXdr(stream);
  }
}

class LedgerEntryDataSignerRule extends LedgerEntryData {
  LedgerEntryDataSignerRule(this.signerRule) : super(LedgerEntryType(LedgerEntryType.SIGNER_RULE));
  late SignerRuleEntry signerRule;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signerRule.toXdr(stream);
  }
}

class LedgerEntryDataSignerRole extends LedgerEntryData {
  LedgerEntryDataSignerRole(this.signerRole) : super(LedgerEntryType(LedgerEntryType.SIGNER_ROLE));
  late SignerRoleEntry signerRole;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signerRole.toXdr(stream);
  }
}

class LedgerEntryDataLicense extends LedgerEntryData {
  LedgerEntryDataLicense(this.license) : super(LedgerEntryType(LedgerEntryType.LICENSE));
  late LicenseEntry license;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    license.toXdr(stream);
  }
}

class LedgerEntryDataStamp extends LedgerEntryData {
  LedgerEntryDataStamp(this.stamp) : super(LedgerEntryType(LedgerEntryType.STAMP));
  late StampEntry stamp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    stamp.toXdr(stream);
  }
}

class LedgerEntryDataPoll extends LedgerEntryData {
  LedgerEntryDataPoll(this.poll) : super(LedgerEntryType(LedgerEntryType.POLL));
  late PollEntry poll;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    poll.toXdr(stream);
  }
}

class LedgerEntryDataVote extends LedgerEntryData {
  LedgerEntryDataVote(this.vote) : super(LedgerEntryType(LedgerEntryType.VOTE));
  late VoteEntry vote;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    vote.toXdr(stream);
  }
}

class LedgerEntryDataAccountSpecificRule extends LedgerEntryData {
  LedgerEntryDataAccountSpecificRule(this.accountSpecificRule) : super(LedgerEntryType(LedgerEntryType.ACCOUNT_SPECIFIC_RULE));
  late AccountSpecificRuleEntry accountSpecificRule;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountSpecificRule.toXdr(stream);
  }
}

class LedgerEntryDataSwap extends LedgerEntryData {
  LedgerEntryDataSwap(this.swap) : super(LedgerEntryType(LedgerEntryType.SWAP));
  late SwapEntry swap;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    swap.toXdr(stream);
  }
}

class LedgerEntryDataDataData extends LedgerEntryData {
  LedgerEntryDataDataData(this.data) : super(LedgerEntryType(LedgerEntryType.DATA));
  late DataEntry data;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    data.toXdr(stream);
  }
}

class LedgerEntryDataDeferredPayment extends LedgerEntryData {
  LedgerEntryDataDeferredPayment(this.deferredPayment) : super(LedgerEntryType(LedgerEntryType.DEFERRED_PAYMENT));
  late DeferredPaymentEntry deferredPayment;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    deferredPayment.toXdr(stream);
  }
}

abstract class LedgerEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerEntryExtEmptyVersion extends LedgerEntryExt {
  LedgerEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class EnvelopeType extends XdrEncodable {
  static const SCP = 1;
  static const TX = 2;
  static const AUTH = 3;
  int value;
  EnvelopeType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class LedgerKey extends XdrEncodable {
  LedgerEntryType discriminant;
  LedgerKey(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyAccount extends LedgerKey {
  LedgerKeyAccount(this.account) : super(LedgerEntryType(LedgerEntryType.ACCOUNT));
  late LedgerKeyAccountAccount account;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    account.toXdr(stream);
  }
}

class LedgerKeySigner extends LedgerKey {
  LedgerKeySigner(this.signer) : super(LedgerEntryType(LedgerEntryType.SIGNER));
  late LedgerKeySignerSigner signer;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signer.toXdr(stream);
  }
}

class LedgerKeyFee extends LedgerKey {
  LedgerKeyFee(this.feeState) : super(LedgerEntryType(LedgerEntryType.FEE));
  late LedgerKeyFeeStateFeeState feeState;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    feeState.toXdr(stream);
  }
}

class LedgerKeyBalance extends LedgerKey {
  LedgerKeyBalance(this.balance) : super(LedgerEntryType(LedgerEntryType.BALANCE));
  late LedgerKeyBalanceBalance balance;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    balance.toXdr(stream);
  }
}

class LedgerKeyAsset extends LedgerKey {
  LedgerKeyAsset(this.asset) : super(LedgerEntryType(LedgerEntryType.ASSET));
  late LedgerKeyAssetAsset asset;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    asset.toXdr(stream);
  }
}

class LedgerKeyReferenceEntry extends LedgerKey {
  LedgerKeyReferenceEntry(this.reference) : super(LedgerEntryType(LedgerEntryType.REFERENCE_ENTRY));
  late LedgerKeyReferenceReference reference;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reference.toXdr(stream);
  }
}

class LedgerKeyStatistics extends LedgerKey {
  LedgerKeyStatistics(this.stats) : super(LedgerEntryType(LedgerEntryType.STATISTICS));
  late LedgerKeyStatsStats stats;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    stats.toXdr(stream);
  }
}

class LedgerKeyAccountLimits extends LedgerKey {
  LedgerKeyAccountLimits(this.accountLimits) : super(LedgerEntryType(LedgerEntryType.ACCOUNT_LIMITS));
  late LedgerKeyAccountLimitsAccountLimits accountLimits;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountLimits.toXdr(stream);
  }
}

class LedgerKeyAssetPair extends LedgerKey {
  LedgerKeyAssetPair(this.assetPair) : super(LedgerEntryType(LedgerEntryType.ASSET_PAIR));
  late LedgerKeyAssetPairAssetPair assetPair;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    assetPair.toXdr(stream);
  }
}

class LedgerKeyOfferEntry extends LedgerKey {
  LedgerKeyOfferEntry(this.offer) : super(LedgerEntryType(LedgerEntryType.OFFER_ENTRY));
  late LedgerKeyOfferOffer offer;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    offer.toXdr(stream);
  }
}

class LedgerKeyReviewableRequest extends LedgerKey {
  LedgerKeyReviewableRequest(this.reviewableRequest) : super(LedgerEntryType(LedgerEntryType.REVIEWABLE_REQUEST));
  late LedgerKeyReviewableRequestReviewableRequest reviewableRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reviewableRequest.toXdr(stream);
  }
}

class LedgerKeyExternalSystemAccountId extends LedgerKey {
  LedgerKeyExternalSystemAccountId(this.externalSystemAccountID) : super(LedgerEntryType(LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID));
  late LedgerKeyExternalSystemAccountIDExternalSystemAccountID externalSystemAccountID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    externalSystemAccountID.toXdr(stream);
  }
}

class LedgerKeySale extends LedgerKey {
  LedgerKeySale(this.sale) : super(LedgerEntryType(LedgerEntryType.SALE));
  late LedgerKeySaleSale sale;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    sale.toXdr(stream);
  }
}

class LedgerKeyKeyValue extends LedgerKey {
  LedgerKeyKeyValue(this.keyValue) : super(LedgerEntryType(LedgerEntryType.KEY_VALUE));
  late LedgerKeyKeyValueKeyValue keyValue;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    keyValue.toXdr(stream);
  }
}

class LedgerKeyAccountKyc extends LedgerKey {
  LedgerKeyAccountKyc(this.accountKYC) : super(LedgerEntryType(LedgerEntryType.ACCOUNT_KYC));
  late LedgerKeyAccountKYCAccountKYC accountKYC;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountKYC.toXdr(stream);
  }
}

class LedgerKeyExternalSystemAccountIdPoolEntry extends LedgerKey {
  LedgerKeyExternalSystemAccountIdPoolEntry(this.externalSystemAccountIDPoolEntry) : super(LedgerEntryType(LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY));
  late LedgerKeyExternalSystemAccountIDPoolEntryExternalSystemAccountIDPoolEntry externalSystemAccountIDPoolEntry;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    externalSystemAccountIDPoolEntry.toXdr(stream);
  }
}

class LedgerKeyLimitsV2 extends LedgerKey {
  LedgerKeyLimitsV2(this.limitsV2) : super(LedgerEntryType(LedgerEntryType.LIMITS_V2));
  late LedgerKeyLimitsV2LimitsV2 limitsV2;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    limitsV2.toXdr(stream);
  }
}

class LedgerKeyStatisticsV2 extends LedgerKey {
  LedgerKeyStatisticsV2(this.statisticsV2) : super(LedgerEntryType(LedgerEntryType.STATISTICS_V2));
  late LedgerKeyStatisticsV2StatisticsV2 statisticsV2;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    statisticsV2.toXdr(stream);
  }
}

class LedgerKeyPendingStatistics extends LedgerKey {
  LedgerKeyPendingStatistics(this.pendingStatistics) : super(LedgerEntryType(LedgerEntryType.PENDING_STATISTICS));
  late LedgerKeyPendingStatisticsPendingStatistics pendingStatistics;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    pendingStatistics.toXdr(stream);
  }
}

class LedgerKeyContract extends LedgerKey {
  LedgerKeyContract(this.contract) : super(LedgerEntryType(LedgerEntryType.CONTRACT));
  late LedgerKeyContractContract contract;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    contract.toXdr(stream);
  }
}

class LedgerKeyAtomicSwapAsk extends LedgerKey {
  LedgerKeyAtomicSwapAsk(this.atomicSwapAsk) : super(LedgerEntryType(LedgerEntryType.ATOMIC_SWAP_ASK));
  late LedgerKeyAtomicSwapAskAtomicSwapAsk atomicSwapAsk;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    atomicSwapAsk.toXdr(stream);
  }
}

class LedgerKeyAccountRole extends LedgerKey {
  LedgerKeyAccountRole(this.accountRole) : super(LedgerEntryType(LedgerEntryType.ACCOUNT_ROLE));
  late LedgerKeyAccountRoleAccountRole accountRole;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountRole.toXdr(stream);
  }
}

class LedgerKeyAccountRule extends LedgerKey {
  LedgerKeyAccountRule(this.accountRule) : super(LedgerEntryType(LedgerEntryType.ACCOUNT_RULE));
  late LedgerKeyAccountRuleAccountRule accountRule;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountRule.toXdr(stream);
  }
}

class LedgerKeySignerRole extends LedgerKey {
  LedgerKeySignerRole(this.signerRole) : super(LedgerEntryType(LedgerEntryType.SIGNER_ROLE));
  late LedgerKeySignerRoleSignerRole signerRole;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signerRole.toXdr(stream);
  }
}

class LedgerKeySignerRule extends LedgerKey {
  LedgerKeySignerRule(this.signerRule) : super(LedgerEntryType(LedgerEntryType.SIGNER_RULE));
  late LedgerKeySignerRuleSignerRule signerRule;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signerRule.toXdr(stream);
  }
}

class LedgerKeyStamp extends LedgerKey {
  LedgerKeyStamp(this.stamp) : super(LedgerEntryType(LedgerEntryType.STAMP));
  late LedgerKeyStampStamp stamp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    stamp.toXdr(stream);
  }
}

class LedgerKeyLicense extends LedgerKey {
  LedgerKeyLicense(this.license) : super(LedgerEntryType(LedgerEntryType.LICENSE));
  late LedgerKeyLicenseLicense license;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    license.toXdr(stream);
  }
}

class LedgerKeyPoll extends LedgerKey {
  LedgerKeyPoll(this.poll) : super(LedgerEntryType(LedgerEntryType.POLL));
  late LedgerKeyPollPoll poll;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    poll.toXdr(stream);
  }
}

class LedgerKeyVote extends LedgerKey {
  LedgerKeyVote(this.vote) : super(LedgerEntryType(LedgerEntryType.VOTE));
  late LedgerKeyVoteVote vote;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    vote.toXdr(stream);
  }
}

class LedgerKeyAccountSpecificRule extends LedgerKey {
  LedgerKeyAccountSpecificRule(this.accountSpecificRule) : super(LedgerEntryType(LedgerEntryType.ACCOUNT_SPECIFIC_RULE));
  late LedgerKeyAccountSpecificRuleAccountSpecificRule accountSpecificRule;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountSpecificRule.toXdr(stream);
  }
}

class LedgerKeySwap extends LedgerKey {
  LedgerKeySwap(this.swap) : super(LedgerEntryType(LedgerEntryType.SWAP));
  late LedgerKeySwapSwap swap;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    swap.toXdr(stream);
  }
}

class LedgerKeyData extends LedgerKey {
  LedgerKeyData(this.data) : super(LedgerEntryType(LedgerEntryType.DATA));
  late LedgerKeyDataData data;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    data.toXdr(stream);
  }
}

class LedgerKeyDeferredPayment extends LedgerKey {
  LedgerKeyDeferredPayment(this.deferredPayment) : super(LedgerEntryType(LedgerEntryType.DEFERRED_PAYMENT));
  late LedgerKeyDeferredPaymentDeferredPayment deferredPayment;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    deferredPayment.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          AccountID accountID;
//          union switch (LedgerVersion v)
//         {
//         case EMPTY_VERSION:
//            void;
//         }
//         ext;
//      }

//  ===========================================================================
class LedgerKeyAccountAccount extends XdrEncodable  {
  ACCOUNTID accountID;
  LedgerKeyAccountExt ext;

  LedgerKeyAccountAccount(
      this.accountID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyAccountExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyAccountExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyAccountExtEmptyVersion extends LedgerKeyAccountExt {
  LedgerKeyAccountExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct
//      {
//          PublicKey pubKey;
//          AccountID accountID;
//
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeySignerSigner extends XdrEncodable  {
  PublicKey pubKey;
  ACCOUNTID accountID;
  LedgerKeySignerExt ext;

  LedgerKeySignerSigner(
      this.pubKey,
      this.accountID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    pubKey.toXdr(stream);
    accountID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeySignerExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeySignerExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeySignerExtEmptyVersion extends LedgerKeySignerExt {
  LedgerKeySignerExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          Hash hash;
//          int64 lowerBound;
//          int64 upperBound;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyFeeStateFeeState extends XdrEncodable  {
  HASH hash;
  INT64 lowerBound;
  INT64 upperBound;
  LedgerKeyFeeStateExt ext;

  LedgerKeyFeeStateFeeState(
      this.hash,
      this.lowerBound,
      this.upperBound,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    hash.toXdr(stream);
    lowerBound.toXdr(stream);
    upperBound.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyFeeStateExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyFeeStateExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyFeeStateExtEmptyVersion extends LedgerKeyFeeStateExt {
  LedgerKeyFeeStateExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct
//      {
//          BalanceID balanceID;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyBalanceBalance extends XdrEncodable  {
  BALANCEID balanceID;
  LedgerKeyBalanceExt ext;

  LedgerKeyBalanceBalance(
      this.balanceID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    balanceID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyBalanceExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyBalanceExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyBalanceExtEmptyVersion extends LedgerKeyBalanceExt {
  LedgerKeyBalanceExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct
//      {
//          AssetCode code;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyAssetAsset extends XdrEncodable  {
  ASSETCODE code;
  LedgerKeyAssetExt ext;

  LedgerKeyAssetAsset(
      this.code,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    code.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyAssetExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyAssetExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyAssetExtEmptyVersion extends LedgerKeyAssetExt {
  LedgerKeyAssetExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct
//      {
//  		AccountID sender;
//  		string64 reference;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      }

//  ===========================================================================
class LedgerKeyReferenceReference extends XdrEncodable  {
  ACCOUNTID sender;
  STRING64 reference;
  LedgerKeyReferenceExt ext;

  LedgerKeyReferenceReference(
      this.sender,
      this.reference,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    sender.toXdr(stream);
    reference.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyReferenceExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyReferenceExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyReferenceExtEmptyVersion extends LedgerKeyReferenceExt {
  LedgerKeyReferenceExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          AccountID accountID;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      }

//  ===========================================================================
class LedgerKeyStatsStats extends XdrEncodable  {
  ACCOUNTID accountID;
  LedgerKeyStatsExt ext;

  LedgerKeyStatsStats(
      this.accountID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyStatsExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyStatsExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyStatsExtEmptyVersion extends LedgerKeyStatsExt {
  LedgerKeyStatsExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          AccountID accountID;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      }

//  ===========================================================================
class LedgerKeyAccountLimitsAccountLimits extends XdrEncodable  {
  ACCOUNTID accountID;
  LedgerKeyAccountLimitsExt ext;

  LedgerKeyAccountLimitsAccountLimits(
      this.accountID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyAccountLimitsExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyAccountLimitsExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyAccountLimitsExtEmptyVersion extends LedgerKeyAccountLimitsExt {
  LedgerKeyAccountLimitsExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          AssetCode base;
//          AssetCode quote;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyAssetPairAssetPair extends XdrEncodable  {
  ASSETCODE base;
  ASSETCODE quote;
  LedgerKeyAssetPairExt ext;

  LedgerKeyAssetPairAssetPair(
      this.base,
      this.quote,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    base.toXdr(stream);
    quote.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyAssetPairExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyAssetPairExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyAssetPairExtEmptyVersion extends LedgerKeyAssetPairExt {
  LedgerKeyAssetPairExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          uint64 offerID;
//          AccountID ownerID;
//      }

//  ===========================================================================
class LedgerKeyOfferOffer extends XdrEncodable  {
  UINT64 offerID;
  ACCOUNTID ownerID;

  LedgerKeyOfferOffer(
      this.offerID,
      this.ownerID,
      );

  @override toXdr(XdrDataOutputStream stream) {
    offerID.toXdr(stream);
    ownerID.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          uint64 requestID;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyReviewableRequestReviewableRequest extends XdrEncodable  {
  UINT64 requestID;
  LedgerKeyReviewableRequestExt ext;

  LedgerKeyReviewableRequestReviewableRequest(
      this.requestID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyReviewableRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyReviewableRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyReviewableRequestExtEmptyVersion extends LedgerKeyReviewableRequestExt {
  LedgerKeyReviewableRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//  		AccountID accountID;
//  		int32 externalSystemType;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//  	}

//  ===========================================================================
class LedgerKeyExternalSystemAccountIDExternalSystemAccountID extends XdrEncodable  {
  ACCOUNTID accountID;
  INT32 externalSystemType;
  LedgerKeyExternalSystemAccountIDExt ext;

  LedgerKeyExternalSystemAccountIDExternalSystemAccountID(
      this.accountID,
      this.externalSystemType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    externalSystemType.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyExternalSystemAccountIDExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyExternalSystemAccountIDExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyExternalSystemAccountIDExtEmptyVersion extends LedgerKeyExternalSystemAccountIDExt {
  LedgerKeyExternalSystemAccountIDExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          uint64 saleID;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeySaleSale extends XdrEncodable  {
  UINT64 saleID;
  LedgerKeySaleExt ext;

  LedgerKeySaleSale(
      this.saleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeySaleExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeySaleExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeySaleExtEmptyVersion extends LedgerKeySaleExt {
  LedgerKeySaleExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          longstring key;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyKeyValueKeyValue extends XdrEncodable  {
  LONGSTRING key;
  LedgerKeyKeyValueExt ext;

  LedgerKeyKeyValueKeyValue(
      this.key,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    key.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyKeyValueExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyKeyValueExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyKeyValueExtEmptyVersion extends LedgerKeyKeyValueExt {
  LedgerKeyKeyValueExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          AccountID accountID;
//          union switch(LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyAccountKYCAccountKYC extends XdrEncodable  {
  ACCOUNTID accountID;
  LedgerKeyAccountKYCExt ext;

  LedgerKeyAccountKYCAccountKYC(
      this.accountID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    accountID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyAccountKYCExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyAccountKYCExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyAccountKYCExtEmptyVersion extends LedgerKeyAccountKYCExt {
  LedgerKeyAccountKYCExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//  		uint64 poolEntryID;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//  	}

//  ===========================================================================
class LedgerKeyExternalSystemAccountIDPoolEntryExternalSystemAccountIDPoolEntry extends XdrEncodable  {
  UINT64 poolEntryID;
  LedgerKeyExternalSystemAccountIDPoolEntryExt ext;

  LedgerKeyExternalSystemAccountIDPoolEntryExternalSystemAccountIDPoolEntry(
      this.poolEntryID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    poolEntryID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyExternalSystemAccountIDPoolEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyExternalSystemAccountIDPoolEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyExternalSystemAccountIDPoolEntryExtEmptyVersion extends LedgerKeyExternalSystemAccountIDPoolEntryExt {
  LedgerKeyExternalSystemAccountIDPoolEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          } ext;
//      }

//  ===========================================================================
class LedgerKeyLimitsV2LimitsV2 extends XdrEncodable  {
  UINT64 id;
  LedgerKeyLimitsV2Ext ext;

  LedgerKeyLimitsV2LimitsV2(
      this.id,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyLimitsV2Ext extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyLimitsV2Ext(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyLimitsV2ExtEmptyVersion extends LedgerKeyLimitsV2Ext {
  LedgerKeyLimitsV2ExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyStatisticsV2StatisticsV2 extends XdrEncodable  {
  UINT64 id;
  LedgerKeyStatisticsV2Ext ext;

  LedgerKeyStatisticsV2StatisticsV2(
      this.id,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyStatisticsV2Ext extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyStatisticsV2Ext(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyStatisticsV2ExtEmptyVersion extends LedgerKeyStatisticsV2Ext {
  LedgerKeyStatisticsV2ExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          uint64 statisticsID;
//          uint64 requestID;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyPendingStatisticsPendingStatistics extends XdrEncodable  {
  UINT64 statisticsID;
  UINT64 requestID;
  LedgerKeyPendingStatisticsExt ext;

  LedgerKeyPendingStatisticsPendingStatistics(
      this.statisticsID,
      this.requestID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    statisticsID.toXdr(stream);
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyPendingStatisticsExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyPendingStatisticsExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyPendingStatisticsExtEmptyVersion extends LedgerKeyPendingStatisticsExt {
  LedgerKeyPendingStatisticsExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          uint64 contractID;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyContractContract extends XdrEncodable  {
  UINT64 contractID;
  LedgerKeyContractExt ext;

  LedgerKeyContractContract(
      this.contractID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    contractID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyContractExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyContractExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyContractExtEmptyVersion extends LedgerKeyContractExt {
  LedgerKeyContractExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyAtomicSwapAskAtomicSwapAsk extends XdrEncodable  {
  UINT64 id;
  LedgerKeyAtomicSwapAskExt ext;

  LedgerKeyAtomicSwapAskAtomicSwapAsk(
      this.id,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyAtomicSwapAskExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyAtomicSwapAskExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyAtomicSwapAskExtEmptyVersion extends LedgerKeyAtomicSwapAskExt {
  LedgerKeyAtomicSwapAskExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyAccountRoleAccountRole extends XdrEncodable  {
  UINT64 id;
  LedgerKeyAccountRoleExt ext;

  LedgerKeyAccountRoleAccountRole(
      this.id,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyAccountRoleExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyAccountRoleExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyAccountRoleExtEmptyVersion extends LedgerKeyAccountRoleExt {
  LedgerKeyAccountRoleExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyAccountRuleAccountRule extends XdrEncodable  {
  UINT64 id;
  LedgerKeyAccountRuleExt ext;

  LedgerKeyAccountRuleAccountRule(
      this.id,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyAccountRuleExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyAccountRuleExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyAccountRuleExtEmptyVersion extends LedgerKeyAccountRuleExt {
  LedgerKeyAccountRuleExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeySignerRoleSignerRole extends XdrEncodable  {
  UINT64 id;
  LedgerKeySignerRoleExt ext;

  LedgerKeySignerRoleSignerRole(
      this.id,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeySignerRoleExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeySignerRoleExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeySignerRoleExtEmptyVersion extends LedgerKeySignerRoleExt {
  LedgerKeySignerRoleExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeySignerRuleSignerRule extends XdrEncodable  {
  UINT64 id;
  LedgerKeySignerRuleExt ext;

  LedgerKeySignerRuleSignerRule(
      this.id,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeySignerRuleExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeySignerRuleExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeySignerRuleExtEmptyVersion extends LedgerKeySignerRuleExt {
  LedgerKeySignerRuleExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          Hash ledgerHash;
//          Hash licenseHash;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class LedgerKeyStampStamp extends XdrEncodable  {
  HASH ledgerHash;
  HASH licenseHash;
  LedgerKeyStampExt ext;

  LedgerKeyStampStamp(
      this.ledgerHash,
      this.licenseHash,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ledgerHash.toXdr(stream);
    licenseHash.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyStampExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyStampExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyStampExtEmptyVersion extends LedgerKeyStampExt {
  LedgerKeyStampExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          Hash licenseHash;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          } ext;
//      }

//  ===========================================================================
class LedgerKeyLicenseLicense extends XdrEncodable  {
  HASH licenseHash;
  LedgerKeyLicenseExt ext;

  LedgerKeyLicenseLicense(
      this.licenseHash,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    licenseHash.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerKeyLicenseExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerKeyLicenseExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerKeyLicenseExtEmptyVersion extends LedgerKeyLicenseExt {
  LedgerKeyLicenseExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class LedgerKeyPollPoll extends XdrEncodable  {
  UINT64 id;
  EmptyExt ext;

  LedgerKeyPollPoll(
      this.id,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          uint64 pollID;
//          AccountID voterID;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class LedgerKeyVoteVote extends XdrEncodable  {
  UINT64 pollID;
  ACCOUNTID voterID;
  EmptyExt ext;

  LedgerKeyVoteVote(
      this.pollID,
      this.voterID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    voterID.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class LedgerKeyAccountSpecificRuleAccountSpecificRule extends XdrEncodable  {
  UINT64 id;
  EmptyExt ext;

  LedgerKeyAccountSpecificRuleAccountSpecificRule(
      this.id,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          uint64 id;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class LedgerKeySwapSwap extends XdrEncodable  {
  UINT64 id;
  EmptyExt ext;

  LedgerKeySwapSwap(
      this.id,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class LedgerKeyDataData extends XdrEncodable  {
  UINT64 id;
  EmptyExt ext;

  LedgerKeyDataData(
      this.id,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          uint64 id;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class LedgerKeyDeferredPaymentDeferredPayment extends XdrEncodable  {
  UINT64 id;
  EmptyExt ext;

  LedgerKeyDeferredPaymentDeferredPayment(
      this.id,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    ext.toXdr(stream);
  }
}

typedef UPGRADETYPE = Uint8List;
// === xdr source ============================================================

//  struct StellarValue
//  {
//      Hash txSetHash;   // transaction set to apply to previous ledger
//      uint64 closeTime; // network close time
//
//      // upgrades to apply to the previous ledger (usually empty)
//      // this is a vector of encoded 'LedgerUpgrade' so that nodes can drop
//      // unknown steps during consensus if needed.
//      // see notes below on 'LedgerUpgrade' for more detail
//      // max size is dictated by number of upgrade types (+ room for future)
//      UpgradeType upgrades<6>;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class StellarValue extends XdrEncodable  {
  HASH txSetHash;
  UINT64 closeTime;
  List<UPGRADETYPE> upgrades;
  StellarValueExt ext;

  StellarValue(
      this.txSetHash,
      this.closeTime,
      this.upgrades,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    txSetHash.toXdr(stream);
    closeTime.toXdr(stream);
    upgrades.length.toXdr(stream);
    upgrades.forEach ((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}
abstract class StellarValueExt extends XdrEncodable {
  LedgerVersion discriminant;
  StellarValueExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class StellarValueExtEmptyVersion extends StellarValueExt {
  StellarValueExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct IdGenerator {
//  	LedgerEntryType entryType; // type of the entry, for which ids will be generated
//  	uint64 idPool; // last used entry specific ID, used for generating entry of specified type
//  };

//  ===========================================================================
class IdGenerator extends XdrEncodable  {
  LedgerEntryType entryType;
  UINT64 idPool;

  IdGenerator(
      this.entryType,
      this.idPool,
      );

  @override toXdr(XdrDataOutputStream stream) {
    entryType.toXdr(stream);
    idPool.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct LedgerHeader
//  {
//      uint32 ledgerVersion;    // the protocol version of the ledger
//      Hash previousLedgerHash; // hash of the previous ledger header
//      StellarValue scpValue;   // what consensus agreed to
//      Hash txSetResultHash;    // the TransactionResultSet that led to this ledger
//      Hash bucketListHash;     // hash of the ledger state
//
//      uint32 ledgerSeq; // sequence number of this ledger
//
//      IdGenerator idGenerators<>; // generators of ids
//
//      uint32 baseFee;     // base fee per operation in stroops
//      uint32 baseReserve; // account base reserve in stroops
//
//      uint32 maxTxSetSize; // maximum size a transaction set can be
//
//      int64 txExpirationPeriod;
//
//      Hash skipList[4]; // hashes of ledgers in the past. allows you to jump back
//                        // in time without walking the chain back ledger by ledger
//                        // each slot contains the oldest ledger that is mod of
//                        // either 50  5000  50000 or 500000 depending on index
//                        // skipList[0] mod(50), skipList[1] mod(5000), etc
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LedgerHeader extends XdrEncodable  {
  UINT32 ledgerVersion;
  HASH previousLedgerHash;
  StellarValue scpValue;
  HASH txSetResultHash;
  HASH bucketListHash;
  UINT32 ledgerSeq;
  List<IdGenerator> idGenerators;
  UINT32 baseFee;
  UINT32 baseReserve;
  UINT32 maxTxSetSize;
  INT64 txExpirationPeriod;
  List<HASH> skipList;
  LedgerHeaderExt ext;

  LedgerHeader(
      this.ledgerVersion,
      this.previousLedgerHash,
      this.scpValue,
      this.txSetResultHash,
      this.bucketListHash,
      this.ledgerSeq,
      this.idGenerators,
      this.baseFee,
      this.baseReserve,
      this.maxTxSetSize,
      this.txExpirationPeriod,
      this.skipList,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ledgerVersion.toXdr(stream);
    previousLedgerHash.toXdr(stream);
    scpValue.toXdr(stream);
    txSetResultHash.toXdr(stream);
    bucketListHash.toXdr(stream);
    ledgerSeq.toXdr(stream);
    idGenerators.length.toXdr(stream);
    idGenerators.forEach ((element) {
      element.toXdr(stream);
    });
    baseFee.toXdr(stream);
    baseReserve.toXdr(stream);
    maxTxSetSize.toXdr(stream);
    txExpirationPeriod.toXdr(stream);
    skipList.forEach ((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}
abstract class LedgerHeaderExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerHeaderExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerHeaderExtEmptyVersion extends LedgerHeaderExt {
  LedgerHeaderExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class LedgerUpgradeType extends XdrEncodable {
  static const VERSION = 1;
  static const MAX_TX_SET_SIZE = 2;
  static const TX_EXPIRATION_PERIOD = 3;
  int value;
  LedgerUpgradeType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class LedgerUpgrade extends XdrEncodable {
  LedgerUpgradeType discriminant;
  LedgerUpgrade(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerUpgradeVersion extends LedgerUpgrade {
  LedgerUpgradeVersion(this.newLedgerVersion) : super(LedgerUpgradeType(LedgerUpgradeType.VERSION));
  late UINT32 newLedgerVersion;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    newLedgerVersion.toXdr(stream);
  }
}

class LedgerUpgradeMaxTxSetSize extends LedgerUpgrade {
  LedgerUpgradeMaxTxSetSize(this.newMaxTxSetSize) : super(LedgerUpgradeType(LedgerUpgradeType.MAX_TX_SET_SIZE));
  late UINT32 newMaxTxSetSize;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    newMaxTxSetSize.toXdr(stream);
  }
}

class LedgerUpgradeTxExpirationPeriod extends LedgerUpgrade {
  LedgerUpgradeTxExpirationPeriod(this.newTxExpirationPeriod) : super(LedgerUpgradeType(LedgerUpgradeType.TX_EXPIRATION_PERIOD));
  late INT64 newTxExpirationPeriod;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    newTxExpirationPeriod.toXdr(stream);
  }
}

class BucketEntryType extends XdrEncodable {
  static const LIVEENTRY = 0;
  static const DEADENTRY = 1;
  int value;
  BucketEntryType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class BucketEntry extends XdrEncodable {
  BucketEntryType discriminant;
  BucketEntry(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class BucketEntryLiveentry extends BucketEntry {
  BucketEntryLiveentry(this.liveEntry) : super(BucketEntryType(BucketEntryType.LIVEENTRY));
  late LedgerEntry liveEntry;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    liveEntry.toXdr(stream);
  }
}

class BucketEntryDeadentry extends BucketEntry {
  BucketEntryDeadentry(this.deadEntry) : super(BucketEntryType(BucketEntryType.DEADENTRY));
  late LedgerKey deadEntry;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    deadEntry.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct TransactionSet
//  {
//      Hash previousLedgerHash;
//      TransactionEnvelope txs<>;
//  };

//  ===========================================================================
class TransactionSet extends XdrEncodable  {
  HASH previousLedgerHash;
  List<TransactionEnvelope> txs;

  TransactionSet(
      this.previousLedgerHash,
      this.txs,
      );

  @override toXdr(XdrDataOutputStream stream) {
    previousLedgerHash.toXdr(stream);
    txs.length.toXdr(stream);
    txs.forEach ((element) {
      element.toXdr(stream);
    });
  }
}
// === xdr source ============================================================

//  struct TransactionResultPair
//  {
//      Hash transactionHash;
//      TransactionResult result; // result for the transaction
//  };

//  ===========================================================================
class TransactionResultPair extends XdrEncodable  {
  HASH transactionHash;
  TransactionResult result;

  TransactionResultPair(
      this.transactionHash,
      this.result,
      );

  @override toXdr(XdrDataOutputStream stream) {
    transactionHash.toXdr(stream);
    result.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct TransactionResultSet
//  {
//      TransactionResultPair results<>;
//  };

//  ===========================================================================
class TransactionResultSet extends XdrEncodable  {
  List<TransactionResultPair> results;

  TransactionResultSet(
      this.results,
      );

  @override toXdr(XdrDataOutputStream stream) {
    results.length.toXdr(stream);
    results.forEach ((element) {
      element.toXdr(stream);
    });
  }
}
// === xdr source ============================================================

//  struct TransactionHistoryEntry
//  {
//      uint32 ledgerSeq;
//      TransactionSet txSet;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class TransactionHistoryEntry extends XdrEncodable  {
  UINT32 ledgerSeq;
  TransactionSet txSet;
  TransactionHistoryEntryExt ext;

  TransactionHistoryEntry(
      this.ledgerSeq,
      this.txSet,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ledgerSeq.toXdr(stream);
    txSet.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class TransactionHistoryEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  TransactionHistoryEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class TransactionHistoryEntryExtEmptyVersion extends TransactionHistoryEntryExt {
  TransactionHistoryEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct TransactionHistoryResultEntry
//  {
//      uint32 ledgerSeq;
//      TransactionResultSet txResultSet;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class TransactionHistoryResultEntry extends XdrEncodable  {
  UINT32 ledgerSeq;
  TransactionResultSet txResultSet;
  TransactionHistoryResultEntryExt ext;

  TransactionHistoryResultEntry(
      this.ledgerSeq,
      this.txResultSet,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ledgerSeq.toXdr(stream);
    txResultSet.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class TransactionHistoryResultEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  TransactionHistoryResultEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class TransactionHistoryResultEntryExtEmptyVersion extends TransactionHistoryResultEntryExt {
  TransactionHistoryResultEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct LedgerHeaderHistoryEntry
//  {
//      Hash hash;
//      LedgerHeader header;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LedgerHeaderHistoryEntry extends XdrEncodable  {
  HASH hash;
  LedgerHeader header;
  LedgerHeaderHistoryEntryExt ext;

  LedgerHeaderHistoryEntry(
      this.hash,
      this.header,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    hash.toXdr(stream);
    header.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LedgerHeaderHistoryEntryExt extends XdrEncodable {
  LedgerVersion discriminant;
  LedgerHeaderHistoryEntryExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerHeaderHistoryEntryExtEmptyVersion extends LedgerHeaderHistoryEntryExt {
  LedgerHeaderHistoryEntryExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct LedgerSCPMessages
//  {
//      uint32 ledgerSeq;
//      SCPEnvelope messages<>;
//  };

//  ===========================================================================
class LedgerSCPMessages extends XdrEncodable  {
  UINT32 ledgerSeq;
  List<SCPEnvelope> messages;

  LedgerSCPMessages(
      this.ledgerSeq,
      this.messages,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ledgerSeq.toXdr(stream);
    messages.length.toXdr(stream);
    messages.forEach ((element) {
      element.toXdr(stream);
    });
  }
}
// === xdr source ============================================================

//  struct SCPHistoryEntryV0
//  {
//      SCPQuorumSet quorumSets<>; // additional quorum sets used by ledgerMessages
//      LedgerSCPMessages ledgerMessages;
//  };

//  ===========================================================================
class SCPHistoryEntryV0 extends XdrEncodable  {
  List<SCPQuorumSet> quorumSets;
  LedgerSCPMessages ledgerMessages;

  SCPHistoryEntryV0(
      this.quorumSets,
      this.ledgerMessages,
      );

  @override toXdr(XdrDataOutputStream stream) {
    quorumSets.length.toXdr(stream);
    quorumSets.forEach ((element) {
      element.toXdr(stream);
    });
    ledgerMessages.toXdr(stream);
  }
}
abstract class SCPHistoryEntry extends XdrEncodable {
  LedgerVersion discriminant;
  SCPHistoryEntry(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SCPHistoryEntryEmptyVersion extends SCPHistoryEntry {
  SCPHistoryEntryEmptyVersion(this.v0) : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
  late SCPHistoryEntryV0 v0;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    v0.toXdr(stream);
  }
}

class LedgerEntryChangeType extends XdrEncodable {
  static const CREATED = 0;
  static const UPDATED = 1;
  static const REMOVED = 2;
  static const STATE = 3;
  int value;
  LedgerEntryChangeType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class LedgerEntryChange extends XdrEncodable {
  LedgerEntryChangeType discriminant;
  LedgerEntryChange(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LedgerEntryChangeCreated extends LedgerEntryChange {
  LedgerEntryChangeCreated(this.created) : super(LedgerEntryChangeType(LedgerEntryChangeType.CREATED));
  late LedgerEntry created;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    created.toXdr(stream);
  }
}

class LedgerEntryChangeUpdated extends LedgerEntryChange {
  LedgerEntryChangeUpdated(this.updated) : super(LedgerEntryChangeType(LedgerEntryChangeType.UPDATED));
  late LedgerEntry updated;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updated.toXdr(stream);
  }
}

class LedgerEntryChangeRemoved extends LedgerEntryChange {
  LedgerEntryChangeRemoved(this.removed) : super(LedgerEntryChangeType(LedgerEntryChangeType.REMOVED));
  late LedgerKey removed;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removed.toXdr(stream);
  }
}

class LedgerEntryChangeState extends LedgerEntryChange {
  LedgerEntryChangeState(this.state) : super(LedgerEntryChangeType(LedgerEntryChangeType.STATE));
  late LedgerEntry state;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    state.toXdr(stream);
  }
}

typedef LEDGERENTRYCHANGES = List<LedgerEntryChange>;

extension LedgerEntryChangesToXdr on LEDGERENTRYCHANGES {
  toXdr(XdrDataOutputStream stream) {
    this.length.toXdr(stream);
    this.forEach ((element) {
      element.toXdr(stream);
    });
  }}
// === xdr source ============================================================

//  struct OperationMeta
//  {
//      LedgerEntryChanges changes;
//  };

//  ===========================================================================
class OperationMeta extends XdrEncodable  {
  LEDGERENTRYCHANGES changes;

  OperationMeta(
      this.changes,
      );

  @override toXdr(XdrDataOutputStream stream) {
    changes.toXdr(stream);
  }
}
abstract class TransactionMeta extends XdrEncodable {
  LedgerVersion discriminant;
  TransactionMeta(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class TransactionMetaEmptyVersion extends TransactionMeta {
  TransactionMetaEmptyVersion(this.operations) : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
  late List<OperationMeta> operations;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    operations.length.toXdr(stream);
    operations.forEach ((element) {
      element.toXdr(stream);
    });
  }
}

// === xdr source ============================================================

//  //: BindExternalSystemAccountIdOp is used to bind a particular account to the external system account which is represented by account ID taken from the pool
//  struct BindExternalSystemAccountIdOp
//  {
//      //: Type of external system to bind
//      int32 externalSystemType;
//
//      //: Reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class BindExternalSystemAccountIdOp extends XdrEncodable  {
  INT32 externalSystemType;
  BindExternalSystemAccountIdOpExt ext;

  BindExternalSystemAccountIdOp(
      this.externalSystemType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    externalSystemType.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class BindExternalSystemAccountIdOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  BindExternalSystemAccountIdOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class BindExternalSystemAccountIdOpExtEmptyVersion extends BindExternalSystemAccountIdOpExt {
  BindExternalSystemAccountIdOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class BindExternalSystemAccountIdResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const NO_AVAILABLE_ID = -2;
  int value;
  BindExternalSystemAccountIdResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: `BindExternalSystemAccountIdSuccess` represents details of successful result of operation application
//  struct BindExternalSystemAccountIdSuccess
//  {
//      //: `data` is used to pass data about account from external system ID
//      longstring data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class BindExternalSystemAccountIdSuccess extends XdrEncodable  {
  LONGSTRING data;
  BindExternalSystemAccountIdSuccessExt ext;

  BindExternalSystemAccountIdSuccess(
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class BindExternalSystemAccountIdSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  BindExternalSystemAccountIdSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class BindExternalSystemAccountIdSuccessExtEmptyVersion extends BindExternalSystemAccountIdSuccessExt {
  BindExternalSystemAccountIdSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class BindExternalSystemAccountIdResult extends XdrEncodable {
  BindExternalSystemAccountIdResultCode discriminant;
  BindExternalSystemAccountIdResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class BindExternalSystemAccountIdResultSuccess extends BindExternalSystemAccountIdResult {
  BindExternalSystemAccountIdResultSuccess(this.success) : super(BindExternalSystemAccountIdResultCode(BindExternalSystemAccountIdResultCode.SUCCESS));
  late BindExternalSystemAccountIdSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelAtomicSwapAskOp is used to cancel existing atomic swap ask
//  struct CancelAtomicSwapAskOp
//  {
//      //: id of existing atomic swap ask
//      uint64 askID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CancelAtomicSwapAskOp extends XdrEncodable  {
  UINT64 askID;
  CancelAtomicSwapAskOpExt ext;

  CancelAtomicSwapAskOp(
      this.askID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    askID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CancelAtomicSwapAskOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelAtomicSwapAskOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelAtomicSwapAskOpExtEmptyVersion extends CancelAtomicSwapAskOpExt {
  CancelAtomicSwapAskOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CancelAtomicSwapAskResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const ALREADY_CANCELLED = -2;
  int value;
  CancelAtomicSwapAskResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Success result of CancelASwapAskOp application
//  struct CancelAtomicSwapAskResultSuccess
//  {
//      //: Sum of `CREATE_ATOMIC_SWAP_BID` requests' base amounts which are waiting for applying.
//      //: Zero means that ask successfully removed
//      uint64 lockedAmount;
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CancelAtomicSwapAskResultSuccess extends XdrEncodable  {
  UINT64 lockedAmount;
  CancelAtomicSwapAskResultSuccessExt ext;

  CancelAtomicSwapAskResultSuccess(
      this.lockedAmount,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    lockedAmount.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CancelAtomicSwapAskResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelAtomicSwapAskResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelAtomicSwapAskResultSuccessExtEmptyVersion extends CancelAtomicSwapAskResultSuccessExt {
  CancelAtomicSwapAskResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CancelAtomicSwapAskResult extends XdrEncodable {
  CancelAtomicSwapAskResultCode discriminant;
  CancelAtomicSwapAskResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelAtomicSwapAskResultSuccessSuccess extends CancelAtomicSwapAskResult {
  CancelAtomicSwapAskResultSuccessSuccess(this.success) : super(CancelAtomicSwapAskResultCode(CancelAtomicSwapAskResultCode.SUCCESS));
  late CancelAtomicSwapAskResultSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelChangeRoleRequestOp is used to cancel reviwable request for changing role.
//  //: If successful, request with the corresponding ID will be deleted
//  struct CancelChangeRoleRequestOp
//  {
//      //: ID of the ChangeRoleRequest request to be canceled
//      uint64 requestID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CancelChangeRoleRequestOp extends XdrEncodable  {
  UINT64 requestID;
  CancelChangeRoleRequestOpExt ext;

  CancelChangeRoleRequestOp(
      this.requestID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CancelChangeRoleRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelChangeRoleRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelChangeRoleRequestOpExtEmptyVersion extends CancelChangeRoleRequestOpExt {
  CancelChangeRoleRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CancelChangeRoleRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REQUEST_ID_INVALID = -1;
  static const REQUEST_NOT_FOUND = -2;
  int value;
  CancelChangeRoleRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Result of successful `CancelChangeRoleRequestOp` application
//  struct CancelChangeRoleSuccess {
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CancelChangeRoleSuccess extends XdrEncodable  {
  CancelChangeRoleSuccessExt ext;

  CancelChangeRoleSuccess(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class CancelChangeRoleSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelChangeRoleSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelChangeRoleSuccessExtEmptyVersion extends CancelChangeRoleSuccessExt {
  CancelChangeRoleSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CancelChangeRoleRequestResult extends XdrEncodable {
  CancelChangeRoleRequestResultCode discriminant;
  CancelChangeRoleRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelChangeRoleRequestResultSuccess extends CancelChangeRoleRequestResult {
  CancelChangeRoleRequestResultSuccess(this.success) : super(CancelChangeRoleRequestResultCode(CancelChangeRoleRequestResultCode.SUCCESS));
  late CancelChangeRoleSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelCloseDeferredPaymentRequestOp is used to cancel existing deferred payment creation request
//  struct CancelCloseDeferredPaymentRequestOp
//  {
//      //: id of existing request
//      uint64 requestID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CancelCloseDeferredPaymentRequestOp extends XdrEncodable  {
  UINT64 requestID;
  CancelCloseDeferredPaymentRequestOpExt ext;

  CancelCloseDeferredPaymentRequestOp(
      this.requestID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CancelCloseDeferredPaymentRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelCloseDeferredPaymentRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelCloseDeferredPaymentRequestOpExtEmptyVersion extends CancelCloseDeferredPaymentRequestOpExt {
  CancelCloseDeferredPaymentRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CancelCloseDeferredPaymentRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  int value;
  CancelCloseDeferredPaymentRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Success result of CancelCloseDeferredPaymentRequestOp application
//  struct CancelCloseDeferredPaymentRequestResultSuccess
//  {
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CancelCloseDeferredPaymentRequestResultSuccess extends XdrEncodable  {
  CancelCloseDeferredPaymentRequestResultSuccessExt ext;

  CancelCloseDeferredPaymentRequestResultSuccess(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class CancelCloseDeferredPaymentRequestResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelCloseDeferredPaymentRequestResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelCloseDeferredPaymentRequestResultSuccessExtEmptyVersion extends CancelCloseDeferredPaymentRequestResultSuccessExt {
  CancelCloseDeferredPaymentRequestResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CancelCloseDeferredPaymentRequestResult extends XdrEncodable {
  CancelCloseDeferredPaymentRequestResultCode discriminant;
  CancelCloseDeferredPaymentRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelCloseDeferredPaymentRequestResultSuccessSuccess extends CancelCloseDeferredPaymentRequestResult {
  CancelCloseDeferredPaymentRequestResultSuccessSuccess(this.success) : super(CancelCloseDeferredPaymentRequestResultCode(CancelCloseDeferredPaymentRequestResultCode.SUCCESS));
  late CancelCloseDeferredPaymentRequestResultSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelDataCreationRequestOp is used to cancel reviwable request for data creation.
//  //: If successful, request with the corresponding ID will be deleted
//  struct CancelDataCreationRequestOp
//  {
//      //: ID of the DataCreationRequest request to be canceled
//      uint64 requestID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CancelDataCreationRequestOp extends XdrEncodable  {
  UINT64 requestID;
  CancelDataCreationRequestOpExt ext;

  CancelDataCreationRequestOp(
      this.requestID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CancelDataCreationRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelDataCreationRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelDataCreationRequestOpExtEmptyVersion extends CancelDataCreationRequestOpExt {
  CancelDataCreationRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CancelDataCreationRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REQUEST_ID_INVALID = -1;
  static const REQUEST_NOT_FOUND = -2;
  int value;
  CancelDataCreationRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Result of successful `CancelDataCreationRequestOp` application
//  struct CancelDataCreationSuccess {
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CancelDataCreationSuccess extends XdrEncodable  {
  CancelDataCreationSuccessExt ext;

  CancelDataCreationSuccess(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class CancelDataCreationSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelDataCreationSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelDataCreationSuccessExtEmptyVersion extends CancelDataCreationSuccessExt {
  CancelDataCreationSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CancelDataCreationRequestResult extends XdrEncodable {
  CancelDataCreationRequestResultCode discriminant;
  CancelDataCreationRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelDataCreationRequestResultSuccess extends CancelDataCreationRequestResult {
  CancelDataCreationRequestResultSuccess(this.success) : super(CancelDataCreationRequestResultCode(CancelDataCreationRequestResultCode.SUCCESS));
  late CancelDataCreationSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelDataRemoveRequestOp is used to cancel reviwable request for data Remove.
//  //: If successful, request with the corresponding ID will be deleted
//  struct CancelDataRemoveRequestOp
//  {
//      //: ID of the DataRemoveRequest request to be canceled
//      uint64 requestID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CancelDataRemoveRequestOp extends XdrEncodable  {
  UINT64 requestID;
  CancelDataRemoveRequestOpExt ext;

  CancelDataRemoveRequestOp(
      this.requestID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CancelDataRemoveRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelDataRemoveRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelDataRemoveRequestOpExtEmptyVersion extends CancelDataRemoveRequestOpExt {
  CancelDataRemoveRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CancelDataRemoveRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REQUEST_ID_INVALID = -1;
  static const REQUEST_NOT_FOUND = -2;
  int value;
  CancelDataRemoveRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Result of successful `CancelDataRemoveRequestOp` application
//  struct CancelDataRemoveSuccess {
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CancelDataRemoveSuccess extends XdrEncodable  {
  CancelDataRemoveSuccessExt ext;

  CancelDataRemoveSuccess(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class CancelDataRemoveSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelDataRemoveSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelDataRemoveSuccessExtEmptyVersion extends CancelDataRemoveSuccessExt {
  CancelDataRemoveSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CancelDataRemoveRequestResult extends XdrEncodable {
  CancelDataRemoveRequestResultCode discriminant;
  CancelDataRemoveRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelDataRemoveRequestResultSuccess extends CancelDataRemoveRequestResult {
  CancelDataRemoveRequestResultSuccess(this.success) : super(CancelDataRemoveRequestResultCode(CancelDataRemoveRequestResultCode.SUCCESS));
  late CancelDataRemoveSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelDataUpdateRequestOp is used to cancel reviwable request for data Update.
//  //: If successful, request with the corresponding ID will be deleted
//  struct CancelDataUpdateRequestOp
//  {
//      //: ID of the DataUpdateRequest request to be canceled
//      uint64 requestID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CancelDataUpdateRequestOp extends XdrEncodable  {
  UINT64 requestID;
  CancelDataUpdateRequestOpExt ext;

  CancelDataUpdateRequestOp(
      this.requestID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CancelDataUpdateRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelDataUpdateRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelDataUpdateRequestOpExtEmptyVersion extends CancelDataUpdateRequestOpExt {
  CancelDataUpdateRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CancelDataUpdateRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REQUEST_ID_INVALID = -1;
  static const REQUEST_NOT_FOUND = -2;
  int value;
  CancelDataUpdateRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Result of successful `CancelDataUpdateRequestOp` application
//  struct CancelDataUpdateSuccess {
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CancelDataUpdateSuccess extends XdrEncodable  {
  CancelDataUpdateSuccessExt ext;

  CancelDataUpdateSuccess(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class CancelDataUpdateSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelDataUpdateSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelDataUpdateSuccessExtEmptyVersion extends CancelDataUpdateSuccessExt {
  CancelDataUpdateSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CancelDataUpdateRequestResult extends XdrEncodable {
  CancelDataUpdateRequestResultCode discriminant;
  CancelDataUpdateRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelDataUpdateRequestResultSuccess extends CancelDataUpdateRequestResult {
  CancelDataUpdateRequestResultSuccess(this.success) : super(CancelDataUpdateRequestResultCode(CancelDataUpdateRequestResultCode.SUCCESS));
  late CancelDataUpdateSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelDeferredPaymentCreationRequestOp is used to cancel existing deferred payment creation request
//  struct CancelDeferredPaymentCreationRequestOp
//  {
//      //: id of existing request
//      uint64 requestID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CancelDeferredPaymentCreationRequestOp extends XdrEncodable  {
  UINT64 requestID;
  CancelDeferredPaymentCreationRequestOpExt ext;

  CancelDeferredPaymentCreationRequestOp(
      this.requestID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CancelDeferredPaymentCreationRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelDeferredPaymentCreationRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelDeferredPaymentCreationRequestOpExtEmptyVersion extends CancelDeferredPaymentCreationRequestOpExt {
  CancelDeferredPaymentCreationRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CancelDeferredPaymentCreationRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const REQUEST_ID_INVALID = -2;
  static const LINE_FULL = -3;
  int value;
  CancelDeferredPaymentCreationRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Success result of CancelDeferredPaymentCreationRequestOp application
//  struct CancelDeferredPaymentCreationRequestResultSuccess
//  {
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CancelDeferredPaymentCreationRequestResultSuccess extends XdrEncodable  {
  CancelDeferredPaymentCreationRequestResultSuccessExt ext;

  CancelDeferredPaymentCreationRequestResultSuccess(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class CancelDeferredPaymentCreationRequestResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelDeferredPaymentCreationRequestResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelDeferredPaymentCreationRequestResultSuccessExtEmptyVersion extends CancelDeferredPaymentCreationRequestResultSuccessExt {
  CancelDeferredPaymentCreationRequestResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CancelDeferredPaymentCreationRequestResult extends XdrEncodable {
  CancelDeferredPaymentCreationRequestResultCode discriminant;
  CancelDeferredPaymentCreationRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelDeferredPaymentCreationRequestResultSuccessSuccess extends CancelDeferredPaymentCreationRequestResult {
  CancelDeferredPaymentCreationRequestResultSuccessSuccess(this.success) : super(CancelDeferredPaymentCreationRequestResultCode(CancelDeferredPaymentCreationRequestResultCode.SUCCESS));
  late CancelDeferredPaymentCreationRequestResultSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CancelSaleCreationRequest operation is used to cancel sale creation request.
//  //: If successful, request with the corresponding ID will be deleted
//  //: SaleCreationRequest with provided ID
//  struct CancelSaleCreationRequestOp
//  {
//      //: ID of the SaleCreation request to be canceled
//      uint64 requestID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CancelSaleCreationRequestOp extends XdrEncodable  {
  UINT64 requestID;
  CancelSaleCreationRequestOpExt ext;

  CancelSaleCreationRequestOp(
      this.requestID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CancelSaleCreationRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelSaleCreationRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelSaleCreationRequestOpExtEmptyVersion extends CancelSaleCreationRequestOpExt {
  CancelSaleCreationRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CancelSaleCreationRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REQUEST_ID_INVALID = -1;
  static const REQUEST_NOT_FOUND = -2;
  int value;
  CancelSaleCreationRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Result of successful `CancelSaleCreationRequestOp` application
//  struct CancelSaleCreationSuccess {
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CancelSaleCreationSuccess extends XdrEncodable  {
  CancelSaleCreationSuccessExt ext;

  CancelSaleCreationSuccess(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class CancelSaleCreationSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelSaleCreationSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelSaleCreationSuccessExtEmptyVersion extends CancelSaleCreationSuccessExt {
  CancelSaleCreationSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CancelSaleCreationRequestResult extends XdrEncodable {
  CancelSaleCreationRequestResultCode discriminant;
  CancelSaleCreationRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelSaleCreationRequestResultSuccess extends CancelSaleCreationRequestResult {
  CancelSaleCreationRequestResultSuccess(this.success) : super(CancelSaleCreationRequestResultCode(CancelSaleCreationRequestResultCode.SUCCESS));
  late CancelSaleCreationSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CheckSaleState operation is used to perform check on sale state - whether the sale was successful or not
//  struct CheckSaleStateOp
//  {
//      //:ID of the sale to check
//      uint64 saleID;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CheckSaleStateOp extends XdrEncodable  {
  UINT64 saleID;
  CheckSaleStateOpExt ext;

  CheckSaleStateOp(
      this.saleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CheckSaleStateOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CheckSaleStateOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CheckSaleStateOpExtEmptyVersion extends CheckSaleStateOpExt {
  CheckSaleStateOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CheckSaleStateResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const NOT_READY = -2;
  int value;
  CheckSaleStateResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
class CheckSaleStateEffect extends XdrEncodable {
  static const CANCELED = 1;
  static const CLOSED = 2;
  static const UPDATED = 3;
  int value;
  CheckSaleStateEffect(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Entry for additional information regarding sale cancel
//  struct SaleCanceled {
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SaleCanceled extends XdrEncodable  {
  SaleCanceledExt ext;

  SaleCanceled(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class SaleCanceledExt extends XdrEncodable {
  LedgerVersion discriminant;
  SaleCanceledExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SaleCanceledExtEmptyVersion extends SaleCanceledExt {
  SaleCanceledExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Entry for additional information regarding sale update
//  struct SaleUpdated {
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SaleUpdated extends XdrEncodable  {
  SaleUpdatedExt ext;

  SaleUpdated(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class SaleUpdatedExt extends XdrEncodable {
  LedgerVersion discriminant;
  SaleUpdatedExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SaleUpdatedExtEmptyVersion extends SaleUpdatedExt {
  SaleUpdatedExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Entry for additional information regarding sub sale closing
//  struct CheckSubSaleClosedResult {
//      //: Balance in base asset of the closed sale
//      BalanceID saleBaseBalance;
//      //: Balance in one of the quote assets of the closed sale
//      BalanceID saleQuoteBalance;
//      //: Result of an individual offer made during the sale and completed on its close
//      ManageOfferSuccessResult saleDetails;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//        void;
//      }
//      ext;
//  };

//  ===========================================================================
class CheckSubSaleClosedResult extends XdrEncodable  {
  BALANCEID saleBaseBalance;
  BALANCEID saleQuoteBalance;
  ManageOfferSuccessResult saleDetails;
  CheckSubSaleClosedResultExt ext;

  CheckSubSaleClosedResult(
      this.saleBaseBalance,
      this.saleQuoteBalance,
      this.saleDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    saleBaseBalance.toXdr(stream);
    saleQuoteBalance.toXdr(stream);
    saleDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CheckSubSaleClosedResultExt extends XdrEncodable {
  LedgerVersion discriminant;
  CheckSubSaleClosedResultExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CheckSubSaleClosedResultExtEmptyVersion extends CheckSubSaleClosedResultExt {
  CheckSubSaleClosedResultExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Entry for additional information regarding sale closing
//  struct CheckSaleClosedResult {
//      //: AccountID of the sale owner
//      AccountID saleOwner;
//      //: Array of individual's contribution details
//      CheckSubSaleClosedResult results<>;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//        case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CheckSaleClosedResult extends XdrEncodable  {
  ACCOUNTID saleOwner;
  List<CheckSubSaleClosedResult> results;
  CheckSaleClosedResultExt ext;

  CheckSaleClosedResult(
      this.saleOwner,
      this.results,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    saleOwner.toXdr(stream);
    results.length.toXdr(stream);
    results.forEach ((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}
abstract class CheckSaleClosedResultExt extends XdrEncodable {
  LedgerVersion discriminant;
  CheckSaleClosedResultExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CheckSaleClosedResultExtEmptyVersion extends CheckSaleClosedResultExt {
  CheckSaleClosedResultExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Result of the successful application of CheckSaleState operation
//  struct CheckSaleStateSuccess
//  {
//      //: ID of the sale being checked
//      uint64 saleID;
//      //: Additional information regarding eventual result
//      union switch (CheckSaleStateEffect effect)
//      {
//      case CANCELED:
//          SaleCanceled saleCanceled;
//      case CLOSED:
//          CheckSaleClosedResult saleClosed;
//      case UPDATED:
//          SaleUpdated saleUpdated;
//      }
//      effect;
//       //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//        case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CheckSaleStateSuccess extends XdrEncodable  {
  UINT64 saleID;
  CheckSaleStateSuccessEffect effect;
  CheckSaleStateSuccessExt ext;

  CheckSaleStateSuccess(
      this.saleID,
      this.effect,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    effect.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CheckSaleStateSuccessEffect extends XdrEncodable {
  CheckSaleStateEffect discriminant;
  CheckSaleStateSuccessEffect(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CheckSaleStateSuccessEffectCanceled extends CheckSaleStateSuccessEffect {
  CheckSaleStateSuccessEffectCanceled(this.saleCanceled) : super(CheckSaleStateEffect(CheckSaleStateEffect.CANCELED));
  late SaleCanceled saleCanceled;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    saleCanceled.toXdr(stream);
  }
}

class CheckSaleStateSuccessEffectClosed extends CheckSaleStateSuccessEffect {
  CheckSaleStateSuccessEffectClosed(this.saleClosed) : super(CheckSaleStateEffect(CheckSaleStateEffect.CLOSED));
  late CheckSaleClosedResult saleClosed;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    saleClosed.toXdr(stream);
  }
}

class CheckSaleStateSuccessEffectUpdated extends CheckSaleStateSuccessEffect {
  CheckSaleStateSuccessEffectUpdated(this.saleUpdated) : super(CheckSaleStateEffect(CheckSaleStateEffect.UPDATED));
  late SaleUpdated saleUpdated;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    saleUpdated.toXdr(stream);
  }
}

abstract class CheckSaleStateSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CheckSaleStateSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CheckSaleStateSuccessExtEmptyVersion extends CheckSaleStateSuccessExt {
  CheckSaleStateSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CheckSaleStateResult extends XdrEncodable {
  CheckSaleStateResultCode discriminant;
  CheckSaleStateResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CheckSaleStateResultSuccess extends CheckSaleStateResult {
  CheckSaleStateResultSuccess(this.success) : super(CheckSaleStateResultCode(CheckSaleStateResultCode.SUCCESS));
  late CheckSaleStateSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct CloseSwapOp
//  {
//      //: ID of the swap to close
//      uint64 swapID;
//      //: (optional) Secret of the swap. Must be provided in order for destination of the swap to receive funds
//      Hash* secret;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CloseSwapOp extends XdrEncodable  {
  UINT64 swapID;
  HASH? secret;
  EmptyExt ext;

  CloseSwapOp(
      this.swapID,
      this.secret,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    swapID.toXdr(stream);
    if (secret != null) {
      true.toXdr(stream);
      secret?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
class CloseSwapResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const SWAP_EXPIRED = -1;
  static const INVALID_SECRET = -2;
  static const LINE_FULL = -3;
  static const NOT_AUTHORIZED = -4;
  int value;
  CloseSwapResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
class CloseSwapEffect extends XdrEncodable {
  static const CLOSED = 0;
  static const CANCELLED = 1;
  int value;
  CloseSwapEffect(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: CloseSwapSuccess is used to pass saved ledger hash and license hash
//  struct CloseSwapSuccess {
//      //: Effect of CloseSwap application
//      CloseSwapEffect effect;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class CloseSwapSuccess extends XdrEncodable  {
  CloseSwapEffect effect;
  EmptyExt ext;

  CloseSwapSuccess(
      this.effect,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    effect.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CloseSwapResult extends XdrEncodable {
  CloseSwapResultCode discriminant;
  CloseSwapResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CloseSwapResultSuccess extends CloseSwapResult {
  CloseSwapResultSuccess(this.success) : super(CloseSwapResultCode(CloseSwapResultCode.SUCCESS));
  late CloseSwapSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateAMLAlertRequest operation creates a reviewable request
//  //: that will void the specified amount from target balance after the reviewer's approval
//  struct CreateAMLAlertRequestOp
//  {
//      //: Reference of AMLAlertRequest
//      string64 reference; // TODO longstring ?
//      //: Parameters of AMLAlertRequest
//      AMLAlertRequest amlAlertRequest;
//      //: (optional) Bit mask whose flags must be cleared in order for AMLAlertRequest to be approved, which will be used by key aml_alert_tasks:<asset_code>
//      //: instead of key-value
//      uint32* allTasks;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CreateAMLAlertRequestOp extends XdrEncodable  {
  STRING64 reference;
  AMLAlertRequest amlAlertRequest;
  UINT32? allTasks;
  CreateAMLAlertRequestOpExt ext;

  CreateAMLAlertRequestOp(
      this.reference,
      this.amlAlertRequest,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    reference.toXdr(stream);
    amlAlertRequest.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreateAMLAlertRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateAMLAlertRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAMLAlertRequestOpExtEmptyVersion extends CreateAMLAlertRequestOpExt {
  CreateAMLAlertRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CreateAMLAlertRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const OLD_BALANCE_NOT_EXIST = 1;
  static const OLD_INVALID_CREATOR_DETAILS = 2;
  static const OLD_UNDERFUNDED = 3;
  static const OLD_REFERENCE_DUPLICATION = 4;
  static const OLD_INVALID_AMOUNT = 5;
  static const OLD_INCORRECT_PRECISION = 6;
  static const AML_ALERT_TASKS_NOT_FOUND = -1;
  static const BALANCE_NOT_EXIST = -2;
  static const INVALID_CREATOR_DETAILS = -3;
  static const UNDERFUNDED = -4;
  static const REFERENCE_DUPLICATION = -5;
  static const INVALID_AMOUNT = -6;
  static const INCORRECT_PRECISION = -7;
  int value;
  CreateAMLAlertRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Result of successful application of `CreateAMLAlertRequest` operation
//  struct CreateAMLAlertRequestSuccess {
//      //: ID of a newly created reviewable request
//      uint64 requestID;
//      //: Indicates  whether or not the AMLAlert request was auto approved and fulfilled
//      bool fulfilled;
//      //: Reserved for future use
//       union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateAMLAlertRequestSuccess extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  CreateAMLAlertRequestSuccessExt ext;

  CreateAMLAlertRequestSuccess(
      this.requestID,
      this.fulfilled,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateAMLAlertRequestSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateAMLAlertRequestSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAMLAlertRequestSuccessExtEmptyVersion extends CreateAMLAlertRequestSuccessExt {
  CreateAMLAlertRequestSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CreateAMLAlertRequestResult extends XdrEncodable {
  CreateAMLAlertRequestResultCode discriminant;
  CreateAMLAlertRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAMLAlertRequestResultSuccess extends CreateAMLAlertRequestResult {
  CreateAMLAlertRequestResultSuccess(this.success) : super(CreateAMLAlertRequestResultCode(CreateAMLAlertRequestResultCode.SUCCESS));
  late CreateAMLAlertRequestSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateAccountOp is used to create new account
//  struct CreateAccountOp
//  {
//      //: ID of account to be created
//      AccountID destination;
//      //: ID of an another account that introduced this account into the system.
//      //: If account with such ID does not exist or it's Admin Account. Referrer won't be set.
//      AccountID* referrer;
//      //: ID of the role that will be attached to an account
//      uint64 roleID;
//
//      //: Array of data about 'destination' account signers to be created
//      UpdateSignerData signersData<>;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateAccountOp extends XdrEncodable  {
  ACCOUNTID destination;
  ACCOUNTID? referrer;
  UINT64 roleID;
  List<UpdateSignerData> signersData;
  CreateAccountOpExt ext;

  CreateAccountOp(
      this.destination,
      this.referrer,
      this.roleID,
      this.signersData,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    destination.toXdr(stream);
    if (referrer != null) {
      true.toXdr(stream);
      referrer?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    roleID.toXdr(stream);
    signersData.length.toXdr(stream);
    signersData.forEach ((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}
abstract class CreateAccountOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateAccountOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAccountOpExtEmptyVersion extends CreateAccountOpExt {
  CreateAccountOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CreateAccountResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_DESTINATION = -1;
  static const ALREADY_EXISTS = -2;
  static const INVALID_WEIGHT = -3;
  static const NO_SUCH_ROLE = -4;
  static const INVALID_SIGNER_DATA = -5;
  static const NO_SIGNER_DATA = -6;
  int value;
  CreateAccountResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Result of successful application of `CreateAccount` operation
//  struct CreateAccountSuccess
//  {
//      //: Unique unsigned integer identifier of the new account
//      uint64 sequentialID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateAccountSuccess extends XdrEncodable  {
  UINT64 sequentialID;
  CreateAccountSuccessExt ext;

  CreateAccountSuccess(
      this.sequentialID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    sequentialID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateAccountSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateAccountSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAccountSuccessExtEmptyVersion extends CreateAccountSuccessExt {
  CreateAccountSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CreateAccountResult extends XdrEncodable {
  CreateAccountResultCode discriminant;
  CreateAccountResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAccountResultSuccess extends CreateAccountResult {
  CreateAccountResultSuccess(this.success) : super(CreateAccountResultCode(CreateAccountResultCode.SUCCESS));
  late CreateAccountSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class CreateAccountResultInvalidSignerData extends CreateAccountResult {
  CreateAccountResultInvalidSignerData(this.createSignerErrorCode) : super(CreateAccountResultCode(CreateAccountResultCode.INVALID_SIGNER_DATA));
  late ManageSignerResultCode createSignerErrorCode;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createSignerErrorCode.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateAtomicSwapAskRequestOp is used to create `CREATE_ATOMIC_SWAP_ASK` request
//  struct CreateAtomicSwapAskRequestOp
//  {
//      //: Body of request which will be created
//      CreateAtomicSwapAskRequest request;
//
//      //: (optional) Bit mask whose flags must be cleared in order for `CREATE_ATOMIC_SWAP_BID` request to be approved,
//      //: which will be used instead of key-value by `atomic_swap_bid_tasks` key
//      uint32* allTasks;
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateAtomicSwapAskRequestOp extends XdrEncodable  {
  CreateAtomicSwapAskRequest request;
  UINT32? allTasks;
  CreateAtomicSwapAskRequestOpExt ext;

  CreateAtomicSwapAskRequestOp(
      this.request,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreateAtomicSwapAskRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateAtomicSwapAskRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAtomicSwapAskRequestOpExtEmptyVersion extends CreateAtomicSwapAskRequestOpExt {
  CreateAtomicSwapAskRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CreateAtomicSwapAskRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_AMOUNT = -1;
  static const INVALID_PRICE = -2;
  static const INVALID_DETAILS = -3;
  static const INCORRECT_PRECISION = -4;
  static const BASE_ASSET_NOT_FOUND = -5;
  static const BASE_ASSET_CANNOT_BE_SWAPPED = -6;
  static const QUOTE_ASSET_NOT_FOUND = -7;
  static const QUOTE_ASSET_CANNOT_BE_SWAPPED = -8;
  static const BASE_BALANCE_NOT_FOUND = -9;
  static const ASSETS_ARE_EQUAL = -10;
  static const BASE_BALANCE_UNDERFUNDED = -11;
  static const INVALID_QUOTE_ASSET = -12;
  static const ATOMIC_SWAP_ASK_TASKS_NOT_FOUND = -13;
  int value;
  CreateAtomicSwapAskRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Success result of CreateASwapAskCreationRequestOp application
//  struct CreateAtomicSwapAskRequestSuccess
//  {
//      //: id of created request
//      uint64 requestID;
//      //: Indicates whether or not the `CREATE_ATOMIC_SWAP_ASK` request was auto approved and fulfilled
//      bool fulfilled;
//      //: ID of a newly created ask (if the ask  creation request has been auto approved)
//      uint64 askID;
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAtomicSwapAskRequestSuccess extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  UINT64 askID;
  CreateAtomicSwapAskRequestSuccessExt ext;

  CreateAtomicSwapAskRequestSuccess(
      this.requestID,
      this.fulfilled,
      this.askID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    askID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateAtomicSwapAskRequestSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateAtomicSwapAskRequestSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAtomicSwapAskRequestSuccessExtEmptyVersion extends CreateAtomicSwapAskRequestSuccessExt {
  CreateAtomicSwapAskRequestSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CreateAtomicSwapAskRequestResult extends XdrEncodable {
  CreateAtomicSwapAskRequestResultCode discriminant;
  CreateAtomicSwapAskRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAtomicSwapAskRequestResultSuccess extends CreateAtomicSwapAskRequestResult {
  CreateAtomicSwapAskRequestResultSuccess(this.success) : super(CreateAtomicSwapAskRequestResultCode(CreateAtomicSwapAskRequestResultCode.SUCCESS));
  late CreateAtomicSwapAskRequestSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateAtomicSwapBidRequestOp is used to create `CREATE_ATOMIC_SWAP_BID` request
//  struct CreateAtomicSwapBidRequestOp
//  {
//      //: Body of request which will be created
//      CreateAtomicSwapBidRequest request;
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAtomicSwapBidRequestOp extends XdrEncodable  {
  CreateAtomicSwapBidRequest request;
  CreateAtomicSwapBidRequestOpExt ext;

  CreateAtomicSwapBidRequestOp(
      this.request,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateAtomicSwapBidRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateAtomicSwapBidRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAtomicSwapBidRequestOpExtEmptyVersion extends CreateAtomicSwapBidRequestOpExt {
  CreateAtomicSwapBidRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CreateAtomicSwapBidRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_BASE_AMOUNT = -1;
  static const INVALID_QUOTE_ASSET = -2;
  static const ASK_NOT_FOUND = -3;
  static const QUOTE_ASSET_NOT_FOUND = -4;
  static const ASK_UNDERFUNDED = -5;
  static const ATOMIC_SWAP_BID_TASKS_NOT_FOUND = -6;
  static const INCORRECT_PRECISION = -7;
  static const ASK_IS_CANCELLED = -8;
  static const SOURCE_ACCOUNT_EQUALS_ASK_OWNER = -9;
  static const ATOMIC_SWAP_BID_ZERO_TASKS_NOT_ALLOWED = -10;
  static const QUOTE_AMOUNT_OVERFLOWS = -11;
  int value;
  CreateAtomicSwapBidRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Success request of CreateAtomicSwapBidRequestOp application
//  struct CreateAtomicSwapBidRequestSuccess
//  {
//      //: id of created request
//      uint64 requestID;
//      //: id of ask owner
//      AccountID askOwnerID;
//      //: amount in quote asset which required for request applying
//      uint64 quoteAmount;
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAtomicSwapBidRequestSuccess extends XdrEncodable  {
  UINT64 requestID;
  ACCOUNTID askOwnerID;
  UINT64 quoteAmount;
  CreateAtomicSwapBidRequestSuccessExt ext;

  CreateAtomicSwapBidRequestSuccess(
      this.requestID,
      this.askOwnerID,
      this.quoteAmount,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    askOwnerID.toXdr(stream);
    quoteAmount.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateAtomicSwapBidRequestSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateAtomicSwapBidRequestSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAtomicSwapBidRequestSuccessExtEmptyVersion extends CreateAtomicSwapBidRequestSuccessExt {
  CreateAtomicSwapBidRequestSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CreateAtomicSwapBidRequestResult extends XdrEncodable {
  CreateAtomicSwapBidRequestResultCode discriminant;
  CreateAtomicSwapBidRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAtomicSwapBidRequestResultSuccess extends CreateAtomicSwapBidRequestResult {
  CreateAtomicSwapBidRequestResultSuccess(this.success) : super(CreateAtomicSwapBidRequestResultCode(CreateAtomicSwapBidRequestResultCode.SUCCESS));
  late CreateAtomicSwapBidRequestSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: `CreateChangeRoleRequestOp` is used to create reviewable requests
//  //: that, with admin's approval, will change the role of `destinationAccount`
//  //: from current role to `accountRoleToSet`
//  struct CreateChangeRoleRequestOp
//  {
//      //: Set zero to create new request, set non zero to update existing request
//      uint64 requestID;
//
//      //: AccountID of an account whose role will be changed
//      AccountID destinationAccount;
//      //: ID of account role that will be attached to `destinationAccount`
//      uint64 accountRoleToSet;
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails;
//
//      //: Bit mask that will be used instead of the value from key-value entry by
//      //: `change_role_tasks:<currentRoleID>:<accountRoleToSet>` key
//      uint32* allTasks;
//
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateChangeRoleRequestOp extends XdrEncodable  {
  UINT64 requestID;
  ACCOUNTID destinationAccount;
  UINT64 accountRoleToSet;
  LONGSTRING creatorDetails;
  UINT32? allTasks;
  CreateChangeRoleRequestOpExt ext;

  CreateChangeRoleRequestOp(
      this.requestID,
      this.destinationAccount,
      this.accountRoleToSet,
      this.creatorDetails,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    destinationAccount.toXdr(stream);
    accountRoleToSet.toXdr(stream);
    creatorDetails.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreateChangeRoleRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateChangeRoleRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateChangeRoleRequestOpExtEmptyVersion extends CreateChangeRoleRequestOpExt {
  CreateChangeRoleRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CreateChangeRoleRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const ACC_TO_UPDATE_DOES_NOT_EXIST = -1;
  static const REQUEST_ALREADY_EXISTS = -2;
  static const REQUEST_DOES_NOT_EXIST = -4;
  static const NOT_ALLOWED_TO_UPDATE_REQUEST = -6;
  static const INVALID_CHANGE_ROLE_REQUEST_DATA = -7;
  static const INVALID_CREATOR_DETAILS = -8;
  static const CHANGE_ROLE_TASKS_NOT_FOUND = -9;
  static const ACCOUNT_ROLE_TO_SET_DOES_NOT_EXIST = -10;
  int value;
  CreateChangeRoleRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class CreateChangeRoleRequestResult extends XdrEncodable {
  CreateChangeRoleRequestResultCode discriminant;
  CreateChangeRoleRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateChangeRoleRequestResultSuccess extends CreateChangeRoleRequestResult {
  CreateChangeRoleRequestResultSuccess(this.success) : super(CreateChangeRoleRequestResultCode(CreateChangeRoleRequestResultCode.SUCCESS));
  late CreateChangeRoleRequestResultSuccessSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          //: ID of a created or updated request
//          uint64 requestID;
//          //: True if request was auto approved (pending tasks == 0),
//          //: `destinationAccount` must have new account role
//          bool fulfilled;
//          // Reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//  	}

//  ===========================================================================
class CreateChangeRoleRequestResultSuccessSuccess extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  CreateChangeRoleRequestResultSuccessExt ext;

  CreateChangeRoleRequestResultSuccessSuccess(
      this.requestID,
      this.fulfilled,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateChangeRoleRequestResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateChangeRoleRequestResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateChangeRoleRequestResultSuccessExtEmptyVersion extends CreateChangeRoleRequestResultSuccessExt {
  CreateChangeRoleRequestResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

// === xdr source ============================================================

//  //: CreateCloseDeferredPaymentRequestOp is used to create `CLOSE_DEFERRED_PAYMENT` request
//  struct CreateCloseDeferredPaymentRequestOp
//  {
//
//      uint64 requestID;
//
//      //: Body of request which will be created
//      CloseDeferredPaymentRequest request;
//
//      uint32* allTasks;
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateCloseDeferredPaymentRequestOp extends XdrEncodable  {
  UINT64 requestID;
  CloseDeferredPaymentRequest request;
  UINT32? allTasks;
  CreateCloseDeferredPaymentRequestOpExt ext;

  CreateCloseDeferredPaymentRequestOp(
      this.requestID,
      this.request,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreateCloseDeferredPaymentRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateCloseDeferredPaymentRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateCloseDeferredPaymentRequestOpExtEmptyVersion extends CreateCloseDeferredPaymentRequestOpExt {
  CreateCloseDeferredPaymentRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CreateCloseDeferredPaymentRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const UNDERFUNDED = -1;
  static const INVALID_CREATOR_DETAILS = -2;
  static const NOT_AUTHORIZED = -3;
  static const DESTINATION_ACCOUNT_NOT_FOUND = -4;
  static const INCORRECT_PRECISION = -5;
  static const ASSET_MISMATCH = -6;
  static const LINE_FULL = -7;
  static const TASKS_NOT_FOUND = -8;
  static const INVALID_AMOUNT = -9;
  static const DESTINATION_BALANCE_NOT_FOUND = -10;
  static const REQUEST_NOT_FOUND = -11;
  int value;
  CreateCloseDeferredPaymentRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
class CloseDeferredPaymentEffect extends XdrEncodable {
  static const CHARGED = 0;
  static const DELETED = 1;
  int value;
  CloseDeferredPaymentEffect(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct CloseDeferredPaymentResult
//  {
//      uint64 deferredPaymentID;
//
//      AccountID destination;
//      BalanceID destinationBalance;
//
//      CloseDeferredPaymentEffect effect;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class CloseDeferredPaymentResult extends XdrEncodable  {
  UINT64 deferredPaymentID;
  ACCOUNTID destination;
  BALANCEID destinationBalance;
  CloseDeferredPaymentEffect effect;
  EmptyExt ext;

  CloseDeferredPaymentResult(
      this.deferredPaymentID,
      this.destination,
      this.destinationBalance,
      this.effect,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    deferredPaymentID.toXdr(stream);
    destination.toXdr(stream);
    destinationBalance.toXdr(stream);
    effect.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Success result of CreateASwapAskCreationRequestOp application
//  struct CreateCloseDeferredPaymentRequestSuccess
//  {
//      uint64 requestID;
//      bool fulfilled;
//      uint64 deferredPaymentID;
//
//      CloseDeferredPaymentResult* extendedResult;
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateCloseDeferredPaymentRequestSuccess extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  UINT64 deferredPaymentID;
  CloseDeferredPaymentResult? extendedResult;
  CreateCloseDeferredPaymentRequestSuccessExt ext;

  CreateCloseDeferredPaymentRequestSuccess(
      this.requestID,
      this.fulfilled,
      this.deferredPaymentID,
      this.extendedResult,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    deferredPaymentID.toXdr(stream);
    if (extendedResult != null) {
      true.toXdr(stream);
      extendedResult?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreateCloseDeferredPaymentRequestSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateCloseDeferredPaymentRequestSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateCloseDeferredPaymentRequestSuccessExtEmptyVersion extends CreateCloseDeferredPaymentRequestSuccessExt {
  CreateCloseDeferredPaymentRequestSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CreateCloseDeferredPaymentRequestResult extends XdrEncodable {
  CreateCloseDeferredPaymentRequestResultCode discriminant;
  CreateCloseDeferredPaymentRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateCloseDeferredPaymentRequestResultSuccess extends CreateCloseDeferredPaymentRequestResult {
  CreateCloseDeferredPaymentRequestResultSuccess(this.success) : super(CreateCloseDeferredPaymentRequestResultCode(CreateCloseDeferredPaymentRequestResultCode.SUCCESS));
  late CreateCloseDeferredPaymentRequestSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct CreateDataCreationRequestOp
//  {
//      //: ID of the DataCreationRequest. If set to 0, a new request is created
//      uint64 requestID;
//
//      DataCreationRequest dataCreationRequest;
//
//      uint32* allTasks;
//
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateDataCreationRequestOp extends XdrEncodable  {
  UINT64 requestID;
  DataCreationRequest dataCreationRequest;
  UINT32? allTasks;
  EmptyExt ext;

  CreateDataCreationRequestOp(
      this.requestID,
      this.dataCreationRequest,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    dataCreationRequest.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
class CreateDataCreationRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_VALUE = -1;
  static const CREATE_DATA_TASKS_NOT_FOUND = -2;
  static const REQUEST_NOT_FOUND = -3;
  static const INVALID_CREATOR_DETAILS = -4;
  int value;
  CreateDataCreationRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct CreateDataCreationRequestSuccess {
//      uint64 requestID;
//      bool fulfilled;
//      AccountID owner;
//      uint64 id;
//      uint64 type;
//      longstring value;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateDataCreationRequestSuccess extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  ACCOUNTID owner;
  UINT64 id;
  UINT64 type;
  LONGSTRING value;
  CreateDataCreationRequestSuccessExt ext;

  CreateDataCreationRequestSuccess(
      this.requestID,
      this.fulfilled,
      this.owner,
      this.id,
      this.type,
      this.value,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    owner.toXdr(stream);
    id.toXdr(stream);
    type.toXdr(stream);
    value.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateDataCreationRequestSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateDataCreationRequestSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateDataCreationRequestSuccessExtEmptyVersion extends CreateDataCreationRequestSuccessExt {
  CreateDataCreationRequestSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CreateDataCreationRequestResult extends XdrEncodable {
  CreateDataCreationRequestResultCode discriminant;
  CreateDataCreationRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateDataCreationRequestResultSuccess extends CreateDataCreationRequestResult {
  CreateDataCreationRequestResultSuccess(this.success) : super(CreateDataCreationRequestResultCode(CreateDataCreationRequestResultCode.SUCCESS));
  late CreateDataCreationRequestSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct CreateDataRemoveRequestOp
//  {
//      //: ID of the DataRemoveRequest. If set to 0, a new request is created
//      uint64 requestID;
//
//      DataRemoveRequest dataRemoveRequest;
//
//      uint32* allTasks;
//
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateDataRemoveRequestOp extends XdrEncodable  {
  UINT64 requestID;
  DataRemoveRequest dataRemoveRequest;
  UINT32? allTasks;
  EmptyExt ext;

  CreateDataRemoveRequestOp(
      this.requestID,
      this.dataRemoveRequest,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    dataRemoveRequest.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
class CreateDataRemoveRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REMOVE_DATA_TASKS_NOT_FOUND = -1;
  static const DATA_NOT_FOUND = -2;
  static const INVALID_CREATOR_DETAILS = -3;
  static const REQUEST_NOT_FOUND = -4;
  int value;
  CreateDataRemoveRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct CreateDataRemoveRequestSuccess {
//      uint64 requestID;
//      bool fulfilled;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateDataRemoveRequestSuccess extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  CreateDataRemoveRequestSuccessExt ext;

  CreateDataRemoveRequestSuccess(
      this.requestID,
      this.fulfilled,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateDataRemoveRequestSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateDataRemoveRequestSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateDataRemoveRequestSuccessExtEmptyVersion extends CreateDataRemoveRequestSuccessExt {
  CreateDataRemoveRequestSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CreateDataRemoveRequestResult extends XdrEncodable {
  CreateDataRemoveRequestResultCode discriminant;
  CreateDataRemoveRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateDataRemoveRequestResultSuccess extends CreateDataRemoveRequestResult {
  CreateDataRemoveRequestResultSuccess(this.success) : super(CreateDataRemoveRequestResultCode(CreateDataRemoveRequestResultCode.SUCCESS));
  late CreateDataRemoveRequestSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct CreateDataUpdateRequestOp
//  {
//      //: ID of the DataUpdateRequest. If set to 0, a new request is created
//      uint64 requestID;
//
//      DataUpdateRequest dataUpdateRequest;
//
//      uint32* allTasks;
//
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateDataUpdateRequestOp extends XdrEncodable  {
  UINT64 requestID;
  DataUpdateRequest dataUpdateRequest;
  UINT32? allTasks;
  EmptyExt ext;

  CreateDataUpdateRequestOp(
      this.requestID,
      this.dataUpdateRequest,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    dataUpdateRequest.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
class CreateDataUpdateRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_VALUE = -1;
  static const UPDATE_DATA_TASKS_NOT_FOUND = -2;
  static const DATA_NOT_FOUND = -3;
  static const INVALID_CREATOR_DETAILS = -4;
  static const REQUEST_NOT_FOUND = -5;
  int value;
  CreateDataUpdateRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct CreateDataUpdateRequestSuccess {
//      uint64 requestID;
//      bool fulfilled;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateDataUpdateRequestSuccess extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  CreateDataUpdateRequestSuccessExt ext;

  CreateDataUpdateRequestSuccess(
      this.requestID,
      this.fulfilled,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateDataUpdateRequestSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateDataUpdateRequestSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateDataUpdateRequestSuccessExtEmptyVersion extends CreateDataUpdateRequestSuccessExt {
  CreateDataUpdateRequestSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CreateDataUpdateRequestResult extends XdrEncodable {
  CreateDataUpdateRequestResultCode discriminant;
  CreateDataUpdateRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateDataUpdateRequestResultSuccess extends CreateDataUpdateRequestResult {
  CreateDataUpdateRequestResultSuccess(this.success) : super(CreateDataUpdateRequestResultCode(CreateDataUpdateRequestResultCode.SUCCESS));
  late CreateDataUpdateRequestSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct CreateDataOp
//  {
//      //: Numeric type, used for access control
//      uint64 type;
//      //: Value to store
//      longstring value;
//
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateDataOp extends XdrEncodable  {
  UINT64 type;
  LONGSTRING value;
  EmptyExt ext;

  CreateDataOp(
      this.type,
      this.value,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    value.toXdr(stream);
    ext.toXdr(stream);
  }
}
class CreateDataResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_DATA = -1;
  int value;
  CreateDataResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct CreateDataSuccess
//  {
//      //: ID of created data entry
//      uint64 dataID;
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateDataSuccess extends XdrEncodable  {
  UINT64 dataID;
  EmptyExt ext;

  CreateDataSuccess(
      this.dataID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    dataID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateDataResult extends XdrEncodable {
  CreateDataResultCode discriminant;
  CreateDataResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateDataResultSuccess extends CreateDataResult {
  CreateDataResultSuccess(this.success) : super(CreateDataResultCode(CreateDataResultCode.SUCCESS));
  late CreateDataSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateDeferredPaymentCreationRequestOp is used to create `CREATE_DEFERRED_PAYMENT` request
//  struct CreateDeferredPaymentCreationRequestOp
//  {
//
//      uint64 requestID;
//      //: Body of request which will be created
//      CreateDeferredPaymentRequest request;
//
//      //: (optional) Bit mask whose flags must be cleared in order for `CREATE_ATOMIC_SWAP_BID` request to be approved,
//      //: which will be used instead of key-value by `create_deferred_payment_creation_request_tasks` key
//      uint32* allTasks;
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateDeferredPaymentCreationRequestOp extends XdrEncodable  {
  UINT64 requestID;
  CreateDeferredPaymentRequest request;
  UINT32? allTasks;
  CreateDeferredPaymentCreationRequestOpExt ext;

  CreateDeferredPaymentCreationRequestOp(
      this.requestID,
      this.request,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreateDeferredPaymentCreationRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateDeferredPaymentCreationRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateDeferredPaymentCreationRequestOpExtEmptyVersion extends CreateDeferredPaymentCreationRequestOpExt {
  CreateDeferredPaymentCreationRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CreateDeferredPaymentCreationRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const SOURCE_BALANCE_NOT_FOUND = -1;
  static const DESTINATION_ACCOUNT_NOT_FOUND = -2;
  static const INCORRECT_PRECISION = -3;
  static const UNDERFUNDED = -4;
  static const TASKS_NOT_FOUND = -5;
  static const INVALID_CREATOR_DETAILS = -6;
  static const INVALID_AMOUNT = -7;
  static const REQUEST_NOT_FOUND = -8;
  int value;
  CreateDeferredPaymentCreationRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Success result of CreateASwapAskCreationRequestOp application
//  struct CreateDeferredPaymentCreationRequestSuccess
//  {
//      //: id of created request
//      uint64 requestID;
//      //: Indicates whether or not the `CREATE_ATOMIC_SWAP_ASK` request was auto approved and fulfilled
//      bool fulfilled;
//      //: ID of a newly created ask (if the ask  creation request has been auto approved)
//      uint64 deferredPaymentID;
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateDeferredPaymentCreationRequestSuccess extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  UINT64 deferredPaymentID;
  CreateDeferredPaymentCreationRequestSuccessExt ext;

  CreateDeferredPaymentCreationRequestSuccess(
      this.requestID,
      this.fulfilled,
      this.deferredPaymentID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    deferredPaymentID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateDeferredPaymentCreationRequestSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateDeferredPaymentCreationRequestSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateDeferredPaymentCreationRequestSuccessExtEmptyVersion extends CreateDeferredPaymentCreationRequestSuccessExt {
  CreateDeferredPaymentCreationRequestSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CreateDeferredPaymentCreationRequestResult extends XdrEncodable {
  CreateDeferredPaymentCreationRequestResultCode discriminant;
  CreateDeferredPaymentCreationRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateDeferredPaymentCreationRequestResultSuccess extends CreateDeferredPaymentCreationRequestResult {
  CreateDeferredPaymentCreationRequestResultSuccess(this.success) : super(CreateDeferredPaymentCreationRequestResultCode(CreateDeferredPaymentCreationRequestResultCode.SUCCESS));
  late CreateDeferredPaymentCreationRequestSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateIssuanceRequestOp is used to create a reviewable request that, after reviewer's approval,
//  //: will issue the specified amount of asset to a receiver's balance
//  struct CreateIssuanceRequestOp
//  {
//      //: Issuance request to create
//      IssuanceRequest request;
//      //: Reference of the request
//      string64 reference;
//      //: (optional) Bit mask whose flags must be cleared in order for IssuanceRequest to be approved, which will be used by key issuance_tasks:<asset_code>
//      //: instead of key-value
//      uint32* allTasks;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateIssuanceRequestOp extends XdrEncodable  {
  IssuanceRequest request;
  STRING64 reference;
  UINT32? allTasks;
  CreateIssuanceRequestOpExt ext;

  CreateIssuanceRequestOp(
      this.request,
      this.reference,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    reference.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreateIssuanceRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateIssuanceRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateIssuanceRequestOpExtEmptyVersion extends CreateIssuanceRequestOpExt {
  CreateIssuanceRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CreateIssuanceRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const ASSET_NOT_FOUND = -1;
  static const INVALID_AMOUNT = -2;
  static const REFERENCE_DUPLICATION = -3;
  static const NO_COUNTERPARTY = -4;
  static const NOT_AUTHORIZED = -5;
  static const EXCEEDS_MAX_ISSUANCE_AMOUNT = -6;
  static const RECEIVER_FULL_LINE = -7;
  static const INVALID_CREATOR_DETAILS = -8;
  static const FEE_EXCEEDS_AMOUNT = -9;
  static const REQUIRES_KYC = -10;
  static const REQUIRES_VERIFICATION = -11;
  static const ISSUANCE_TASKS_NOT_FOUND = -12;
  static const SYSTEM_TASKS_NOT_ALLOWED = -13;
  static const INVALID_AMOUNT_PRECISION = -14;
  int value;
  CreateIssuanceRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //:Result of successful application of CreateIssuanceRequest operation
//  struct CreateIssuanceRequestSuccess {
//      //: ID of a newly created issuance request
//      uint64 requestID;
//      //: Account address of the receiver
//      AccountID receiver;
//      //: Indicates whether or not the Issuance request was auto approved and fulfilled
//      bool fulfilled;
//      //: Paid fee
//      Fee fee;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateIssuanceRequestSuccess extends XdrEncodable  {
  UINT64 requestID;
  ACCOUNTID receiver;
  bool fulfilled;
  Fee fee;
  CreateIssuanceRequestSuccessExt ext;

  CreateIssuanceRequestSuccess(
      this.requestID,
      this.receiver,
      this.fulfilled,
      this.fee,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    receiver.toXdr(stream);
    fulfilled.toXdr(stream);
    fee.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateIssuanceRequestSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateIssuanceRequestSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateIssuanceRequestSuccessExtEmptyVersion extends CreateIssuanceRequestSuccessExt {
  CreateIssuanceRequestSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CreateIssuanceRequestResult extends XdrEncodable {
  CreateIssuanceRequestResultCode discriminant;
  CreateIssuanceRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateIssuanceRequestResultSuccess extends CreateIssuanceRequestResult {
  CreateIssuanceRequestResultSuccess(this.success) : super(CreateIssuanceRequestResultCode(CreateIssuanceRequestResultCode.SUCCESS));
  late CreateIssuanceRequestSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateKYCRecoveryRequestOp to create KYC recovery request and set new signers for account
//  struct CreateKYCRecoveryRequestOp
//  {
//      //: ID of a reviewable request. If set 0, request is created, else - request is updated
//      uint64 requestID;
//      //: Account for which signers will be set
//      AccountID targetAccount;
//      //: New signers to set
//      UpdateSignerData signersData<>;
//
//       //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      //: (optional) Bit mask whose flags must be cleared in order for KYC recovery request to be approved, which will be used by key `create_kyc_recovery_tasks`
//      //: instead of key-value
//      uint32* allTasks;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateKYCRecoveryRequestOp extends XdrEncodable  {
  UINT64 requestID;
  ACCOUNTID targetAccount;
  List<UpdateSignerData> signersData;
  LONGSTRING creatorDetails;
  UINT32? allTasks;
  CreateKYCRecoveryRequestOpExt ext;

  CreateKYCRecoveryRequestOp(
      this.requestID,
      this.targetAccount,
      this.signersData,
      this.creatorDetails,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    targetAccount.toXdr(stream);
    signersData.length.toXdr(stream);
    signersData.forEach ((element) {
      element.toXdr(stream);
    });
    creatorDetails.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreateKYCRecoveryRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateKYCRecoveryRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateKYCRecoveryRequestOpExtEmptyVersion extends CreateKYCRecoveryRequestOpExt {
  CreateKYCRecoveryRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CreateKYCRecoveryRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_CREATOR_DETAILS = -1;
  static const KYC_RECOVERY_TASKS_NOT_FOUND = -2;
  static const NO_SIGNER_DATA = -3;
  static const SIGNER_DUPLICATION = -4;
  static const INVALID_WEIGHT = -5;
  static const INVALID_DETAILS = -6;
  static const REQUEST_ALREADY_EXISTS = -7;
  static const TARGET_ACCOUNT_NOT_FOUND = -8;
  static const RECOVERY_NOT_ALLOWED = -10;
  static const NOT_ALLOWED_TO_UPDATE_REQUEST = -11;
  static const REQUEST_NOT_FOUND = -12;
  static const INVALID_UPDATE_DATA = -13;
  static const NOT_ALLOWED_TO_SET_TASKS_ON_UPDATE = -14;
  int value;
  CreateKYCRecoveryRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class CreateKYCRecoveryRequestResult extends XdrEncodable {
  CreateKYCRecoveryRequestResultCode discriminant;
  CreateKYCRecoveryRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateKYCRecoveryRequestResultSuccess extends CreateKYCRecoveryRequestResult {
  CreateKYCRecoveryRequestResultSuccess(this.success) : super(CreateKYCRecoveryRequestResultCode(CreateKYCRecoveryRequestResultCode.SUCCESS));
  late CreateKYCRecoveryRequestResultSuccessSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          //: id of the created request
//          uint64 requestID;
//
//          //: Indicates whether or not the KYC Recovery request was auto approved and fulfilled
//          bool fulfilled;
//
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class CreateKYCRecoveryRequestResultSuccessSuccess extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  CreateKYCRecoveryRequestResultSuccessExt ext;

  CreateKYCRecoveryRequestResultSuccessSuccess(
      this.requestID,
      this.fulfilled,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateKYCRecoveryRequestResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateKYCRecoveryRequestResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateKYCRecoveryRequestResultSuccessExtEmptyVersion extends CreateKYCRecoveryRequestResultSuccessExt {
  CreateKYCRecoveryRequestResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

// === xdr source ============================================================

//  //: CreateManageLimitsRequestOp is used to create a reviewable request which, after approval, will update the limits set in the system
//  struct CreateManageLimitsRequestOp
//  {
//      //: Body of the `UpdateLimits` reviewable request to be created
//      LimitsUpdateRequest manageLimitsRequest;
//
//      //: (optional) Bit mask whose flags must be cleared in order for ManageLimits request to be approved, which will be used instead of value from the key-value pair
//      //: by key `limits_update_tasks`
//      uint32* allTasks;
//      //: ID of the LimitsUpdateRequest
//      //: If `requestID == 0`, operation creates a new limits entry; otherwise, it updates the existing one
//      uint64 requestID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateManageLimitsRequestOp extends XdrEncodable  {
  LimitsUpdateRequest manageLimitsRequest;
  UINT32? allTasks;
  UINT64 requestID;
  CreateManageLimitsRequestOpExt ext;

  CreateManageLimitsRequestOp(
      this.manageLimitsRequest,
      this.allTasks,
      this.requestID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    manageLimitsRequest.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateManageLimitsRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateManageLimitsRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateManageLimitsRequestOpExtEmptyVersion extends CreateManageLimitsRequestOpExt {
  CreateManageLimitsRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CreateManageLimitsRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MANAGE_LIMITS_REQUEST_REFERENCE_DUPLICATION = -1;
  static const MANAGE_LIMITS_REQUEST_NOT_FOUND = -2;
  static const INVALID_CREATOR_DETAILS = -3;
  static const LIMITS_UPDATE_TASKS_NOT_FOUND = -5;
  static const NOT_ALLOWED_TO_SET_TASKS_ON_UPDATE = -6;
  static const LIMITS_UPDATE_ZERO_TASKS_NOT_ALLOWED = -7;
  int value;
  CreateManageLimitsRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class CreateManageLimitsRequestResult extends XdrEncodable {
  CreateManageLimitsRequestResultCode discriminant;
  CreateManageLimitsRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateManageLimitsRequestResultSuccess extends CreateManageLimitsRequestResult {
  CreateManageLimitsRequestResultSuccess(this.success) : super(CreateManageLimitsRequestResultCode(CreateManageLimitsRequestResultCode.SUCCESS));
  late CreateManageLimitsRequestResultSuccessSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          //: ID of the created manage limits request
//          uint64 manageLimitsRequestID;
//          //: Indicates whether or not the `limits update request` request was auto approved and fulfilled
//          bool fulfilled;
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class CreateManageLimitsRequestResultSuccessSuccess extends XdrEncodable  {
  UINT64 manageLimitsRequestID;
  bool fulfilled;
  CreateManageLimitsRequestResultSuccessExt ext;

  CreateManageLimitsRequestResultSuccessSuccess(
      this.manageLimitsRequestID,
      this.fulfilled,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    manageLimitsRequestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateManageLimitsRequestResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateManageLimitsRequestResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateManageLimitsRequestResultSuccessExtEmptyVersion extends CreateManageLimitsRequestResultSuccessExt {
  CreateManageLimitsRequestResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

// === xdr source ============================================================

//  struct CreateManageOfferRequestOp
//  {
//      //: ManageOfferRequest details
//      ManageOfferRequest request;
//
//      //: (optional) Bit mask whose flags must be cleared in order for CreateSale request to be approved, which will be used by key sale_create_tasks:<asset_code>
//      //: instead of key-value
//      uint32* allTasks;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateManageOfferRequestOp extends XdrEncodable  {
  ManageOfferRequest request;
  UINT32? allTasks;
  EmptyExt ext;

  CreateManageOfferRequestOp(
      this.request,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
class CreateManageOfferRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_OFFER = -1;
  static const MANAGE_OFFER_TASKS_NOT_FOUND = -2;
  static const INVALID_CREATOR_DETAILS = -3;
  int value;
  CreateManageOfferRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct CreateManagerOfferRequestSuccessResult
//  {
//      //: ID of the ManageOfferRequest
//      uint64 requestID;
//      //: Indicates whether or not the manage offer request was auto approved
//      bool fulfilled;
//
//      //: Result of manage offer application
//      ManageOfferResult* manageOfferResult;
//
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateManagerOfferRequestSuccessResult extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  ManageOfferResult? manageOfferResult;
  EmptyExt ext;

  CreateManagerOfferRequestSuccessResult(
      this.requestID,
      this.fulfilled,
      this.manageOfferResult,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    if (manageOfferResult != null) {
      true.toXdr(stream);
      manageOfferResult?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreateManageOfferRequestResult extends XdrEncodable {
  CreateManageOfferRequestResultCode discriminant;
  CreateManageOfferRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateManageOfferRequestResultSuccess extends CreateManageOfferRequestResult {
  CreateManageOfferRequestResultSuccess(this.success) : super(CreateManageOfferRequestResultCode(CreateManageOfferRequestResultCode.SUCCESS));
  late CreateManagerOfferRequestSuccessResult success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class CreateManageOfferRequestResultInvalidOffer extends CreateManageOfferRequestResult {
  CreateManageOfferRequestResultInvalidOffer(this.manageOfferCode) : super(CreateManageOfferRequestResultCode(CreateManageOfferRequestResultCode.INVALID_OFFER));
  late ManageOfferResultCode manageOfferCode;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageOfferCode.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct CreatePaymentRequestOp
//  {
//      //: Payment request details
//      CreatePaymentRequest request;
//
//      //: (optional) Bit mask whose flags must be cleared in order for CreateSale request to be approved, which will be used by key sale_create_tasks:<asset_code>
//      //: instead of key-value
//      uint32* allTasks;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreatePaymentRequestOp extends XdrEncodable  {
  CreatePaymentRequest request;
  UINT32? allTasks;
  EmptyExt ext;

  CreatePaymentRequestOp(
      this.request,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
class CreatePaymentRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_PAYMENT = -1;
  static const PAYMENT_TASKS_NOT_FOUND = -2;
  static const INVALID_CREATOR_DETAILS = -3;
  int value;
  CreatePaymentRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Result of the successful payment request creation
//  struct CreatePaymentRequestSuccessResult
//  {
//      //: ID of the Payment request
//      uint64 requestID;
//      //: Indicates whether or not the payment request was auto approved
//      bool fulfilled;
//
//      //: Result of the payment application
//      PaymentResult* paymentResult;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreatePaymentRequestSuccessResult extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  PaymentResult? paymentResult;
  EmptyExt ext;

  CreatePaymentRequestSuccessResult(
      this.requestID,
      this.fulfilled,
      this.paymentResult,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    if (paymentResult != null) {
      true.toXdr(stream);
      paymentResult?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreatePaymentRequestResult extends XdrEncodable {
  CreatePaymentRequestResultCode discriminant;
  CreatePaymentRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreatePaymentRequestResultSuccess extends CreatePaymentRequestResult {
  CreatePaymentRequestResultSuccess(this.success) : super(CreatePaymentRequestResultCode(CreatePaymentRequestResultCode.SUCCESS));
  late CreatePaymentRequestSuccessResult success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class CreatePaymentRequestResultInvalidPayment extends CreatePaymentRequestResult {
  CreatePaymentRequestResultInvalidPayment(this.paymentCode) : super(CreatePaymentRequestResultCode(CreatePaymentRequestResultCode.INVALID_PAYMENT));
  late PaymentResultCode paymentCode;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    paymentCode.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreatePreIssuanceRequestOp is used to create a reviewable request,
//  //: which, after admin's approval, will change `availableForIssuance` amount of asset
//  struct CreatePreIssuanceRequestOp
//  {
//      //: Body of PreIssuanceRequest to be created
//      PreIssuanceRequest request;
//
//      //: (optional) Bit mask whose flags must be cleared in order for PreIssuanceRequest to be approved, which will be used by key `preissuance_tasks`
//      //: instead of key-value
//      uint32* allTasks;
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreatePreIssuanceRequestOp extends XdrEncodable  {
  PreIssuanceRequest request;
  UINT32? allTasks;
  CreatePreIssuanceRequestOpExt ext;

  CreatePreIssuanceRequestOp(
      this.request,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreatePreIssuanceRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreatePreIssuanceRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreatePreIssuanceRequestOpExtEmptyVersion extends CreatePreIssuanceRequestOpExt {
  CreatePreIssuanceRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CreatePreIssuanceRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const ASSET_NOT_FOUND = -1;
  static const REFERENCE_DUPLICATION = -2;
  static const NOT_AUTHORIZED_UPLOAD = -3;
  static const INVALID_SIGNATURE = -4;
  static const EXCEEDED_MAX_AMOUNT = -5;
  static const INVALID_AMOUNT = -6;
  static const INVALID_REFERENCE = -7;
  static const INCORRECT_AMOUNT_PRECISION = -8;
  static const PREISSUANCE_TASKS_NOT_FOUND = -9;
  static const INVALID_CREATOR_DETAILS = -10;
  int value;
  CreatePreIssuanceRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class CreatePreIssuanceRequestResult extends XdrEncodable {
  CreatePreIssuanceRequestResultCode discriminant;
  CreatePreIssuanceRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreatePreIssuanceRequestResultSuccess extends CreatePreIssuanceRequestResult {
  CreatePreIssuanceRequestResultSuccess(this.success) : super(CreatePreIssuanceRequestResultCode(CreatePreIssuanceRequestResultCode.SUCCESS));
  late CreatePreIssuanceRequestResultSuccessSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: ID of created or updated request
//          uint64 requestID;
//          //: Indicates whether or not the request was auto approved and fulfilled
//          bool fulfilled;
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//  	}

//  ===========================================================================
class CreatePreIssuanceRequestResultSuccessSuccess extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  CreatePreIssuanceRequestResultSuccessExt ext;

  CreatePreIssuanceRequestResultSuccessSuccess(
      this.requestID,
      this.fulfilled,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreatePreIssuanceRequestResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreatePreIssuanceRequestResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreatePreIssuanceRequestResultSuccessExtEmptyVersion extends CreatePreIssuanceRequestResultSuccessExt {
  CreatePreIssuanceRequestResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

// === xdr source ============================================================

//  //: CreateRedemptionRequest operation creates a reviewable request
//  //: that will transfer the specified amount from current holder's balance to destination balance after the reviewer's approval
//  struct CreateRedemptionRequestOp
//  {
//      //: Reference of RedemptionRequest
//      string64 reference; // TODO longstring ?
//      //: Parameters of RedemptionRequest
//      RedemptionRequest redemptionRequest;
//      //: (optional) Bit mask whose flags must be cleared in order for RedemptionRequest to be approved, which will be used by key redemption_tasks
//      //: instead of key-value
//      uint32* allTasks;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CreateRedemptionRequestOp extends XdrEncodable  {
  STRING64 reference;
  RedemptionRequest redemptionRequest;
  UINT32? allTasks;
  CreateRedemptionRequestOpExt ext;

  CreateRedemptionRequestOp(
      this.reference,
      this.redemptionRequest,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    reference.toXdr(stream);
    redemptionRequest.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreateRedemptionRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateRedemptionRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateRedemptionRequestOpExtEmptyVersion extends CreateRedemptionRequestOpExt {
  CreateRedemptionRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CreateRedemptionRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_REDEMPTION = -1;
  static const REDEMPTION_TASKS_NOT_FOUND = -2;
  static const INVALID_CREATOR_DETAILS = -3;
  static const INVALID_AMOUNT = -4;
  static const INVALID_REFERENCE = -5;
  static const SOURCE_BALANCE_NOT_EXIST = -6;
  static const INCORRECT_PRECISION = -7;
  static const UNDERFUNDED = -8;
  static const REFERENCE_DUPLICATION = -9;
  static const DST_ACCOUNT_NOT_FOUND = -10;
  static const REDEMPTION_ZERO_TASKS_NOT_ALLOWED = -11;
  static const REDEMPTION_NON_OWNED_ASSET_FORBIDDEN = -12;
  int value;
  CreateRedemptionRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Result of successful application of `CreateRedemptionRequest` operation
//  struct RedemptionRequestResponse {
//      //: ID of a newly created reviewable request
//      uint64 requestID;
//      //: Indicates  whether or not the Redemption request was auto approved and fulfilled
//      bool fulfilled;
//
//      //: ID of destination balance (may be freshly created)
//      BalanceID destinationBalanceID;
//      //: Code of an asset used in payment
//      AssetCode asset;
//      //: Amount sent by the sender
//      uint64 sourceSentUniversal;
//      //: Reserved for future use
//       union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class RedemptionRequestResponse extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  BALANCEID destinationBalanceID;
  ASSETCODE asset;
  UINT64 sourceSentUniversal;
  RedemptionRequestResponseExt ext;

  RedemptionRequestResponse(
      this.requestID,
      this.fulfilled,
      this.destinationBalanceID,
      this.asset,
      this.sourceSentUniversal,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    destinationBalanceID.toXdr(stream);
    asset.toXdr(stream);
    sourceSentUniversal.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class RedemptionRequestResponseExt extends XdrEncodable {
  LedgerVersion discriminant;
  RedemptionRequestResponseExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class RedemptionRequestResponseExtEmptyVersion extends RedemptionRequestResponseExt {
  RedemptionRequestResponseExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CreateRedemptionRequestResult extends XdrEncodable {
  CreateRedemptionRequestResultCode discriminant;
  CreateRedemptionRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateRedemptionRequestResultSuccess extends CreateRedemptionRequestResult {
  CreateRedemptionRequestResultSuccess(this.redemptionResponse) : super(CreateRedemptionRequestResultCode(CreateRedemptionRequestResultCode.SUCCESS));
  late RedemptionRequestResponse redemptionResponse;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    redemptionResponse.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateSaleCreationRequest operation creates SaleCreationRequest or updates the rejected request
//  struct CreateSaleCreationRequestOp
//  {
//      //: ID of the SaleCreationRequest. If set to 0, a new request is created
//      uint64 requestID;
//      //: SaleCreationRequest details
//      SaleCreationRequest request;
//      //: (optional) Bit mask whose flags must be cleared in order for CreateSale request to be approved, which will be used by key sale_create_tasks:<asset_code>
//      //: instead of key-value
//      uint32* allTasks;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CreateSaleCreationRequestOp extends XdrEncodable  {
  UINT64 requestID;
  SaleCreationRequest request;
  UINT32? allTasks;
  CreateSaleCreationRequestOpExt ext;

  CreateSaleCreationRequestOp(
      this.requestID,
      this.request,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreateSaleCreationRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateSaleCreationRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateSaleCreationRequestOpExtEmptyVersion extends CreateSaleCreationRequestOpExt {
  CreateSaleCreationRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CreateSaleCreationRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REQUEST_NOT_FOUND = -1;
  static const BASE_ASSET_OR_ASSET_REQUEST_NOT_FOUND = -2;
  static const QUOTE_ASSET_NOT_FOUND = -3;
  static const START_END_INVALID = -4;
  static const INVALID_END = -5;
  static const INVALID_PRICE = -6;
  static const INVALID_CAP = -7;
  static const INSUFFICIENT_MAX_ISSUANCE = -8;
  static const INVALID_ASSET_PAIR = -9;
  static const REQUEST_OR_SALE_ALREADY_EXISTS = -10;
  static const INSUFFICIENT_PREISSUED = -11;
  static const INVALID_CREATOR_DETAILS = -12;
  static const VERSION_IS_NOT_SUPPORTED_YET = -13;
  static const SALE_CREATE_TASKS_NOT_FOUND = -14;
  static const NOT_ALLOWED_TO_SET_TASKS_ON_UPDATE = -15;
  static const AUTO_REVIEW_FAILED = -16;
  static const EXCEEDED_MAX_RULES_SIZE = -17;
  static const GLOBAL_SPECIFIC_RULE_DUPLICATION = -18;
  static const ACCOUNT_SPECIFIC_RULE_DUPLICATION = -19;
  static const GLOBAL_SPECIFIC_RULE_REQUIRED = -20;
  static const ACCOUNT_NOT_FOUND = -21;
  int value;
  CreateSaleCreationRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Result of the successful application of CreateSaleCreationRequest operation
//  struct CreateSaleCreationSuccess {
//      //: ID of the SaleCreation request
//      uint64 requestID;
//      //: ID of a newly created sale (if the sale creation request has been auto approved)
//      uint64 saleID;
//      //: Indicates whether or not the sale creation request was auto approved and fulfilled
//      bool fulfilled;
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateSaleCreationSuccess extends XdrEncodable  {
  UINT64 requestID;
  UINT64 saleID;
  bool fulfilled;
  CreateSaleCreationSuccessExt ext;

  CreateSaleCreationSuccess(
      this.requestID,
      this.saleID,
      this.fulfilled,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    saleID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateSaleCreationSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateSaleCreationSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateSaleCreationSuccessExtEmptyVersion extends CreateSaleCreationSuccessExt {
  CreateSaleCreationSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: specifies details on why an auto review has failed
//  struct CreateSaleCreationAutoReviewFailed {
//      //: auto review result
//      ReviewRequestResult reviewRequestRequest;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateSaleCreationAutoReviewFailed extends XdrEncodable  {
  ReviewRequestResult reviewRequestRequest;
  CreateSaleCreationAutoReviewFailedExt ext;

  CreateSaleCreationAutoReviewFailed(
      this.reviewRequestRequest,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    reviewRequestRequest.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateSaleCreationAutoReviewFailedExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateSaleCreationAutoReviewFailedExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateSaleCreationAutoReviewFailedExtEmptyVersion extends CreateSaleCreationAutoReviewFailedExt {
  CreateSaleCreationAutoReviewFailedExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CreateSaleCreationRequestResult extends XdrEncodable {
  CreateSaleCreationRequestResultCode discriminant;
  CreateSaleCreationRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateSaleCreationRequestResultSuccess extends CreateSaleCreationRequestResult {
  CreateSaleCreationRequestResultSuccess(this.success) : super(CreateSaleCreationRequestResultCode(CreateSaleCreationRequestResultCode.SUCCESS));
  late CreateSaleCreationSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class CreateSaleCreationRequestResultAutoReviewFailed extends CreateSaleCreationRequestResult {
  CreateSaleCreationRequestResultAutoReviewFailed(this.autoReviewFailed) : super(CreateSaleCreationRequestResultCode(CreateSaleCreationRequestResultCode.AUTO_REVIEW_FAILED));
  late CreateSaleCreationAutoReviewFailed autoReviewFailed;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    autoReviewFailed.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: CreateWithdrawalRequest operation is used to create a reviewable request,
//  //: which, after reviewer's approval, will charge the specified amount from balance and send it to external wallet/account
//  struct CreateWithdrawalRequestOp
//  {
//      //: Withdrawal request to create
//      WithdrawalRequest request;
//      //: (optional) Bit mask whose flags must be cleared in order for WithdrawalRequest to be approved, which will be used by key withdrawal_tasks:<asset_code>
//      //: instead of key-value
//      uint32* allTasks;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//
//  };

//  ===========================================================================
class CreateWithdrawalRequestOp extends XdrEncodable  {
  WithdrawalRequest request;
  UINT32? allTasks;
  CreateWithdrawalRequestOpExt ext;

  CreateWithdrawalRequestOp(
      this.request,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreateWithdrawalRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateWithdrawalRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateWithdrawalRequestOpExtEmptyVersion extends CreateWithdrawalRequestOpExt {
  CreateWithdrawalRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CreateWithdrawalRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_AMOUNT = -1;
  static const INVALID_CREATOR_DETAILS = -2;
  static const BALANCE_NOT_FOUND = -3;
  static const ASSET_IS_NOT_WITHDRAWABLE = -4;
  static const CONVERSION_PRICE_IS_NOT_AVAILABLE = -5;
  static const FEE_MISMATCHED = -6;
  static const CONVERSION_OVERFLOW = -7;
  static const CONVERTED_AMOUNT_MISMATCHED = -8;
  static const BALANCE_LOCK_OVERFLOW = -9;
  static const UNDERFUNDED = -10;
  static const INVALID_UNIVERSAL_AMOUNT = -11;
  static const STATS_OVERFLOW = -12;
  static const LIMITS_EXCEEDED = -13;
  static const INVALID_PRE_CONFIRMATION_DETAILS = -14;
  static const LOWER_BOUND_NOT_EXCEEDED = -15;
  static const WITHDRAWAL_TASKS_NOT_FOUND = -16;
  static const NOT_ALLOWED_TO_SET_WITHDRAWAL_TASKS = -17;
  static const WITHDRAWAL_ZERO_TASKS_NOT_ALLOWED = -18;
  int value;
  CreateWithdrawalRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Result of the successful withdrawal request creation
//  struct CreateWithdrawalSuccess {
//      //: ID of a newly created WithdrawalRequest
//      uint64 requestID;
//      //: Indicates whether or not the withdrawal request was auto approved and fulfilled
//      bool fulfilled;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateWithdrawalSuccess extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  CreateWithdrawalSuccessExt ext;

  CreateWithdrawalSuccess(
      this.requestID,
      this.fulfilled,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateWithdrawalSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateWithdrawalSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateWithdrawalSuccessExtEmptyVersion extends CreateWithdrawalSuccessExt {
  CreateWithdrawalSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class CreateWithdrawalRequestResult extends XdrEncodable {
  CreateWithdrawalRequestResultCode discriminant;
  CreateWithdrawalRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateWithdrawalRequestResultSuccess extends CreateWithdrawalRequestResult {
  CreateWithdrawalRequestResultSuccess(this.success) : super(CreateWithdrawalRequestResultCode(CreateWithdrawalRequestResultCode.SUCCESS));
  late CreateWithdrawalSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: InitiateKYCRecoveryOp is used to start KYC recovery process
//  struct InitiateKYCRecoveryOp
//  {
//      //: Address of account to be recovered
//      AccountID account;
//      //: New signer to set
//      PublicKey signer;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class InitiateKYCRecoveryOp extends XdrEncodable  {
  ACCOUNTID account;
  PublicKey signer;
  InitiateKYCRecoveryOpExt ext;

  InitiateKYCRecoveryOp(
      this.account,
      this.signer,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    account.toXdr(stream);
    signer.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class InitiateKYCRecoveryOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  InitiateKYCRecoveryOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class InitiateKYCRecoveryOpExtEmptyVersion extends InitiateKYCRecoveryOpExt {
  InitiateKYCRecoveryOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class InitiateKYCRecoveryResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const RECOVERY_NOT_ALLOWED = -1;
  static const RECOVERY_SIGNER_ROLE_NOT_FOUND = -2;
  int value;
  InitiateKYCRecoveryResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class InitiateKYCRecoveryResult extends XdrEncodable {
  InitiateKYCRecoveryResultCode discriminant;
  InitiateKYCRecoveryResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class InitiateKYCRecoveryResultSuccess extends InitiateKYCRecoveryResult {
  InitiateKYCRecoveryResultSuccess(this.success) : super(InitiateKYCRecoveryResultCode(InitiateKYCRecoveryResultCode.SUCCESS));
  late InitiateKYCRecoveryResultSuccessSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//           //: reserved for future use
//           union switch (LedgerVersion v)
//           {
//           case EMPTY_VERSION:
//               void;
//           } ext;
//      }

//  ===========================================================================
class InitiateKYCRecoveryResultSuccessSuccess extends XdrEncodable  {
  InitiateKYCRecoveryResultSuccessExt ext;

  InitiateKYCRecoveryResultSuccessSuccess(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class InitiateKYCRecoveryResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  InitiateKYCRecoveryResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class InitiateKYCRecoveryResultSuccessExtEmptyVersion extends InitiateKYCRecoveryResultSuccessExt {
  InitiateKYCRecoveryResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

// === xdr source ============================================================

//  //: License operation is used to increase the allowed number of admins and due date
//  struct LicenseOp
//  {
//      //: Allowed number of admins to set in the system
//      uint64 adminCount;
//      //: Expiration date of the license
//      uint64 dueDate;
//      //: Hash of a stamped ledger
//      Hash ledgerHash;
//      //: Hash of the previous license
//      Hash prevLicenseHash;
//      //: Signatures are used to prove authenticity of license that is being submitted.
//      DecoratedSignature signatures<>;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LicenseOp extends XdrEncodable  {
  UINT64 adminCount;
  UINT64 dueDate;
  HASH ledgerHash;
  HASH prevLicenseHash;
  List<DecoratedSignature> signatures;
  LicenseOpExt ext;

  LicenseOp(
      this.adminCount,
      this.dueDate,
      this.ledgerHash,
      this.prevLicenseHash,
      this.signatures,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    adminCount.toXdr(stream);
    dueDate.toXdr(stream);
    ledgerHash.toXdr(stream);
    prevLicenseHash.toXdr(stream);
    signatures.length.toXdr(stream);
    signatures.forEach ((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}
abstract class LicenseOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  LicenseOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LicenseOpExtEmptyVersion extends LicenseOpExt {
  LicenseOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class LicenseResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_STAMP = -1;
  static const INVALID_DUE_DATE = -2;
  static const INVALID_SIGNATURE = -3;
  static const EXTRA_SIGNATURES = -4;
  int value;
  LicenseResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: LicenseSuccess is a result of successful LicenseOp application
//  struct LicenseSuccess {
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LicenseSuccess extends XdrEncodable  {
  LicenseSuccessExt ext;

  LicenseSuccess(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class LicenseSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  LicenseSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LicenseSuccessExtEmptyVersion extends LicenseSuccessExt {
  LicenseSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class LicenseResult extends XdrEncodable {
  LicenseResultCode discriminant;
  LicenseResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LicenseResultSuccess extends LicenseResult {
  LicenseResultSuccess(this.success) : super(LicenseResultCode(LicenseResultCode.SUCCESS));
  late LicenseSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class ManageAccountRoleAction extends XdrEncodable {
  static const CREATE = 0;
  static const UPDATE = 1;
  static const REMOVE = 2;
  int value;
  ManageAccountRoleAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: CreateAccountRoleData is used to pass necessary params to create a new account role
//  struct CreateAccountRoleData
//  {
//      //: Arbitrary stringified json object that will be attached to the role
//      longstring details;
//      //: Array of ids of existing unique rules
//      uint64 ruleIDs<>;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAccountRoleData extends XdrEncodable  {
  LONGSTRING details;
  List<UINT64> ruleIDs;
  CreateAccountRoleDataExt ext;

  CreateAccountRoleData(
      this.details,
      this.ruleIDs,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ruleIDs.length.toXdr(stream);
    ruleIDs.forEach ((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}
abstract class CreateAccountRoleDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateAccountRoleDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAccountRoleDataExtEmptyVersion extends CreateAccountRoleDataExt {
  CreateAccountRoleDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: UpdateAccountRoleData is used to pass necessary params to update existing account role
//  struct UpdateAccountRoleData
//  {
//      //: Identifier of existing signer role
//      uint64 roleID;
//      //: Arbitrary stringified json object that will be attached to the role
//      longstring details;
//      //: Array of ids of existing unique rules
//      uint64 ruleIDs<>;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class UpdateAccountRoleData extends XdrEncodable  {
  UINT64 roleID;
  LONGSTRING details;
  List<UINT64> ruleIDs;
  UpdateAccountRoleDataExt ext;

  UpdateAccountRoleData(
      this.roleID,
      this.details,
      this.ruleIDs,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    details.toXdr(stream);
    ruleIDs.length.toXdr(stream);
    ruleIDs.forEach ((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}
abstract class UpdateAccountRoleDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  UpdateAccountRoleDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class UpdateAccountRoleDataExtEmptyVersion extends UpdateAccountRoleDataExt {
  UpdateAccountRoleDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: RemoveAccountRoleData is used to pass necessary params to remove an existing account role
//  struct RemoveAccountRoleData
//  {
//      //: Identifier of an existing account role
//      uint64 roleID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class RemoveAccountRoleData extends XdrEncodable  {
  UINT64 roleID;
  RemoveAccountRoleDataExt ext;

  RemoveAccountRoleData(
      this.roleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class RemoveAccountRoleDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  RemoveAccountRoleDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class RemoveAccountRoleDataExtEmptyVersion extends RemoveAccountRoleDataExt {
  RemoveAccountRoleDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: ManageAccountRoleOp is used to create, update or remove account role
//  struct ManageAccountRoleOp
//  {
//      //: data is used to pass one of `ManageAccountRoleAction` with required params
//      union switch (ManageAccountRoleAction action)
//      {
//      case CREATE:
//          CreateAccountRoleData createData;
//      case UPDATE:
//          UpdateAccountRoleData updateData;
//      case REMOVE:
//          RemoveAccountRoleData removeData;
//      } data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageAccountRoleOp extends XdrEncodable  {
  ManageAccountRoleOpData data;
  ManageAccountRoleOpExt ext;

  ManageAccountRoleOp(
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageAccountRoleOpData extends XdrEncodable {
  ManageAccountRoleAction discriminant;
  ManageAccountRoleOpData(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAccountRoleOpDataCreate extends ManageAccountRoleOpData {
  ManageAccountRoleOpDataCreate(this.createData) : super(ManageAccountRoleAction(ManageAccountRoleAction.CREATE));
  late CreateAccountRoleData createData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }
}

class ManageAccountRoleOpDataUpdate extends ManageAccountRoleOpData {
  ManageAccountRoleOpDataUpdate(this.updateData) : super(ManageAccountRoleAction(ManageAccountRoleAction.UPDATE));
  late UpdateAccountRoleData updateData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateData.toXdr(stream);
  }
}

class ManageAccountRoleOpDataRemove extends ManageAccountRoleOpData {
  ManageAccountRoleOpDataRemove(this.removeData) : super(ManageAccountRoleAction(ManageAccountRoleAction.REMOVE));
  late RemoveAccountRoleData removeData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeData.toXdr(stream);
  }
}

abstract class ManageAccountRoleOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageAccountRoleOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAccountRoleOpExtEmptyVersion extends ManageAccountRoleOpExt {
  ManageAccountRoleOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageAccountRoleResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const ROLE_IS_USED = -2;
  static const INVALID_DETAILS = -3;
  static const NO_SUCH_RULE = -4;
  static const RULE_ID_DUPLICATION = -5;
  int value;
  ManageAccountRoleResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class ManageAccountRoleResult extends XdrEncodable {
  ManageAccountRoleResultCode discriminant;
  ManageAccountRoleResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAccountRoleResultSuccess extends ManageAccountRoleResult {
  ManageAccountRoleResultSuccess(this.success) : super(ManageAccountRoleResultCode(ManageAccountRoleResultCode.SUCCESS));
  late ManageAccountRoleResultSuccessSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class ManageAccountRoleResultRuleIdDuplication extends ManageAccountRoleResult {
  ManageAccountRoleResultRuleIdDuplication(this.ruleID) : super(ManageAccountRoleResultCode(ManageAccountRoleResultCode.RULE_ID_DUPLICATION));
  late UINT64 ruleID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ruleID.toXdr(stream);
  }
}

class ManageAccountRoleResultNoSuchRule extends ManageAccountRoleResult {
  ManageAccountRoleResultNoSuchRule(this.ruleID) : super(ManageAccountRoleResultCode(ManageAccountRoleResultCode.NO_SUCH_RULE));
  late UINT64 ruleID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ruleID.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//              //: id of the role that was managed
//              uint64 roleID;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          }

//  ===========================================================================
class ManageAccountRoleResultSuccessSuccess extends XdrEncodable  {
  UINT64 roleID;
  ManageAccountRoleResultSuccessExt ext;

  ManageAccountRoleResultSuccessSuccess(
      this.roleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageAccountRoleResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageAccountRoleResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAccountRoleResultSuccessExtEmptyVersion extends ManageAccountRoleResultSuccessExt {
  ManageAccountRoleResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class ManageAccountRuleAction extends XdrEncodable {
  static const CREATE = 0;
  static const UPDATE = 1;
  static const REMOVE = 2;
  int value;
  ManageAccountRuleAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: CreateAccountRuleData is used to pass necessary params to create a new account rule
//  struct CreateAccountRuleData
//  {
//      //: Resource is used to specify an entity (for some - with properties) that can be managed through operations
//      AccountRuleResource resource;
//      //: Value from enum that can be applied to `resource`
//      AccountRuleAction action;
//      //: True if such `action` on such `resource` is prohibited, otherwise allows
//      bool forbids;
//      //: Arbitrary stringified json object that will be attached to rule
//      longstring details;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAccountRuleData extends XdrEncodable  {
  AccountRuleResource resource;
  AccountRuleAction action;
  bool forbids;
  LONGSTRING details;
  CreateAccountRuleDataExt ext;

  CreateAccountRuleData(
      this.resource,
      this.action,
      this.forbids,
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    resource.toXdr(stream);
    action.toXdr(stream);
    forbids.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateAccountRuleDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateAccountRuleDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAccountRuleDataExtEmptyVersion extends CreateAccountRuleDataExt {
  CreateAccountRuleDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: UpdateAccountRuleData is used to pass necessary params to update existing account rule
//  struct UpdateAccountRuleData
//  {
//      //: Identifier of existing signer rule
//      uint64 ruleID;
//      //: Resource is used to specify entity (for some - with properties) that can be managed through operations
//      AccountRuleResource resource;
//      //: Value from enum that can be applied to `resource`
//      AccountRuleAction action;
//      //: True if such `action` on such `resource` is prohibited, otherwise allows
//      bool forbids;
//      //: Arbitrary stringified json object that will be attached to rule
//      longstring details;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class UpdateAccountRuleData extends XdrEncodable  {
  UINT64 ruleID;
  AccountRuleResource resource;
  AccountRuleAction action;
  bool forbids;
  LONGSTRING details;
  UpdateAccountRuleDataExt ext;

  UpdateAccountRuleData(
      this.ruleID,
      this.resource,
      this.action,
      this.forbids,
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    resource.toXdr(stream);
    action.toXdr(stream);
    forbids.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class UpdateAccountRuleDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  UpdateAccountRuleDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class UpdateAccountRuleDataExtEmptyVersion extends UpdateAccountRuleDataExt {
  UpdateAccountRuleDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: RemoveAccountRuleData is used to pass necessary params to remove existing account rule
//  struct RemoveAccountRuleData
//  {
//      //: Identifier of existing account rule
//      uint64 ruleID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class RemoveAccountRuleData extends XdrEncodable  {
  UINT64 ruleID;
  RemoveAccountRuleDataExt ext;

  RemoveAccountRuleData(
      this.ruleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class RemoveAccountRuleDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  RemoveAccountRuleDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class RemoveAccountRuleDataExtEmptyVersion extends RemoveAccountRuleDataExt {
  RemoveAccountRuleDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: ManageAccountRuleOp is used to create, update or remove account rule
//  struct ManageAccountRuleOp
//  {
//      //: data is used to pass one of `ManageAccountRuleAction` with required params
//      union switch (ManageAccountRuleAction action)
//      {
//      case CREATE:
//          CreateAccountRuleData createData;
//      case UPDATE:
//          UpdateAccountRuleData updateData;
//      case REMOVE:
//          RemoveAccountRuleData removeData;
//      } data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageAccountRuleOp extends XdrEncodable  {
  ManageAccountRuleOpData data;
  ManageAccountRuleOpExt ext;

  ManageAccountRuleOp(
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageAccountRuleOpData extends XdrEncodable {
  ManageAccountRuleAction discriminant;
  ManageAccountRuleOpData(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAccountRuleOpDataCreate extends ManageAccountRuleOpData {
  ManageAccountRuleOpDataCreate(this.createData) : super(ManageAccountRuleAction(ManageAccountRuleAction.CREATE));
  late CreateAccountRuleData createData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }
}

class ManageAccountRuleOpDataUpdate extends ManageAccountRuleOpData {
  ManageAccountRuleOpDataUpdate(this.updateData) : super(ManageAccountRuleAction(ManageAccountRuleAction.UPDATE));
  late UpdateAccountRuleData updateData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateData.toXdr(stream);
  }
}

class ManageAccountRuleOpDataRemove extends ManageAccountRuleOpData {
  ManageAccountRuleOpDataRemove(this.removeData) : super(ManageAccountRuleAction(ManageAccountRuleAction.REMOVE));
  late RemoveAccountRuleData removeData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeData.toXdr(stream);
  }
}

abstract class ManageAccountRuleOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageAccountRuleOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAccountRuleOpExtEmptyVersion extends ManageAccountRuleOpExt {
  ManageAccountRuleOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageAccountRuleResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const RULE_IS_USED = -2;
  static const INVALID_DETAILS = -3;
  static const INVALID_ACTION = -4;
  int value;
  ManageAccountRuleResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class ManageAccountRuleResult extends XdrEncodable {
  ManageAccountRuleResultCode discriminant;
  ManageAccountRuleResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAccountRuleResultSuccess extends ManageAccountRuleResult {
  ManageAccountRuleResultSuccess(this.success) : super(ManageAccountRuleResultCode(ManageAccountRuleResultCode.SUCCESS));
  late ManageAccountRuleResultSuccessSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class ManageAccountRuleResultRuleIsUsed extends ManageAccountRuleResult {
  ManageAccountRuleResultRuleIsUsed(this.roleIDs) : super(ManageAccountRuleResultCode(ManageAccountRuleResultCode.RULE_IS_USED));
  late List<UINT64> roleIDs;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    roleIDs.length.toXdr(stream);
    roleIDs.forEach ((element) {
      element.toXdr(stream);
    });
  }
}
// === xdr source ============================================================

//  struct {
//              //: id of the rule that was managed
//              uint64 ruleID;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          }

//  ===========================================================================
class ManageAccountRuleResultSuccessSuccess extends XdrEncodable  {
  UINT64 ruleID;
  ManageAccountRuleResultSuccessExt ext;

  ManageAccountRuleResultSuccessSuccess(
      this.ruleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageAccountRuleResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageAccountRuleResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAccountRuleResultSuccessExtEmptyVersion extends ManageAccountRuleResultSuccessExt {
  ManageAccountRuleResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class ManageAccountSpecificRuleAction extends XdrEncodable {
  static const CREATE = 0;
  static const REMOVE = 1;
  int value;
  ManageAccountSpecificRuleAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: CreateAccountSpecificRuleData is used to pass necessary params to create a new account specific rule
//  struct CreateAccountSpecificRuleData
//  {
//      //: ledgerKey is used to specify an entity with primary key that can be used through operations
//      LedgerKey ledgerKey;
//      //: Certain account for which rule is applied, null means rule is global
//      AccountID* accountID;
//      //: True if such rule is deniable, otherwise allows
//      bool forbids;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAccountSpecificRuleData extends XdrEncodable  {
  LedgerKey ledgerKey;
  ACCOUNTID? accountID;
  bool forbids;
  CreateAccountSpecificRuleDataExt ext;

  CreateAccountSpecificRuleData(
      this.ledgerKey,
      this.accountID,
      this.forbids,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ledgerKey.toXdr(stream);
    if (accountID != null) {
      true.toXdr(stream);
      accountID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    forbids.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateAccountSpecificRuleDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateAccountSpecificRuleDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAccountSpecificRuleDataExtEmptyVersion extends CreateAccountSpecificRuleDataExt {
  CreateAccountSpecificRuleDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: RemoveAccountSpecificRuleData is used to pass necessary params to remove existing account specific rule
//  struct RemoveAccountSpecificRuleData
//  {
//      //: Identifier of existing account specific rule
//      uint64 ruleID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class RemoveAccountSpecificRuleData extends XdrEncodable  {
  UINT64 ruleID;
  RemoveAccountSpecificRuleDataExt ext;

  RemoveAccountSpecificRuleData(
      this.ruleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class RemoveAccountSpecificRuleDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  RemoveAccountSpecificRuleDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class RemoveAccountSpecificRuleDataExtEmptyVersion extends RemoveAccountSpecificRuleDataExt {
  RemoveAccountSpecificRuleDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: ManageAccountSpecificRuleOp is used to create or remove account specific rule
//  struct ManageAccountSpecificRuleOp
//  {
//      //: data is used to pass one of `ManageAccountSpecificRuleAction` with required params
//      union switch (ManageAccountSpecificRuleAction action)
//      {
//      case CREATE:
//          CreateAccountSpecificRuleData createData;
//      case REMOVE:
//          RemoveAccountSpecificRuleData removeData;
//      } data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageAccountSpecificRuleOp extends XdrEncodable  {
  ManageAccountSpecificRuleOpData data;
  ManageAccountSpecificRuleOpExt ext;

  ManageAccountSpecificRuleOp(
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageAccountSpecificRuleOpData extends XdrEncodable {
  ManageAccountSpecificRuleAction discriminant;
  ManageAccountSpecificRuleOpData(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAccountSpecificRuleOpDataCreate extends ManageAccountSpecificRuleOpData {
  ManageAccountSpecificRuleOpDataCreate(this.createData) : super(ManageAccountSpecificRuleAction(ManageAccountSpecificRuleAction.CREATE));
  late CreateAccountSpecificRuleData createData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }
}

class ManageAccountSpecificRuleOpDataRemove extends ManageAccountSpecificRuleOpData {
  ManageAccountSpecificRuleOpDataRemove(this.removeData) : super(ManageAccountSpecificRuleAction(ManageAccountSpecificRuleAction.REMOVE));
  late RemoveAccountSpecificRuleData removeData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeData.toXdr(stream);
  }
}

abstract class ManageAccountSpecificRuleOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageAccountSpecificRuleOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAccountSpecificRuleOpExtEmptyVersion extends ManageAccountSpecificRuleOpExt {
  ManageAccountSpecificRuleOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageAccountSpecificRuleResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const SALE_NOT_FOUND = -2;
  static const NOT_AUTHORIZED = -3;
  static const ALREADY_EXISTS = -4;
  static const REVERSED_ALREADY_EXISTS = -5;
  static const ENTRY_TYPE_NOT_SUPPORTED = -6;
  static const ACCOUNT_NOT_FOUND = -7;
  static const SPECIFIC_RULE_NOT_SUPPORTED = -8;
  static const REMOVING_GLOBAL_RULE_FORBIDDEN = -9;
  int value;
  ManageAccountSpecificRuleResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class ManageAccountSpecificRuleResult extends XdrEncodable {
  ManageAccountSpecificRuleResultCode discriminant;
  ManageAccountSpecificRuleResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAccountSpecificRuleResultSuccess extends ManageAccountSpecificRuleResult {
  ManageAccountSpecificRuleResultSuccess(this.success) : super(ManageAccountSpecificRuleResultCode(ManageAccountSpecificRuleResultCode.SUCCESS));
  late ManageAccountSpecificRuleResultSuccessSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          //: id of the rule that was managed
//          uint64 ruleID;
//
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class ManageAccountSpecificRuleResultSuccessSuccess extends XdrEncodable  {
  UINT64 ruleID;
  ManageAccountSpecificRuleResultSuccessExt ext;

  ManageAccountSpecificRuleResultSuccessSuccess(
      this.ruleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageAccountSpecificRuleResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageAccountSpecificRuleResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAccountSpecificRuleResultSuccessExtEmptyVersion extends ManageAccountSpecificRuleResultSuccessExt {
  ManageAccountSpecificRuleResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class ManageAssetPairAction extends XdrEncodable {
  static const CREATE = 0;
  static const UPDATE_PRICE = 1;
  static const UPDATE_POLICIES = 2;
  int value;
  ManageAssetPairAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: `ManageAssetPairOp` either creates new asset pairs or updates prices or policies of existing [asset pairs](#operation/assetPairResources)
//  struct ManageAssetPairOp
//  {
//      //: Defines a ManageBalanceAction that will be performed on an asset pair
//      ManageAssetPairAction action;
//      //: Defines a base asset of an asset pair
//      AssetCode base;
//      //: Defines a base asset of an asset pair
//      AssetCode quote;
//
//      //: New physical price of the asset pair which would be set after successful `ManageAssetPairOp` application
//      int64 physicalPrice;
//
//      //: New correction of the asset pair physical price in percents
//      int64 physicalPriceCorrection;
//      //: New maximal price step of asset pair
//      int64 maxPriceStep;
//
//      //: Bitmask of asset policies set by the creator or corrected by manage asset operations
//      int32 policies;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageAssetPairOp extends XdrEncodable  {
  ManageAssetPairAction action;
  ASSETCODE base;
  ASSETCODE quote;
  INT64 physicalPrice;
  INT64 physicalPriceCorrection;
  INT64 maxPriceStep;
  INT32 policies;
  ManageAssetPairOpExt ext;

  ManageAssetPairOp(
      this.action,
      this.base,
      this.quote,
      this.physicalPrice,
      this.physicalPriceCorrection,
      this.maxPriceStep,
      this.policies,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    action.toXdr(stream);
    base.toXdr(stream);
    quote.toXdr(stream);
    physicalPrice.toXdr(stream);
    physicalPriceCorrection.toXdr(stream);
    maxPriceStep.toXdr(stream);
    policies.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageAssetPairOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageAssetPairOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAssetPairOpExtEmptyVersion extends ManageAssetPairOpExt {
  ManageAssetPairOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageAssetPairResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const ALREADY_EXISTS = -2;
  static const MALFORMED = -3;
  static const INVALID_ASSET = -4;
  static const INVALID_ACTION = -5;
  static const INVALID_POLICIES = -6;
  static const ASSET_NOT_FOUND = -7;
  static const SAME_ASSET = -8;
  int value;
  ManageAssetPairResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: `ManageAssetPairSuccess` represents a successful result of `ManageAssetPairOp`
//  struct ManageAssetPairSuccess
//  {
//      //: Price of an asset pair after the operation
//      int64 currentPrice;
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageAssetPairSuccess extends XdrEncodable  {
  INT64 currentPrice;
  ManageAssetPairSuccessExt ext;

  ManageAssetPairSuccess(
      this.currentPrice,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    currentPrice.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageAssetPairSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageAssetPairSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAssetPairSuccessExtEmptyVersion extends ManageAssetPairSuccessExt {
  ManageAssetPairSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class ManageAssetPairResult extends XdrEncodable {
  ManageAssetPairResultCode discriminant;
  ManageAssetPairResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAssetPairResultSuccess extends ManageAssetPairResult {
  ManageAssetPairResultSuccess(this.success) : super(ManageAssetPairResultCode(ManageAssetPairResultCode.SUCCESS));
  late ManageAssetPairSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class ManageAssetAction extends XdrEncodable {
  static const CREATE_ASSET_CREATION_REQUEST = 0;
  static const CREATE_ASSET_UPDATE_REQUEST = 1;
  static const CANCEL_ASSET_REQUEST = 2;
  static const CHANGE_PREISSUED_ASSET_SIGNER = 3;
  static const UPDATE_MAX_ISSUANCE = 4;
  int value;
  ManageAssetAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: CancelAssetRequest is used to cancel an `UPDATE_ASSET` or `CREATE_ASSET` request
//  struct CancelAssetRequest
//  {
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CancelAssetRequest extends XdrEncodable  {
  CancelAssetRequestExt ext;

  CancelAssetRequest(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class CancelAssetRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelAssetRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelAssetRequestExtEmptyVersion extends CancelAssetRequestExt {
  CancelAssetRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: UpdateMaxIssuance is used to update max issuance amount of an asset.
//  struct UpdateMaxIssuance
//  {
//      //: `assetCode` defines an asset entry that will be updated
//      AssetCode assetCode;
//      //: new max issuance amount for an asset entry
//      uint64 maxIssuanceAmount;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class UpdateMaxIssuance extends XdrEncodable  {
  ASSETCODE assetCode;
  UINT64 maxIssuanceAmount;
  UpdateMaxIssuanceExt ext;

  UpdateMaxIssuance(
      this.assetCode,
      this.maxIssuanceAmount,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    maxIssuanceAmount.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class UpdateMaxIssuanceExt extends XdrEncodable {
  LedgerVersion discriminant;
  UpdateMaxIssuanceExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class UpdateMaxIssuanceExtEmptyVersion extends UpdateMaxIssuanceExt {
  UpdateMaxIssuanceExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: ManageAssetOp is used to:
//  //: * create or update `CREATE_ASSET` request;
//  //: * create or update `UPDATE_ASSET` request;
//  //: * cancel `CREATE_ASSET` or `UPDATE_ASSET` request
//  //: * change asset pre issuer
//  //: * update max issuance of an asset
//  struct ManageAssetOp
//  {
//      //: ID of a reviewable request
//      //: If `requestID == 0`, operation creates a new reviewable request; otherwise, it updates the existing one
//      uint64 requestID;
//
//      //: data is used to pass one of `ManageAssetAction` with required params
//      union switch (ManageAssetAction action)
//      {
//      case CREATE_ASSET_CREATION_REQUEST:
//          //: Is used to pass required fields for `CREATE_ASSET`
//          struct
//          {
//              //: Is used to pass required fields to create an asset entry
//              AssetCreationRequest createAsset;
//              //: (optional) Bit mask whose flags must be cleared in order for `CREATE_ASSET` request to be approved, which will be used by key `asset_create_tasks`
//              //: instead of key-value
//              uint32* allTasks;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          } createAssetCreationRequest;
//      case CREATE_ASSET_UPDATE_REQUEST:
//          //: Is used to pass needed fields for `UPDATE_ASSET`
//          struct
//          {
//              //: Is used to pass required fields to update an asset entry
//              AssetUpdateRequest updateAsset;
//              //: (optional) Bit mask whose flags must be cleared in order for `UPDATE_ASSET` request to be approved, which will be used
//              //: instead of key-value by key `asset_update_tasks`
//              uint32* allTasks;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          } createAssetUpdateRequest;
//      case CANCEL_ASSET_REQUEST:
//          //: Reserved for future use
//          CancelAssetRequest cancelRequest;
//      case CHANGE_PREISSUED_ASSET_SIGNER:
//          //: Is used to pass required fields to change an asset pre issuer
//          AssetChangePreissuedSigner changePreissuedSigner;
//      case UPDATE_MAX_ISSUANCE:
//          //: Is used to update max issuance of asset
//          UpdateMaxIssuance updateMaxIssuance;
//      } request;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageAssetOp extends XdrEncodable  {
  UINT64 requestID;
  ManageAssetOpRequest request;
  ManageAssetOpExt ext;

  ManageAssetOp(
      this.requestID,
      this.request,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    request.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageAssetOpRequest extends XdrEncodable {
  ManageAssetAction discriminant;
  ManageAssetOpRequest(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAssetOpRequestCreateAssetCreationRequest extends ManageAssetOpRequest {
  ManageAssetOpRequestCreateAssetCreationRequest(this.createAssetCreationRequest) : super(ManageAssetAction(ManageAssetAction.CREATE_ASSET_CREATION_REQUEST));
  late ManageAssetOpCreateAssetCreationRequestCreateAssetCreationRequest createAssetCreationRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAssetCreationRequest.toXdr(stream);
  }
}

class ManageAssetOpRequestCreateAssetUpdateRequest extends ManageAssetOpRequest {
  ManageAssetOpRequestCreateAssetUpdateRequest(this.createAssetUpdateRequest) : super(ManageAssetAction(ManageAssetAction.CREATE_ASSET_UPDATE_REQUEST));
  late ManageAssetOpCreateAssetUpdateRequestCreateAssetUpdateRequest createAssetUpdateRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAssetUpdateRequest.toXdr(stream);
  }
}

class ManageAssetOpRequestCancelAssetRequest extends ManageAssetOpRequest {
  ManageAssetOpRequestCancelAssetRequest(this.cancelRequest) : super(ManageAssetAction(ManageAssetAction.CANCEL_ASSET_REQUEST));
  late CancelAssetRequest cancelRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelRequest.toXdr(stream);
  }
}

class ManageAssetOpRequestChangePreissuedAssetSigner extends ManageAssetOpRequest {
  ManageAssetOpRequestChangePreissuedAssetSigner(this.changePreissuedSigner) : super(ManageAssetAction(ManageAssetAction.CHANGE_PREISSUED_ASSET_SIGNER));
  late AssetChangePreissuedSigner changePreissuedSigner;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    changePreissuedSigner.toXdr(stream);
  }
}

class ManageAssetOpRequestUpdateMaxIssuance extends ManageAssetOpRequest {
  ManageAssetOpRequestUpdateMaxIssuance(this.updateMaxIssuance) : super(ManageAssetAction(ManageAssetAction.UPDATE_MAX_ISSUANCE));
  late UpdateMaxIssuance updateMaxIssuance;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateMaxIssuance.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              //: Is used to pass required fields to create an asset entry
//              AssetCreationRequest createAsset;
//              //: (optional) Bit mask whose flags must be cleared in order for `CREATE_ASSET` request to be approved, which will be used by key `asset_create_tasks`
//              //: instead of key-value
//              uint32* allTasks;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          }

//  ===========================================================================
class ManageAssetOpCreateAssetCreationRequestCreateAssetCreationRequest extends XdrEncodable  {
  AssetCreationRequest createAsset;
  UINT32? allTasks;
  ManageAssetOpCreateAssetCreationRequestExt ext;

  ManageAssetOpCreateAssetCreationRequestCreateAssetCreationRequest(
      this.createAsset,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    createAsset.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class ManageAssetOpCreateAssetCreationRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageAssetOpCreateAssetCreationRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAssetOpCreateAssetCreationRequestExtEmptyVersion extends ManageAssetOpCreateAssetCreationRequestExt {
  ManageAssetOpCreateAssetCreationRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct
//          {
//              //: Is used to pass required fields to update an asset entry
//              AssetUpdateRequest updateAsset;
//              //: (optional) Bit mask whose flags must be cleared in order for `UPDATE_ASSET` request to be approved, which will be used
//              //: instead of key-value by key `asset_update_tasks`
//              uint32* allTasks;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          }

//  ===========================================================================
class ManageAssetOpCreateAssetUpdateRequestCreateAssetUpdateRequest extends XdrEncodable  {
  AssetUpdateRequest updateAsset;
  UINT32? allTasks;
  ManageAssetOpCreateAssetUpdateRequestExt ext;

  ManageAssetOpCreateAssetUpdateRequestCreateAssetUpdateRequest(
      this.updateAsset,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    updateAsset.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class ManageAssetOpCreateAssetUpdateRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageAssetOpCreateAssetUpdateRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAssetOpCreateAssetUpdateRequestExtEmptyVersion extends ManageAssetOpCreateAssetUpdateRequestExt {
  ManageAssetOpCreateAssetUpdateRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

abstract class ManageAssetOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageAssetOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAssetOpExtEmptyVersion extends ManageAssetOpExt {
  ManageAssetOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageAssetResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const REQUEST_NOT_FOUND = -1;
  static const INVALID_SIGNATURE = -2;
  static const ASSET_ALREADY_EXISTS = -3;
  static const INVALID_MAX_ISSUANCE_AMOUNT = -4;
  static const INVALID_CODE = -5;
  static const INVALID_PRE_ISSUER = -6;
  static const INVALID_POLICIES = -7;
  static const ASSET_NOT_FOUND = -8;
  static const REQUEST_ALREADY_EXISTS = -9;
  static const STATS_ASSET_ALREADY_EXISTS = -10;
  static const INITIAL_PREISSUED_EXCEEDS_MAX_ISSUANCE = -11;
  static const INVALID_CREATOR_DETAILS = -12;
  static const INVALID_TRAILING_DIGITS_COUNT = -13;
  static const INVALID_PREISSUED_AMOUNT_PRECISION = -14;
  static const INVALID_MAX_ISSUANCE_AMOUNT_PRECISION = -15;
  static const ASSET_CREATE_TASKS_NOT_FOUND = -16;
  static const ASSET_UPDATE_TASKS_NOT_FOUND = -17;
  static const NOT_ALLOWED_TO_SET_TASKS_ON_UPDATE = -18;
  int value;
  ManageAssetResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Is used to pass useful params after the successful operation application
//  struct ManageAssetSuccess
//  {
//      //: ID of the request that was created in the process of operation application
//      uint64 requestID;
//      //: True means that the request was applied and execution flow was successful
//      bool fulfilled;
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageAssetSuccess extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  ManageAssetSuccessExt ext;

  ManageAssetSuccess(
      this.requestID,
      this.fulfilled,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageAssetSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageAssetSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAssetSuccessExtEmptyVersion extends ManageAssetSuccessExt {
  ManageAssetSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class ManageAssetResult extends XdrEncodable {
  ManageAssetResultCode discriminant;
  ManageAssetResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageAssetResultSuccess extends ManageAssetResult {
  ManageAssetResultSuccess(this.success) : super(ManageAssetResultCode(ManageAssetResultCode.SUCCESS));
  late ManageAssetSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class ManageBalanceAction extends XdrEncodable {
  static const CREATE = 0;
  static const DELETE_BALANCE = 1;
  static const CREATE_UNIQUE = 2;
  int value;
  ManageBalanceAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: `ManageBalanceOp` applies an `action` of the `ManageBalanceAction` type on the balance of a particular `asset` (referenced to by its AssetCode)
//  //: of the `destination` account (referenced to by its AccountID)
//  struct ManageBalanceOp
//  {
//      //: Defines a ManageBalanceAction to be performed. `DELETE_BALANCE` is reserved and not implemented yet.
//      ManageBalanceAction action;
//      //: Defines an account whose balance will be managed
//      AccountID destination;
//      //: Defines an asset code of the balance to which `action` will be applied
//      AssetCode asset;
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageBalanceOp extends XdrEncodable  {
  ManageBalanceAction action;
  ACCOUNTID destination;
  ASSETCODE asset;
  ManageBalanceOpExt ext;

  ManageBalanceOp(
      this.action,
      this.destination,
      this.asset,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    action.toXdr(stream);
    destination.toXdr(stream);
    asset.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageBalanceOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageBalanceOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageBalanceOpExtEmptyVersion extends ManageBalanceOpExt {
  ManageBalanceOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageBalanceResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const NOT_FOUND = -2;
  static const DESTINATION_NOT_FOUND = -3;
  static const ASSET_NOT_FOUND = -4;
  static const INVALID_ASSET = -5;
  static const BALANCE_ALREADY_EXISTS = -6;
  static const VERSION_IS_NOT_SUPPORTED_YET = -7;
  int value;
  ManageBalanceResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct ManageBalanceSuccess {
//      //: ID of the balance that was managed
//      BalanceID balanceID;
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageBalanceSuccess extends XdrEncodable  {
  BALANCEID balanceID;
  ManageBalanceSuccessExt ext;

  ManageBalanceSuccess(
      this.balanceID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    balanceID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageBalanceSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageBalanceSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageBalanceSuccessExtEmptyVersion extends ManageBalanceSuccessExt {
  ManageBalanceSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class ManageBalanceResult extends XdrEncodable {
  ManageBalanceResultCode discriminant;
  ManageBalanceResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageBalanceResultSuccess extends ManageBalanceResult {
  ManageBalanceResultSuccess(this.success) : super(ManageBalanceResultCode(ManageBalanceResultCode.SUCCESS));
  late ManageBalanceSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class ManageContractRequestAction extends XdrEncodable {
  static const CREATE = 0;
  static const REMOVE = 1;
  int value;
  ManageContractRequestAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct CreateContractRequest
//  {
//      ContractRequest contractRequest;
//      uint32* allTasks;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateContractRequest extends XdrEncodable  {
  ContractRequest contractRequest;
  UINT32? allTasks;
  CreateContractRequestExt ext;

  CreateContractRequest(
      this.contractRequest,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    contractRequest.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreateContractRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateContractRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateContractRequestExtEmptyVersion extends CreateContractRequestExt {
  CreateContractRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct ManageContractRequestOp
//  {
//      union switch (ManageContractRequestAction action){
//      case CREATE:
//          CreateContractRequest createContractRequest;
//      case REMOVE:
//          uint64 requestID;
//      } details;
//
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageContractRequestOp extends XdrEncodable  {
  ManageContractRequestOpDetails details;
  ManageContractRequestOpExt ext;

  ManageContractRequestOp(
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageContractRequestOpDetails extends XdrEncodable {
  ManageContractRequestAction discriminant;
  ManageContractRequestOpDetails(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageContractRequestOpDetailsCreate extends ManageContractRequestOpDetails {
  ManageContractRequestOpDetailsCreate(this.createContractRequest) : super(ManageContractRequestAction(ManageContractRequestAction.CREATE));
  late CreateContractRequest createContractRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createContractRequest.toXdr(stream);
  }
}

class ManageContractRequestOpDetailsRemove extends ManageContractRequestOpDetails {
  ManageContractRequestOpDetailsRemove(this.requestID) : super(ManageContractRequestAction(ManageContractRequestAction.REMOVE));
  late UINT64 requestID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    requestID.toXdr(stream);
  }
}

abstract class ManageContractRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageContractRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageContractRequestOpExtEmptyVersion extends ManageContractRequestOpExt {
  ManageContractRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageContractRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const NOT_FOUND = -2;
  static const TOO_MANY_CONTRACTS = -3;
  static const NOT_ALLOWED_TO_REMOVE = -4;
  static const DETAILS_TOO_LONG = -5;
  static const CONTRACT_CREATE_TASKS_NOT_FOUND = -6;
  int value;
  ManageContractRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct CreateContractRequestResponse
//  {
//  	uint64 requestID;
//      bool fulfilled;
//
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateContractRequestResponse extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  CreateContractRequestResponseExt ext;

  CreateContractRequestResponse(
      this.requestID,
      this.fulfilled,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateContractRequestResponseExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateContractRequestResponseExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateContractRequestResponseExtEmptyVersion extends CreateContractRequestResponseExt {
  CreateContractRequestResponseExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class ManageContractRequestResult extends XdrEncodable {
  ManageContractRequestResultCode discriminant;
  ManageContractRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageContractRequestResultSuccess extends ManageContractRequestResult {
  ManageContractRequestResultSuccess(this.success) : super(ManageContractRequestResultCode(ManageContractRequestResultCode.SUCCESS));
  late ManageContractRequestResultSuccessSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          union switch (ManageContractRequestAction action)
//          {
//          case CREATE:
//              CreateContractRequestResponse response;
//          case REMOVE:
//              void;
//          } details;
//
//          // reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          } ext;
//      }

//  ===========================================================================
class ManageContractRequestResultSuccessSuccess extends XdrEncodable  {
  ManageContractRequestResultSuccessDetails details;
  ManageContractRequestResultSuccessExt ext;

  ManageContractRequestResultSuccessSuccess(
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageContractRequestResultSuccessDetails extends XdrEncodable {
  ManageContractRequestAction discriminant;
  ManageContractRequestResultSuccessDetails(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageContractRequestResultSuccessDetailsCreate extends ManageContractRequestResultSuccessDetails {
  ManageContractRequestResultSuccessDetailsCreate(this.response) : super(ManageContractRequestAction(ManageContractRequestAction.CREATE));
  late CreateContractRequestResponse response;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    response.toXdr(stream);
  }
}

class ManageContractRequestResultSuccessDetailsRemove extends ManageContractRequestResultSuccessDetails {
  ManageContractRequestResultSuccessDetailsRemove() : super(ManageContractRequestAction(ManageContractRequestAction.REMOVE));
}

abstract class ManageContractRequestResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageContractRequestResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageContractRequestResultSuccessExtEmptyVersion extends ManageContractRequestResultSuccessExt {
  ManageContractRequestResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class ManageContractAction extends XdrEncodable {
  static const ADD_DETAILS = 0;
  static const CONFIRM_COMPLETED = 1;
  static const START_DISPUTE = 2;
  static const RESOLVE_DISPUTE = 3;
  int value;
  ManageContractAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct ManageContractOp
//  {
//      uint64 contractID;
//
//      union switch (ManageContractAction action)
//      {
//      case ADD_DETAILS:
//          longstring details;
//      case CONFIRM_COMPLETED:
//          void;
//      case START_DISPUTE:
//          longstring disputeReason;
//      case RESOLVE_DISPUTE:
//          bool isRevert;
//      }
//      data;
//
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageContractOp extends XdrEncodable  {
  UINT64 contractID;
  ManageContractOpData data;
  ManageContractOpExt ext;

  ManageContractOp(
      this.contractID,
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    contractID.toXdr(stream);
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageContractOpData extends XdrEncodable {
  ManageContractAction discriminant;
  ManageContractOpData(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageContractOpDataAddDetails extends ManageContractOpData {
  ManageContractOpDataAddDetails(this.details) : super(ManageContractAction(ManageContractAction.ADD_DETAILS));
  late LONGSTRING details;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    details.toXdr(stream);
  }
}

class ManageContractOpDataConfirmCompleted extends ManageContractOpData {
  ManageContractOpDataConfirmCompleted() : super(ManageContractAction(ManageContractAction.CONFIRM_COMPLETED));
}

class ManageContractOpDataStartDispute extends ManageContractOpData {
  ManageContractOpDataStartDispute(this.disputeReason) : super(ManageContractAction(ManageContractAction.START_DISPUTE));
  late LONGSTRING disputeReason;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    disputeReason.toXdr(stream);
  }
}

class ManageContractOpDataResolveDispute extends ManageContractOpData {
  ManageContractOpDataResolveDispute(this.isRevert) : super(ManageContractAction(ManageContractAction.RESOLVE_DISPUTE));
  late bool isRevert;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    isRevert.toXdr(stream);
  }
}

abstract class ManageContractOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageContractOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageContractOpExtEmptyVersion extends ManageContractOpExt {
  ManageContractOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageContractResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const NOT_FOUND = -2;
  static const NOT_ALLOWED = -3;
  static const DETAILS_TOO_LONG = -4;
  static const DISPUTE_REASON_TOO_LONG = -5;
  static const ALREADY_CONFIRMED = -6;
  static const INVOICE_NOT_APPROVED = -7;
  static const DISPUTE_ALREADY_STARTED = -8;
  static const CUSTOMER_BALANCE_OVERFLOW = -9;
  static const INCORRECT_PRECISION = -10;
  int value;
  ManageContractResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct ManageContractResponse
//  {
//      union switch (ManageContractAction action)
//      {
//      case CONFIRM_COMPLETED:
//          bool isCompleted;
//      default:
//          void;
//      }
//      data;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageContractResponse extends XdrEncodable  {
  ManageContractResponseData data;
  ManageContractResponseExt ext;

  ManageContractResponse(
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageContractResponseData extends XdrEncodable {
  ManageContractAction discriminant;
  ManageContractResponseData(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageContractResponseDataConfirmCompleted extends ManageContractResponseData {
  ManageContractResponseDataConfirmCompleted(this.isCompleted) : super(ManageContractAction(ManageContractAction.CONFIRM_COMPLETED));
  late bool isCompleted;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    isCompleted.toXdr(stream);
  }
}

abstract class ManageContractResponseExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageContractResponseExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageContractResponseExtEmptyVersion extends ManageContractResponseExt {
  ManageContractResponseExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class ManageContractResult extends XdrEncodable {
  ManageContractResultCode discriminant;
  ManageContractResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageContractResultSuccess extends ManageContractResult {
  ManageContractResultSuccess(this.response) : super(ManageContractResultCode(ManageContractResultCode.SUCCESS));
  late ManageContractResponse response;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    response.toXdr(stream);
  }
}

class ManageCreatePollRequestAction extends XdrEncodable {
  static const CREATE = 0;
  static const CANCEL = 1;
  int value;
  ManageCreatePollRequestAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: CreatePollRequestData is used to pass necessary data to create a `CREATE_POLL` request
//  struct CreatePollRequestData
//  {
//      //: Body of `CREATE_POLL` request
//      CreatePollRequest request;
//
//      //: Bit mask that will be used instead of the value from key-value entry by
//      //: `create_poll_tasks:<permissionType>` key
//      uint32* allTasks;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreatePollRequestData extends XdrEncodable  {
  CreatePollRequest request;
  UINT32? allTasks;
  CreatePollRequestDataExt ext;

  CreatePollRequestData(
      this.request,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    request.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreatePollRequestDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreatePollRequestDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreatePollRequestDataExtEmptyVersion extends CreatePollRequestDataExt {
  CreatePollRequestDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: CancelPollRequestData is used to pass necessary data to remove a `CREATE_POLL` request
//  struct CancelPollRequestData
//  {
//      //: ID of `CREATE_POLL` request to remove
//      uint64 requestID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CancelPollRequestData extends XdrEncodable  {
  UINT64 requestID;
  CancelPollRequestDataExt ext;

  CancelPollRequestData(
      this.requestID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CancelPollRequestDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  CancelPollRequestDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CancelPollRequestDataExtEmptyVersion extends CancelPollRequestDataExt {
  CancelPollRequestDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: ManageCreatePollRequestOp is used to create or remove a `CREATE_POLL` request
//  struct ManageCreatePollRequestOp
//  {
//      //: data is used to pass one of `ManageCreatePollRequestAction` with required params
//      union switch (ManageCreatePollRequestAction action)
//      {
//      case CREATE:
//          CreatePollRequestData createData;
//      case CANCEL:
//          CancelPollRequestData cancelData;
//      }
//      data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageCreatePollRequestOp extends XdrEncodable  {
  ManageCreatePollRequestOpData data;
  ManageCreatePollRequestOpExt ext;

  ManageCreatePollRequestOp(
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageCreatePollRequestOpData extends XdrEncodable {
  ManageCreatePollRequestAction discriminant;
  ManageCreatePollRequestOpData(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageCreatePollRequestOpDataCreate extends ManageCreatePollRequestOpData {
  ManageCreatePollRequestOpDataCreate(this.createData) : super(ManageCreatePollRequestAction(ManageCreatePollRequestAction.CREATE));
  late CreatePollRequestData createData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }
}

class ManageCreatePollRequestOpDataCancel extends ManageCreatePollRequestOpData {
  ManageCreatePollRequestOpDataCancel(this.cancelData) : super(ManageCreatePollRequestAction(ManageCreatePollRequestAction.CANCEL));
  late CancelPollRequestData cancelData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelData.toXdr(stream);
  }
}

abstract class ManageCreatePollRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageCreatePollRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageCreatePollRequestOpExtEmptyVersion extends ManageCreatePollRequestOpExt {
  ManageCreatePollRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageCreatePollRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_CREATOR_DETAILS = -1;
  static const NOT_FOUND = -2;
  static const INVALID_DATES = -3;
  static const INVALID_END_TIME = -4;
  static const RESULT_PROVIDER_NOT_FOUND = -5;
  static const CREATE_POLL_TASKS_NOT_FOUND = -6;
  static const INVALID_NUMBER_OF_CHOICES = -7;
  int value;
  ManageCreatePollRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: CreatePollRequestResponse is used to pass useful fields after `CREATE_POLL` request creation
//  struct CreatePollRequestResponse
//  {
//      //: ID of a created request
//      uint64 requestID;
//
//      //: Indicates whether or not the `CREATE_POLL` request was auto approved and fulfilled
//      //: True means that poll was successfully created
//      bool fulfilled;
//
//      //: ID of created poll if request was fulfilled
//      uint64* pollID;
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreatePollRequestResponse extends XdrEncodable  {
  UINT64 requestID;
  bool fulfilled;
  UINT64? pollID;
  CreatePollRequestResponseExt ext;

  CreatePollRequestResponse(
      this.requestID,
      this.fulfilled,
      this.pollID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    fulfilled.toXdr(stream);
    if (pollID != null) {
      true.toXdr(stream);
      pollID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class CreatePollRequestResponseExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreatePollRequestResponseExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreatePollRequestResponseExtEmptyVersion extends CreatePollRequestResponseExt {
  CreatePollRequestResponseExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Success result of operation application
//  struct ManageCreatePollRequestSuccessResult
//  {
//      //: `details` id used to pass useful fields
//      union switch (ManageCreatePollRequestAction action)
//      {
//      case CREATE:
//          CreatePollRequestResponse response;
//      case CANCEL:
//          void;
//      } details;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageCreatePollRequestSuccessResult extends XdrEncodable  {
  ManageCreatePollRequestSuccessResultDetails details;
  ManageCreatePollRequestSuccessResultExt ext;

  ManageCreatePollRequestSuccessResult(
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageCreatePollRequestSuccessResultDetails extends XdrEncodable {
  ManageCreatePollRequestAction discriminant;
  ManageCreatePollRequestSuccessResultDetails(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageCreatePollRequestSuccessResultDetailsCreate extends ManageCreatePollRequestSuccessResultDetails {
  ManageCreatePollRequestSuccessResultDetailsCreate(this.response) : super(ManageCreatePollRequestAction(ManageCreatePollRequestAction.CREATE));
  late CreatePollRequestResponse response;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    response.toXdr(stream);
  }
}

class ManageCreatePollRequestSuccessResultDetailsCancel extends ManageCreatePollRequestSuccessResultDetails {
  ManageCreatePollRequestSuccessResultDetailsCancel() : super(ManageCreatePollRequestAction(ManageCreatePollRequestAction.CANCEL));
}

abstract class ManageCreatePollRequestSuccessResultExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageCreatePollRequestSuccessResultExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageCreatePollRequestSuccessResultExtEmptyVersion extends ManageCreatePollRequestSuccessResultExt {
  ManageCreatePollRequestSuccessResultExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class ManageCreatePollRequestResult extends XdrEncodable {
  ManageCreatePollRequestResultCode discriminant;
  ManageCreatePollRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageCreatePollRequestResultSuccess extends ManageCreatePollRequestResult {
  ManageCreatePollRequestResultSuccess(this.success) : super(ManageCreatePollRequestResultCode(ManageCreatePollRequestResultCode.SUCCESS));
  late ManageCreatePollRequestSuccessResult success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class ManageExternalSystemAccountIdPoolEntryAction extends XdrEncodable {
  static const CREATE = 0;
  static const REMOVE = 1;
  int value;
  ManageExternalSystemAccountIdPoolEntryAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: CreateExternalSystemAccountIdPoolEntryActionInput is used to
//  //: pass necessary params to create a new external system account ID in the external system ID pool
//  struct CreateExternalSystemAccountIdPoolEntryActionInput
//  {
//      //: Type of external system, selected arbitrarily
//      int32 externalSystemType;
//      //: Data for external system binding
//      longstring data;
//      //: External system ID of the creator
//      uint64 parent;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateExternalSystemAccountIdPoolEntryActionInput extends XdrEncodable  {
  INT32 externalSystemType;
  LONGSTRING data;
  UINT64 parent;
  CreateExternalSystemAccountIdPoolEntryActionInputExt ext;

  CreateExternalSystemAccountIdPoolEntryActionInput(
      this.externalSystemType,
      this.data,
      this.parent,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    externalSystemType.toXdr(stream);
    data.toXdr(stream);
    parent.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateExternalSystemAccountIdPoolEntryActionInputExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateExternalSystemAccountIdPoolEntryActionInputExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateExternalSystemAccountIdPoolEntryActionInputExtEmptyVersion extends CreateExternalSystemAccountIdPoolEntryActionInputExt {
  CreateExternalSystemAccountIdPoolEntryActionInputExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: DeleteExternalSystemAccountIdPoolEntryActionInput is used to
//  //: pass necessary params to remove an existing external system account ID in the external system ID pool
//  struct DeleteExternalSystemAccountIdPoolEntryActionInput
//  {
//      //: ID of an existing external system account ID pool
//      uint64 poolEntryID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class DeleteExternalSystemAccountIdPoolEntryActionInput extends XdrEncodable  {
  UINT64 poolEntryID;
  DeleteExternalSystemAccountIdPoolEntryActionInputExt ext;

  DeleteExternalSystemAccountIdPoolEntryActionInput(
      this.poolEntryID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    poolEntryID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class DeleteExternalSystemAccountIdPoolEntryActionInputExt extends XdrEncodable {
  LedgerVersion discriminant;
  DeleteExternalSystemAccountIdPoolEntryActionInputExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class DeleteExternalSystemAccountIdPoolEntryActionInputExtEmptyVersion extends DeleteExternalSystemAccountIdPoolEntryActionInputExt {
  DeleteExternalSystemAccountIdPoolEntryActionInputExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: ManageExternalSystemAccountIdPoolEntryOp is used to create or remove
//  //: an external system account ID from the external system ID pool
//  struct ManageExternalSystemAccountIdPoolEntryOp
//  {
//      //: `actionInput` is used to pass one of
//      //: `ManageExternalSystemAccountIdPoolEntryAction` with required params
//      union switch (ManageExternalSystemAccountIdPoolEntryAction action)
//      {
//      case CREATE:
//          CreateExternalSystemAccountIdPoolEntryActionInput createExternalSystemAccountIdPoolEntryActionInput;
//      case REMOVE:
//          DeleteExternalSystemAccountIdPoolEntryActionInput deleteExternalSystemAccountIdPoolEntryActionInput;
//      } actionInput;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageExternalSystemAccountIdPoolEntryOp extends XdrEncodable  {
  ManageExternalSystemAccountIdPoolEntryOpActionInput actionInput;
  ManageExternalSystemAccountIdPoolEntryOpExt ext;

  ManageExternalSystemAccountIdPoolEntryOp(
      this.actionInput,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    actionInput.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageExternalSystemAccountIdPoolEntryOpActionInput extends XdrEncodable {
  ManageExternalSystemAccountIdPoolEntryAction discriminant;
  ManageExternalSystemAccountIdPoolEntryOpActionInput(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageExternalSystemAccountIdPoolEntryOpActionInputCreate extends ManageExternalSystemAccountIdPoolEntryOpActionInput {
  ManageExternalSystemAccountIdPoolEntryOpActionInputCreate(this.createExternalSystemAccountIdPoolEntryActionInput) : super(ManageExternalSystemAccountIdPoolEntryAction(ManageExternalSystemAccountIdPoolEntryAction.CREATE));
  late CreateExternalSystemAccountIdPoolEntryActionInput createExternalSystemAccountIdPoolEntryActionInput;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createExternalSystemAccountIdPoolEntryActionInput.toXdr(stream);
  }
}

class ManageExternalSystemAccountIdPoolEntryOpActionInputRemove extends ManageExternalSystemAccountIdPoolEntryOpActionInput {
  ManageExternalSystemAccountIdPoolEntryOpActionInputRemove(this.deleteExternalSystemAccountIdPoolEntryActionInput) : super(ManageExternalSystemAccountIdPoolEntryAction(ManageExternalSystemAccountIdPoolEntryAction.REMOVE));
  late DeleteExternalSystemAccountIdPoolEntryActionInput deleteExternalSystemAccountIdPoolEntryActionInput;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    deleteExternalSystemAccountIdPoolEntryActionInput.toXdr(stream);
  }
}

abstract class ManageExternalSystemAccountIdPoolEntryOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageExternalSystemAccountIdPoolEntryOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageExternalSystemAccountIdPoolEntryOpExtEmptyVersion extends ManageExternalSystemAccountIdPoolEntryOpExt {
  ManageExternalSystemAccountIdPoolEntryOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageExternalSystemAccountIdPoolEntryResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const ALREADY_EXISTS = -2;
  static const NOT_FOUND = -3;
  int value;
  ManageExternalSystemAccountIdPoolEntryResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Success result of operation application
//  struct ManageExternalSystemAccountIdPoolEntrySuccess
//  {
//      //: ID of the created external system account ID pool
//      uint64 poolEntryID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageExternalSystemAccountIdPoolEntrySuccess extends XdrEncodable  {
  UINT64 poolEntryID;
  ManageExternalSystemAccountIdPoolEntrySuccessExt ext;

  ManageExternalSystemAccountIdPoolEntrySuccess(
      this.poolEntryID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    poolEntryID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageExternalSystemAccountIdPoolEntrySuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageExternalSystemAccountIdPoolEntrySuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageExternalSystemAccountIdPoolEntrySuccessExtEmptyVersion extends ManageExternalSystemAccountIdPoolEntrySuccessExt {
  ManageExternalSystemAccountIdPoolEntrySuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class ManageExternalSystemAccountIdPoolEntryResult extends XdrEncodable {
  ManageExternalSystemAccountIdPoolEntryResultCode discriminant;
  ManageExternalSystemAccountIdPoolEntryResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageExternalSystemAccountIdPoolEntryResultSuccess extends ManageExternalSystemAccountIdPoolEntryResult {
  ManageExternalSystemAccountIdPoolEntryResultSuccess(this.success) : super(ManageExternalSystemAccountIdPoolEntryResultCode(ManageExternalSystemAccountIdPoolEntryResultCode.SUCCESS));
  late ManageExternalSystemAccountIdPoolEntrySuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class ManageInvoiceRequestAction extends XdrEncodable {
  static const CREATE = 0;
  static const REMOVE = 1;
  int value;
  ManageInvoiceRequestAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct InvoiceCreationRequest
//  {
//      AssetCode asset;
//      AccountID sender;
//      uint64 amount; // not allowed to set 0
//
//      uint64 *contractID;
//      longstring details;
//
//      uint32* allTasks;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class InvoiceCreationRequest extends XdrEncodable  {
  ASSETCODE asset;
  ACCOUNTID sender;
  UINT64 amount;
  UINT64? contractID;
  LONGSTRING details;
  UINT32? allTasks;
  InvoiceCreationRequestExt ext;

  InvoiceCreationRequest(
      this.asset,
      this.sender,
      this.amount,
      this.contractID,
      this.details,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    asset.toXdr(stream);
    sender.toXdr(stream);
    amount.toXdr(stream);
    if (contractID != null) {
      true.toXdr(stream);
      contractID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    details.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class InvoiceCreationRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  InvoiceCreationRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class InvoiceCreationRequestExtEmptyVersion extends InvoiceCreationRequestExt {
  InvoiceCreationRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct ManageInvoiceRequestOp
//  {
//      union switch (ManageInvoiceRequestAction action){
//      case CREATE:
//          InvoiceCreationRequest invoiceRequest;
//      case REMOVE:
//          uint64 requestID;
//      } details;
//
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageInvoiceRequestOp extends XdrEncodable  {
  ManageInvoiceRequestOpDetails details;
  ManageInvoiceRequestOpExt ext;

  ManageInvoiceRequestOp(
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageInvoiceRequestOpDetails extends XdrEncodable {
  ManageInvoiceRequestAction discriminant;
  ManageInvoiceRequestOpDetails(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageInvoiceRequestOpDetailsCreate extends ManageInvoiceRequestOpDetails {
  ManageInvoiceRequestOpDetailsCreate(this.invoiceRequest) : super(ManageInvoiceRequestAction(ManageInvoiceRequestAction.CREATE));
  late InvoiceCreationRequest invoiceRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    invoiceRequest.toXdr(stream);
  }
}

class ManageInvoiceRequestOpDetailsRemove extends ManageInvoiceRequestOpDetails {
  ManageInvoiceRequestOpDetailsRemove(this.requestID) : super(ManageInvoiceRequestAction(ManageInvoiceRequestAction.REMOVE));
  late UINT64 requestID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    requestID.toXdr(stream);
  }
}

abstract class ManageInvoiceRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageInvoiceRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageInvoiceRequestOpExtEmptyVersion extends ManageInvoiceRequestOpExt {
  ManageInvoiceRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageInvoiceRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const BALANCE_NOT_FOUND = -2;
  static const NOT_FOUND = -3;
  static const TOO_MANY_INVOICES = -4;
  static const DETAILS_TOO_LONG = -5;
  static const NOT_ALLOWED_TO_REMOVE = -6;
  static const CONTRACT_NOT_FOUND = -7;
  static const ONLY_CONTRACTOR_CAN_ATTACH_INVOICE_TO_CONTRACT = -8;
  static const SENDER_ACCOUNT_MISMATCHED = -9;
  static const INVOICE_IS_APPROVED = -10;
  static const INVOICE_TASKS_NOT_FOUND = -11;
  int value;
  ManageInvoiceRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct CreateInvoiceRequestResponse
//  {
//  	BalanceID receiverBalance;
//  	BalanceID senderBalance;
//
//  	uint64 requestID;
//
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreateInvoiceRequestResponse extends XdrEncodable  {
  BALANCEID receiverBalance;
  BALANCEID senderBalance;
  UINT64 requestID;
  CreateInvoiceRequestResponseExt ext;

  CreateInvoiceRequestResponse(
      this.receiverBalance,
      this.senderBalance,
      this.requestID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    receiverBalance.toXdr(stream);
    senderBalance.toXdr(stream);
    requestID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateInvoiceRequestResponseExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateInvoiceRequestResponseExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateInvoiceRequestResponseExtEmptyVersion extends CreateInvoiceRequestResponseExt {
  CreateInvoiceRequestResponseExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class ManageInvoiceRequestResult extends XdrEncodable {
  ManageInvoiceRequestResultCode discriminant;
  ManageInvoiceRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageInvoiceRequestResultSuccess extends ManageInvoiceRequestResult {
  ManageInvoiceRequestResultSuccess(this.success) : super(ManageInvoiceRequestResultCode(ManageInvoiceRequestResultCode.SUCCESS));
  late ManageInvoiceRequestResultSuccessSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          bool fulfilled;
//          union switch (ManageInvoiceRequestAction action)
//          {
//          case CREATE:
//              CreateInvoiceRequestResponse response;
//          case REMOVE:
//              void;
//          } details;
//
//          // reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          } ext;
//      }

//  ===========================================================================
class ManageInvoiceRequestResultSuccessSuccess extends XdrEncodable  {
  bool fulfilled;
  ManageInvoiceRequestResultSuccessDetails details;
  ManageInvoiceRequestResultSuccessExt ext;

  ManageInvoiceRequestResultSuccessSuccess(
      this.fulfilled,
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    fulfilled.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageInvoiceRequestResultSuccessDetails extends XdrEncodable {
  ManageInvoiceRequestAction discriminant;
  ManageInvoiceRequestResultSuccessDetails(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageInvoiceRequestResultSuccessDetailsCreate extends ManageInvoiceRequestResultSuccessDetails {
  ManageInvoiceRequestResultSuccessDetailsCreate(this.response) : super(ManageInvoiceRequestAction(ManageInvoiceRequestAction.CREATE));
  late CreateInvoiceRequestResponse response;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    response.toXdr(stream);
  }
}

class ManageInvoiceRequestResultSuccessDetailsRemove extends ManageInvoiceRequestResultSuccessDetails {
  ManageInvoiceRequestResultSuccessDetailsRemove() : super(ManageInvoiceRequestAction(ManageInvoiceRequestAction.REMOVE));
}

abstract class ManageInvoiceRequestResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageInvoiceRequestResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageInvoiceRequestResultSuccessExtEmptyVersion extends ManageInvoiceRequestResultSuccessExt {
  ManageInvoiceRequestResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class ManageKVAction extends XdrEncodable {
  static const PUT = 1;
  static const REMOVE = 2;
  int value;
  ManageKVAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: `ManageKeyValueOp` is used to create the manage key-value operation which, if applied successfully, will update the key-value entry present in the system
//      struct ManageKeyValueOp
//      {
//          //: `key` is the key for KeyValueEntry
//          longstring key;
//          //: `action` defines an action applied to the KeyValue based on given ManageKVAction
//          //: * Action `PUT` stores new value for a particular key
//          //: * Action `REMOVE` removes the value by a particular key
//          union switch(ManageKVAction action)
//          {
//              case PUT:
//                   KeyValueEntryValue value;
//              case REMOVE:
//                  void;
//          }
//          action;
//
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//              case EMPTY_VERSION:
//                  void;
//          }
//          ext;
//      };

//  ===========================================================================
class ManageKeyValueOp extends XdrEncodable  {
  LONGSTRING key;
  ManageKeyValueOpAction action;
  ManageKeyValueOpExt ext;

  ManageKeyValueOp(
      this.key,
      this.action,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    key.toXdr(stream);
    action.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageKeyValueOpAction extends XdrEncodable {
  ManageKVAction discriminant;
  ManageKeyValueOpAction(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageKeyValueOpActionPut extends ManageKeyValueOpAction {
  ManageKeyValueOpActionPut(this.value) : super(ManageKVAction(ManageKVAction.PUT));
  late KeyValueEntryValue value;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    value.toXdr(stream);
  }
}

class ManageKeyValueOpActionRemove extends ManageKeyValueOpAction {
  ManageKeyValueOpActionRemove() : super(ManageKVAction(ManageKVAction.REMOVE));
}

abstract class ManageKeyValueOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageKeyValueOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageKeyValueOpExtEmptyVersion extends ManageKeyValueOpExt {
  ManageKeyValueOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: `ManageKeyValueSuccess` represents details returned after the successful application of `ManageKeyValueOp`
//      struct ManageKeyValueSuccess
//      {
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//              case EMPTY_VERSION:
//                  void;
//          }
//          ext;
//      };

//  ===========================================================================
class ManageKeyValueSuccess extends XdrEncodable  {
  ManageKeyValueSuccessExt ext;

  ManageKeyValueSuccess(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class ManageKeyValueSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageKeyValueSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageKeyValueSuccessExtEmptyVersion extends ManageKeyValueSuccessExt {
  ManageKeyValueSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageKeyValueResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const INVALID_TYPE = -2;
  static const ZERO_VALUE_NOT_ALLOWED = -3;
  int value;
  ManageKeyValueResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class ManageKeyValueResult extends XdrEncodable {
  ManageKeyValueResultCode discriminant;
  ManageKeyValueResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageKeyValueResultSuccess extends ManageKeyValueResult {
  ManageKeyValueResultSuccess(this.success) : super(ManageKeyValueResultCode(ManageKeyValueResultCode.SUCCESS));
  late ManageKeyValueSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class ManageLimitsAction extends XdrEncodable {
  static const CREATE = 0;
  static const REMOVE = 1;
  int value;
  ManageLimitsAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: `LimitsCreateDetails` is used in the system configuration to set limits (daily, weekly, montly, annual)
//  //: for different assets, operations (according to StatsOpType), particular account roles, particular accounts,
//  //: or globally (only if both parameters particular account role and paticular account are not specified)
//  struct LimitsCreateDetails
//  {
//      //: (optional) ID of an account role that will be imposed with limits
//      uint64*     accountRole;
//      //: (optional) ID of an account that will be imposed with limits
//      AccountID*  accountID;
//      //: Operation type to which limits will be applied. See `enum StatsOpType`
//      StatsOpType statsOpType;
//      //: `AssetCode` defines an asset to which limits will be applied
//      AssetCode   assetCode;
//      //: `isConvertNeeded` indicates whether the asset conversion is needed for the limits entry or not needed.
//      //: If this field is `true` - limits are applied to all balances of the account (to every asset account owns).
//      //: Otherwise limits from particular limits entry are applied only to the balances with `AssetCode` provided by entry.
//      bool        isConvertNeeded;
//
//      //: daily out limit
//      uint64 dailyOut;
//      //: weekly out limit
//      uint64 weeklyOut;
//      //: monthly out limit
//      uint64 monthlyOut;
//      //: annual out limit
//      uint64 annualOut;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LimitsCreateDetails extends XdrEncodable  {
  UINT64? accountRole;
  ACCOUNTID? accountID;
  StatsOpType statsOpType;
  ASSETCODE assetCode;
  bool isConvertNeeded;
  UINT64 dailyOut;
  UINT64 weeklyOut;
  UINT64 monthlyOut;
  UINT64 annualOut;
  LimitsCreateDetailsExt ext;

  LimitsCreateDetails(
      this.accountRole,
      this.accountID,
      this.statsOpType,
      this.assetCode,
      this.isConvertNeeded,
      this.dailyOut,
      this.weeklyOut,
      this.monthlyOut,
      this.annualOut,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    if (accountRole != null) {
      true.toXdr(stream);
      accountRole?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    if (accountID != null) {
      true.toXdr(stream);
      accountID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    statsOpType.toXdr(stream);
    assetCode.toXdr(stream);
    isConvertNeeded.toXdr(stream);
    dailyOut.toXdr(stream);
    weeklyOut.toXdr(stream);
    monthlyOut.toXdr(stream);
    annualOut.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LimitsCreateDetailsExt extends XdrEncodable {
  LedgerVersion discriminant;
  LimitsCreateDetailsExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LimitsCreateDetailsExtEmptyVersion extends LimitsCreateDetailsExt {
  LimitsCreateDetailsExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: `ManageLimitsOp` is used to update limits set in the system
//  struct ManageLimitsOp
//  {
//      //: `details` defines all details of an operation based on given `ManageLimitsAction`
//      union switch (ManageLimitsAction action)
//      {
//      case CREATE:
//          LimitsCreateDetails limitsCreateDetails;
//      case REMOVE:
//          uint64 id;
//      } details;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageLimitsOp extends XdrEncodable  {
  ManageLimitsOpDetails details;
  ManageLimitsOpExt ext;

  ManageLimitsOp(
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageLimitsOpDetails extends XdrEncodable {
  ManageLimitsAction discriminant;
  ManageLimitsOpDetails(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageLimitsOpDetailsCreate extends ManageLimitsOpDetails {
  ManageLimitsOpDetailsCreate(this.limitsCreateDetails) : super(ManageLimitsAction(ManageLimitsAction.CREATE));
  late LimitsCreateDetails limitsCreateDetails;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    limitsCreateDetails.toXdr(stream);
  }
}

class ManageLimitsOpDetailsRemove extends ManageLimitsOpDetails {
  ManageLimitsOpDetailsRemove(this.id) : super(ManageLimitsAction(ManageLimitsAction.REMOVE));
  late UINT64 id;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    id.toXdr(stream);
  }
}

abstract class ManageLimitsOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageLimitsOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageLimitsOpExtEmptyVersion extends ManageLimitsOpExt {
  ManageLimitsOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageLimitsResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const ACCOUNT_NOT_FOUND = -1;
  static const NOT_FOUND = -2;
  static const ROLE_NOT_FOUND = -3;
  static const CANNOT_CREATE_FOR_ACC_ID_AND_ACC_TYPE = -4;
  static const INVALID_LIMITS = -5;
  static const ASSET_NOT_FOUND = -6;
  int value;
  ManageLimitsResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class ManageLimitsResult extends XdrEncodable {
  ManageLimitsResultCode discriminant;
  ManageLimitsResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageLimitsResultSuccess extends ManageLimitsResult {
  ManageLimitsResultSuccess(this.success) : super(ManageLimitsResultCode(ManageLimitsResultCode.SUCCESS));
  late ManageLimitsResultSuccessSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          //: `details` represents an additional information of the `ManageLimitsOp` application result
//          union switch (ManageLimitsAction action)
//          {
//          case CREATE:
//              //: ID of the created limits entry
//              uint64 id;
//          case REMOVE:
//              void;
//          } details;
//
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//  }

//  ===========================================================================
class ManageLimitsResultSuccessSuccess extends XdrEncodable  {
  ManageLimitsResultSuccessDetails details;
  ManageLimitsResultSuccessExt ext;

  ManageLimitsResultSuccessSuccess(
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageLimitsResultSuccessDetails extends XdrEncodable {
  ManageLimitsAction discriminant;
  ManageLimitsResultSuccessDetails(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageLimitsResultSuccessDetailsCreate extends ManageLimitsResultSuccessDetails {
  ManageLimitsResultSuccessDetailsCreate(this.id) : super(ManageLimitsAction(ManageLimitsAction.CREATE));
  late UINT64 id;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    id.toXdr(stream);
  }
}

class ManageLimitsResultSuccessDetailsRemove extends ManageLimitsResultSuccessDetails {
  ManageLimitsResultSuccessDetailsRemove() : super(ManageLimitsAction(ManageLimitsAction.REMOVE));
}

abstract class ManageLimitsResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageLimitsResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageLimitsResultSuccessExtEmptyVersion extends ManageLimitsResultSuccessExt {
  ManageLimitsResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

// === xdr source ============================================================

//  //: ManageOfferOp is used to create or delete offer
//  struct ManageOfferOp
//  {
//      //: Balance for base asset of an offer creator
//      BalanceID baseBalance;
//
//      //: Balance for quote asset of an offer creator
//      BalanceID quoteBalance;
//
//      //: Direction of an offer (to buy or to sell)
//      bool isBuy;
//
//      //: Amount in base asset to buy or sell (to delete an offer, set 0)
//      int64 amount;
//
//      //: Price of base asset in the ratio of quote asset
//      int64 price;
//
//      //: Fee in quote asset to pay
//      int64 fee;
//
//      //: ID of an offer to be managed. 0 to create a new offer, otherwise to edit an existing offer
//      uint64 offerID;
//
//      //: ID of an orderBook to put an offer in and to find a match in
//      uint64 orderBookID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//              void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageOfferOp extends XdrEncodable  {
  BALANCEID baseBalance;
  BALANCEID quoteBalance;
  bool isBuy;
  INT64 amount;
  INT64 price;
  INT64 fee;
  UINT64 offerID;
  UINT64 orderBookID;
  ManageOfferOpExt ext;

  ManageOfferOp(
      this.baseBalance,
      this.quoteBalance,
      this.isBuy,
      this.amount,
      this.price,
      this.fee,
      this.offerID,
      this.orderBookID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    baseBalance.toXdr(stream);
    quoteBalance.toXdr(stream);
    isBuy.toXdr(stream);
    amount.toXdr(stream);
    price.toXdr(stream);
    fee.toXdr(stream);
    offerID.toXdr(stream);
    orderBookID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageOfferOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageOfferOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageOfferOpExtEmptyVersion extends ManageOfferOpExt {
  ManageOfferOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageOfferResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const PAIR_NOT_TRADED = -2;
  static const BALANCE_NOT_FOUND = -3;
  static const UNDERFUNDED = -4;
  static const CROSS_SELF = -5;
  static const OFFER_OVERFLOW = -6;
  static const ASSET_PAIR_NOT_TRADABLE = -7;
  static const PHYSICAL_PRICE_RESTRICTION = -8;
  static const CURRENT_PRICE_RESTRICTION = -9;
  static const NOT_FOUND = -10;
  static const INVALID_PERCENT_FEE = -11;
  static const INSUFFICIENT_PRICE = -12;
  static const ORDER_BOOK_DOES_NOT_EXISTS = -13;
  static const SALE_IS_NOT_STARTED_YET = -14;
  static const SALE_ALREADY_ENDED = -15;
  static const ORDER_VIOLATES_HARD_CAP = -16;
  static const CANT_PARTICIPATE_OWN_SALE = -17;
  static const ASSET_MISMATCHED = -18;
  static const PRICE_DOES_NOT_MATCH = -19;
  static const PRICE_IS_INVALID = -20;
  static const UPDATE_IS_NOT_ALLOWED = -21;
  static const INVALID_AMOUNT = -22;
  static const SALE_IS_NOT_ACTIVE = -23;
  static const REQUIRES_KYC = -24;
  static const SOURCE_UNDERFUNDED = -25;
  static const SOURCE_BALANCE_LOCK_OVERFLOW = -26;
  static const REQUIRES_VERIFICATION = -27;
  static const INCORRECT_AMOUNT_PRECISION = -28;
  static const SPECIFIC_RULE_FORBIDS = -29;
  static const PENDING_ISSUANCE_LESS_THEN_AMOUNT = -30;
  int value;
  ManageOfferResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
class ManageOfferEffect extends XdrEncodable {
  static const CREATED = 0;
  static const UPDATED = 1;
  static const DELETED = 2;
  int value;
  ManageOfferEffect(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Used when offers are taken during the operation
//  struct ClaimOfferAtom
//  {
//      // emitted to identify the offer
//      //: ID of an account that created the matched offer
//      AccountID bAccountID;
//      //: ID of the matched offer
//      uint64 offerID;
//      //: Amount in base asset taken during the match
//      int64 baseAmount;
//      //: Amount in quote asset taked during the match
//      int64 quoteAmount;
//      //: Fee paid by an offer owner
//      int64 bFeePaid;
//      //: Fee paid by the source of an operation
//      int64 aFeePaid;
//      //: Balance in base asset of an offer owner
//      BalanceID baseBalance;
//      //: Balance in quote asset of an offer owner
//      BalanceID quoteBalance;
//      //: Match price
//      int64 currentPrice;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ClaimOfferAtom extends XdrEncodable  {
  ACCOUNTID bAccountID;
  UINT64 offerID;
  INT64 baseAmount;
  INT64 quoteAmount;
  INT64 bFeePaid;
  INT64 aFeePaid;
  BALANCEID baseBalance;
  BALANCEID quoteBalance;
  INT64 currentPrice;
  ClaimOfferAtomExt ext;

  ClaimOfferAtom(
      this.bAccountID,
      this.offerID,
      this.baseAmount,
      this.quoteAmount,
      this.bFeePaid,
      this.aFeePaid,
      this.baseBalance,
      this.quoteBalance,
      this.currentPrice,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    bAccountID.toXdr(stream);
    offerID.toXdr(stream);
    baseAmount.toXdr(stream);
    quoteAmount.toXdr(stream);
    bFeePaid.toXdr(stream);
    aFeePaid.toXdr(stream);
    baseBalance.toXdr(stream);
    quoteBalance.toXdr(stream);
    currentPrice.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ClaimOfferAtomExt extends XdrEncodable {
  LedgerVersion discriminant;
  ClaimOfferAtomExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ClaimOfferAtomExtEmptyVersion extends ClaimOfferAtomExt {
  ClaimOfferAtomExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Contains details of successful operation application
//  struct ManageOfferSuccessResult
//  {
//
//      //: Offers that matched a created offer
//      ClaimOfferAtom offersClaimed<>;
//      //: Base asset of an offer
//      AssetCode baseAsset;
//      //: Quote asset of an offer
//      AssetCode quoteAsset;
//
//      //: Effect of operation
//      union switch (ManageOfferEffect effect)
//      {
//      case CREATED:
//      case UPDATED:
//          //: Updated offer entry
//          OfferEntry offer;
//      default:
//          void;
//      }
//      offer;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageOfferSuccessResult extends XdrEncodable  {
  List<ClaimOfferAtom> offersClaimed;
  ASSETCODE baseAsset;
  ASSETCODE quoteAsset;
  ManageOfferSuccessResultOffer offer;
  ManageOfferSuccessResultExt ext;

  ManageOfferSuccessResult(
      this.offersClaimed,
      this.baseAsset,
      this.quoteAsset,
      this.offer,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    offersClaimed.length.toXdr(stream);
    offersClaimed.forEach ((element) {
      element.toXdr(stream);
    });
    baseAsset.toXdr(stream);
    quoteAsset.toXdr(stream);
    offer.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageOfferSuccessResultOffer extends XdrEncodable {
  ManageOfferEffect discriminant;
  ManageOfferSuccessResultOffer(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageOfferSuccessResultOfferCreated extends ManageOfferSuccessResultOffer {
  ManageOfferSuccessResultOfferCreated(this.offer) : super(ManageOfferEffect(ManageOfferEffect.CREATED));
  late OfferEntry offer;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    offer.toXdr(stream);
  }
}

class ManageOfferSuccessResultOfferUpdated extends ManageOfferSuccessResultOffer {
  ManageOfferSuccessResultOfferUpdated(this.offer) : super(ManageOfferEffect(ManageOfferEffect.UPDATED));
  late OfferEntry offer;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    offer.toXdr(stream);
  }
}

abstract class ManageOfferSuccessResultExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageOfferSuccessResultExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageOfferSuccessResultExtEmptyVersion extends ManageOfferSuccessResultExt {
  ManageOfferSuccessResultExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class ManageOfferResult extends XdrEncodable {
  ManageOfferResultCode discriminant;
  ManageOfferResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageOfferResultSuccess extends ManageOfferResult {
  ManageOfferResultSuccess(this.success) : super(ManageOfferResultCode(ManageOfferResultCode.SUCCESS));
  late ManageOfferSuccessResult success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class ManageOfferResultPhysicalPriceRestriction extends ManageOfferResult {
  ManageOfferResultPhysicalPriceRestriction(this.physicalPriceRestriction) : super(ManageOfferResultCode(ManageOfferResultCode.PHYSICAL_PRICE_RESTRICTION));
  late ManageOfferResultPhysicalPriceRestrictionPhysicalPriceRestriction physicalPriceRestriction;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    physicalPriceRestriction.toXdr(stream);
  }
}

class ManageOfferResultCurrentPriceRestriction extends ManageOfferResult {
  ManageOfferResultCurrentPriceRestriction(this.currentPriceRestriction) : super(ManageOfferResultCode(ManageOfferResultCode.CURRENT_PRICE_RESTRICTION));
  late ManageOfferResultCurrentPriceRestrictionCurrentPriceRestriction currentPriceRestriction;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    currentPriceRestriction.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//          //: Physical price of the base asset
//          int64 physicalPrice;
//          //: Reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class ManageOfferResultPhysicalPriceRestrictionPhysicalPriceRestriction extends XdrEncodable  {
  INT64 physicalPrice;
  ManageOfferResultPhysicalPriceRestrictionExt ext;

  ManageOfferResultPhysicalPriceRestrictionPhysicalPriceRestriction(
      this.physicalPrice,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    physicalPrice.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageOfferResultPhysicalPriceRestrictionExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageOfferResultPhysicalPriceRestrictionExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageOfferResultPhysicalPriceRestrictionExtEmptyVersion extends ManageOfferResultPhysicalPriceRestrictionExt {
  ManageOfferResultPhysicalPriceRestrictionExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct {
//          //: Current price of the base asset
//          int64 currentPrice;
//          //: Reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      }

//  ===========================================================================
class ManageOfferResultCurrentPriceRestrictionCurrentPriceRestriction extends XdrEncodable  {
  INT64 currentPrice;
  ManageOfferResultCurrentPriceRestrictionExt ext;

  ManageOfferResultCurrentPriceRestrictionCurrentPriceRestriction(
      this.currentPrice,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    currentPrice.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageOfferResultCurrentPriceRestrictionExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageOfferResultCurrentPriceRestrictionExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageOfferResultCurrentPriceRestrictionExtEmptyVersion extends ManageOfferResultCurrentPriceRestrictionExt {
  ManageOfferResultCurrentPriceRestrictionExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class ManagePollAction extends XdrEncodable {
  static const CLOSE = 0;
  static const UPDATE_END_TIME = 1;
  static const CANCEL = 2;
  int value;
  ManagePollAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
class PollResult extends XdrEncodable {
  static const PASSED = 0;
  static const FAILED = 1;
  int value;
  PollResult(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: ClosePollData is used to submit poll results
//  struct ClosePollData
//  {
//      //: result of voting
//      PollResult result;
//
//      //: Arbitrary stringified json object with details about the result
//      longstring details;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ClosePollData extends XdrEncodable  {
  PollResult result;
  LONGSTRING details;
  ClosePollDataExt ext;

  ClosePollData(
      this.result,
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    result.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ClosePollDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  ClosePollDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ClosePollDataExtEmptyVersion extends ClosePollDataExt {
  ClosePollDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct UpdatePollEndTimeData
//  {
//      uint64 newEndTime;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class UpdatePollEndTimeData extends XdrEncodable  {
  UINT64 newEndTime;
  UpdatePollEndTimeDataExt ext;

  UpdatePollEndTimeData(
      this.newEndTime,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    newEndTime.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class UpdatePollEndTimeDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  UpdatePollEndTimeDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class UpdatePollEndTimeDataExtEmptyVersion extends UpdatePollEndTimeDataExt {
  UpdatePollEndTimeDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: ManagePollOp is used to close,  update end time or cancel the poll
//  struct ManagePollOp
//  {
//      //: ID of poll to manage
//      uint64 pollID;
//
//      //: data is used to pass one of `ManagePollAction` with required params
//      union switch (ManagePollAction action)
//      {
//      case CLOSE:
//          ClosePollData closePollData;
//      case UPDATE_END_TIME:
//          UpdatePollEndTimeData updateTimeData;
//      case CANCEL:
//          EmptyExt ext;
//      }
//      data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManagePollOp extends XdrEncodable  {
  UINT64 pollID;
  ManagePollOpData data;
  ManagePollOpExt ext;

  ManagePollOp(
      this.pollID,
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManagePollOpData extends XdrEncodable {
  ManagePollAction discriminant;
  ManagePollOpData(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManagePollOpDataClose extends ManagePollOpData {
  ManagePollOpDataClose(this.closePollData) : super(ManagePollAction(ManagePollAction.CLOSE));
  late ClosePollData closePollData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    closePollData.toXdr(stream);
  }
}

class ManagePollOpDataUpdateEndTime extends ManagePollOpData {
  ManagePollOpDataUpdateEndTime(this.updateTimeData) : super(ManagePollAction(ManagePollAction.UPDATE_END_TIME));
  late UpdatePollEndTimeData updateTimeData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateTimeData.toXdr(stream);
  }
}

class ManagePollOpDataCancel extends ManagePollOpData {
  ManagePollOpDataCancel(this.ext) : super(ManagePollAction(ManagePollAction.CANCEL));
  late EmptyExt ext;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ManagePollOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManagePollOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManagePollOpExtEmptyVersion extends ManagePollOpExt {
  ManagePollOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManagePollResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const POLL_NOT_READY = -2;
  static const NOT_AUTHORIZED_TO_CLOSE_POLL = -3;
  static const INVALID_END_TIME = -4;
  static const NOT_AUTHORIZED = -5;
  int value;
  ManagePollResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class ManagePollResult extends XdrEncodable {
  ManagePollResultCode discriminant;
  ManagePollResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManagePollResultSuccess extends ManagePollResult {
  ManagePollResultSuccess(this.ext) : super(ManagePollResultCode(ManagePollResultCode.SUCCESS));
  late EmptyExt ext;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ext.toXdr(stream);
  }
}

class ManageSaleAction extends XdrEncodable {
  static const CREATE_UPDATE_DETAILS_REQUEST = 1;
  static const CANCEL = 2;
  int value;
  ManageSaleAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Details regarding the `Update Sale Details` request
//  struct UpdateSaleDetailsData {
//      //: ID of a reviewable request. If set 0, request is created, else - request is updated
//      uint64 requestID; // if requestID is 0 - create request, else - update
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails;
//      //: (optional) Bit mask whose flags must be cleared in order for UpdateSaleDetailsRequest to be approved,
//      //: which will be used instead of key-value by key sale_update_tasks:<asset_code>
//      uint32* allTasks;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class UpdateSaleDetailsData extends XdrEncodable  {
  UINT64 requestID;
  LONGSTRING creatorDetails;
  UINT32? allTasks;
  UpdateSaleDetailsDataExt ext;

  UpdateSaleDetailsData(
      this.requestID,
      this.creatorDetails,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    creatorDetails.toXdr(stream);
    if (allTasks != null) {
      true.toXdr(stream);
      allTasks?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    ext.toXdr(stream);
  }
}
abstract class UpdateSaleDetailsDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  UpdateSaleDetailsDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class UpdateSaleDetailsDataExtEmptyVersion extends UpdateSaleDetailsDataExt {
  UpdateSaleDetailsDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: ManageSaleOp is used to cancel a sale, or create a reviewable request which, after approval, will update sale details.
//  struct ManageSaleOp
//  {
//      //: ID of the sale to manage
//      uint64 saleID;
//      //: data is used to pass ManageSaleAction along with required parameters
//      union switch (ManageSaleAction action) {
//      case CREATE_UPDATE_DETAILS_REQUEST:
//          UpdateSaleDetailsData updateSaleDetailsData;
//      case CANCEL:
//          void;
//      } data;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class ManageSaleOp extends XdrEncodable  {
  UINT64 saleID;
  ManageSaleOpData data;
  ManageSaleOpExt ext;

  ManageSaleOp(
      this.saleID,
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageSaleOpData extends XdrEncodable {
  ManageSaleAction discriminant;
  ManageSaleOpData(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageSaleOpDataCreateUpdateDetailsRequest extends ManageSaleOpData {
  ManageSaleOpDataCreateUpdateDetailsRequest(this.updateSaleDetailsData) : super(ManageSaleAction(ManageSaleAction.CREATE_UPDATE_DETAILS_REQUEST));
  late UpdateSaleDetailsData updateSaleDetailsData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateSaleDetailsData.toXdr(stream);
  }
}

class ManageSaleOpDataCancel extends ManageSaleOpData {
  ManageSaleOpDataCancel() : super(ManageSaleAction(ManageSaleAction.CANCEL));
}

abstract class ManageSaleOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageSaleOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageSaleOpExtEmptyVersion extends ManageSaleOpExt {
  ManageSaleOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageSaleResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const SALE_NOT_FOUND = -1;
  static const INVALID_CREATOR_DETAILS = -2;
  static const UPDATE_DETAILS_REQUEST_ALREADY_EXISTS = -3;
  static const UPDATE_DETAILS_REQUEST_NOT_FOUND = -4;
  static const NOT_ALLOWED_TO_SET_TASKS_ON_UPDATE = -5;
  static const SALE_UPDATE_DETAILS_TASKS_NOT_FOUND = -6;
  int value;
  ManageSaleResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //:Result of ManageSale operation successful application
//  struct ManageSaleResultSuccess
//  {
//      //: Indicates  whether or not the ManageSale request was auto approved and fulfilled
//      bool fulfilled; // can be used for any reviewable request type created with manage sale operation
//
//      //: response is used for additional information regarding the action performed on sale during operation application
//      union switch (ManageSaleAction action) {
//      case CREATE_UPDATE_DETAILS_REQUEST:
//          uint64 requestID;
//      case CANCEL:
//          void;
//      } response;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageSaleResultSuccess extends XdrEncodable  {
  bool fulfilled;
  ManageSaleResultSuccessResponse response;
  ManageSaleResultSuccessExt ext;

  ManageSaleResultSuccess(
      this.fulfilled,
      this.response,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    fulfilled.toXdr(stream);
    response.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageSaleResultSuccessResponse extends XdrEncodable {
  ManageSaleAction discriminant;
  ManageSaleResultSuccessResponse(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageSaleResultSuccessResponseCreateUpdateDetailsRequest extends ManageSaleResultSuccessResponse {
  ManageSaleResultSuccessResponseCreateUpdateDetailsRequest(this.requestID) : super(ManageSaleAction(ManageSaleAction.CREATE_UPDATE_DETAILS_REQUEST));
  late UINT64 requestID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    requestID.toXdr(stream);
  }
}

class ManageSaleResultSuccessResponseCancel extends ManageSaleResultSuccessResponse {
  ManageSaleResultSuccessResponseCancel() : super(ManageSaleAction(ManageSaleAction.CANCEL));
}

abstract class ManageSaleResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageSaleResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageSaleResultSuccessExtEmptyVersion extends ManageSaleResultSuccessExt {
  ManageSaleResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class ManageSaleResult extends XdrEncodable {
  ManageSaleResultCode discriminant;
  ManageSaleResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageSaleResultSuccessSuccess extends ManageSaleResult {
  ManageSaleResultSuccessSuccess(this.success) : super(ManageSaleResultCode(ManageSaleResultCode.SUCCESS));
  late ManageSaleResultSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class ManageSignerRoleAction extends XdrEncodable {
  static const CREATE = 0;
  static const UPDATE = 1;
  static const REMOVE = 2;
  int value;
  ManageSignerRoleAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: CreateSignerRoleData is used to pass necessary params to create a new signer role
//  struct CreateSignerRoleData
//  {
//      //: Array of ids of existing, unique and not default rules
//      uint64 ruleIDs<>;
//      //: Indicates whether or not a rule can be modified in the future
//      bool isReadOnly;
//      //: Arbitrary stringified json object with details to attach to the role
//      longstring details;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateSignerRoleData extends XdrEncodable  {
  List<UINT64> ruleIDs;
  bool isReadOnly;
  LONGSTRING details;
  CreateSignerRoleDataExt ext;

  CreateSignerRoleData(
      this.ruleIDs,
      this.isReadOnly,
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ruleIDs.length.toXdr(stream);
    ruleIDs.forEach ((element) {
      element.toXdr(stream);
    });
    isReadOnly.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateSignerRoleDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateSignerRoleDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateSignerRoleDataExtEmptyVersion extends CreateSignerRoleDataExt {
  CreateSignerRoleDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: UpdateSignerRoleData is used to pass necessary params to update an existing signer role
//  struct UpdateSignerRoleData
//  {
//      //: ID of an existing signer role
//      uint64 roleID;
//      //: Array of ids of existing, unique and not default rules
//      uint64 ruleIDs<>;
//
//      //: Arbitrary stringified json object with details to attach to the role
//      longstring details;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class UpdateSignerRoleData extends XdrEncodable  {
  UINT64 roleID;
  List<UINT64> ruleIDs;
  LONGSTRING details;
  UpdateSignerRoleDataExt ext;

  UpdateSignerRoleData(
      this.roleID,
      this.ruleIDs,
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ruleIDs.length.toXdr(stream);
    ruleIDs.forEach ((element) {
      element.toXdr(stream);
    });
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class UpdateSignerRoleDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  UpdateSignerRoleDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class UpdateSignerRoleDataExtEmptyVersion extends UpdateSignerRoleDataExt {
  UpdateSignerRoleDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: RemoveSignerRoleData is used to pass necessary params to remove existing signer role
//  struct RemoveSignerRoleData
//  {
//      //: Identifier of an existing signer role
//      uint64 roleID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class RemoveSignerRoleData extends XdrEncodable  {
  UINT64 roleID;
  RemoveSignerRoleDataExt ext;

  RemoveSignerRoleData(
      this.roleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class RemoveSignerRoleDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  RemoveSignerRoleDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class RemoveSignerRoleDataExtEmptyVersion extends RemoveSignerRoleDataExt {
  RemoveSignerRoleDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: ManageSignerRoleOp is used to create, update or remove a signer role
//  struct ManageSignerRoleOp
//  {
//      //: data is used to pass one of `ManageSignerRoleAction` with required params
//      union switch (ManageSignerRoleAction action)
//      {
//      case CREATE:
//          CreateSignerRoleData createData;
//      case UPDATE:
//          UpdateSignerRoleData updateData;
//      case REMOVE:
//          RemoveSignerRoleData removeData;
//      } data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageSignerRoleOp extends XdrEncodable  {
  ManageSignerRoleOpData data;
  ManageSignerRoleOpExt ext;

  ManageSignerRoleOp(
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageSignerRoleOpData extends XdrEncodable {
  ManageSignerRoleAction discriminant;
  ManageSignerRoleOpData(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageSignerRoleOpDataCreate extends ManageSignerRoleOpData {
  ManageSignerRoleOpDataCreate(this.createData) : super(ManageSignerRoleAction(ManageSignerRoleAction.CREATE));
  late CreateSignerRoleData createData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }
}

class ManageSignerRoleOpDataUpdate extends ManageSignerRoleOpData {
  ManageSignerRoleOpDataUpdate(this.updateData) : super(ManageSignerRoleAction(ManageSignerRoleAction.UPDATE));
  late UpdateSignerRoleData updateData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateData.toXdr(stream);
  }
}

class ManageSignerRoleOpDataRemove extends ManageSignerRoleOpData {
  ManageSignerRoleOpDataRemove(this.removeData) : super(ManageSignerRoleAction(ManageSignerRoleAction.REMOVE));
  late RemoveSignerRoleData removeData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeData.toXdr(stream);
  }
}

abstract class ManageSignerRoleOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageSignerRoleOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageSignerRoleOpExtEmptyVersion extends ManageSignerRoleOpExt {
  ManageSignerRoleOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageSignerRoleResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const ROLE_IS_USED = -2;
  static const INVALID_DETAILS = -3;
  static const NO_SUCH_RULE = -4;
  static const RULE_ID_DUPLICATION = -5;
  static const DEFAULT_RULE_ID_DUPLICATION = -6;
  static const TOO_MANY_RULE_IDS = -7;
  int value;
  ManageSignerRoleResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class ManageSignerRoleResult extends XdrEncodable {
  ManageSignerRoleResultCode discriminant;
  ManageSignerRoleResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageSignerRoleResultSuccess extends ManageSignerRoleResult {
  ManageSignerRoleResultSuccess(this.success) : super(ManageSignerRoleResultCode(ManageSignerRoleResultCode.SUCCESS));
  late ManageSignerRoleResultSuccessSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class ManageSignerRoleResultRuleIdDuplication extends ManageSignerRoleResult {
  ManageSignerRoleResultRuleIdDuplication(this.ruleID) : super(ManageSignerRoleResultCode(ManageSignerRoleResultCode.RULE_ID_DUPLICATION));
  late UINT64 ruleID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ruleID.toXdr(stream);
  }
}

class ManageSignerRoleResultDefaultRuleIdDuplication extends ManageSignerRoleResult {
  ManageSignerRoleResultDefaultRuleIdDuplication(this.ruleID) : super(ManageSignerRoleResultCode(ManageSignerRoleResultCode.DEFAULT_RULE_ID_DUPLICATION));
  late UINT64 ruleID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ruleID.toXdr(stream);
  }
}

class ManageSignerRoleResultNoSuchRule extends ManageSignerRoleResult {
  ManageSignerRoleResultNoSuchRule(this.ruleID) : super(ManageSignerRoleResultCode(ManageSignerRoleResultCode.NO_SUCH_RULE));
  late UINT64 ruleID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ruleID.toXdr(stream);
  }
}

class ManageSignerRoleResultTooManyRuleIds extends ManageSignerRoleResult {
  ManageSignerRoleResultTooManyRuleIds(this.maxRuleIDsCount) : super(ManageSignerRoleResultCode(ManageSignerRoleResultCode.TOO_MANY_RULE_IDS));
  late UINT64 maxRuleIDsCount;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    maxRuleIDsCount.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              //: id of a role that was managed
//              uint64 roleID;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          }

//  ===========================================================================
class ManageSignerRoleResultSuccessSuccess extends XdrEncodable  {
  UINT64 roleID;
  ManageSignerRoleResultSuccessExt ext;

  ManageSignerRoleResultSuccessSuccess(
      this.roleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageSignerRoleResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageSignerRoleResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageSignerRoleResultSuccessExtEmptyVersion extends ManageSignerRoleResultSuccessExt {
  ManageSignerRoleResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class ManageSignerRuleAction extends XdrEncodable {
  static const CREATE = 0;
  static const UPDATE = 1;
  static const REMOVE = 2;
  int value;
  ManageSignerRuleAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: CreateSignerRuleData is used to pass necessary params to create a new signer rule
//  struct CreateSignerRuleData
//  {
//      //: Resource is used to specify an entity (for some, with properties) that can be managed through operations
//      SignerRuleResource resource;
//      //: Value from enum that can be applied to `resource`
//      SignerRuleAction action;
//      //: Indicate whether or not an `action` on the provided `resource` is prohibited
//      bool forbids;
//      //: True means that such rule will be automatically added to each new or updated signer role
//      bool isDefault;
//      //: Indicates whether or not a rule can be modified in the future
//      bool isReadOnly;
//      //: Arbitrary stringified json object with details that will be attached to a rule
//      longstring details;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateSignerRuleData extends XdrEncodable  {
  SignerRuleResource resource;
  SignerRuleAction action;
  bool forbids;
  bool isDefault;
  bool isReadOnly;
  LONGSTRING details;
  CreateSignerRuleDataExt ext;

  CreateSignerRuleData(
      this.resource,
      this.action,
      this.forbids,
      this.isDefault,
      this.isReadOnly,
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    resource.toXdr(stream);
    action.toXdr(stream);
    forbids.toXdr(stream);
    isDefault.toXdr(stream);
    isReadOnly.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateSignerRuleDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateSignerRuleDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateSignerRuleDataExtEmptyVersion extends CreateSignerRuleDataExt {
  CreateSignerRuleDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: UpdateSignerRuleData is used to pass necessary params to update an existing signer rule
//  struct UpdateSignerRuleData
//  {
//      //: Identifier of an existing signer rule
//      uint64 ruleID;
//      //: Resource is used to specify entity (for some, with properties) that can be managed through operations
//      SignerRuleResource resource;
//      //: Value from enum that can be applied to `resource`
//      SignerRuleAction action;
//      //: True means that such rule will be automatically added to each new or updated signer role
//      bool forbids;
//      //: True means that no one can manage such rule after creating
//      bool isDefault;
//      //: Arbitrary stringified json object with details that will be attached to a rule
//      longstring details;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class UpdateSignerRuleData extends XdrEncodable  {
  UINT64 ruleID;
  SignerRuleResource resource;
  SignerRuleAction action;
  bool forbids;
  bool isDefault;
  LONGSTRING details;
  UpdateSignerRuleDataExt ext;

  UpdateSignerRuleData(
      this.ruleID,
      this.resource,
      this.action,
      this.forbids,
      this.isDefault,
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    resource.toXdr(stream);
    action.toXdr(stream);
    forbids.toXdr(stream);
    isDefault.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class UpdateSignerRuleDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  UpdateSignerRuleDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class UpdateSignerRuleDataExtEmptyVersion extends UpdateSignerRuleDataExt {
  UpdateSignerRuleDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: RemoveSignerRuleData is used to pass necessary params to remove existing signer rule
//  struct RemoveSignerRuleData
//  {
//      //: Identifier of an existing signer rule
//      uint64 ruleID;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class RemoveSignerRuleData extends XdrEncodable  {
  UINT64 ruleID;
  RemoveSignerRuleDataExt ext;

  RemoveSignerRuleData(
      this.ruleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class RemoveSignerRuleDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  RemoveSignerRuleDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class RemoveSignerRuleDataExtEmptyVersion extends RemoveSignerRuleDataExt {
  RemoveSignerRuleDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: ManageSignerRuleOp is used to create, update or remove signer rule
//  struct ManageSignerRuleOp
//  {
//      //: data is used to pass one of `ManageSignerRuleAction` with required params
//      union switch (ManageSignerRuleAction action)
//      {
//      case CREATE:
//          CreateSignerRuleData createData;
//      case UPDATE:
//          UpdateSignerRuleData updateData;
//      case REMOVE:
//          RemoveSignerRuleData removeData;
//      } data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ManageSignerRuleOp extends XdrEncodable  {
  ManageSignerRuleOpData data;
  ManageSignerRuleOpExt ext;

  ManageSignerRuleOp(
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageSignerRuleOpData extends XdrEncodable {
  ManageSignerRuleAction discriminant;
  ManageSignerRuleOpData(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageSignerRuleOpDataCreate extends ManageSignerRuleOpData {
  ManageSignerRuleOpDataCreate(this.createData) : super(ManageSignerRuleAction(ManageSignerRuleAction.CREATE));
  late CreateSignerRuleData createData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }
}

class ManageSignerRuleOpDataUpdate extends ManageSignerRuleOpData {
  ManageSignerRuleOpDataUpdate(this.updateData) : super(ManageSignerRuleAction(ManageSignerRuleAction.UPDATE));
  late UpdateSignerRuleData updateData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateData.toXdr(stream);
  }
}

class ManageSignerRuleOpDataRemove extends ManageSignerRuleOpData {
  ManageSignerRuleOpDataRemove(this.removeData) : super(ManageSignerRuleAction(ManageSignerRuleAction.REMOVE));
  late RemoveSignerRuleData removeData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeData.toXdr(stream);
  }
}

abstract class ManageSignerRuleOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageSignerRuleOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageSignerRuleOpExtEmptyVersion extends ManageSignerRuleOpExt {
  ManageSignerRuleOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageSignerRuleResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const RULE_IS_USED = -2;
  static const INVALID_DETAILS = -3;
  static const INVALID_ACTION = -4;
  int value;
  ManageSignerRuleResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class ManageSignerRuleResult extends XdrEncodable {
  ManageSignerRuleResultCode discriminant;
  ManageSignerRuleResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageSignerRuleResultSuccess extends ManageSignerRuleResult {
  ManageSignerRuleResultSuccess(this.success) : super(ManageSignerRuleResultCode(ManageSignerRuleResultCode.SUCCESS));
  late ManageSignerRuleResultSuccessSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class ManageSignerRuleResultRuleIsUsed extends ManageSignerRuleResult {
  ManageSignerRuleResultRuleIsUsed(this.roleIDs) : super(ManageSignerRuleResultCode(ManageSignerRuleResultCode.RULE_IS_USED));
  late List<UINT64> roleIDs;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    roleIDs.length.toXdr(stream);
    roleIDs.forEach ((element) {
      element.toXdr(stream);
    });
  }
}
// === xdr source ============================================================

//  struct {
//              //: id of the rule that was managed
//              uint64 ruleID;
//
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          }

//  ===========================================================================
class ManageSignerRuleResultSuccessSuccess extends XdrEncodable  {
  UINT64 ruleID;
  ManageSignerRuleResultSuccessExt ext;

  ManageSignerRuleResultSuccessSuccess(
      this.ruleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ruleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageSignerRuleResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageSignerRuleResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageSignerRuleResultSuccessExtEmptyVersion extends ManageSignerRuleResultSuccessExt {
  ManageSignerRuleResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class ManageSignerAction extends XdrEncodable {
  static const CREATE = 0;
  static const UPDATE = 1;
  static const REMOVE = 2;
  int value;
  ManageSignerAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: UpdateSignerData is used to pass necessary data to create or update the signer
//  struct UpdateSignerData
//  {
//      //: Public key of a signer
//      PublicKey publicKey;
//      //: id of the role that will be attached to a signer
//      uint64 roleID;
//
//      //: weight that signer will have, threshold for all SignerRequirements equals 1000
//      uint32 weight;
//      //: If there are some signers with equal identity, only one signer will be chosen
//      //: (either the one with the biggest weight or the one who was the first to satisfy a threshold)
//      uint32 identity;
//
//      //: Arbitrary stringified json object with details that will be attached to signer
//      longstring details;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class UpdateSignerData extends XdrEncodable  {
  PublicKey publicKey;
  UINT64 roleID;
  UINT32 weight;
  UINT32 identity;
  LONGSTRING details;
  EmptyExt ext;

  UpdateSignerData(
      this.publicKey,
      this.roleID,
      this.weight,
      this.identity,
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    publicKey.toXdr(stream);
    roleID.toXdr(stream);
    weight.toXdr(stream);
    identity.toXdr(stream);
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  //: RemoveSignerData is used to pass necessary data to remove a signer
//  struct RemoveSignerData
//  {
//      //: Public key of an existing signer
//      PublicKey publicKey;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class RemoveSignerData extends XdrEncodable  {
  PublicKey publicKey;
  EmptyExt ext;

  RemoveSignerData(
      this.publicKey,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    publicKey.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  //: ManageSignerOp is used to create, update or remove a signer
//  struct ManageSignerOp
//  {
//      //: data is used to pass one of `ManageSignerAction` with required params
//      union switch (ManageSignerAction action)
//      {
//      case CREATE:
//          UpdateSignerData createData;
//      case UPDATE:
//          UpdateSignerData updateData;
//      case REMOVE:
//          RemoveSignerData removeData;
//      }
//      data;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class ManageSignerOp extends XdrEncodable  {
  ManageSignerOpData data;
  EmptyExt ext;

  ManageSignerOp(
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageSignerOpData extends XdrEncodable {
  ManageSignerAction discriminant;
  ManageSignerOpData(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageSignerOpDataCreate extends ManageSignerOpData {
  ManageSignerOpDataCreate(this.createData) : super(ManageSignerAction(ManageSignerAction.CREATE));
  late UpdateSignerData createData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }
}

class ManageSignerOpDataUpdate extends ManageSignerOpData {
  ManageSignerOpDataUpdate(this.updateData) : super(ManageSignerAction(ManageSignerAction.UPDATE));
  late UpdateSignerData updateData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateData.toXdr(stream);
  }
}

class ManageSignerOpDataRemove extends ManageSignerOpData {
  ManageSignerOpDataRemove(this.removeData) : super(ManageSignerAction(ManageSignerAction.REMOVE));
  late RemoveSignerData removeData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeData.toXdr(stream);
  }
}
class ManageSignerResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_DETAILS = -1;
  static const ALREADY_EXISTS = -2;
  static const NO_SUCH_ROLE = -3;
  static const INVALID_WEIGHT = -4;
  static const NOT_FOUND = -5;
  static const NUMBER_OF_ADMINS_EXCEEDS_LICENSE = -6;
  int value;
  ManageSignerResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class ManageSignerResult extends XdrEncodable {
  ManageSignerResultCode discriminant;
  ManageSignerResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageSignerResultSuccess extends ManageSignerResult {
  ManageSignerResultSuccess(this.ext) : super(ManageSignerResultCode(ManageSignerResultCode.SUCCESS));
  late EmptyExt ext;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ext.toXdr(stream);
  }
}

class ManageVoteAction extends XdrEncodable {
  static const CREATE = 0;
  static const REMOVE = 1;
  int value;
  ManageVoteAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: CreateVoteData is used to pass needed params to create (send) vote
//  struct CreateVoteData
//  {
//      //: ID of poll to vote in
//      uint64 pollID;
//
//      //: `data` is used to pass choice with functional type of poll
//      VoteData data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateVoteData extends XdrEncodable  {
  UINT64 pollID;
  VoteData data;
  CreateVoteDataExt ext;

  CreateVoteData(
      this.pollID,
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateVoteDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateVoteDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateVoteDataExtEmptyVersion extends CreateVoteDataExt {
  CreateVoteDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: RemoveVoteData is used to pass needed params to remove (cancel) own vote
//  struct RemoveVoteData
//  {
//      //: ID of poll
//      uint64 pollID;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class RemoveVoteData extends XdrEncodable  {
  UINT64 pollID;
  RemoveVoteDataExt ext;

  RemoveVoteData(
      this.pollID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class RemoveVoteDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  RemoveVoteDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class RemoveVoteDataExtEmptyVersion extends RemoveVoteDataExt {
  RemoveVoteDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: ManageVoteOp is used to create (send) or remove (cancel) vote
//  struct ManageVoteOp
//  {
//      //: `data` is used to pass `ManageVoteAction` with needed params
//      union switch (ManageVoteAction action)
//      {
//      case CREATE:
//          CreateVoteData createData;
//      case REMOVE:
//          RemoveVoteData removeData;
//      }
//      data;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class ManageVoteOp extends XdrEncodable  {
  ManageVoteOpData data;
  ManageVoteOpExt ext;

  ManageVoteOp(
      this.data,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    data.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageVoteOpData extends XdrEncodable {
  ManageVoteAction discriminant;
  ManageVoteOpData(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageVoteOpDataCreate extends ManageVoteOpData {
  ManageVoteOpDataCreate(this.createData) : super(ManageVoteAction(ManageVoteAction.CREATE));
  late CreateVoteData createData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createData.toXdr(stream);
  }
}

class ManageVoteOpDataRemove extends ManageVoteOpData {
  ManageVoteOpDataRemove(this.removeData) : super(ManageVoteAction(ManageVoteAction.REMOVE));
  late RemoveVoteData removeData;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeData.toXdr(stream);
  }
}

abstract class ManageVoteOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageVoteOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageVoteOpExtEmptyVersion extends ManageVoteOpExt {
  ManageVoteOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ManageVoteResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const VOTE_NOT_FOUND = -1;
  static const POLL_NOT_FOUND = -2;
  static const VOTE_EXISTS = -3;
  static const POLL_TYPE_MISMATCHED = -4;
  static const POLL_NOT_STARTED = -5;
  static const POLL_ENDED = -6;
  int value;
  ManageVoteResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class ManageVoteResult extends XdrEncodable {
  ManageVoteResultCode discriminant;
  ManageVoteResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageVoteResultSuccess extends ManageVoteResult {
  ManageVoteResultSuccess(this.ext) : super(ManageVoteResultCode(ManageVoteResultCode.SUCCESS));
  late EmptyExt ext;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ext.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct OpenSwapOp
//  {
//      //: Source balance of the swap
//      BalanceID sourceBalance;
//      //: Amount to send in swap
//      uint64 amount;
//
//     //: `destination` defines the type of instance that receives amount based on given PaymentDestinationType
//     union switch (PaymentDestinationType type) {
//         case ACCOUNT:
//             AccountID accountID;
//         case BALANCE:
//             BalanceID balanceID;
//     } destination;
//
//      //: Fee data for the swap
//      PaymentFeeData feeData;
//      //: Arbitrary stringified json object provided by swap source
//      longstring details;
//
//      //: Hash of the secret
//      Hash secretHash;
//      //: Time till which swapped funds can be received by destination if valid secret is provided
//      int64 lockTime;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class OpenSwapOp extends XdrEncodable  {
  BALANCEID sourceBalance;
  UINT64 amount;
  OpenSwapOpDestination destination;
  PaymentFeeData feeData;
  LONGSTRING details;
  HASH secretHash;
  INT64 lockTime;
  EmptyExt ext;

  OpenSwapOp(
      this.sourceBalance,
      this.amount,
      this.destination,
      this.feeData,
      this.details,
      this.secretHash,
      this.lockTime,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    sourceBalance.toXdr(stream);
    amount.toXdr(stream);
    destination.toXdr(stream);
    feeData.toXdr(stream);
    details.toXdr(stream);
    secretHash.toXdr(stream);
    lockTime.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class OpenSwapOpDestination extends XdrEncodable {
  PaymentDestinationType discriminant;
  OpenSwapOpDestination(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class OpenSwapOpDestinationAccount extends OpenSwapOpDestination {
  OpenSwapOpDestinationAccount(this.accountID) : super(PaymentDestinationType(PaymentDestinationType.ACCOUNT));
  late ACCOUNTID accountID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountID.toXdr(stream);
  }
}

class OpenSwapOpDestinationBalance extends OpenSwapOpDestination {
  OpenSwapOpDestinationBalance(this.balanceID) : super(PaymentDestinationType(PaymentDestinationType.BALANCE));
  late BALANCEID balanceID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    balanceID.toXdr(stream);
  }
}
class OpenSwapResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const UNDERFUNDED = -2;
  static const BALANCE_ASSETS_MISMATCHED = -3;
  static const SRC_BALANCE_NOT_FOUND = -4;
  static const NOT_ALLOWED_BY_ASSET_POLICY = -5;
  static const INVALID_DESTINATION_FEE = -6;
  static const INSUFFICIENT_FEE_AMOUNT = -7;
  static const AMOUNT_IS_LESS_THAN_DEST_FEE = -8;
  static const INCORRECT_AMOUNT_PRECISION = -9;
  static const INVALID_DETAILS = -10;
  static const INVALID_LOCK_TIME = -11;
  static const INVALID_AMOUNT = -12;
  int value;
  OpenSwapResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: OpenSwapSuccess is used to pass saved ledger hash and license hash
//  struct OpenSwapSuccess {
//      uint64 swapID;
//
//      //: ID of the destination account
//      AccountID destination;
//      //: ID of the destination balance
//      BalanceID destinationBalance;
//
//      //: Code of an asset used in swap
//      AssetCode asset;
//
//      //: Fee to be charged from the source balance
//      Fee actualSourceFee;
//      //: Fee to be charged from the destination balance
//      Fee actualDestinationFee;
//
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class OpenSwapSuccess extends XdrEncodable  {
  UINT64 swapID;
  ACCOUNTID destination;
  BALANCEID destinationBalance;
  ASSETCODE asset;
  Fee actualSourceFee;
  Fee actualDestinationFee;
  EmptyExt ext;

  OpenSwapSuccess(
      this.swapID,
      this.destination,
      this.destinationBalance,
      this.asset,
      this.actualSourceFee,
      this.actualDestinationFee,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    swapID.toXdr(stream);
    destination.toXdr(stream);
    destinationBalance.toXdr(stream);
    asset.toXdr(stream);
    actualSourceFee.toXdr(stream);
    actualDestinationFee.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class OpenSwapResult extends XdrEncodable {
  OpenSwapResultCode discriminant;
  OpenSwapResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class OpenSwapResultSuccess extends OpenSwapResult {
  OpenSwapResultSuccess(this.success) : super(OpenSwapResultCode(OpenSwapResultCode.SUCCESS));
  late OpenSwapSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct PaymentFeeData {
//      //: Fee to pay by source balance
//      Fee sourceFee;
//      //: Fee kept from destination account/balance
//      Fee destinationFee;
//      //: Indicates whether or not the source of payment pays the destination fee
//      bool sourcePaysForDest;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PaymentFeeData extends XdrEncodable  {
  Fee sourceFee;
  Fee destinationFee;
  bool sourcePaysForDest;
  PaymentFeeDataExt ext;

  PaymentFeeData(
      this.sourceFee,
      this.destinationFee,
      this.sourcePaysForDest,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    sourceFee.toXdr(stream);
    destinationFee.toXdr(stream);
    sourcePaysForDest.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class PaymentFeeDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  PaymentFeeDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class PaymentFeeDataExtEmptyVersion extends PaymentFeeDataExt {
  PaymentFeeDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class PaymentDestinationType extends XdrEncodable {
  static const ACCOUNT = 0;
  static const BALANCE = 1;
  int value;
  PaymentDestinationType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: PaymentOp is used to transfer some amount of asset from the source balance to destination account/balance
//  struct PaymentOp
//  {
//      //: ID of the source balance of payment
//      BalanceID sourceBalanceID;
//
//      //: `destination` defines the type of instance that receives the payment based on given PaymentDestinationType
//      union switch (PaymentDestinationType type) {
//          case ACCOUNT:
//              AccountID accountID;
//          case BALANCE:
//              BalanceID balanceID;
//      } destination;
//
//      //: Amount of payment
//      uint64 amount;
//
//      //: `feeData` defines all data about the payment fee
//      PaymentFeeData feeData;
//
//      //: `subject` is a user-provided info about the real-life purpose of payment
//      longstring subject;
//      //: `reference` is a string formed by a payment sender. `Reference-sender account` pair is unique.
//      longstring reference;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PaymentOp extends XdrEncodable  {
  BALANCEID sourceBalanceID;
  PaymentOpDestination destination;
  UINT64 amount;
  PaymentFeeData feeData;
  LONGSTRING subject;
  LONGSTRING reference;
  PaymentOpExt ext;

  PaymentOp(
      this.sourceBalanceID,
      this.destination,
      this.amount,
      this.feeData,
      this.subject,
      this.reference,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    sourceBalanceID.toXdr(stream);
    destination.toXdr(stream);
    amount.toXdr(stream);
    feeData.toXdr(stream);
    subject.toXdr(stream);
    reference.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class PaymentOpDestination extends XdrEncodable {
  PaymentDestinationType discriminant;
  PaymentOpDestination(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class PaymentOpDestinationAccount extends PaymentOpDestination {
  PaymentOpDestinationAccount(this.accountID) : super(PaymentDestinationType(PaymentDestinationType.ACCOUNT));
  late ACCOUNTID accountID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountID.toXdr(stream);
  }
}

class PaymentOpDestinationBalance extends PaymentOpDestination {
  PaymentOpDestinationBalance(this.balanceID) : super(PaymentDestinationType(PaymentDestinationType.BALANCE));
  late BALANCEID balanceID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    balanceID.toXdr(stream);
  }
}

abstract class PaymentOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  PaymentOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class PaymentOpExtEmptyVersion extends PaymentOpExt {
  PaymentOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class PaymentResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const MALFORMED = -1;
  static const UNDERFUNDED = -2;
  static const LINE_FULL = -3;
  static const DESTINATION_BALANCE_NOT_FOUND = -4;
  static const BALANCE_ASSETS_MISMATCHED = -5;
  static const SRC_BALANCE_NOT_FOUND = -6;
  static const REFERENCE_DUPLICATION = -7;
  static const STATS_OVERFLOW = -8;
  static const LIMITS_EXCEEDED = -9;
  static const NOT_ALLOWED_BY_ASSET_POLICY = -10;
  static const INVALID_DESTINATION_FEE = -11;
  static const INSUFFICIENT_FEE_AMOUNT = -12;
  static const PAYMENT_AMOUNT_IS_LESS_THAN_DEST_FEE = -13;
  static const DESTINATION_ACCOUNT_NOT_FOUND = -14;
  static const INCORRECT_AMOUNT_PRECISION = -15;
  static const INVALID_SUBJECT = -16;
  int value;
  PaymentResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: `PaymentResponse` defines the response on the corresponding PaymentOp
//  struct PaymentResponse {
//      //: ID of the destination account
//      AccountID destination;
//      //: ID of the destination balance
//      BalanceID destinationBalanceID;
//
//      //: Code of an asset used in payment
//      AssetCode asset;
//      //: Amount sent by the sender
//      uint64 sourceSentUniversal;
//      //: Unique ID of the payment
//      uint64 paymentID;
//
//      //: Fee charged from the source balance
//      Fee actualSourcePaymentFee;
//      //: Fee charged from the destination balance
//      Fee actualDestinationPaymentFee;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PaymentResponse extends XdrEncodable  {
  ACCOUNTID destination;
  BALANCEID destinationBalanceID;
  ASSETCODE asset;
  UINT64 sourceSentUniversal;
  UINT64 paymentID;
  Fee actualSourcePaymentFee;
  Fee actualDestinationPaymentFee;
  PaymentResponseExt ext;

  PaymentResponse(
      this.destination,
      this.destinationBalanceID,
      this.asset,
      this.sourceSentUniversal,
      this.paymentID,
      this.actualSourcePaymentFee,
      this.actualDestinationPaymentFee,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    destination.toXdr(stream);
    destinationBalanceID.toXdr(stream);
    asset.toXdr(stream);
    sourceSentUniversal.toXdr(stream);
    paymentID.toXdr(stream);
    actualSourcePaymentFee.toXdr(stream);
    actualDestinationPaymentFee.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class PaymentResponseExt extends XdrEncodable {
  LedgerVersion discriminant;
  PaymentResponseExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class PaymentResponseExtEmptyVersion extends PaymentResponseExt {
  PaymentResponseExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class PaymentResult extends XdrEncodable {
  PaymentResultCode discriminant;
  PaymentResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class PaymentResultSuccess extends PaymentResult {
  PaymentResultSuccess(this.paymentResponse) : super(PaymentResultCode(PaymentResultCode.SUCCESS));
  late PaymentResponse paymentResponse;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    paymentResponse.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct PayoutOp
//  {
//      AssetCode asset; // asset, which holders will receive dividends
//      BalanceID sourceBalanceID; // balance, from which payout will be performed
//
//      uint64 maxPayoutAmount; // max amount of asset, that owner wants to pay out
//      uint64 minPayoutAmount; // min tokens amount which will be payed for one balance;
//      uint64 minAssetHolderAmount; // min tokens amount for which holder will received dividends
//
//      Fee fee;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PayoutOp extends XdrEncodable  {
  ASSETCODE asset;
  BALANCEID sourceBalanceID;
  UINT64 maxPayoutAmount;
  UINT64 minPayoutAmount;
  UINT64 minAssetHolderAmount;
  Fee fee;
  PayoutOpExt ext;

  PayoutOp(
      this.asset,
      this.sourceBalanceID,
      this.maxPayoutAmount,
      this.minPayoutAmount,
      this.minAssetHolderAmount,
      this.fee,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    asset.toXdr(stream);
    sourceBalanceID.toXdr(stream);
    maxPayoutAmount.toXdr(stream);
    minPayoutAmount.toXdr(stream);
    minAssetHolderAmount.toXdr(stream);
    fee.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class PayoutOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  PayoutOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class PayoutOpExtEmptyVersion extends PayoutOpExt {
  PayoutOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class PayoutResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_AMOUNT = -1;
  static const INVALID_ASSET = -2;
  static const ASSET_NOT_FOUND = -3;
  static const ASSET_NOT_TRANSFERABLE = -4;
  static const BALANCE_NOT_FOUND = -5;
  static const INSUFFICIENT_FEE_AMOUNT = -6;
  static const FEE_EXCEEDS_ACTUAL_AMOUNT = -7;
  static const TOTAL_FEE_OVERFLOW = -8;
  static const UNDERFUNDED = -9;
  static const HOLDERS_NOT_FOUND = -10;
  static const MIN_AMOUNT_TOO_BIG = -11;
  static const LINE_FULL = -12;
  static const STATS_OVERFLOW = -13;
  static const LIMITS_EXCEEDED = -14;
  static const INCORRECT_PRECISION = -15;
  int value;
  PayoutResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct PayoutResponse
//  {
//      AccountID receiverID;
//      BalanceID receiverBalanceID;
//      uint64 receivedAmount;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PayoutResponse extends XdrEncodable  {
  ACCOUNTID receiverID;
  BALANCEID receiverBalanceID;
  UINT64 receivedAmount;
  PayoutResponseExt ext;

  PayoutResponse(
      this.receiverID,
      this.receiverBalanceID,
      this.receivedAmount,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    receiverID.toXdr(stream);
    receiverBalanceID.toXdr(stream);
    receivedAmount.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class PayoutResponseExt extends XdrEncodable {
  LedgerVersion discriminant;
  PayoutResponseExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class PayoutResponseExtEmptyVersion extends PayoutResponseExt {
  PayoutResponseExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct PayoutSuccessResult
//  {
//      PayoutResponse payoutResponses<>;
//      uint64 actualPayoutAmount;
//      Fee actualFee;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PayoutSuccessResult extends XdrEncodable  {
  List<PayoutResponse> payoutResponses;
  UINT64 actualPayoutAmount;
  Fee actualFee;
  PayoutSuccessResultExt ext;

  PayoutSuccessResult(
      this.payoutResponses,
      this.actualPayoutAmount,
      this.actualFee,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    payoutResponses.length.toXdr(stream);
    payoutResponses.forEach ((element) {
      element.toXdr(stream);
    });
    actualPayoutAmount.toXdr(stream);
    actualFee.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class PayoutSuccessResultExt extends XdrEncodable {
  LedgerVersion discriminant;
  PayoutSuccessResultExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class PayoutSuccessResultExtEmptyVersion extends PayoutSuccessResultExt {
  PayoutSuccessResultExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class PayoutResult extends XdrEncodable {
  PayoutResultCode discriminant;
  PayoutResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class PayoutResultSuccess extends PayoutResult {
  PayoutResultSuccess(this.success) : super(PayoutResultCode(PayoutResultCode.SUCCESS));
  late PayoutSuccessResult success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: `RemoveAssetPairOp` removes specified asset pair
//  struct RemoveAssetPairOp
//  {
//      //: Defines a base asset of an asset pair
//      AssetCode base;
//      //: Defines a base asset of an asset pair
//      AssetCode quote;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class RemoveAssetPairOp extends XdrEncodable  {
  ASSETCODE base;
  ASSETCODE quote;
  RemoveAssetPairOpExt ext;

  RemoveAssetPairOp(
      this.base,
      this.quote,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    base.toXdr(stream);
    quote.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class RemoveAssetPairOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  RemoveAssetPairOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class RemoveAssetPairOpExtEmptyVersion extends RemoveAssetPairOpExt {
  RemoveAssetPairOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class RemoveAssetPairResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const HAS_ACTIVE_OFFERS = -2;
  static const HAS_ACTIVE_SALES = -3;
  static const INVALID_ASSET_CODE = -4;
  int value;
  RemoveAssetPairResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Result of successful `RemoveAssetPairOp` application
//  struct RemoveAssetPairSuccess
//  {
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class RemoveAssetPairSuccess extends XdrEncodable  {
  RemoveAssetPairSuccessExt ext;

  RemoveAssetPairSuccess(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class RemoveAssetPairSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  RemoveAssetPairSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class RemoveAssetPairSuccessExtEmptyVersion extends RemoveAssetPairSuccessExt {
  RemoveAssetPairSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class RemoveAssetPairResult extends XdrEncodable {
  RemoveAssetPairResultCode discriminant;
  RemoveAssetPairResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class RemoveAssetPairResultSuccess extends RemoveAssetPairResult {
  RemoveAssetPairResultSuccess(this.success) : super(RemoveAssetPairResultCode(RemoveAssetPairResultCode.SUCCESS));
  late RemoveAssetPairSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: `RemoveAssetOp` changes the state of specified asset to removed
//  struct RemoveAssetOp
//  {
//      //: Defines an asset
//      AssetCode code;
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class RemoveAssetOp extends XdrEncodable  {
  ASSETCODE code;
  RemoveAssetOpExt ext;

  RemoveAssetOp(
      this.code,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    code.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class RemoveAssetOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  RemoveAssetOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class RemoveAssetOpExtEmptyVersion extends RemoveAssetOpExt {
  RemoveAssetOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class RemoveAssetResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_ASSET_CODE = -1;
  static const HAS_PAIR = -2;
  static const HAS_ACTIVE_OFFERS = -3;
  static const HAS_ACTIVE_SALES = -4;
  static const HAS_ACTIVE_ATOMIC_SWAPS = -5;
  static const HAS_ACTIVE_SWAPS = -6;
  static const CANNOT_REMOVE_STATS_QUOTE_ASSET = -7;
  static const HAS_PENDING_MOVEMENTS = -8;
  int value;
  RemoveAssetResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Result of successful `RemoveAssetOp` application
//  struct RemoveAssetSuccess
//  {
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class RemoveAssetSuccess extends XdrEncodable  {
  RemoveAssetSuccessExt ext;

  RemoveAssetSuccess(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class RemoveAssetSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  RemoveAssetSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class RemoveAssetSuccessExtEmptyVersion extends RemoveAssetSuccessExt {
  RemoveAssetSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class RemoveAssetResult extends XdrEncodable {
  RemoveAssetResultCode discriminant;
  RemoveAssetResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class RemoveAssetResultSuccess extends RemoveAssetResult {
  RemoveAssetResultSuccess(this.success) : super(RemoveAssetResultCode(RemoveAssetResultCode.SUCCESS));
  late RemoveAssetSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct RemoveDataOp
//  {
//      //: ID of the data to remove
//      uint64 dataID;
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class RemoveDataOp extends XdrEncodable  {
  UINT64 dataID;
  EmptyExt ext;

  RemoveDataOp(
      this.dataID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    dataID.toXdr(stream);
    ext.toXdr(stream);
  }
}
class RemoveDataResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const NOT_FOUND = -1;
  static const NOT_AUTHORIZED = -2;
  int value;
  RemoveDataResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class RemoveDataResult extends XdrEncodable {
  RemoveDataResultCode discriminant;
  RemoveDataResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class RemoveDataResultSuccess extends RemoveDataResult {
  RemoveDataResultSuccess(this.ext) : super(RemoveDataResultCode(RemoveDataResultCode.SUCCESS));
  late EmptyExt ext;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ext.toXdr(stream);
  }
}

class ReviewRequestOpAction extends XdrEncodable {
  static const APPROVE = 1;
  static const REJECT = 2;
  static const PERMANENT_REJECT = 3;
  int value;
  ReviewRequestOpAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Review details of a Limits Update request
//  struct LimitsUpdateDetails {
//      //: Limits entry containing new limits to set
//      LimitsV2Entry newLimitsV2;
//
//      //:reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LimitsUpdateDetails extends XdrEncodable  {
  LimitsV2Entry newLimitsV2;
  LimitsUpdateDetailsExt ext;

  LimitsUpdateDetails(
      this.newLimitsV2,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    newLimitsV2.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LimitsUpdateDetailsExt extends XdrEncodable {
  LedgerVersion discriminant;
  LimitsUpdateDetailsExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LimitsUpdateDetailsExtEmptyVersion extends LimitsUpdateDetailsExt {
  LimitsUpdateDetailsExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Review details of a Withdraw Request
//  struct WithdrawalDetails {
//      //: External details updated on a Withdraw review
//      string externalDetails<>;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class WithdrawalDetails extends XdrEncodable  {
  String externalDetails;
  WithdrawalDetailsExt ext;

  WithdrawalDetails(
      this.externalDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    externalDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class WithdrawalDetailsExt extends XdrEncodable {
  LedgerVersion discriminant;
  WithdrawalDetailsExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class WithdrawalDetailsExtEmptyVersion extends WithdrawalDetailsExt {
  WithdrawalDetailsExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Details of AML Alert
//  struct AMLAlertDetails {
//      //: Comment on reason of AML Alert
//      string comment<>;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AMLAlertDetails extends XdrEncodable  {
  String comment;
  AMLAlertDetailsExt ext;

  AMLAlertDetails(
      this.comment,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    comment.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AMLAlertDetailsExt extends XdrEncodable {
  LedgerVersion discriminant;
  AMLAlertDetailsExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AMLAlertDetailsExtEmptyVersion extends AMLAlertDetailsExt {
  AMLAlertDetailsExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct ContractDetails {
//      longstring details;
//
//      // Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//              void;
//      }
//      ext;
//  };

//  ===========================================================================
class ContractDetails extends XdrEncodable  {
  LONGSTRING details;
  ContractDetailsExt ext;

  ContractDetails(
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ContractDetailsExt extends XdrEncodable {
  LedgerVersion discriminant;
  ContractDetailsExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ContractDetailsExtEmptyVersion extends ContractDetailsExt {
  ContractDetailsExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Details of a payment reviewable request
//  struct BillPayDetails {
//      //: Details of payment
//      PaymentOp paymentDetails;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class BillPayDetails extends XdrEncodable  {
  PaymentOp paymentDetails;
  BillPayDetailsExt ext;

  BillPayDetails(
      this.paymentDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    paymentDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class BillPayDetailsExt extends XdrEncodable {
  LedgerVersion discriminant;
  BillPayDetailsExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class BillPayDetailsExtEmptyVersion extends BillPayDetailsExt {
  BillPayDetailsExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Details of a request review
//  struct ReviewDetails {
//      //: Tasks to add to pending
//      uint32 tasksToAdd;
//      //: Tasks to remove from pending
//      uint32 tasksToRemove;
//      //: Details of the current review
//      string externalDetails<>;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ReviewDetails extends XdrEncodable  {
  UINT32 tasksToAdd;
  UINT32 tasksToRemove;
  String externalDetails;
  ReviewDetailsExt ext;

  ReviewDetails(
      this.tasksToAdd,
      this.tasksToRemove,
      this.externalDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    tasksToAdd.toXdr(stream);
    tasksToRemove.toXdr(stream);
    externalDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ReviewDetailsExt extends XdrEncodable {
  LedgerVersion discriminant;
  ReviewDetailsExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ReviewDetailsExtEmptyVersion extends ReviewDetailsExt {
  ReviewDetailsExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Extended result of the review request operation containing details specific to a Create Sale Request
//  struct SaleExtended {
//      //: ID of the newly created sale as a result of Create Sale Request successful review
//      uint64 saleID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SaleExtended extends XdrEncodable  {
  UINT64 saleID;
  SaleExtendedExt ext;

  SaleExtended(
      this.saleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class SaleExtendedExt extends XdrEncodable {
  LedgerVersion discriminant;
  SaleExtendedExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SaleExtendedExtEmptyVersion extends SaleExtendedExt {
  SaleExtendedExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Extended result of the review request operation containing details specific to a Create Atomic Swap Bid Request
//  struct AtomicSwapAskExtended
//  {
//      //: ID of the newly created ask as a result of Create Atomic Swap Ask Request successful review
//      uint64 askID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AtomicSwapAskExtended extends XdrEncodable  {
  UINT64 askID;
  AtomicSwapAskExtendedExt ext;

  AtomicSwapAskExtended(
      this.askID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    askID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AtomicSwapAskExtendedExt extends XdrEncodable {
  LedgerVersion discriminant;
  AtomicSwapAskExtendedExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AtomicSwapAskExtendedExtEmptyVersion extends AtomicSwapAskExtendedExt {
  AtomicSwapAskExtendedExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Extended result of the review request operation containing details specific to a `CREATE_POLL` request
//  struct CreatePollExtended
//  {
//      //: ID of the newly created poll
//      uint64 pollID;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreatePollExtended extends XdrEncodable  {
  UINT64 pollID;
  CreatePollExtendedExt ext;

  CreatePollExtended(
      this.pollID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreatePollExtendedExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreatePollExtendedExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreatePollExtendedExtEmptyVersion extends CreatePollExtendedExt {
  CreatePollExtendedExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Extended result of a review request operation containing details specific to a Create Atomic Swap Request
//  struct AtomicSwapBidExtended
//  {
//      //: ID of a ask to apply atomic swap to
//      uint64 askID;
//      //: AccountID of a ask owner
//      AccountID askOwnerID;
//      //: Account id of an bid owner
//      AccountID bidOwnerID;
//      //: Base asset for the atomic swap
//      AssetCode baseAsset;
//      //: Quote asset for the atomic swap
//      AssetCode quoteAsset;
//      //: Amount in base asset to exchange
//      uint64 baseAmount;
//      //: Amount in quote asset to exchange
//      uint64 quoteAmount;
//      //: Price of base asset in terms of quote
//      uint64 price;
//      //: Balance in base asset of a ask owner
//      BalanceID askOwnerBaseBalanceID;
//      //: Balance in base asset of an bid owner
//      BalanceID bidOwnerBaseBalanceID;
//      //: Amount which was unlocked on bid owner base balance after bid removing
//      uint64 unlockedAmount;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//              void;
//      }
//      ext;
//  };

//  ===========================================================================
class AtomicSwapBidExtended extends XdrEncodable  {
  UINT64 askID;
  ACCOUNTID askOwnerID;
  ACCOUNTID bidOwnerID;
  ASSETCODE baseAsset;
  ASSETCODE quoteAsset;
  UINT64 baseAmount;
  UINT64 quoteAmount;
  UINT64 price;
  BALANCEID askOwnerBaseBalanceID;
  BALANCEID bidOwnerBaseBalanceID;
  UINT64 unlockedAmount;
  AtomicSwapBidExtendedExt ext;

  AtomicSwapBidExtended(
      this.askID,
      this.askOwnerID,
      this.bidOwnerID,
      this.baseAsset,
      this.quoteAsset,
      this.baseAmount,
      this.quoteAmount,
      this.price,
      this.askOwnerBaseBalanceID,
      this.bidOwnerBaseBalanceID,
      this.unlockedAmount,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    askID.toXdr(stream);
    askOwnerID.toXdr(stream);
    bidOwnerID.toXdr(stream);
    baseAsset.toXdr(stream);
    quoteAsset.toXdr(stream);
    baseAmount.toXdr(stream);
    quoteAmount.toXdr(stream);
    price.toXdr(stream);
    askOwnerBaseBalanceID.toXdr(stream);
    bidOwnerBaseBalanceID.toXdr(stream);
    unlockedAmount.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AtomicSwapBidExtendedExt extends XdrEncodable {
  LedgerVersion discriminant;
  AtomicSwapBidExtendedExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AtomicSwapBidExtendedExtEmptyVersion extends AtomicSwapBidExtendedExt {
  AtomicSwapBidExtendedExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct CreateDeferredPaymentResult
//  {
//      uint64 deferredPaymentID;
//      AccountID destination;
//      AccountID source;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateDeferredPaymentResult extends XdrEncodable  {
  UINT64 deferredPaymentID;
  ACCOUNTID destination;
  ACCOUNTID source;
  EmptyExt ext;

  CreateDeferredPaymentResult(
      this.deferredPaymentID,
      this.destination,
      this.source,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    deferredPaymentID.toXdr(stream);
    destination.toXdr(stream);
    source.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct DataCreationExtended {
//      //: Owner of the created data entry
//      AccountID owner;
//      //: ID of the created data entry
//      uint64 id;
//      //: Security type of the created data entry
//      uint64 type;
//  };

//  ===========================================================================
class DataCreationExtended extends XdrEncodable  {
  ACCOUNTID owner;
  UINT64 id;
  UINT64 type;

  DataCreationExtended(
      this.owner,
      this.id,
      this.type,
      );

  @override toXdr(XdrDataOutputStream stream) {
    owner.toXdr(stream);
    id.toXdr(stream);
    type.toXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Extended result of a Review Request operation containing details specific to certain request types
//  struct ExtendedResult {
//      //: Indicates whether or not the request that is being reviewed was applied
//      bool fulfilled;
//      //: typeExt is used to pass ReviewableRequestType along with details specific to a request type
//      union switch(ReviewableRequestType requestType) {
//      case CREATE_SALE:
//          SaleExtended saleExtended;
//      case NONE:
//          void;
//      case CREATE_ATOMIC_SWAP_BID:
//          AtomicSwapBidExtended atomicSwapBidExtended;
//      case CREATE_ATOMIC_SWAP_ASK:
//          AtomicSwapAskExtended atomicSwapAskExtended;
//      case CREATE_POLL:
//          CreatePollExtended createPoll;
//      case MANAGE_OFFER:
//          ManageOfferResult manageOfferResult;
//      case CREATE_PAYMENT:
//          PaymentResult paymentResult;
//      case PERFORM_REDEMPTION:
//          CreateRedemptionRequestResult createRedemptionResult;
//      case DATA_CREATION:
//          DataCreationExtended dataCreationExtended;
//      case CREATE_DEFERRED_PAYMENT:
//          CreateDeferredPaymentResult createDeferredPaymentResult;
//      case CLOSE_DEFERRED_PAYMENT:
//           CloseDeferredPaymentResult closeDeferredPaymentResult;
//
//      } typeExt;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ExtendedResult extends XdrEncodable  {
  bool fulfilled;
  ExtendedResultTypeExt typeExt;
  ExtendedResultExt ext;

  ExtendedResult(
      this.fulfilled,
      this.typeExt,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    fulfilled.toXdr(stream);
    typeExt.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ExtendedResultTypeExt extends XdrEncodable {
  ReviewableRequestType discriminant;
  ExtendedResultTypeExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ExtendedResultTypeExtCreateSale extends ExtendedResultTypeExt {
  ExtendedResultTypeExtCreateSale(this.saleExtended) : super(ReviewableRequestType(ReviewableRequestType.CREATE_SALE));
  late SaleExtended saleExtended;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    saleExtended.toXdr(stream);
  }
}

class ExtendedResultTypeExtNone extends ExtendedResultTypeExt {
  ExtendedResultTypeExtNone() : super(ReviewableRequestType(ReviewableRequestType.NONE));
}

class ExtendedResultTypeExtCreateAtomicSwapBid extends ExtendedResultTypeExt {
  ExtendedResultTypeExtCreateAtomicSwapBid(this.atomicSwapBidExtended) : super(ReviewableRequestType(ReviewableRequestType.CREATE_ATOMIC_SWAP_BID));
  late AtomicSwapBidExtended atomicSwapBidExtended;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    atomicSwapBidExtended.toXdr(stream);
  }
}

class ExtendedResultTypeExtCreateAtomicSwapAsk extends ExtendedResultTypeExt {
  ExtendedResultTypeExtCreateAtomicSwapAsk(this.atomicSwapAskExtended) : super(ReviewableRequestType(ReviewableRequestType.CREATE_ATOMIC_SWAP_ASK));
  late AtomicSwapAskExtended atomicSwapAskExtended;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    atomicSwapAskExtended.toXdr(stream);
  }
}

class ExtendedResultTypeExtCreatePoll extends ExtendedResultTypeExt {
  ExtendedResultTypeExtCreatePoll(this.createPoll) : super(ReviewableRequestType(ReviewableRequestType.CREATE_POLL));
  late CreatePollExtended createPoll;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPoll.toXdr(stream);
  }
}

class ExtendedResultTypeExtManageOffer extends ExtendedResultTypeExt {
  ExtendedResultTypeExtManageOffer(this.manageOfferResult) : super(ReviewableRequestType(ReviewableRequestType.MANAGE_OFFER));
  late ManageOfferResult manageOfferResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageOfferResult.toXdr(stream);
  }
}

class ExtendedResultTypeExtCreatePayment extends ExtendedResultTypeExt {
  ExtendedResultTypeExtCreatePayment(this.paymentResult) : super(ReviewableRequestType(ReviewableRequestType.CREATE_PAYMENT));
  late PaymentResult paymentResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    paymentResult.toXdr(stream);
  }
}

class ExtendedResultTypeExtPerformRedemption extends ExtendedResultTypeExt {
  ExtendedResultTypeExtPerformRedemption(this.createRedemptionResult) : super(ReviewableRequestType(ReviewableRequestType.PERFORM_REDEMPTION));
  late CreateRedemptionRequestResult createRedemptionResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createRedemptionResult.toXdr(stream);
  }
}

class ExtendedResultTypeExtDataCreation extends ExtendedResultTypeExt {
  ExtendedResultTypeExtDataCreation(this.dataCreationExtended) : super(ReviewableRequestType(ReviewableRequestType.DATA_CREATION));
  late DataCreationExtended dataCreationExtended;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dataCreationExtended.toXdr(stream);
  }
}

class ExtendedResultTypeExtCreateDeferredPayment extends ExtendedResultTypeExt {
  ExtendedResultTypeExtCreateDeferredPayment(this.createDeferredPaymentResult) : super(ReviewableRequestType(ReviewableRequestType.CREATE_DEFERRED_PAYMENT));
  late CreateDeferredPaymentResult createDeferredPaymentResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDeferredPaymentResult.toXdr(stream);
  }
}

class ExtendedResultTypeExtCloseDeferredPayment extends ExtendedResultTypeExt {
  ExtendedResultTypeExtCloseDeferredPayment(this.closeDeferredPaymentResult) : super(ReviewableRequestType(ReviewableRequestType.CLOSE_DEFERRED_PAYMENT));
  late CloseDeferredPaymentResult closeDeferredPaymentResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    closeDeferredPaymentResult.toXdr(stream);
  }
}

abstract class ExtendedResultExt extends XdrEncodable {
  LedgerVersion discriminant;
  ExtendedResultExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ExtendedResultExtEmptyVersion extends ExtendedResultExt {
  ExtendedResultExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Review Request operation
//  struct ReviewRequestOp
//  {
//      //: ID of a request that is being reviewed
//      uint64 requestID;
//      //: Hash of a request that is being reviewed
//      Hash requestHash;
//      //: requestDetails is used to pass request type along with details specific to it.
//      union switch(ReviewableRequestType requestType) {
//      case CREATE_WITHDRAW:
//          WithdrawalDetails withdrawal;
//      case UPDATE_LIMITS:
//          LimitsUpdateDetails limitsUpdate;
//      case CREATE_AML_ALERT:
//          AMLAlertDetails amlAlertDetails;
//      case CREATE_INVOICE:
//          BillPayDetails billPay;
//      case MANAGE_CONTRACT:
//          ContractDetails contract;
//      default:
//          void;
//      } requestDetails;
//      //: Review action defines an action performed on the pending ReviewableRequest
//      ReviewRequestOpAction action;
//      //: Contains reject reason
//      longstring reason;
//      //: Details of the ReviewRequest operation
//      ReviewDetails reviewDetails;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ReviewRequestOp extends XdrEncodable  {
  UINT64 requestID;
  HASH requestHash;
  ReviewRequestOpRequestDetails requestDetails;
  ReviewRequestOpAction action;
  LONGSTRING reason;
  ReviewDetails reviewDetails;
  ReviewRequestOpExt ext;

  ReviewRequestOp(
      this.requestID,
      this.requestHash,
      this.requestDetails,
      this.action,
      this.reason,
      this.reviewDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    requestID.toXdr(stream);
    requestHash.toXdr(stream);
    requestDetails.toXdr(stream);
    action.toXdr(stream);
    reason.toXdr(stream);
    reviewDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ReviewRequestOpRequestDetails extends XdrEncodable {
  ReviewableRequestType discriminant;
  ReviewRequestOpRequestDetails(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ReviewRequestOpRequestDetailsCreateWithdraw extends ReviewRequestOpRequestDetails {
  ReviewRequestOpRequestDetailsCreateWithdraw(this.withdrawal) : super(ReviewableRequestType(ReviewableRequestType.CREATE_WITHDRAW));
  late WithdrawalDetails withdrawal;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    withdrawal.toXdr(stream);
  }
}

class ReviewRequestOpRequestDetailsUpdateLimits extends ReviewRequestOpRequestDetails {
  ReviewRequestOpRequestDetailsUpdateLimits(this.limitsUpdate) : super(ReviewableRequestType(ReviewableRequestType.UPDATE_LIMITS));
  late LimitsUpdateDetails limitsUpdate;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    limitsUpdate.toXdr(stream);
  }
}

class ReviewRequestOpRequestDetailsCreateAmlAlert extends ReviewRequestOpRequestDetails {
  ReviewRequestOpRequestDetailsCreateAmlAlert(this.amlAlertDetails) : super(ReviewableRequestType(ReviewableRequestType.CREATE_AML_ALERT));
  late AMLAlertDetails amlAlertDetails;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    amlAlertDetails.toXdr(stream);
  }
}

class ReviewRequestOpRequestDetailsCreateInvoice extends ReviewRequestOpRequestDetails {
  ReviewRequestOpRequestDetailsCreateInvoice(this.billPay) : super(ReviewableRequestType(ReviewableRequestType.CREATE_INVOICE));
  late BillPayDetails billPay;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    billPay.toXdr(stream);
  }
}

class ReviewRequestOpRequestDetailsManageContract extends ReviewRequestOpRequestDetails {
  ReviewRequestOpRequestDetailsManageContract(this.contract) : super(ReviewableRequestType(ReviewableRequestType.MANAGE_CONTRACT));
  late ContractDetails contract;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    contract.toXdr(stream);
  }
}

abstract class ReviewRequestOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  ReviewRequestOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ReviewRequestOpExtEmptyVersion extends ReviewRequestOpExt {
  ReviewRequestOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class ReviewRequestResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_REASON = -1;
  static const INVALID_ACTION = -2;
  static const HASH_MISMATCHED = -3;
  static const NOT_FOUND = -4;
  static const TYPE_MISMATCHED = -5;
  static const REJECT_NOT_ALLOWED = -6;
  static const INVALID_EXTERNAL_DETAILS = -7;
  static const REQUESTOR_IS_BLOCKED = -8;
  static const PERMANENT_REJECT_NOT_ALLOWED = -9;
  static const REMOVING_NOT_SET_TASKS = -100;
  static const ASSET_ALREADY_EXISTS = -200;
  static const ASSET_DOES_NOT_EXISTS = -210;
  static const MAX_ISSUANCE_AMOUNT_EXCEEDED = -400;
  static const INSUFFICIENT_AVAILABLE_FOR_ISSUANCE_AMOUNT = -410;
  static const FULL_LINE = -420;
  static const SYSTEM_TASKS_NOT_ALLOWED = -430;
  static const INCORRECT_PRECISION = -440;
  static const BASE_ASSET_DOES_NOT_EXISTS = -500;
  static const HARD_CAP_WILL_EXCEED_MAX_ISSUANCE = -510;
  static const INSUFFICIENT_PREISSUED_FOR_HARD_CAP = -520;
  static const BASE_ASSET_NOT_FOUND = -530;
  static const ASSET_PAIR_NOT_FOUND = -540;
  static const QUOTE_ASSET_NOT_FOUND = -550;
  static const NON_ZERO_TASKS_TO_REMOVE_NOT_ALLOWED = -600;
  static const ACCOUNT_ROLE_TO_SET_DOES_NOT_EXIST = -610;
  static const SALE_NOT_FOUND = -700;
  static const AMOUNT_MISMATCHED = -1010;
  static const DESTINATION_BALANCE_MISMATCHED = -1020;
  static const NOT_ALLOWED_ACCOUNT_DESTINATION = -1030;
  static const REQUIRED_SOURCE_PAY_FOR_DESTINATION = -1040;
  static const SOURCE_BALANCE_MISMATCHED = -1050;
  static const CONTRACT_NOT_FOUND = -1060;
  static const INVOICE_RECEIVER_BALANCE_LOCK_AMOUNT_OVERFLOW = -1070;
  static const INVOICE_ALREADY_APPROVED = -1080;
  static const PAYMENT_V2_MALFORMED = -1100;
  static const UNDERFUNDED = -1110;
  static const LINE_FULL = -1120;
  static const DESTINATION_BALANCE_NOT_FOUND = -1130;
  static const BALANCE_ASSETS_MISMATCHED = -1140;
  static const SRC_BALANCE_NOT_FOUND = -1150;
  static const REFERENCE_DUPLICATION = -1160;
  static const STATS_OVERFLOW = -1170;
  static const LIMITS_EXCEEDED = -1180;
  static const NOT_ALLOWED_BY_ASSET_POLICY = -1190;
  static const INVALID_DESTINATION_FEE = -1200;
  static const INVALID_DESTINATION_FEE_ASSET = -1210;
  static const FEE_ASSET_MISMATCHED = -1220;
  static const INSUFFICIENT_FEE_AMOUNT = -1230;
  static const BALANCE_TO_CHARGE_FEE_FROM_NOT_FOUND = -1240;
  static const PAYMENT_AMOUNT_IS_LESS_THAN_DEST_FEE = -1250;
  static const DESTINATION_ACCOUNT_NOT_FOUND = -1260;
  static const CANNOT_CREATE_FOR_ACC_ID_AND_ACC_TYPE = 1300;
  static const INVALID_LIMITS = 1310;
  static const ACCOUNT_NOT_FOUND = -1311;
  static const ROLE_NOT_FOUND = -1312;
  static const CONTRACT_DETAILS_TOO_LONG = -1400;
  static const BASE_ASSET_CANNOT_BE_SWAPPED = -1500;
  static const QUOTE_ASSET_CANNOT_BE_SWAPPED = -1501;
  static const ATOMIC_SWAP_BID_OWNER_FULL_LINE = -1504;
  static const INVALID_SIGNER_DATA = -1600;
  static const MANAGE_OFFER_FAILED = -1700;
  static const PAYMENT_FAILED = -1800;
  static const DATA_NOT_FOUND = -1900;
  int value;
  ReviewRequestResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class ReviewRequestResult extends XdrEncodable {
  ReviewRequestResultCode discriminant;
  ReviewRequestResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ReviewRequestResultSuccess extends ReviewRequestResult {
  ReviewRequestResultSuccess(this.success) : super(ReviewRequestResultCode(ReviewRequestResultCode.SUCCESS));
  late ExtendedResult success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

class ReviewRequestResultManageOfferFailed extends ReviewRequestResult {
  ReviewRequestResultManageOfferFailed(this.manageOfferCode) : super(ReviewRequestResultCode(ReviewRequestResultCode.MANAGE_OFFER_FAILED));
  late ManageOfferResultCode manageOfferCode;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageOfferCode.toXdr(stream);
  }
}

class ReviewRequestResultPaymentFailed extends ReviewRequestResult {
  ReviewRequestResultPaymentFailed(this.paymentCode) : super(ReviewRequestResultCode(ReviewRequestResultCode.PAYMENT_FAILED));
  late PaymentResultCode paymentCode;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    paymentCode.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: Allows to establish or remove a relationship between a particular fee entry with the different entities
//      struct SetFeesOp
//      {
//          //: Fee entry to set
//          FeeEntry* fee;
//          //: `isDelete` indicates that a fee should be either set or removed
//          bool isDelete;
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      };

//  ===========================================================================
class SetFeesOp extends XdrEncodable  {
  FeeEntry? fee;
  bool isDelete;
  SetFeesOpExt ext;

  SetFeesOp(
      this.fee,
      this.isDelete,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    if (fee != null) {
      true.toXdr(stream);
      fee?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    isDelete.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class SetFeesOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  SetFeesOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SetFeesOpExtEmptyVersion extends SetFeesOpExt {
  SetFeesOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class SetFeesResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_AMOUNT = -1;
  static const INVALID_FEE_TYPE = -2;
  static const ASSET_NOT_FOUND = -3;
  static const INVALID_ASSET = -4;
  static const MALFORMED = -5;
  static const MALFORMED_RANGE = -6;
  static const RANGE_OVERLAP = -7;
  static const NOT_FOUND = -8;
  static const SUB_TYPE_NOT_EXIST = -9;
  static const INVALID_FEE_VERSION = -10;
  static const INVALID_FEE_ASSET = -11;
  static const FEE_ASSET_NOT_ALLOWED = -12;
  static const CROSS_ASSET_FEE_NOT_ALLOWED = -13;
  static const FEE_ASSET_NOT_FOUND = -14;
  static const ASSET_PAIR_NOT_FOUND = -15;
  static const INVALID_ASSET_PAIR_PRICE = -16;
  static const INVALID_FEE_HASH = -17;
  static const INVALID_AMOUNT_PRECISION = -18;
  static const ACCOUNT_NOT_FOUND = -19;
  static const ROLE_NOT_FOUND = -20;
  int value;
  SetFeesResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class SetFeesResult extends XdrEncodable {
  SetFeesResultCode discriminant;
  SetFeesResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SetFeesResultSuccess extends SetFeesResult {
  SetFeesResultSuccess(this.success) : super(SetFeesResultCode(SetFeesResultCode.SUCCESS));
  late SetFeesResultSuccessSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct {
//                  //: reserved for future use
//                  union switch (LedgerVersion v)
//                  {
//                  case EMPTY_VERSION:
//                      void;
//                  }
//                  ext;
//              }

//  ===========================================================================
class SetFeesResultSuccessSuccess extends XdrEncodable  {
  SetFeesResultSuccessExt ext;

  SetFeesResultSuccessSuccess(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class SetFeesResultSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  SetFeesResultSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SetFeesResultSuccessExtEmptyVersion extends SetFeesResultSuccessExt {
  SetFeesResultSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

// === xdr source ============================================================

//  //: StampOp is used to save current ledger hash and current license hash
//  struct StampOp
//  {
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class StampOp extends XdrEncodable  {
  StampOpExt ext;

  StampOp(
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ext.toXdr(stream);
  }
}
abstract class StampOpExt extends XdrEncodable {
  LedgerVersion discriminant;
  StampOpExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class StampOpExtEmptyVersion extends StampOpExt {
  StampOpExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class StampResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  int value;
  StampResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: StampSuccess is used to pass saved ledger hash and license hash
//  struct StampSuccess {
//      //: ledger hash saved into a database
//      Hash ledgerHash;
//
//      //: current license hash
//      Hash licenseHash;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class StampSuccess extends XdrEncodable  {
  HASH ledgerHash;
  HASH licenseHash;
  StampSuccessExt ext;

  StampSuccess(
      this.ledgerHash,
      this.licenseHash,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ledgerHash.toXdr(stream);
    licenseHash.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class StampSuccessExt extends XdrEncodable {
  LedgerVersion discriminant;
  StampSuccessExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class StampSuccessExtEmptyVersion extends StampSuccessExt {
  StampSuccessExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
abstract class StampResult extends XdrEncodable {
  StampResultCode discriminant;
  StampResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class StampResultSuccess extends StampResult {
  StampResultSuccess(this.success) : super(StampResultCode(StampResultCode.SUCCESS));
  late StampSuccess success;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    success.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct UpdateDataOp
//  {
//      //: ID of the data entry to update
//      uint64 dataID;
//      //: New value to set
//      longstring value;
//      //: Reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class UpdateDataOp extends XdrEncodable  {
  UINT64 dataID;
  LONGSTRING value;
  EmptyExt ext;

  UpdateDataOp(
      this.dataID,
      this.value,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    dataID.toXdr(stream);
    value.toXdr(stream);
    ext.toXdr(stream);
  }
}
class UpdateDataResultCode extends XdrEncodable {
  static const SUCCESS = 0;
  static const INVALID_DATA = -1;
  static const NOT_FOUND = -2;
  static const NOT_AUTHORIZED = -3;
  int value;
  UpdateDataResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class UpdateDataResult extends XdrEncodable {
  UpdateDataResultCode discriminant;
  UpdateDataResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class UpdateDataResultSuccess extends UpdateDataResult {
  UpdateDataResultSuccess(this.ext) : super(UpdateDataResultCode(UpdateDataResultCode.SUCCESS));
  late EmptyExt ext;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ext.toXdr(stream);
  }
}

class ErrorCode extends XdrEncodable {
  static const MISC = 0;
  static const DATA = 1;
  static const CONF = 2;
  static const AUTH = 3;
  static const LOAD = 4;
  int value;
  ErrorCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct Error
//  {
//      ErrorCode code;
//      string msg<100>;
//  };

//  ===========================================================================
class Error extends XdrEncodable  {
  ErrorCode code;
  String msg;

  Error(
      this.code,
      this.msg,
      );

  @override toXdr(XdrDataOutputStream stream) {
    code.toXdr(stream);
    msg.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct AuthCert
//  {
//      Curve25519Public pubkey;
//      uint64 expiration;
//      Signature sig;
//  };

//  ===========================================================================
class AuthCert extends XdrEncodable  {
  Curve25519Public pubkey;
  UINT64 expiration;
  SIGNATURE sig;

  AuthCert(
      this.pubkey,
      this.expiration,
      this.sig,
      );

  @override toXdr(XdrDataOutputStream stream) {
    pubkey.toXdr(stream);
    expiration.toXdr(stream);
    sig.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct Hello
//  {
//      uint32 ledgerVersion;
//      uint32 overlayVersion;
//      uint32 overlayMinVersion;
//      Hash networkID;
//      string versionStr<100>;
//      int listeningPort;
//      NodeID peerID;
//      AuthCert cert;
//      uint256 nonce;
//  };

//  ===========================================================================
class Hello extends XdrEncodable  {
  UINT32 ledgerVersion;
  UINT32 overlayVersion;
  UINT32 overlayMinVersion;
  HASH networkID;
  String versionStr;
  int listeningPort;
  NODEID peerID;
  AuthCert cert;
  UINT256 nonce;

  Hello(
      this.ledgerVersion,
      this.overlayVersion,
      this.overlayMinVersion,
      this.networkID,
      this.versionStr,
      this.listeningPort,
      this.peerID,
      this.cert,
      this.nonce,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ledgerVersion.toXdr(stream);
    overlayVersion.toXdr(stream);
    overlayMinVersion.toXdr(stream);
    networkID.toXdr(stream);
    versionStr.toXdr(stream);
    listeningPort.toXdr(stream);
    peerID.toXdr(stream);
    cert.toXdr(stream);
    nonce.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct Auth
//  {
//      // Empty message, just to confirm
//      // establishment of MAC keys.
//      int unused;
//  };

//  ===========================================================================
class Auth extends XdrEncodable  {
  int unused;

  Auth(
      this.unused,
      );

  @override toXdr(XdrDataOutputStream stream) {
    unused.toXdr(stream);
  }
}
class IPAddrType extends XdrEncodable {
  static const IPv4 = 0;
  static const IPv6 = 1;
  int value;
  IPAddrType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct PeerAddress
//  {
//      union switch (IPAddrType type)
//      {
//      case IPv4:
//          opaque ipv4[4];
//      case IPv6:
//          opaque ipv6[16];
//      }
//      ip;
//      uint32 port;
//      uint32 numFailures;
//  };

//  ===========================================================================
class PeerAddress extends XdrEncodable  {
  PeerAddressIp ip;
  UINT32 port;
  UINT32 numFailures;

  PeerAddress(
      this.ip,
      this.port,
      this.numFailures,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ip.toXdr(stream);
    port.toXdr(stream);
    numFailures.toXdr(stream);
  }
}
abstract class PeerAddressIp extends XdrEncodable {
  IPAddrType discriminant;
  PeerAddressIp(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class PeerAddressIpIpv4 extends PeerAddressIp {
  PeerAddressIpIpv4(this.ipv4) : super(IPAddrType(IPAddrType.IPv4));
  late XdrByteArrayFixed4 ipv4;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ipv4.toXdr(stream);
  }
}

class PeerAddressIpIpv6 extends PeerAddressIp {
  PeerAddressIpIpv6(this.ipv6) : super(IPAddrType(IPAddrType.IPv6));
  late XdrByteArrayFixed16 ipv6;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ipv6.toXdr(stream);
  }
}
class MessageType extends XdrEncodable {
  static const ERROR_MSG = 0;
  static const AUTH = 2;
  static const DONT_HAVE = 3;
  static const GET_PEERS = 4;
  static const PEERS = 5;
  static const GET_TX_SET = 6;
  static const TX_SET = 7;
  static const TRANSACTION = 8;
  static const GET_SCP_QUORUMSET = 9;
  static const SCP_QUORUMSET = 10;
  static const SCP_MESSAGE = 11;
  static const GET_SCP_STATE = 12;
  static const HELLO = 13;
  int value;
  MessageType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct DontHave
//  {
//      MessageType type;
//      uint256 reqHash;
//  };

//  ===========================================================================
class DontHave extends XdrEncodable  {
  MessageType type;
  UINT256 reqHash;

  DontHave(
      this.type,
      this.reqHash,
      );

  @override toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    reqHash.toXdr(stream);
  }
}
abstract class StellarMessage extends XdrEncodable {
  MessageType discriminant;
  StellarMessage(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class StellarMessageErrorMsg extends StellarMessage {
  StellarMessageErrorMsg(this.error) : super(MessageType(MessageType.ERROR_MSG));
  late Error error;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    error.toXdr(stream);
  }
}

class StellarMessageHello extends StellarMessage {
  StellarMessageHello(this.hello) : super(MessageType(MessageType.HELLO));
  late Hello hello;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    hello.toXdr(stream);
  }
}

class StellarMessageAuth extends StellarMessage {
  StellarMessageAuth(this.auth) : super(MessageType(MessageType.AUTH));
  late Auth auth;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    auth.toXdr(stream);
  }
}

class StellarMessageDontHave extends StellarMessage {
  StellarMessageDontHave(this.dontHave) : super(MessageType(MessageType.DONT_HAVE));
  late DontHave dontHave;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dontHave.toXdr(stream);
  }
}

class StellarMessageGetPeers extends StellarMessage {
  StellarMessageGetPeers() : super(MessageType(MessageType.GET_PEERS));
}

class StellarMessagePeers extends StellarMessage {
  StellarMessagePeers(this.peers) : super(MessageType(MessageType.PEERS));
  late List<PeerAddress> peers;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    peers.length.toXdr(stream);
    peers.forEach ((element) {
      element.toXdr(stream);
    });
  }
}

class StellarMessageGetTxSet extends StellarMessage {
  StellarMessageGetTxSet(this.txSetHash) : super(MessageType(MessageType.GET_TX_SET));
  late UINT256 txSetHash;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    txSetHash.toXdr(stream);
  }
}

class StellarMessageTxSet extends StellarMessage {
  StellarMessageTxSet(this.txSet) : super(MessageType(MessageType.TX_SET));
  late TransactionSet txSet;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    txSet.toXdr(stream);
  }
}

class StellarMessageTransaction extends StellarMessage {
  StellarMessageTransaction(this.transaction) : super(MessageType(MessageType.TRANSACTION));
  late TransactionEnvelope transaction;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    transaction.toXdr(stream);
  }
}

class StellarMessageGetScpQuorumset extends StellarMessage {
  StellarMessageGetScpQuorumset(this.qSetHash) : super(MessageType(MessageType.GET_SCP_QUORUMSET));
  late UINT256 qSetHash;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    qSetHash.toXdr(stream);
  }
}

class StellarMessageScpQuorumset extends StellarMessage {
  StellarMessageScpQuorumset(this.qSet) : super(MessageType(MessageType.SCP_QUORUMSET));
  late SCPQuorumSet qSet;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    qSet.toXdr(stream);
  }
}

class StellarMessageScpMessage extends StellarMessage {
  StellarMessageScpMessage(this.envelope) : super(MessageType(MessageType.SCP_MESSAGE));
  late SCPEnvelope envelope;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    envelope.toXdr(stream);
  }
}

class StellarMessageGetScpState extends StellarMessage {
  StellarMessageGetScpState(this.getSCPLedgerSeq) : super(MessageType(MessageType.GET_SCP_STATE));
  late UINT32 getSCPLedgerSeq;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    getSCPLedgerSeq.toXdr(stream);
  }
}

abstract class AuthenticatedMessage extends XdrEncodable {
  LedgerVersion discriminant;
  AuthenticatedMessage(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AuthenticatedMessageEmptyVersion extends AuthenticatedMessage {
  AuthenticatedMessageEmptyVersion(this.v0) : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
  late AuthenticatedMessageV0V0 v0;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    v0.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//  {
//     uint64 sequence;
//     StellarMessage message;
//     HmacSha256Mac mac;
//      }

//  ===========================================================================
class AuthenticatedMessageV0V0 extends XdrEncodable  {
  UINT64 sequence;
  StellarMessage message;
  HmacSha256Mac mac;

  AuthenticatedMessageV0V0(
      this.sequence,
      this.message,
      this.mac,
      );

  @override toXdr(XdrDataOutputStream stream) {
    sequence.toXdr(stream);
    message.toXdr(stream);
    mac.toXdr(stream);
  }
}

abstract class ReviewableRequestResource extends XdrEncodable {
  ReviewableRequestType discriminant;
  ReviewableRequestResource(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ReviewableRequestResourceCreateSale extends ReviewableRequestResource {
  ReviewableRequestResourceCreateSale(this.createSale) : super(ReviewableRequestType(ReviewableRequestType.CREATE_SALE));
  late ReviewableRequestResourceCreateSaleCreateSale createSale;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createSale.toXdr(stream);
  }
}

class ReviewableRequestResourceCreateIssuance extends ReviewableRequestResource {
  ReviewableRequestResourceCreateIssuance(this.createIssuance) : super(ReviewableRequestType(ReviewableRequestType.CREATE_ISSUANCE));
  late ReviewableRequestResourceCreateIssuanceCreateIssuance createIssuance;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createIssuance.toXdr(stream);
  }
}

class ReviewableRequestResourceCreateWithdraw extends ReviewableRequestResource {
  ReviewableRequestResourceCreateWithdraw(this.createWithdraw) : super(ReviewableRequestType(ReviewableRequestType.CREATE_WITHDRAW));
  late ReviewableRequestResourceCreateWithdrawCreateWithdraw createWithdraw;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createWithdraw.toXdr(stream);
  }
}

class ReviewableRequestResourceCreateAtomicSwapAsk extends ReviewableRequestResource {
  ReviewableRequestResourceCreateAtomicSwapAsk(this.createAtomicSwapAskExt) : super(ReviewableRequestType(ReviewableRequestType.CREATE_ATOMIC_SWAP_ASK));
  late ReviewableRequestResourceCreateAtomicSwapAskExt createAtomicSwapAskExt;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapAskExt.toXdr(stream);
  }
}

class ReviewableRequestResourceCreateAtomicSwapBid extends ReviewableRequestResource {
  ReviewableRequestResourceCreateAtomicSwapBid(this.createAtomicSwapBidExt) : super(ReviewableRequestType(ReviewableRequestType.CREATE_ATOMIC_SWAP_BID));
  late ReviewableRequestResourceCreateAtomicSwapBidExt createAtomicSwapBidExt;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapBidExt.toXdr(stream);
  }
}

class ReviewableRequestResourceCreatePoll extends ReviewableRequestResource {
  ReviewableRequestResourceCreatePoll(this.createPoll) : super(ReviewableRequestType(ReviewableRequestType.CREATE_POLL));
  late ReviewableRequestResourceCreatePollCreatePoll createPoll;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPoll.toXdr(stream);
  }
}

class ReviewableRequestResourceManageOffer extends ReviewableRequestResource {
  ReviewableRequestResourceManageOffer(this.manageOffer) : super(ReviewableRequestType(ReviewableRequestType.MANAGE_OFFER));
  late ReviewableRequestResourceManageOfferManageOffer manageOffer;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageOffer.toXdr(stream);
  }
}

class ReviewableRequestResourceCreatePayment extends ReviewableRequestResource {
  ReviewableRequestResourceCreatePayment(this.createPayment) : super(ReviewableRequestType(ReviewableRequestType.CREATE_PAYMENT));
  late ReviewableRequestResourceCreatePaymentCreatePayment createPayment;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPayment.toXdr(stream);
  }
}

class ReviewableRequestResourcePerformRedemption extends ReviewableRequestResource {
  ReviewableRequestResourcePerformRedemption(this.performRedemption) : super(ReviewableRequestType(ReviewableRequestType.PERFORM_REDEMPTION));
  late ReviewableRequestResourcePerformRedemptionPerformRedemption performRedemption;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    performRedemption.toXdr(stream);
  }
}

class ReviewableRequestResourceDataCreation extends ReviewableRequestResource {
  ReviewableRequestResourceDataCreation(this.dataCreation) : super(ReviewableRequestType(ReviewableRequestType.DATA_CREATION));
  late ReviewableRequestResourceDataCreationDataCreation dataCreation;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dataCreation.toXdr(stream);
  }
}

class ReviewableRequestResourceDataUpdate extends ReviewableRequestResource {
  ReviewableRequestResourceDataUpdate(this.dataUpdate) : super(ReviewableRequestType(ReviewableRequestType.DATA_UPDATE));
  late ReviewableRequestResourceDataUpdateDataUpdate dataUpdate;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dataUpdate.toXdr(stream);
  }
}

class ReviewableRequestResourceDataRemove extends ReviewableRequestResource {
  ReviewableRequestResourceDataRemove(this.dataRemove) : super(ReviewableRequestType(ReviewableRequestType.DATA_REMOVE));
  late ReviewableRequestResourceDataRemoveDataRemove dataRemove;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    dataRemove.toXdr(stream);
  }
}

class ReviewableRequestResourceCreateDeferredPayment extends ReviewableRequestResource {
  ReviewableRequestResourceCreateDeferredPayment(this.createDeferredPayment) : super(ReviewableRequestType(ReviewableRequestType.CREATE_DEFERRED_PAYMENT));
  late ReviewableRequestResourceCreateDeferredPaymentCreateDeferredPayment createDeferredPayment;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDeferredPayment.toXdr(stream);
  }
}

class ReviewableRequestResourceCloseDeferredPayment extends ReviewableRequestResource {
  ReviewableRequestResourceCloseDeferredPayment(this.closeDeferredPayment) : super(ReviewableRequestType(ReviewableRequestType.CLOSE_DEFERRED_PAYMENT));
  late ReviewableRequestResourceCloseDeferredPaymentCloseDeferredPayment closeDeferredPayment;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    closeDeferredPayment.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: type of sale
//          uint64 type;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceCreateSaleCreateSale extends XdrEncodable  {
  UINT64 type;
  EmptyExt ext;

  ReviewableRequestResourceCreateSaleCreateSale(
      this.type,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: code of asset
//          AssetCode assetCode;
//          //: type of asset
//          uint64 assetType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceCreateIssuanceCreateIssuance extends XdrEncodable  {
  ASSETCODE assetCode;
  UINT64 assetType;
  EmptyExt ext;

  ReviewableRequestResourceCreateIssuanceCreateIssuance(
      this.assetCode,
      this.assetType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: code of asset
//          AssetCode assetCode;
//          //: type of asset
//          uint64 assetType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceCreateWithdrawCreateWithdraw extends XdrEncodable  {
  ASSETCODE assetCode;
  UINT64 assetType;
  EmptyExt ext;

  ReviewableRequestResourceCreateWithdrawCreateWithdraw(
      this.assetCode,
      this.assetType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ReviewableRequestResourceCreateAtomicSwapAskExt extends XdrEncodable {
  LedgerVersion discriminant;
  ReviewableRequestResourceCreateAtomicSwapAskExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ReviewableRequestResourceCreateAtomicSwapAskExtEmptyVersion extends ReviewableRequestResourceCreateAtomicSwapAskExt {
  ReviewableRequestResourceCreateAtomicSwapAskExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class ReviewableRequestResourceCreateAtomicSwapAskExtAtomicSwapReturning extends ReviewableRequestResourceCreateAtomicSwapAskExt {
  ReviewableRequestResourceCreateAtomicSwapAskExtAtomicSwapReturning(this.createAtomicSwapAsk) : super(LedgerVersion(LedgerVersion.ATOMIC_SWAP_RETURNING));
  late ReviewableRequestResourceCreateAtomicSwapAskExtCreateAtomicSwapAskCreateAtomicSwapAsk createAtomicSwapAsk;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapAsk.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              //: code of asset
//              AssetCode assetCode;
//              //: type of asset
//              uint64 assetType;
//
//              //: reserved for future extension
//              EmptyExt ext;
//          }

//  ===========================================================================
class ReviewableRequestResourceCreateAtomicSwapAskExtCreateAtomicSwapAskCreateAtomicSwapAsk extends XdrEncodable  {
  ASSETCODE assetCode;
  UINT64 assetType;
  EmptyExt ext;

  ReviewableRequestResourceCreateAtomicSwapAskExtCreateAtomicSwapAskCreateAtomicSwapAsk(
      this.assetCode,
      this.assetType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}

abstract class ReviewableRequestResourceCreateAtomicSwapBidExt extends XdrEncodable {
  LedgerVersion discriminant;
  ReviewableRequestResourceCreateAtomicSwapBidExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ReviewableRequestResourceCreateAtomicSwapBidExtEmptyVersion extends ReviewableRequestResourceCreateAtomicSwapBidExt {
  ReviewableRequestResourceCreateAtomicSwapBidExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class ReviewableRequestResourceCreateAtomicSwapBidExtAtomicSwapReturning extends ReviewableRequestResourceCreateAtomicSwapBidExt {
  ReviewableRequestResourceCreateAtomicSwapBidExtAtomicSwapReturning(this.createAtomicSwapBid) : super(LedgerVersion(LedgerVersion.ATOMIC_SWAP_RETURNING));
  late ReviewableRequestResourceCreateAtomicSwapBidExtCreateAtomicSwapBidCreateAtomicSwapBid createAtomicSwapBid;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapBid.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              //: code of asset
//              AssetCode assetCode;
//              //: type of asset
//              uint64 assetType;
//
//              //: reserved for future extension
//              EmptyExt ext;
//          }

//  ===========================================================================
class ReviewableRequestResourceCreateAtomicSwapBidExtCreateAtomicSwapBidCreateAtomicSwapBid extends XdrEncodable  {
  ASSETCODE assetCode;
  UINT64 assetType;
  EmptyExt ext;

  ReviewableRequestResourceCreateAtomicSwapBidExtCreateAtomicSwapBidCreateAtomicSwapBid(
      this.assetCode,
      this.assetType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct
//      {
//          //: permission type of poll
//          uint32 permissionType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceCreatePollCreatePoll extends XdrEncodable  {
  UINT32 permissionType;
  EmptyExt ext;

  ReviewableRequestResourceCreatePollCreatePoll(
      this.permissionType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    permissionType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: type of base asset
//          uint64 baseAssetType;
//          //: type of quote asset
//          uint64 quoteAssetType;
//
//          //: code of base asset
//          AssetCode baseAssetCode;
//          //: code of quote asset
//          AssetCode quoteAssetCode;
//
//          bool isBuy;
//          //: 0 means creation,
//          //: 1 means removing,
//          //: 2 means participate in sale,
//          //: 3 means remove participation in sale,
//          //: UINT32_MAX means any action.
//          uint32 manageAction;
//
//          //: ID of the order book.
//          uint64 orderBookID;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceManageOfferManageOffer extends XdrEncodable  {
  UINT64 baseAssetType;
  UINT64 quoteAssetType;
  ASSETCODE baseAssetCode;
  ASSETCODE quoteAssetCode;
  bool isBuy;
  UINT32 manageAction;
  UINT64 orderBookID;
  EmptyExt ext;

  ReviewableRequestResourceManageOfferManageOffer(
      this.baseAssetType,
      this.quoteAssetType,
      this.baseAssetCode,
      this.quoteAssetCode,
      this.isBuy,
      this.manageAction,
      this.orderBookID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    baseAssetType.toXdr(stream);
    quoteAssetType.toXdr(stream);
    baseAssetCode.toXdr(stream);
    quoteAssetCode.toXdr(stream);
    isBuy.toXdr(stream);
    manageAction.toXdr(stream);
    orderBookID.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Code of asset in which payment is being made
//          AssetCode assetCode;
//          //: Type of asset in which payment is being made
//          uint64 assetType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceCreatePaymentCreatePayment extends XdrEncodable  {
  ASSETCODE assetCode;
  UINT64 assetType;
  EmptyExt ext;

  ReviewableRequestResourceCreatePaymentCreatePayment(
      this.assetCode,
      this.assetType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Code of asset in which redemption is being made
//          AssetCode assetCode;
//          //: Type of asset in which redemption is being made
//          uint64 assetType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourcePerformRedemptionPerformRedemption extends XdrEncodable  {
  ASSETCODE assetCode;
  UINT64 assetType;
  EmptyExt ext;

  ReviewableRequestResourcePerformRedemptionPerformRedemption(
      this.assetCode,
      this.assetType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Numeric type of the data
//          uint64 type;
//          //: Reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceDataCreationDataCreation extends XdrEncodable  {
  UINT64 type;
  EmptyExt ext;

  ReviewableRequestResourceDataCreationDataCreation(
      this.type,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Numeric type of the data
//          uint64 type;
//          //: Reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceDataUpdateDataUpdate extends XdrEncodable  {
  UINT64 type;
  EmptyExt ext;

  ReviewableRequestResourceDataUpdateDataUpdate(
      this.type,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Numeric type of the data
//          uint64 type;
//          //: Reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceDataRemoveDataRemove extends XdrEncodable  {
  UINT64 type;
  EmptyExt ext;

  ReviewableRequestResourceDataRemoveDataRemove(
      this.type,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          AssetCode assetCode;
//
//          uint64 assetType;
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceCreateDeferredPaymentCreateDeferredPayment extends XdrEncodable  {
  ASSETCODE assetCode;
  UINT64 assetType;
  EmptyExt ext;

  ReviewableRequestResourceCreateDeferredPaymentCreateDeferredPayment(
      this.assetCode,
      this.assetType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          AssetCode assetCode;
//
//          uint64 assetType;
//          EmptyExt ext;
//      }

//  ===========================================================================
class ReviewableRequestResourceCloseDeferredPaymentCloseDeferredPayment extends XdrEncodable  {
  ASSETCODE assetCode;
  UINT64 assetType;
  EmptyExt ext;

  ReviewableRequestResourceCloseDeferredPaymentCloseDeferredPayment(
      this.assetCode,
      this.assetType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}

// === xdr source ============================================================

//  //: Describes custom rule resource that can be used outside of the Core for flexible access control
//  struct CustomRuleResource {
//      //: Action attributes
//      longstring *action;
//      //: Resource attributes
//      longstring resource;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class CustomRuleResource extends XdrEncodable  {
  LONGSTRING? action;
  LONGSTRING resource;
  EmptyExt ext;

  CustomRuleResource(
      this.action,
      this.resource,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    if (action != null) {
      true.toXdr(stream);
      action?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    resource.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AccountRuleResource extends XdrEncodable {
  LedgerEntryType discriminant;
  AccountRuleResource(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AccountRuleResourceAsset extends AccountRuleResource {
  AccountRuleResourceAsset(this.asset) : super(LedgerEntryType(LedgerEntryType.ASSET));
  late AccountRuleResourceAssetAsset asset;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    asset.toXdr(stream);
  }
}

class AccountRuleResourceReviewableRequest extends AccountRuleResource {
  AccountRuleResourceReviewableRequest(this.reviewableRequest) : super(LedgerEntryType(LedgerEntryType.REVIEWABLE_REQUEST));
  late AccountRuleResourceReviewableRequestReviewableRequest reviewableRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reviewableRequest.toXdr(stream);
  }
}

class AccountRuleResourceAny extends AccountRuleResource {
  AccountRuleResourceAny() : super(LedgerEntryType(LedgerEntryType.ANY));
}

class AccountRuleResourceOfferEntry extends AccountRuleResource {
  AccountRuleResourceOfferEntry(this.offer) : super(LedgerEntryType(LedgerEntryType.OFFER_ENTRY));
  late AccountRuleResourceOfferOffer offer;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    offer.toXdr(stream);
  }
}

class AccountRuleResourceSale extends AccountRuleResource {
  AccountRuleResourceSale(this.sale) : super(LedgerEntryType(LedgerEntryType.SALE));
  late AccountRuleResourceSaleSale sale;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    sale.toXdr(stream);
  }
}

class AccountRuleResourceAtomicSwapAsk extends AccountRuleResource {
  AccountRuleResourceAtomicSwapAsk(this.atomicSwapAsk) : super(LedgerEntryType(LedgerEntryType.ATOMIC_SWAP_ASK));
  late AccountRuleResourceAtomicSwapAskAtomicSwapAsk atomicSwapAsk;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    atomicSwapAsk.toXdr(stream);
  }
}

class AccountRuleResourceKeyValue extends AccountRuleResource {
  AccountRuleResourceKeyValue(this.keyValue) : super(LedgerEntryType(LedgerEntryType.KEY_VALUE));
  late AccountRuleResourceKeyValueKeyValue keyValue;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    keyValue.toXdr(stream);
  }
}

class AccountRuleResourcePoll extends AccountRuleResource {
  AccountRuleResourcePoll(this.poll) : super(LedgerEntryType(LedgerEntryType.POLL));
  late AccountRuleResourcePollPoll poll;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    poll.toXdr(stream);
  }
}

class AccountRuleResourceVote extends AccountRuleResource {
  AccountRuleResourceVote(this.vote) : super(LedgerEntryType(LedgerEntryType.VOTE));
  late AccountRuleResourceVoteVote vote;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    vote.toXdr(stream);
  }
}

class AccountRuleResourceInitiateKycRecovery extends AccountRuleResource {
  AccountRuleResourceInitiateKycRecovery(this.initiateKYCRecovery) : super(LedgerEntryType(LedgerEntryType.INITIATE_KYC_RECOVERY));
  late AccountRuleResourceInitiateKYCRecoveryInitiateKYCRecovery initiateKYCRecovery;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    initiateKYCRecovery.toXdr(stream);
  }
}

class AccountRuleResourceAccountSpecificRule extends AccountRuleResource {
  AccountRuleResourceAccountSpecificRule(this.accountSpecificRuleExt) : super(LedgerEntryType(LedgerEntryType.ACCOUNT_SPECIFIC_RULE));
  late AccountRuleResourceAccountSpecificRuleExt accountSpecificRuleExt;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountSpecificRuleExt.toXdr(stream);
  }
}

class AccountRuleResourceSwap extends AccountRuleResource {
  AccountRuleResourceSwap(this.swap) : super(LedgerEntryType(LedgerEntryType.SWAP));
  late AccountRuleResourceSwapSwap swap;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    swap.toXdr(stream);
  }
}

class AccountRuleResourceData extends AccountRuleResource {
  AccountRuleResourceData(this.data) : super(LedgerEntryType(LedgerEntryType.DATA));
  late AccountRuleResourceDataData data;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    data.toXdr(stream);
  }
}

class AccountRuleResourceCustom extends AccountRuleResource {
  AccountRuleResourceCustom(this.custom) : super(LedgerEntryType(LedgerEntryType.CUSTOM));
  late CustomRuleResource custom;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    custom.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          AssetCode assetCode;
//          uint64 assetType;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceAssetAsset extends XdrEncodable  {
  ASSETCODE assetCode;
  UINT64 assetType;
  EmptyExt ext;

  AccountRuleResourceAssetAsset(
      this.assetCode,
      this.assetType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Describes properties of some reviewable request types that
//          //: can be used to restrict the usage of reviewable requests
//          ReviewableRequestResource details;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceReviewableRequestReviewableRequest extends XdrEncodable  {
  ReviewableRequestResource details;
  EmptyExt ext;

  AccountRuleResourceReviewableRequestReviewableRequest(
      this.details,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: type of base asset
//          uint64 baseAssetType;
//          //: type of quote asset
//          uint64 quoteAssetType;
//
//          //: code of base asset
//          AssetCode baseAssetCode;
//          //: code of quote asset
//          AssetCode quoteAssetCode;
//
//          bool isBuy;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceOfferOffer extends XdrEncodable  {
  UINT64 baseAssetType;
  UINT64 quoteAssetType;
  ASSETCODE baseAssetCode;
  ASSETCODE quoteAssetCode;
  bool isBuy;
  EmptyExt ext;

  AccountRuleResourceOfferOffer(
      this.baseAssetType,
      this.quoteAssetType,
      this.baseAssetCode,
      this.quoteAssetCode,
      this.isBuy,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    baseAssetType.toXdr(stream);
    quoteAssetType.toXdr(stream);
    baseAssetCode.toXdr(stream);
    quoteAssetCode.toXdr(stream);
    isBuy.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          uint64 saleID;
//          uint64 saleType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceSaleSale extends XdrEncodable  {
  UINT64 saleID;
  UINT64 saleType;
  EmptyExt ext;

  AccountRuleResourceSaleSale(
      this.saleID,
      this.saleType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    saleType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          uint64 assetType;
//          AssetCode assetCode;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceAtomicSwapAskAtomicSwapAsk extends XdrEncodable  {
  UINT64 assetType;
  ASSETCODE assetCode;
  EmptyExt ext;

  AccountRuleResourceAtomicSwapAskAtomicSwapAsk(
      this.assetType,
      this.assetCode,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    assetType.toXdr(stream);
    assetCode.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: prefix of key
//          longstring keyPrefix;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceKeyValueKeyValue extends XdrEncodable  {
  LONGSTRING keyPrefix;
  EmptyExt ext;

  AccountRuleResourceKeyValueKeyValue(
      this.keyPrefix,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    keyPrefix.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: ID of the poll
//          uint64 pollID;
//
//          //: permission type of poll
//          uint32 permissionType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourcePollPoll extends XdrEncodable  {
  UINT64 pollID;
  UINT32 permissionType;
  EmptyExt ext;

  AccountRuleResourcePollPoll(
      this.pollID,
      this.permissionType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    permissionType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: ID of the poll
//          uint64 pollID;
//
//          //: permission type of poll
//          uint32 permissionType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceVoteVote extends XdrEncodable  {
  UINT64 pollID;
  UINT32 permissionType;
  EmptyExt ext;

  AccountRuleResourceVoteVote(
      this.pollID,
      this.permissionType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    permissionType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Role id
//          uint64 roleID;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceInitiateKYCRecoveryInitiateKYCRecovery extends XdrEncodable  {
  UINT64 roleID;
  EmptyExt ext;

  AccountRuleResourceInitiateKYCRecoveryInitiateKYCRecovery(
      this.roleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AccountRuleResourceAccountSpecificRuleExt extends XdrEncodable {
  LedgerVersion discriminant;
  AccountRuleResourceAccountSpecificRuleExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AccountRuleResourceAccountSpecificRuleExtEmptyVersion extends AccountRuleResourceAccountSpecificRuleExt {
  AccountRuleResourceAccountSpecificRuleExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class AccountRuleResourceAccountSpecificRuleExtAddAccSpecificRuleResource extends AccountRuleResourceAccountSpecificRuleExt {
  AccountRuleResourceAccountSpecificRuleExtAddAccSpecificRuleResource(this.accountSpecificRule) : super(LedgerVersion(LedgerVersion.ADD_ACC_SPECIFIC_RULE_RESOURCE));
  late AccountRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule accountSpecificRule;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountSpecificRule.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              //: Describes properties of some ledger key that
//              //: can be used to restrict the usage of account specific rules
//              LedgerKey ledgerKey;
//
//              //: reserved for future extension
//              EmptyExt ext;
//          }

//  ===========================================================================
class AccountRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule extends XdrEncodable  {
  LedgerKey ledgerKey;
  EmptyExt ext;

  AccountRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule(
      this.ledgerKey,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ledgerKey.toXdr(stream);
    ext.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct
//      {
//          //: code of the asset
//          AssetCode assetCode;
//          //: type of asset
//          uint64 assetType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceSwapSwap extends XdrEncodable  {
  ASSETCODE assetCode;
  UINT64 assetType;
  EmptyExt ext;

  AccountRuleResourceSwapSwap(
      this.assetCode,
      this.assetType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Numeric type of the data
//          uint64 type;
//          //: Reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class AccountRuleResourceDataData extends XdrEncodable  {
  UINT64 type;
  EmptyExt ext;

  AccountRuleResourceDataData(
      this.type,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    ext.toXdr(stream);
  }
}

class AccountRuleAction extends XdrEncodable {
  static const ANY = 1;
  static const CREATE = 2;
  static const CREATE_FOR_OTHER = 3;
  static const CREATE_WITH_TASKS = 4;
  static const MANAGE = 5;
  static const SEND = 6;
  static const WITHDRAW = 7;
  static const RECEIVE_ISSUANCE = 8;
  static const RECEIVE_PAYMENT = 9;
  static const RECEIVE_ATOMIC_SWAP = 10;
  static const PARTICIPATE = 11;
  static const BIND = 12;
  static const UPDATE_MAX_ISSUANCE = 13;
  static const CHECK = 14;
  static const CANCEL = 15;
  static const CLOSE = 16;
  static const REMOVE = 17;
  static const UPDATE_END_TIME = 18;
  static const CREATE_FOR_OTHER_WITH_TASKS = 19;
  static const REMOVE_FOR_OTHER = 20;
  static const EXCHANGE = 21;
  static const RECEIVE_REDEMPTION = 22;
  static const UPDATE = 23;
  static const UPDATE_FOR_OTHER = 24;
  static const CUSTOM = 25;
  int value;
  AccountRuleAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class SignerRuleResource extends XdrEncodable {
  LedgerEntryType discriminant;
  SignerRuleResource(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SignerRuleResourceReviewableRequest extends SignerRuleResource {
  SignerRuleResourceReviewableRequest(this.reviewableRequest) : super(LedgerEntryType(LedgerEntryType.REVIEWABLE_REQUEST));
  late SignerRuleResourceReviewableRequestReviewableRequest reviewableRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reviewableRequest.toXdr(stream);
  }
}

class SignerRuleResourceAsset extends SignerRuleResource {
  SignerRuleResourceAsset(this.asset) : super(LedgerEntryType(LedgerEntryType.ASSET));
  late SignerRuleResourceAssetAsset asset;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    asset.toXdr(stream);
  }
}

class SignerRuleResourceAny extends SignerRuleResource {
  SignerRuleResourceAny() : super(LedgerEntryType(LedgerEntryType.ANY));
}

class SignerRuleResourceOfferEntry extends SignerRuleResource {
  SignerRuleResourceOfferEntry(this.offer) : super(LedgerEntryType(LedgerEntryType.OFFER_ENTRY));
  late SignerRuleResourceOfferOffer offer;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    offer.toXdr(stream);
  }
}

class SignerRuleResourceSale extends SignerRuleResource {
  SignerRuleResourceSale(this.sale) : super(LedgerEntryType(LedgerEntryType.SALE));
  late SignerRuleResourceSaleSale sale;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    sale.toXdr(stream);
  }
}

class SignerRuleResourceAtomicSwapAsk extends SignerRuleResource {
  SignerRuleResourceAtomicSwapAsk(this.atomicSwapAsk) : super(LedgerEntryType(LedgerEntryType.ATOMIC_SWAP_ASK));
  late SignerRuleResourceAtomicSwapAskAtomicSwapAsk atomicSwapAsk;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    atomicSwapAsk.toXdr(stream);
  }
}

class SignerRuleResourceSignerRule extends SignerRuleResource {
  SignerRuleResourceSignerRule(this.signerRule) : super(LedgerEntryType(LedgerEntryType.SIGNER_RULE));
  late SignerRuleResourceSignerRuleSignerRule signerRule;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signerRule.toXdr(stream);
  }
}

class SignerRuleResourceSignerRole extends SignerRuleResource {
  SignerRuleResourceSignerRole(this.signerRole) : super(LedgerEntryType(LedgerEntryType.SIGNER_ROLE));
  late SignerRuleResourceSignerRoleSignerRole signerRole;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signerRole.toXdr(stream);
  }
}

class SignerRuleResourceSigner extends SignerRuleResource {
  SignerRuleResourceSigner(this.signer) : super(LedgerEntryType(LedgerEntryType.SIGNER));
  late SignerRuleResourceSignerSigner signer;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    signer.toXdr(stream);
  }
}

class SignerRuleResourceKeyValue extends SignerRuleResource {
  SignerRuleResourceKeyValue(this.keyValue) : super(LedgerEntryType(LedgerEntryType.KEY_VALUE));
  late SignerRuleResourceKeyValueKeyValue keyValue;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    keyValue.toXdr(stream);
  }
}

class SignerRuleResourcePoll extends SignerRuleResource {
  SignerRuleResourcePoll(this.poll) : super(LedgerEntryType(LedgerEntryType.POLL));
  late SignerRuleResourcePollPoll poll;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    poll.toXdr(stream);
  }
}

class SignerRuleResourceVote extends SignerRuleResource {
  SignerRuleResourceVote(this.vote) : super(LedgerEntryType(LedgerEntryType.VOTE));
  late SignerRuleResourceVoteVote vote;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    vote.toXdr(stream);
  }
}

class SignerRuleResourceInitiateKycRecovery extends SignerRuleResource {
  SignerRuleResourceInitiateKycRecovery(this.initiateKYCRecovery) : super(LedgerEntryType(LedgerEntryType.INITIATE_KYC_RECOVERY));
  late SignerRuleResourceInitiateKYCRecoveryInitiateKYCRecovery initiateKYCRecovery;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    initiateKYCRecovery.toXdr(stream);
  }
}

class SignerRuleResourceAccountSpecificRule extends SignerRuleResource {
  SignerRuleResourceAccountSpecificRule(this.accountSpecificRuleExt) : super(LedgerEntryType(LedgerEntryType.ACCOUNT_SPECIFIC_RULE));
  late SignerRuleResourceAccountSpecificRuleExt accountSpecificRuleExt;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountSpecificRuleExt.toXdr(stream);
  }
}

class SignerRuleResourceSwap extends SignerRuleResource {
  SignerRuleResourceSwap(this.swap) : super(LedgerEntryType(LedgerEntryType.SWAP));
  late SignerRuleResourceSwapSwap swap;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    swap.toXdr(stream);
  }
}

class SignerRuleResourceData extends SignerRuleResource {
  SignerRuleResourceData(this.data) : super(LedgerEntryType(LedgerEntryType.DATA));
  late SignerRuleResourceDataData data;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    data.toXdr(stream);
  }
}

class SignerRuleResourceCustom extends SignerRuleResource {
  SignerRuleResourceCustom(this.custom) : super(LedgerEntryType(LedgerEntryType.CUSTOM));
  late CustomRuleResource custom;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    custom.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Describes properties of some reviewable request types that
//          //: can be used to restrict the usage of reviewable requests
//          ReviewableRequestResource details;
//
//          //: Bit mask of tasks that is allowed to add to reviewable request pending tasks
//          uint64 tasksToAdd;
//          //: Bit mask of tasks that is allowed to remove from reviewable request pending tasks
//          uint64 tasksToRemove;
//          //: Bit mask of tasks that is allowed to use as reviewable request pending tasks
//          uint64 allTasks;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceReviewableRequestReviewableRequest extends XdrEncodable  {
  ReviewableRequestResource details;
  UINT64 tasksToAdd;
  UINT64 tasksToRemove;
  UINT64 allTasks;
  EmptyExt ext;

  SignerRuleResourceReviewableRequestReviewableRequest(
      this.details,
      this.tasksToAdd,
      this.tasksToRemove,
      this.allTasks,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    details.toXdr(stream);
    tasksToAdd.toXdr(stream);
    tasksToRemove.toXdr(stream);
    allTasks.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          AssetCode assetCode;
//          uint64 assetType;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceAssetAsset extends XdrEncodable  {
  ASSETCODE assetCode;
  UINT64 assetType;
  EmptyExt ext;

  SignerRuleResourceAssetAsset(
      this.assetCode,
      this.assetType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: type of base asset
//          uint64 baseAssetType;
//          //: type of quote asset
//          uint64 quoteAssetType;
//
//          //: code of base asset
//          AssetCode baseAssetCode;
//          //: code of quote asset
//          AssetCode quoteAssetCode;
//
//          bool isBuy;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceOfferOffer extends XdrEncodable  {
  UINT64 baseAssetType;
  UINT64 quoteAssetType;
  ASSETCODE baseAssetCode;
  ASSETCODE quoteAssetCode;
  bool isBuy;
  EmptyExt ext;

  SignerRuleResourceOfferOffer(
      this.baseAssetType,
      this.quoteAssetType,
      this.baseAssetCode,
      this.quoteAssetCode,
      this.isBuy,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    baseAssetType.toXdr(stream);
    quoteAssetType.toXdr(stream);
    baseAssetCode.toXdr(stream);
    quoteAssetCode.toXdr(stream);
    isBuy.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          uint64 saleID;
//          uint64 saleType;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceSaleSale extends XdrEncodable  {
  UINT64 saleID;
  UINT64 saleType;
  EmptyExt ext;

  SignerRuleResourceSaleSale(
      this.saleID,
      this.saleType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    saleType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          uint64 assetType;
//          AssetCode assetCode;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceAtomicSwapAskAtomicSwapAsk extends XdrEncodable  {
  UINT64 assetType;
  ASSETCODE assetCode;
  EmptyExt ext;

  SignerRuleResourceAtomicSwapAskAtomicSwapAsk(
      this.assetType,
      this.assetCode,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    assetType.toXdr(stream);
    assetCode.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          bool isDefault;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceSignerRuleSignerRule extends XdrEncodable  {
  bool isDefault;
  EmptyExt ext;

  SignerRuleResourceSignerRuleSignerRule(
      this.isDefault,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    isDefault.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: For signer role creating resource will be triggered if `roleID` equals `0`
//          uint64 roleID;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceSignerRoleSignerRole extends XdrEncodable  {
  UINT64 roleID;
  EmptyExt ext;

  SignerRuleResourceSignerRoleSignerRole(
      this.roleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          uint64 roleID;
//
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceSignerSigner extends XdrEncodable  {
  UINT64 roleID;
  EmptyExt ext;

  SignerRuleResourceSignerSigner(
      this.roleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: prefix of key
//          longstring keyPrefix;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceKeyValueKeyValue extends XdrEncodable  {
  LONGSTRING keyPrefix;
  EmptyExt ext;

  SignerRuleResourceKeyValueKeyValue(
      this.keyPrefix,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    keyPrefix.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: ID of the poll
//          uint64 pollID;
//
//          //: permission type of poll
//          uint32 permissionType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourcePollPoll extends XdrEncodable  {
  UINT64 pollID;
  UINT32 permissionType;
  EmptyExt ext;

  SignerRuleResourcePollPoll(
      this.pollID,
      this.permissionType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    permissionType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: ID of the poll
//          uint64 pollID;
//
//          //: permission type of poll
//          uint32 permissionType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceVoteVote extends XdrEncodable  {
  UINT64 pollID;
  UINT32 permissionType;
  EmptyExt ext;

  SignerRuleResourceVoteVote(
      this.pollID,
      this.permissionType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    pollID.toXdr(stream);
    permissionType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Role id
//          uint64 roleID;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceInitiateKYCRecoveryInitiateKYCRecovery extends XdrEncodable  {
  UINT64 roleID;
  EmptyExt ext;

  SignerRuleResourceInitiateKYCRecoveryInitiateKYCRecovery(
      this.roleID,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    roleID.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class SignerRuleResourceAccountSpecificRuleExt extends XdrEncodable {
  LedgerVersion discriminant;
  SignerRuleResourceAccountSpecificRuleExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SignerRuleResourceAccountSpecificRuleExtEmptyVersion extends SignerRuleResourceAccountSpecificRuleExt {
  SignerRuleResourceAccountSpecificRuleExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class SignerRuleResourceAccountSpecificRuleExtAddAccSpecificRuleResource extends SignerRuleResourceAccountSpecificRuleExt {
  SignerRuleResourceAccountSpecificRuleExtAddAccSpecificRuleResource(this.accountSpecificRule) : super(LedgerVersion(LedgerVersion.ADD_ACC_SPECIFIC_RULE_RESOURCE));
  late SignerRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule accountSpecificRule;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountSpecificRule.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//          {
//              //: Describes properties of some ledger key that
//              //: can be used to restrict the usage of account specific rules
//              LedgerKey ledgerKey;
//
//              //: reserved for future extension
//              EmptyExt ext;
//          }

//  ===========================================================================
class SignerRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule extends XdrEncodable  {
  LedgerKey ledgerKey;
  EmptyExt ext;

  SignerRuleResourceAccountSpecificRuleExtAccountSpecificRuleAccountSpecificRule(
      this.ledgerKey,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    ledgerKey.toXdr(stream);
    ext.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct
//      {
//          //: code of the asset
//          AssetCode assetCode;
//          //: type of the asset
//          uint64 assetType;
//
//          //: reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceSwapSwap extends XdrEncodable  {
  ASSETCODE assetCode;
  UINT64 assetType;
  EmptyExt ext;

  SignerRuleResourceSwapSwap(
      this.assetCode,
      this.assetType,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    assetCode.toXdr(stream);
    assetType.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct
//      {
//          //: Numeric type of the data
//          uint64 type;
//          //: Reserved for future extension
//          EmptyExt ext;
//      }

//  ===========================================================================
class SignerRuleResourceDataData extends XdrEncodable  {
  UINT64 type;
  EmptyExt ext;

  SignerRuleResourceDataData(
      this.type,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    ext.toXdr(stream);
  }
}

class SignerRuleAction extends XdrEncodable {
  static const ANY = 1;
  static const CREATE = 2;
  static const CREATE_FOR_OTHER = 3;
  static const UPDATE = 4;
  static const MANAGE = 5;
  static const SEND = 6;
  static const REMOVE = 7;
  static const CANCEL = 8;
  static const REVIEW = 9;
  static const RECEIVE_ATOMIC_SWAP = 10;
  static const PARTICIPATE = 11;
  static const BIND = 12;
  static const UPDATE_MAX_ISSUANCE = 13;
  static const CHECK = 14;
  static const CLOSE = 15;
  static const UPDATE_END_TIME = 16;
  static const CREATE_WITH_TASKS = 17;
  static const CREATE_FOR_OTHER_WITH_TASKS = 18;
  static const REMOVE_FOR_OTHER = 19;
  static const EXCHANGE = 20;
  static const UPDATE_FOR_OTHER = 21;
  static const CUSTOM = 22;
  int value;
  SignerRuleAction(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Body of a reviewable AMLAlertRequest, contains parameters regarding AML alert
//  struct AMLAlertRequest {
//      //: Target balance to void tokens from
//      BalanceID balanceID;
//
//      //: Amount to void
//      uint64 amount;
//
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      //: Reserved for future use
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AMLAlertRequest extends XdrEncodable  {
  BALANCEID balanceID;
  UINT64 amount;
  LONGSTRING creatorDetails;
  AMLAlertRequestExt ext;

  AMLAlertRequest(
      this.balanceID,
      this.amount,
      this.creatorDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    balanceID.toXdr(stream);
    amount.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AMLAlertRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  AMLAlertRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AMLAlertRequestExtEmptyVersion extends AMLAlertRequestExt {
  AMLAlertRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: AssetCreationRequest is used to create an asset with provided parameters
//  struct AssetCreationRequest {
//      //: Code of an asset to create
//      AssetCode code;
//      //: Public key of a signer that will perform pre issuance
//      AccountID preissuedAssetSigner;
//      //: Maximal amount to be issued
//      uint64 maxIssuanceAmount;
//      //: Amount to pre issue on asset creation
//      uint64 initialPreissuedAmount;
//      //: Bit mask of policies to create an asset with
//      uint32 policies;
//      //: Arbitrary stringified JSON object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//       //: Type of asset, selected arbitrarily. Can be used to restrict the usage of an asset
//      uint64 type;
//      //: Used to keep track of rejected requests updates (`SequenceNumber` increases after each rejected AssetCreationRequest update)
//      uint32 sequenceNumber;
//      //: Number of significant decimal places
//      uint32 trailingDigitsCount;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AssetCreationRequest extends XdrEncodable  {
  ASSETCODE code;
  ACCOUNTID preissuedAssetSigner;
  UINT64 maxIssuanceAmount;
  UINT64 initialPreissuedAmount;
  UINT32 policies;
  LONGSTRING creatorDetails;
  UINT64 type;
  UINT32 sequenceNumber;
  UINT32 trailingDigitsCount;
  AssetCreationRequestExt ext;

  AssetCreationRequest(
      this.code,
      this.preissuedAssetSigner,
      this.maxIssuanceAmount,
      this.initialPreissuedAmount,
      this.policies,
      this.creatorDetails,
      this.type,
      this.sequenceNumber,
      this.trailingDigitsCount,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    code.toXdr(stream);
    preissuedAssetSigner.toXdr(stream);
    maxIssuanceAmount.toXdr(stream);
    initialPreissuedAmount.toXdr(stream);
    policies.toXdr(stream);
    creatorDetails.toXdr(stream);
    type.toXdr(stream);
    sequenceNumber.toXdr(stream);
    trailingDigitsCount.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AssetCreationRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  AssetCreationRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AssetCreationRequestExtEmptyVersion extends AssetCreationRequestExt {
  AssetCreationRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: AssetUpdateRequest is used to update an asset with provided parameters
//  struct AssetUpdateRequest {
//      //: Code of an asset to update
//      AssetCode code;
//      //: Arbitrary stringified JSON object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//      //: New policies to set will override the existing ones
//      uint32 policies;
//      //: Used to keep track of rejected requests update (`SequenceNumber` increases after each rejected AssetUpdateRequest update).
//      uint32 sequenceNumber;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AssetUpdateRequest extends XdrEncodable  {
  ASSETCODE code;
  LONGSTRING creatorDetails;
  UINT32 policies;
  UINT32 sequenceNumber;
  AssetUpdateRequestExt ext;

  AssetUpdateRequest(
      this.code,
      this.creatorDetails,
      this.policies,
      this.sequenceNumber,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    code.toXdr(stream);
    creatorDetails.toXdr(stream);
    policies.toXdr(stream);
    sequenceNumber.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AssetUpdateRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  AssetUpdateRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AssetUpdateRequestExtEmptyVersion extends AssetUpdateRequestExt {
  AssetUpdateRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: AssetChangePreissuedSigner is used to update a pre issued asset signer
//  struct AssetChangePreissuedSigner
//  {
//      //: code of an asset to update
//      AssetCode code;
//      //: Public key of a signer that will be the new pre issuer
//      AccountID accountID;
//      //: Content signature of a pre issuer signer
//      //: Content equals hash of `<code>:<accountID>`
//      DecoratedSignature signature;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class AssetChangePreissuedSigner extends XdrEncodable  {
  ASSETCODE code;
  ACCOUNTID accountID;
  DecoratedSignature signature;
  AssetChangePreissuedSignerExt ext;

  AssetChangePreissuedSigner(
      this.code,
      this.accountID,
      this.signature,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    code.toXdr(stream);
    accountID.toXdr(stream);
    signature.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class AssetChangePreissuedSignerExt extends XdrEncodable {
  LedgerVersion discriminant;
  AssetChangePreissuedSignerExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class AssetChangePreissuedSignerExtEmptyVersion extends AssetChangePreissuedSignerExt {
  AssetChangePreissuedSignerExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: CreateAtomicSwapAskRequest is used to create atomic swap ask entry with passed fields
//  struct CreateAtomicSwapAskRequest
//  {
//      //: ID of balance with base asset
//      BalanceID baseBalance;
//      //: Amount to be sold through atomic swaps
//      uint64 amount;
//      //: Arbitrary stringified json object provided by a requester
//      longstring creatorDetails; // details set by requester
//      //: Array of assets with price which can be used to ask base asset
//      AtomicSwapAskQuoteAsset quoteAssets<>;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAtomicSwapAskRequest extends XdrEncodable  {
  BALANCEID baseBalance;
  UINT64 amount;
  LONGSTRING creatorDetails;
  List<AtomicSwapAskQuoteAsset> quoteAssets;
  CreateAtomicSwapAskRequestExt ext;

  CreateAtomicSwapAskRequest(
      this.baseBalance,
      this.amount,
      this.creatorDetails,
      this.quoteAssets,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    baseBalance.toXdr(stream);
    amount.toXdr(stream);
    creatorDetails.toXdr(stream);
    quoteAssets.length.toXdr(stream);
    quoteAssets.forEach ((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}
abstract class CreateAtomicSwapAskRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateAtomicSwapAskRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAtomicSwapAskRequestExtEmptyVersion extends CreateAtomicSwapAskRequestExt {
  CreateAtomicSwapAskRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: CreateAtomicSwapBidRequest is used to create atomic swap bid request with passed fields
//  struct CreateAtomicSwapBidRequest
//  {
//      //: ID of existing bid
//      uint64 askID;
//      //: Amount in base asset to ask
//      uint64 baseAmount;
//      //: Code of asset which will be used to ask base asset
//      AssetCode quoteAsset;
//      //: Arbitrary stringified json object provided by a requester
//      longstring creatorDetails; // details set by requester
//
//      //: reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAtomicSwapBidRequest extends XdrEncodable  {
  UINT64 askID;
  UINT64 baseAmount;
  ASSETCODE quoteAsset;
  LONGSTRING creatorDetails;
  CreateAtomicSwapBidRequestExt ext;

  CreateAtomicSwapBidRequest(
      this.askID,
      this.baseAmount,
      this.quoteAsset,
      this.creatorDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    askID.toXdr(stream);
    baseAmount.toXdr(stream);
    quoteAsset.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateAtomicSwapBidRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateAtomicSwapBidRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAtomicSwapBidRequestExtEmptyVersion extends CreateAtomicSwapBidRequestExt {
  CreateAtomicSwapBidRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct ChangeRoleRequest
//  {
//  	AccountID destinationAccount;
//  	uint64 accountRoleToSet;
//
//  	// Sequence number increases when request is rejected
//  	uint32 sequenceNumber;
//
//      longstring creatorDetails; // details set by requester
//
//      // Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ChangeRoleRequest extends XdrEncodable  {
  ACCOUNTID destinationAccount;
  UINT64 accountRoleToSet;
  UINT32 sequenceNumber;
  LONGSTRING creatorDetails;
  ChangeRoleRequestExt ext;

  ChangeRoleRequest(
      this.destinationAccount,
      this.accountRoleToSet,
      this.sequenceNumber,
      this.creatorDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    destinationAccount.toXdr(stream);
    accountRoleToSet.toXdr(stream);
    sequenceNumber.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ChangeRoleRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  ChangeRoleRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ChangeRoleRequestExtEmptyVersion extends ChangeRoleRequestExt {
  ChangeRoleRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class CloseDeferredPaymentDestinationType extends XdrEncodable {
  static const ACCOUNT = 0;
  static const BALANCE = 1;
  int value;
  CloseDeferredPaymentDestinationType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct CloseDeferredPaymentRequest {
//      uint64 deferredPaymentID;
//
//      //: `destination` defines the type of instance that receives the payment based on given PaymentDestinationType
//      union switch (CloseDeferredPaymentDestinationType type) {
//          case ACCOUNT:
//              AccountID accountID;
//          case BALANCE:
//              BalanceID balanceID;
//      } destination;
//
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      uint64 amount;
//
//      uint32 sequenceNumber;
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class CloseDeferredPaymentRequest extends XdrEncodable  {
  UINT64 deferredPaymentID;
  CloseDeferredPaymentRequestDestination destination;
  LONGSTRING creatorDetails;
  UINT64 amount;
  UINT32 sequenceNumber;
  EmptyExt ext;

  CloseDeferredPaymentRequest(
      this.deferredPaymentID,
      this.destination,
      this.creatorDetails,
      this.amount,
      this.sequenceNumber,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    deferredPaymentID.toXdr(stream);
    destination.toXdr(stream);
    creatorDetails.toXdr(stream);
    amount.toXdr(stream);
    sequenceNumber.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CloseDeferredPaymentRequestDestination extends XdrEncodable {
  CloseDeferredPaymentDestinationType discriminant;
  CloseDeferredPaymentRequestDestination(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CloseDeferredPaymentRequestDestinationAccount extends CloseDeferredPaymentRequestDestination {
  CloseDeferredPaymentRequestDestinationAccount(this.accountID) : super(CloseDeferredPaymentDestinationType(CloseDeferredPaymentDestinationType.ACCOUNT));
  late ACCOUNTID accountID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    accountID.toXdr(stream);
  }
}

class CloseDeferredPaymentRequestDestinationBalance extends CloseDeferredPaymentRequestDestination {
  CloseDeferredPaymentRequestDestinationBalance(this.balanceID) : super(CloseDeferredPaymentDestinationType(CloseDeferredPaymentDestinationType.BALANCE));
  late BALANCEID balanceID;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    balanceID.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct ContractRequest
//  {
//      AccountID customer;
//      AccountID escrow;
//      longstring creatorDetails; // details set by requester
//
//      uint64 startTime;
//      uint64 endTime;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class ContractRequest extends XdrEncodable  {
  ACCOUNTID customer;
  ACCOUNTID escrow;
  LONGSTRING creatorDetails;
  UINT64 startTime;
  UINT64 endTime;
  ContractRequestExt ext;

  ContractRequest(
      this.customer,
      this.escrow,
      this.creatorDetails,
      this.startTime,
      this.endTime,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    customer.toXdr(stream);
    escrow.toXdr(stream);
    creatorDetails.toXdr(stream);
    startTime.toXdr(stream);
    endTime.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ContractRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  ContractRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ContractRequestExtEmptyVersion extends ContractRequestExt {
  ContractRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct DataCreationRequest {
//      //: Numeric type, used for access control
//      uint64 type;
//
//      // Sequence number increases when request is rejected
//  	uint32 sequenceNumber;
//
//      //: Owner of data to create
//      AccountID owner;
//
//      //: Value stored
//      longstring value;
//
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class DataCreationRequest extends XdrEncodable  {
  UINT64 type;
  UINT32 sequenceNumber;
  ACCOUNTID owner;
  LONGSTRING value;
  LONGSTRING creatorDetails;
  DataCreationRequestExt ext;

  DataCreationRequest(
      this.type,
      this.sequenceNumber,
      this.owner,
      this.value,
      this.creatorDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    type.toXdr(stream);
    sequenceNumber.toXdr(stream);
    owner.toXdr(stream);
    value.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class DataCreationRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  DataCreationRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class DataCreationRequestExtEmptyVersion extends DataCreationRequestExt {
  DataCreationRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct CreateDeferredPaymentRequest {
//      BalanceID sourceBalance;
//      AccountID destination;
//
//      uint64 amount;
//      uint32 sequenceNumber;
//
//      longstring creatorDetails; // details set by requester
//
//      EmptyExt ext;
//  };

//  ===========================================================================
class CreateDeferredPaymentRequest extends XdrEncodable  {
  BALANCEID sourceBalance;
  ACCOUNTID destination;
  UINT64 amount;
  UINT32 sequenceNumber;
  LONGSTRING creatorDetails;
  EmptyExt ext;

  CreateDeferredPaymentRequest(
      this.sourceBalance,
      this.destination,
      this.amount,
      this.sequenceNumber,
      this.creatorDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    sourceBalance.toXdr(stream);
    destination.toXdr(stream);
    amount.toXdr(stream);
    sequenceNumber.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
// === xdr source ============================================================

//  //: CreatePollRequest is used to create poll entry with passed fields
//  struct CreatePollRequest
//  {
//      //: is used to restrict using of poll through rules
//      uint32 permissionType;
//
//      //: Number of allowed choices
//      uint32 numberOfChoices;
//
//      //: Specification of poll
//      PollData data;
//
//      //: Arbitrary stringified json object with details about the poll
//      longstring creatorDetails; // details set by requester
//
//      //: The date from which voting in the poll will be allowed
//      uint64 startTime;
//
//      //: The date until which voting in the poll will be allowed
//      uint64 endTime;
//
//      //: ID of account which is responsible for poll result submitting
//      AccountID resultProviderID;
//
//      //: True means that signature of `resultProvider` is required to participate in poll voting
//      bool voteConfirmationRequired;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class CreatePollRequest extends XdrEncodable  {
  UINT32 permissionType;
  UINT32 numberOfChoices;
  PollData data;
  LONGSTRING creatorDetails;
  UINT64 startTime;
  UINT64 endTime;
  ACCOUNTID resultProviderID;
  bool voteConfirmationRequired;
  CreatePollRequestExt ext;

  CreatePollRequest(
      this.permissionType,
      this.numberOfChoices,
      this.data,
      this.creatorDetails,
      this.startTime,
      this.endTime,
      this.resultProviderID,
      this.voteConfirmationRequired,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    permissionType.toXdr(stream);
    numberOfChoices.toXdr(stream);
    data.toXdr(stream);
    creatorDetails.toXdr(stream);
    startTime.toXdr(stream);
    endTime.toXdr(stream);
    resultProviderID.toXdr(stream);
    voteConfirmationRequired.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreatePollRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreatePollRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreatePollRequestExtEmptyVersion extends CreatePollRequestExt {
  CreatePollRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct InvoiceRequest
//  {
//      AssetCode asset;
//      uint64 amount; // not allowed to set 0
//      BalanceID senderBalance;
//      BalanceID receiverBalance;
//
//      uint64 *contractID;
//      bool isApproved;
//      longstring creatorDetails; // details set by requester
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class InvoiceRequest extends XdrEncodable  {
  ASSETCODE asset;
  UINT64 amount;
  BALANCEID senderBalance;
  BALANCEID receiverBalance;
  UINT64? contractID;
  bool isApproved;
  LONGSTRING creatorDetails;
  InvoiceRequestExt ext;

  InvoiceRequest(
      this.asset,
      this.amount,
      this.senderBalance,
      this.receiverBalance,
      this.contractID,
      this.isApproved,
      this.creatorDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    asset.toXdr(stream);
    amount.toXdr(stream);
    senderBalance.toXdr(stream);
    receiverBalance.toXdr(stream);
    if (contractID != null) {
      true.toXdr(stream);
      contractID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    isApproved.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class InvoiceRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  InvoiceRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class InvoiceRequestExtEmptyVersion extends InvoiceRequestExt {
  InvoiceRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Is used to pass required values to perform pre issuance
//  struct PreIssuanceRequest
//  {
//      //: Code of an asset whose `available_for_issuance_amount` will increase
//      AssetCode asset;
//      //: Amount that will be added to current available for issuance amount
//      uint64 amount;
//      //: Pre issuer signer's signature of the `<reference>:<amount>:<asset>` hash
//      DecoratedSignature signature;
//      //: Unique string for such type of a reviewable request
//      string64 reference;
//      //: Arbitrary stringified json object provided by a requester
//      longstring creatorDetails; // details set by requester
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class PreIssuanceRequest extends XdrEncodable  {
  ASSETCODE asset;
  UINT64 amount;
  DecoratedSignature signature;
  STRING64 reference;
  LONGSTRING creatorDetails;
  PreIssuanceRequestExt ext;

  PreIssuanceRequest(
      this.asset,
      this.amount,
      this.signature,
      this.reference,
      this.creatorDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    asset.toXdr(stream);
    amount.toXdr(stream);
    signature.toXdr(stream);
    reference.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class PreIssuanceRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  PreIssuanceRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class PreIssuanceRequestExtEmptyVersion extends PreIssuanceRequestExt {
  PreIssuanceRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Body of reviewable `IssuanceRequest`, contains parameters regarding issuance
//  struct IssuanceRequest {
//      //: Code of an asset to issue
//  	AssetCode asset;
//     //: Amount to issue
//  	uint64 amount;
//      //: Balance to issue on
//  	BalanceID receiver;
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//  	longstring creatorDetails; // details of the issuance (External system id, etc.)
//      //: Total fee to pay, consists of fixed fee and percent fee, calculated automatically
//  	Fee fee; //totalFee to be payed (calculated automatically)
//  	//: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//    ext;
//  };

//  ===========================================================================
class IssuanceRequest extends XdrEncodable  {
  ASSETCODE asset;
  UINT64 amount;
  BALANCEID receiver;
  LONGSTRING creatorDetails;
  Fee fee;
  IssuanceRequestExt ext;

  IssuanceRequest(
      this.asset,
      this.amount,
      this.receiver,
      this.creatorDetails,
      this.fee,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    asset.toXdr(stream);
    amount.toXdr(stream);
    receiver.toXdr(stream);
    creatorDetails.toXdr(stream);
    fee.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class IssuanceRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  IssuanceRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class IssuanceRequestExtEmptyVersion extends IssuanceRequestExt {
  IssuanceRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: KYCRecoveryRequest is used to change signers of target account
//  struct KYCRecoveryRequest {
//      //: Account to be recovered
//      AccountID targetAccount;
//      //: New signers for the target account
//      UpdateSignerData signersData<>;
//
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//      //: Sequence number increases when request is rejected
//      uint32 sequenceNumber;
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class KYCRecoveryRequest extends XdrEncodable  {
  ACCOUNTID targetAccount;
  List<UpdateSignerData> signersData;
  LONGSTRING creatorDetails;
  UINT32 sequenceNumber;
  KYCRecoveryRequestExt ext;

  KYCRecoveryRequest(
      this.targetAccount,
      this.signersData,
      this.creatorDetails,
      this.sequenceNumber,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    targetAccount.toXdr(stream);
    signersData.length.toXdr(stream);
    signersData.forEach ((element) {
      element.toXdr(stream);
    });
    creatorDetails.toXdr(stream);
    sequenceNumber.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class KYCRecoveryRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  KYCRecoveryRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class KYCRecoveryRequestExtEmptyVersion extends KYCRecoveryRequestExt {
  KYCRecoveryRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: Body of reviewable `LimitsUpdateRequest` contains details regarding limit updates
//  struct LimitsUpdateRequest
//  {
//      //: Arbitrary stringified JSON object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class LimitsUpdateRequest extends XdrEncodable  {
  LONGSTRING creatorDetails;
  LimitsUpdateRequestExt ext;

  LimitsUpdateRequest(
      this.creatorDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class LimitsUpdateRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  LimitsUpdateRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class LimitsUpdateRequestExtEmptyVersion extends LimitsUpdateRequestExt {
  LimitsUpdateRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct ManageOfferRequest
//  {
//      ManageOfferOp op;
//
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      case MOVEMENT_REQUESTS_DETAILS:
//          longstring creatorDetails;
//      } ext;
//  };

//  ===========================================================================
class ManageOfferRequest extends XdrEncodable  {
  ManageOfferOp op;
  ManageOfferRequestExt ext;

  ManageOfferRequest(
      this.op,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    op.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class ManageOfferRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  ManageOfferRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class ManageOfferRequestExtEmptyVersion extends ManageOfferRequestExt {
  ManageOfferRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class ManageOfferRequestExtMovementRequestsDetails extends ManageOfferRequestExt {
  ManageOfferRequestExtMovementRequestsDetails(this.creatorDetails) : super(LedgerVersion(LedgerVersion.MOVEMENT_REQUESTS_DETAILS));
  late LONGSTRING creatorDetails;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    creatorDetails.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct CreatePaymentRequest
//  {
//      PaymentOp paymentOp;
//
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      case MOVEMENT_REQUESTS_DETAILS:
//          longstring creatorDetails;
//      } ext;
//  };

//  ===========================================================================
class CreatePaymentRequest extends XdrEncodable  {
  PaymentOp paymentOp;
  CreatePaymentRequestExt ext;

  CreatePaymentRequest(
      this.paymentOp,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    paymentOp.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreatePaymentRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreatePaymentRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreatePaymentRequestExtEmptyVersion extends CreatePaymentRequestExt {
  CreatePaymentRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class CreatePaymentRequestExtMovementRequestsDetails extends CreatePaymentRequestExt {
  CreatePaymentRequestExtMovementRequestsDetails(this.creatorDetails) : super(LedgerVersion(LedgerVersion.MOVEMENT_REQUESTS_DETAILS));
  late LONGSTRING creatorDetails;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    creatorDetails.toXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Body of a reviewable RedemptionRequest, contains parameters regarding AML alert
//  struct RedemptionRequest {
//      //: Balance to charge assets from. Balance must be in asset owned by requester.
//      BalanceID sourceBalanceID;
//      //: Account to transfer funds
//      AccountID destination;
//
//      //: Amount of redemption
//      uint64 amount;
//
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class RedemptionRequest extends XdrEncodable  {
  BALANCEID sourceBalanceID;
  ACCOUNTID destination;
  UINT64 amount;
  LONGSTRING creatorDetails;
  RedemptionRequestExt ext;

  RedemptionRequest(
      this.sourceBalanceID,
      this.destination,
      this.amount,
      this.creatorDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    sourceBalanceID.toXdr(stream);
    destination.toXdr(stream);
    amount.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class RedemptionRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  RedemptionRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class RedemptionRequestExtEmptyVersion extends RedemptionRequestExt {
  RedemptionRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct DataRemoveRequest {
//      //: Id of the data entry
//      uint64 id;
//
//      // Sequence number increases when request is rejected
//  	uint32 sequenceNumber;
//
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class DataRemoveRequest extends XdrEncodable  {
  UINT64 id;
  UINT32 sequenceNumber;
  LONGSTRING creatorDetails;
  DataRemoveRequestExt ext;

  DataRemoveRequest(
      this.id,
      this.sequenceNumber,
      this.creatorDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    sequenceNumber.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class DataRemoveRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  DataRemoveRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class DataRemoveRequestExtEmptyVersion extends DataRemoveRequestExt {
  DataRemoveRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: SaleCreationRequestQuoteAsset is a structure that contains an asset code with price
//  struct SaleCreationRequestQuoteAsset {
//      //: AssetCode of quote asset
//      AssetCode quoteAsset; // asset in which participation will be accepted
//      //: Price of sale base asset in relation to a quote asset
//      uint64 price; // price for 1 baseAsset in relation to a quote asset
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class SaleCreationRequestQuoteAsset extends XdrEncodable  {
  ASSETCODE quoteAsset;
  UINT64 price;
  SaleCreationRequestQuoteAssetExt ext;

  SaleCreationRequestQuoteAsset(
      this.quoteAsset,
      this.price,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    quoteAsset.toXdr(stream);
    price.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class SaleCreationRequestQuoteAssetExt extends XdrEncodable {
  LedgerVersion discriminant;
  SaleCreationRequestQuoteAssetExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SaleCreationRequestQuoteAssetExtEmptyVersion extends SaleCreationRequestQuoteAssetExt {
  SaleCreationRequestQuoteAssetExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: CreateAccountSaleRuleData is used to pass necessary params to create a new account sale rule
//  struct CreateAccountSaleRuleData
//  {
//      //: Certain account for which rule is applied, null means rule is global
//      AccountID* accountID;
//      //: True if such rule is deniable, otherwise allows
//      bool forbids;
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
class CreateAccountSaleRuleData extends XdrEncodable  {
  ACCOUNTID? accountID;
  bool forbids;
  CreateAccountSaleRuleDataExt ext;

  CreateAccountSaleRuleData(
      this.accountID,
      this.forbids,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    if (accountID != null) {
      true.toXdr(stream);
      accountID?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    forbids.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class CreateAccountSaleRuleDataExt extends XdrEncodable {
  LedgerVersion discriminant;
  CreateAccountSaleRuleDataExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class CreateAccountSaleRuleDataExtEmptyVersion extends CreateAccountSaleRuleDataExt {
  CreateAccountSaleRuleDataExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: SaleCreationRequest is used to create a sale with provided parameters
//  struct SaleCreationRequest
//  {
//      //: Some custom sale type that can be used while setting account rules
//      uint64 saleType;
//      //: Asset code of an asset to sell on sale
//      AssetCode baseAsset; // asset for which sale will be performed
//      //: Asset code of an asset used to calculcate soft cap and hard cap
//      AssetCode defaultQuoteAsset; // asset for soft and hard cap
//      //: Time when the sale should start
//      uint64 startTime; // start time of the sale
//      //: Time when the sale should end
//      uint64 endTime; // close time of the sale
//      //: Minimal amount (in default quote asset) that has to be sold on sale for it to be considered successful
//      uint64 softCap; // minimum amount of quote asset to be received at which sale will be considered a successful
//      //: Maximal amount (in default quote asset) to be received during the sale. Sale closes immediately after reaching the hard cap
//      uint64 hardCap; // max amount of quote asset to be received
//      //: Arbitrary stringified JSON object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//      //: Parameters specific to a particular sale type
//      SaleTypeExt saleTypeExt;
//      //:
//      uint64 requiredBaseAssetForHardCap;
//      //: Used to keep track of rejected requests updates. `SequenceNumber` increases after each rejected SaleCreationRequest update.
//      uint32 sequenceNumber;
//      //: Array of quote assets that are available for participation
//      SaleCreationRequestQuoteAsset quoteAssets<100>;
//      //: Use `EMPTY_VERSION` to allow anyone participate in sale,
//      //: use `ADD_SALE_WHITELISTS` to specify sale participation rules
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      case ADD_SALE_WHITELISTS:
//          //: array of rules that define participation rules. One global rule must be specified.
//          CreateAccountSaleRuleData saleRules<>;
//      }
//      ext;
//  };

//  ===========================================================================
class SaleCreationRequest extends XdrEncodable  {
  UINT64 saleType;
  ASSETCODE baseAsset;
  ASSETCODE defaultQuoteAsset;
  UINT64 startTime;
  UINT64 endTime;
  UINT64 softCap;
  UINT64 hardCap;
  LONGSTRING creatorDetails;
  SaleTypeExt saleTypeExt;
  UINT64 requiredBaseAssetForHardCap;
  UINT32 sequenceNumber;
  List<SaleCreationRequestQuoteAsset> quoteAssets;
  SaleCreationRequestExt ext;

  SaleCreationRequest(
      this.saleType,
      this.baseAsset,
      this.defaultQuoteAsset,
      this.startTime,
      this.endTime,
      this.softCap,
      this.hardCap,
      this.creatorDetails,
      this.saleTypeExt,
      this.requiredBaseAssetForHardCap,
      this.sequenceNumber,
      this.quoteAssets,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    saleType.toXdr(stream);
    baseAsset.toXdr(stream);
    defaultQuoteAsset.toXdr(stream);
    startTime.toXdr(stream);
    endTime.toXdr(stream);
    softCap.toXdr(stream);
    hardCap.toXdr(stream);
    creatorDetails.toXdr(stream);
    saleTypeExt.toXdr(stream);
    requiredBaseAssetForHardCap.toXdr(stream);
    sequenceNumber.toXdr(stream);
    quoteAssets.length.toXdr(stream);
    quoteAssets.forEach ((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}
abstract class SaleCreationRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  SaleCreationRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class SaleCreationRequestExtEmptyVersion extends SaleCreationRequestExt {
  SaleCreationRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

class SaleCreationRequestExtAddSaleWhitelists extends SaleCreationRequestExt {
  SaleCreationRequestExtAddSaleWhitelists(this.saleRules) : super(LedgerVersion(LedgerVersion.ADD_SALE_WHITELISTS));
  late List<CreateAccountSaleRuleData> saleRules;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    saleRules.length.toXdr(stream);
    saleRules.forEach ((element) {
      element.toXdr(stream);
    });
  }
}
// === xdr source ============================================================

//  struct DataUpdateRequest {
//      //: Id of the data entry
//      uint64 id;
//
//      // Sequence number increases when request is rejected
//  	uint32 sequenceNumber;
//
//      //: Value stored
//      longstring value;
//
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class DataUpdateRequest extends XdrEncodable  {
  UINT64 id;
  UINT32 sequenceNumber;
  LONGSTRING value;
  LONGSTRING creatorDetails;
  DataUpdateRequestExt ext;

  DataUpdateRequest(
      this.id,
      this.sequenceNumber,
      this.value,
      this.creatorDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    id.toXdr(stream);
    sequenceNumber.toXdr(stream);
    value.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class DataUpdateRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  DataUpdateRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class DataUpdateRequestExtEmptyVersion extends DataUpdateRequestExt {
  DataUpdateRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: UpdateSaleDetailsRequest is used to update details of an existing sale
//  struct UpdateSaleDetailsRequest {
//      //: ID of the sale whose details should be updated
//      uint64 saleID; // ID of sale to update details
//      //: Arbitrary stringified JSON object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//      //: Used to keep track of rejected requests update.  `SequenceNumber increases` after each rejected UpdateSaleDetailsRequest update
//      uint32 sequenceNumber;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class UpdateSaleDetailsRequest extends XdrEncodable  {
  UINT64 saleID;
  LONGSTRING creatorDetails;
  UINT32 sequenceNumber;
  UpdateSaleDetailsRequestExt ext;

  UpdateSaleDetailsRequest(
      this.saleID,
      this.creatorDetails,
      this.sequenceNumber,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    saleID.toXdr(stream);
    creatorDetails.toXdr(stream);
    sequenceNumber.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class UpdateSaleDetailsRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  UpdateSaleDetailsRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class UpdateSaleDetailsRequestExtEmptyVersion extends UpdateSaleDetailsRequestExt {
  UpdateSaleDetailsRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: WithdrawalRequest contains details regarding a withdraw
//  struct WithdrawalRequest {
//      //: Balance to withdraw from
//      BalanceID balance; // balance id from which withdrawal will be performed
//      //: Amount to withdraw
//      uint64 amount; // amount to be withdrawn
//      //: Amount in stats quote asset
//      uint64 universalAmount; // amount in stats asset
//      //: Total fee to pay, contains fixed amount and calculated percent of the withdrawn amount
//      Fee fee; // expected fee to be paid
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class WithdrawalRequest extends XdrEncodable  {
  BALANCEID balance;
  UINT64 amount;
  UINT64 universalAmount;
  Fee fee;
  LONGSTRING creatorDetails;
  WithdrawalRequestExt ext;

  WithdrawalRequest(
      this.balance,
      this.amount,
      this.universalAmount,
      this.fee,
      this.creatorDetails,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    balance.toXdr(stream);
    amount.toXdr(stream);
    universalAmount.toXdr(stream);
    fee.toXdr(stream);
    creatorDetails.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class WithdrawalRequestExt extends XdrEncodable {
  LedgerVersion discriminant;
  WithdrawalRequestExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class WithdrawalRequestExtEmptyVersion extends WithdrawalRequestExt {
  WithdrawalRequestExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  //: An operation is the lowest unit of work that a transaction does
//  struct Operation
//  {
//      //: sourceAccount is the account used to run the operation
//      //: if not set, the runtime defaults to "sourceAccount" specified at
//      //: the transaction level
//      AccountID* sourceAccount;
//
//      union switch (OperationType type)
//      {
//      case CREATE_ACCOUNT:
//          CreateAccountOp createAccountOp;
//  	case CREATE_ISSUANCE_REQUEST:
//  		CreateIssuanceRequestOp createIssuanceRequestOp;
//      case SET_FEES:
//          SetFeesOp setFeesOp;
//  	case CREATE_WITHDRAWAL_REQUEST:
//  		CreateWithdrawalRequestOp createWithdrawalRequestOp;
//  	case MANAGE_BALANCE:
//  		ManageBalanceOp manageBalanceOp;
//      case MANAGE_ASSET:
//          ManageAssetOp manageAssetOp;
//      case CREATE_PREISSUANCE_REQUEST:
//          CreatePreIssuanceRequestOp createPreIssuanceRequest;
//      case MANAGE_LIMITS:
//          ManageLimitsOp manageLimitsOp;
//  	case MANAGE_ASSET_PAIR:
//  		ManageAssetPairOp manageAssetPairOp;
//  	case MANAGE_OFFER:
//  		ManageOfferOp manageOfferOp;
//      case MANAGE_INVOICE_REQUEST:
//          ManageInvoiceRequestOp manageInvoiceRequestOp;
//  	case REVIEW_REQUEST:
//  		ReviewRequestOp reviewRequestOp;
//  	case CREATE_SALE_REQUEST:
//  		CreateSaleCreationRequestOp createSaleCreationRequestOp;
//  	case CHECK_SALE_STATE:
//  		CheckSaleStateOp checkSaleStateOp;
//  	case PAYOUT:
//  	    PayoutOp payoutOp;
//  	case CREATE_AML_ALERT:
//  	    CreateAMLAlertRequestOp createAMLAlertRequestOp;
//  	case MANAGE_KEY_VALUE:
//  	    ManageKeyValueOp manageKeyValueOp;
//  	case CREATE_CHANGE_ROLE_REQUEST:
//  		CreateChangeRoleRequestOp createChangeRoleRequestOp;
//      case MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY:
//          ManageExternalSystemAccountIdPoolEntryOp manageExternalSystemAccountIdPoolEntryOp;
//      case BIND_EXTERNAL_SYSTEM_ACCOUNT_ID:
//          BindExternalSystemAccountIdOp bindExternalSystemAccountIdOp;
//      case PAYMENT:
//          PaymentOp paymentOp;
//      case MANAGE_SALE:
//          ManageSaleOp manageSaleOp;
//      case CREATE_MANAGE_LIMITS_REQUEST:
//          CreateManageLimitsRequestOp createManageLimitsRequestOp;
//      case MANAGE_CONTRACT_REQUEST:
//          ManageContractRequestOp manageContractRequestOp;
//      case MANAGE_CONTRACT:
//          ManageContractOp manageContractOp;
//      case CANCEL_SALE_REQUEST:
//          CancelSaleCreationRequestOp cancelSaleCreationRequestOp;
//      case CREATE_ATOMIC_SWAP_ASK_REQUEST:
//          CreateAtomicSwapAskRequestOp createAtomicSwapAskRequestOp;
//      case CANCEL_ATOMIC_SWAP_ASK:
//          CancelAtomicSwapAskOp cancelAtomicSwapAskOp;
//      case CREATE_ATOMIC_SWAP_BID_REQUEST:
//          CreateAtomicSwapBidRequestOp createAtomicSwapBidRequestOp;
//      case MANAGE_ACCOUNT_ROLE:
//          ManageAccountRoleOp manageAccountRoleOp;
//      case MANAGE_ACCOUNT_RULE:
//          ManageAccountRuleOp manageAccountRuleOp;
//      case MANAGE_SIGNER:
//          ManageSignerOp manageSignerOp;
//      case MANAGE_SIGNER_ROLE:
//          ManageSignerRoleOp manageSignerRoleOp;
//      case MANAGE_SIGNER_RULE:
//          ManageSignerRuleOp manageSignerRuleOp;
//      case STAMP:
//          StampOp stampOp;
//      case LICENSE:
//          LicenseOp licenseOp;
//      case MANAGE_CREATE_POLL_REQUEST:
//          ManageCreatePollRequestOp manageCreatePollRequestOp;
//      case MANAGE_POLL:
//          ManagePollOp managePollOp;
//      case MANAGE_VOTE:
//          ManageVoteOp manageVoteOp;
//      case MANAGE_ACCOUNT_SPECIFIC_RULE:
//          ManageAccountSpecificRuleOp manageAccountSpecificRuleOp;
//      case CANCEL_CHANGE_ROLE_REQUEST:
//          CancelChangeRoleRequestOp cancelChangeRoleRequestOp;
//      case REMOVE_ASSET_PAIR:
//          RemoveAssetPairOp removeAssetPairOp;
//      case INITIATE_KYC_RECOVERY:
//          InitiateKYCRecoveryOp initiateKYCRecoveryOp;
//      case CREATE_KYC_RECOVERY_REQUEST:
//          CreateKYCRecoveryRequestOp createKYCRecoveryRequestOp;
//      case CREATE_MANAGE_OFFER_REQUEST:
//          CreateManageOfferRequestOp createManageOfferRequestOp;
//      case CREATE_PAYMENT_REQUEST:
//          CreatePaymentRequestOp createPaymentRequestOp;
//      case REMOVE_ASSET:
//          RemoveAssetOp removeAssetOp;
//      case OPEN_SWAP:
//          OpenSwapOp openSwapOp;
//      case CLOSE_SWAP:
//          CloseSwapOp closeSwapOp;
//      case CREATE_REDEMPTION_REQUEST:
//          CreateRedemptionRequestOp createRedemptionRequestOp;
//      case CREATE_DATA:
//          CreateDataOp createDataOp;
//      case UPDATE_DATA:
//          UpdateDataOp updateDataOp;
//      case REMOVE_DATA:
//          RemoveDataOp removeDataOp;
//      case CREATE_DATA_CREATION_REQUEST:
//          CreateDataCreationRequestOp createDataCreationRequestOp;
//      case CANCEL_DATA_CREATION_REQUEST:
//          CancelDataCreationRequestOp cancelDataCreationRequestOp;
//      case CREATE_DATA_UPDATE_REQUEST:
//          CreateDataUpdateRequestOp createDataUpdateRequestOp;
//      case CREATE_DATA_REMOVE_REQUEST:
//          CreateDataRemoveRequestOp createDataRemoveRequestOp;
//      case CANCEL_DATA_UPDATE_REQUEST:
//          CancelDataUpdateRequestOp cancelDataUpdateRequestOp;
//      case CANCEL_DATA_REMOVE_REQUEST:
//          CancelDataRemoveRequestOp cancelDataRemoveRequestOp;
//      case CREATE_DEFERRED_PAYMENT_CREATION_REQUEST:
//          CreateDeferredPaymentCreationRequestOp createDeferredPaymentCreationRequestOp;
//      case CANCEL_DEFERRED_PAYMENT_CREATION_REQUEST:
//          CancelDeferredPaymentCreationRequestOp cancelDeferredPaymentCreationRequestOp;
//      case CREATE_CLOSE_DEFERRED_PAYMENT_REQUEST:
//          CreateCloseDeferredPaymentRequestOp createCloseDeferredPaymentRequestOp;
//      case CANCEL_CLOSE_DEFERRED_PAYMENT_REQUEST:
//          CancelCloseDeferredPaymentRequestOp cancelCloseDeferredPaymentRequestOp;
//
//      }
//
//      body;
//  };

//  ===========================================================================
class Operation extends XdrEncodable  {
  ACCOUNTID? sourceAccount;
  OperationBody body;

  Operation(
      this.sourceAccount,
      this.body,
      );

  @override toXdr(XdrDataOutputStream stream) {
    if (sourceAccount != null) {
      true.toXdr(stream);
      sourceAccount?.toXdr(stream);
    } else {
      false.toXdr(stream);
    }
    body.toXdr(stream);
  }
}
abstract class OperationBody extends XdrEncodable {
  OperationType discriminant;
  OperationBody(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class OperationBodyCreateAccount extends OperationBody {
  OperationBodyCreateAccount(this.createAccountOp) : super(OperationType(OperationType.CREATE_ACCOUNT));
  late CreateAccountOp createAccountOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAccountOp.toXdr(stream);
  }
}

class OperationBodyCreateIssuanceRequest extends OperationBody {
  OperationBodyCreateIssuanceRequest(this.createIssuanceRequestOp) : super(OperationType(OperationType.CREATE_ISSUANCE_REQUEST));
  late CreateIssuanceRequestOp createIssuanceRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createIssuanceRequestOp.toXdr(stream);
  }
}

class OperationBodySetFees extends OperationBody {
  OperationBodySetFees(this.setFeesOp) : super(OperationType(OperationType.SET_FEES));
  late SetFeesOp setFeesOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    setFeesOp.toXdr(stream);
  }
}

class OperationBodyCreateWithdrawalRequest extends OperationBody {
  OperationBodyCreateWithdrawalRequest(this.createWithdrawalRequestOp) : super(OperationType(OperationType.CREATE_WITHDRAWAL_REQUEST));
  late CreateWithdrawalRequestOp createWithdrawalRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createWithdrawalRequestOp.toXdr(stream);
  }
}

class OperationBodyManageBalance extends OperationBody {
  OperationBodyManageBalance(this.manageBalanceOp) : super(OperationType(OperationType.MANAGE_BALANCE));
  late ManageBalanceOp manageBalanceOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageBalanceOp.toXdr(stream);
  }
}

class OperationBodyManageAsset extends OperationBody {
  OperationBodyManageAsset(this.manageAssetOp) : super(OperationType(OperationType.MANAGE_ASSET));
  late ManageAssetOp manageAssetOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAssetOp.toXdr(stream);
  }
}

class OperationBodyCreatePreissuanceRequest extends OperationBody {
  OperationBodyCreatePreissuanceRequest(this.createPreIssuanceRequest) : super(OperationType(OperationType.CREATE_PREISSUANCE_REQUEST));
  late CreatePreIssuanceRequestOp createPreIssuanceRequest;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPreIssuanceRequest.toXdr(stream);
  }
}

class OperationBodyManageLimits extends OperationBody {
  OperationBodyManageLimits(this.manageLimitsOp) : super(OperationType(OperationType.MANAGE_LIMITS));
  late ManageLimitsOp manageLimitsOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageLimitsOp.toXdr(stream);
  }
}

class OperationBodyManageAssetPair extends OperationBody {
  OperationBodyManageAssetPair(this.manageAssetPairOp) : super(OperationType(OperationType.MANAGE_ASSET_PAIR));
  late ManageAssetPairOp manageAssetPairOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAssetPairOp.toXdr(stream);
  }
}

class OperationBodyManageOffer extends OperationBody {
  OperationBodyManageOffer(this.manageOfferOp) : super(OperationType(OperationType.MANAGE_OFFER));
  late ManageOfferOp manageOfferOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageOfferOp.toXdr(stream);
  }
}

class OperationBodyManageInvoiceRequest extends OperationBody {
  OperationBodyManageInvoiceRequest(this.manageInvoiceRequestOp) : super(OperationType(OperationType.MANAGE_INVOICE_REQUEST));
  late ManageInvoiceRequestOp manageInvoiceRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageInvoiceRequestOp.toXdr(stream);
  }
}

class OperationBodyReviewRequest extends OperationBody {
  OperationBodyReviewRequest(this.reviewRequestOp) : super(OperationType(OperationType.REVIEW_REQUEST));
  late ReviewRequestOp reviewRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reviewRequestOp.toXdr(stream);
  }
}

class OperationBodyCreateSaleRequest extends OperationBody {
  OperationBodyCreateSaleRequest(this.createSaleCreationRequestOp) : super(OperationType(OperationType.CREATE_SALE_REQUEST));
  late CreateSaleCreationRequestOp createSaleCreationRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createSaleCreationRequestOp.toXdr(stream);
  }
}

class OperationBodyCheckSaleState extends OperationBody {
  OperationBodyCheckSaleState(this.checkSaleStateOp) : super(OperationType(OperationType.CHECK_SALE_STATE));
  late CheckSaleStateOp checkSaleStateOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    checkSaleStateOp.toXdr(stream);
  }
}

class OperationBodyPayout extends OperationBody {
  OperationBodyPayout(this.payoutOp) : super(OperationType(OperationType.PAYOUT));
  late PayoutOp payoutOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    payoutOp.toXdr(stream);
  }
}

class OperationBodyCreateAmlAlert extends OperationBody {
  OperationBodyCreateAmlAlert(this.createAMLAlertRequestOp) : super(OperationType(OperationType.CREATE_AML_ALERT));
  late CreateAMLAlertRequestOp createAMLAlertRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAMLAlertRequestOp.toXdr(stream);
  }
}

class OperationBodyManageKeyValue extends OperationBody {
  OperationBodyManageKeyValue(this.manageKeyValueOp) : super(OperationType(OperationType.MANAGE_KEY_VALUE));
  late ManageKeyValueOp manageKeyValueOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageKeyValueOp.toXdr(stream);
  }
}

class OperationBodyCreateChangeRoleRequest extends OperationBody {
  OperationBodyCreateChangeRoleRequest(this.createChangeRoleRequestOp) : super(OperationType(OperationType.CREATE_CHANGE_ROLE_REQUEST));
  late CreateChangeRoleRequestOp createChangeRoleRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createChangeRoleRequestOp.toXdr(stream);
  }
}

class OperationBodyManageExternalSystemAccountIdPoolEntry extends OperationBody {
  OperationBodyManageExternalSystemAccountIdPoolEntry(this.manageExternalSystemAccountIdPoolEntryOp) : super(OperationType(OperationType.MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY));
  late ManageExternalSystemAccountIdPoolEntryOp manageExternalSystemAccountIdPoolEntryOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageExternalSystemAccountIdPoolEntryOp.toXdr(stream);
  }
}

class OperationBodyBindExternalSystemAccountId extends OperationBody {
  OperationBodyBindExternalSystemAccountId(this.bindExternalSystemAccountIdOp) : super(OperationType(OperationType.BIND_EXTERNAL_SYSTEM_ACCOUNT_ID));
  late BindExternalSystemAccountIdOp bindExternalSystemAccountIdOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    bindExternalSystemAccountIdOp.toXdr(stream);
  }
}

class OperationBodyPayment extends OperationBody {
  OperationBodyPayment(this.paymentOp) : super(OperationType(OperationType.PAYMENT));
  late PaymentOp paymentOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    paymentOp.toXdr(stream);
  }
}

class OperationBodyManageSale extends OperationBody {
  OperationBodyManageSale(this.manageSaleOp) : super(OperationType(OperationType.MANAGE_SALE));
  late ManageSaleOp manageSaleOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSaleOp.toXdr(stream);
  }
}

class OperationBodyCreateManageLimitsRequest extends OperationBody {
  OperationBodyCreateManageLimitsRequest(this.createManageLimitsRequestOp) : super(OperationType(OperationType.CREATE_MANAGE_LIMITS_REQUEST));
  late CreateManageLimitsRequestOp createManageLimitsRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createManageLimitsRequestOp.toXdr(stream);
  }
}

class OperationBodyManageContractRequest extends OperationBody {
  OperationBodyManageContractRequest(this.manageContractRequestOp) : super(OperationType(OperationType.MANAGE_CONTRACT_REQUEST));
  late ManageContractRequestOp manageContractRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageContractRequestOp.toXdr(stream);
  }
}

class OperationBodyManageContract extends OperationBody {
  OperationBodyManageContract(this.manageContractOp) : super(OperationType(OperationType.MANAGE_CONTRACT));
  late ManageContractOp manageContractOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageContractOp.toXdr(stream);
  }
}

class OperationBodyCancelSaleRequest extends OperationBody {
  OperationBodyCancelSaleRequest(this.cancelSaleCreationRequestOp) : super(OperationType(OperationType.CANCEL_SALE_REQUEST));
  late CancelSaleCreationRequestOp cancelSaleCreationRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelSaleCreationRequestOp.toXdr(stream);
  }
}

class OperationBodyCreateAtomicSwapAskRequest extends OperationBody {
  OperationBodyCreateAtomicSwapAskRequest(this.createAtomicSwapAskRequestOp) : super(OperationType(OperationType.CREATE_ATOMIC_SWAP_ASK_REQUEST));
  late CreateAtomicSwapAskRequestOp createAtomicSwapAskRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapAskRequestOp.toXdr(stream);
  }
}

class OperationBodyCancelAtomicSwapAsk extends OperationBody {
  OperationBodyCancelAtomicSwapAsk(this.cancelAtomicSwapAskOp) : super(OperationType(OperationType.CANCEL_ATOMIC_SWAP_ASK));
  late CancelAtomicSwapAskOp cancelAtomicSwapAskOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelAtomicSwapAskOp.toXdr(stream);
  }
}

class OperationBodyCreateAtomicSwapBidRequest extends OperationBody {
  OperationBodyCreateAtomicSwapBidRequest(this.createAtomicSwapBidRequestOp) : super(OperationType(OperationType.CREATE_ATOMIC_SWAP_BID_REQUEST));
  late CreateAtomicSwapBidRequestOp createAtomicSwapBidRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapBidRequestOp.toXdr(stream);
  }
}

class OperationBodyManageAccountRole extends OperationBody {
  OperationBodyManageAccountRole(this.manageAccountRoleOp) : super(OperationType(OperationType.MANAGE_ACCOUNT_ROLE));
  late ManageAccountRoleOp manageAccountRoleOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAccountRoleOp.toXdr(stream);
  }
}

class OperationBodyManageAccountRule extends OperationBody {
  OperationBodyManageAccountRule(this.manageAccountRuleOp) : super(OperationType(OperationType.MANAGE_ACCOUNT_RULE));
  late ManageAccountRuleOp manageAccountRuleOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAccountRuleOp.toXdr(stream);
  }
}

class OperationBodyManageSigner extends OperationBody {
  OperationBodyManageSigner(this.manageSignerOp) : super(OperationType(OperationType.MANAGE_SIGNER));
  late ManageSignerOp manageSignerOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSignerOp.toXdr(stream);
  }
}

class OperationBodyManageSignerRole extends OperationBody {
  OperationBodyManageSignerRole(this.manageSignerRoleOp) : super(OperationType(OperationType.MANAGE_SIGNER_ROLE));
  late ManageSignerRoleOp manageSignerRoleOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSignerRoleOp.toXdr(stream);
  }
}

class OperationBodyManageSignerRule extends OperationBody {
  OperationBodyManageSignerRule(this.manageSignerRuleOp) : super(OperationType(OperationType.MANAGE_SIGNER_RULE));
  late ManageSignerRuleOp manageSignerRuleOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSignerRuleOp.toXdr(stream);
  }
}

class OperationBodyStamp extends OperationBody {
  OperationBodyStamp(this.stampOp) : super(OperationType(OperationType.STAMP));
  late StampOp stampOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    stampOp.toXdr(stream);
  }
}

class OperationBodyLicense extends OperationBody {
  OperationBodyLicense(this.licenseOp) : super(OperationType(OperationType.LICENSE));
  late LicenseOp licenseOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    licenseOp.toXdr(stream);
  }
}

class OperationBodyManageCreatePollRequest extends OperationBody {
  OperationBodyManageCreatePollRequest(this.manageCreatePollRequestOp) : super(OperationType(OperationType.MANAGE_CREATE_POLL_REQUEST));
  late ManageCreatePollRequestOp manageCreatePollRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageCreatePollRequestOp.toXdr(stream);
  }
}

class OperationBodyManagePoll extends OperationBody {
  OperationBodyManagePoll(this.managePollOp) : super(OperationType(OperationType.MANAGE_POLL));
  late ManagePollOp managePollOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    managePollOp.toXdr(stream);
  }
}

class OperationBodyManageVote extends OperationBody {
  OperationBodyManageVote(this.manageVoteOp) : super(OperationType(OperationType.MANAGE_VOTE));
  late ManageVoteOp manageVoteOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageVoteOp.toXdr(stream);
  }
}

class OperationBodyManageAccountSpecificRule extends OperationBody {
  OperationBodyManageAccountSpecificRule(this.manageAccountSpecificRuleOp) : super(OperationType(OperationType.MANAGE_ACCOUNT_SPECIFIC_RULE));
  late ManageAccountSpecificRuleOp manageAccountSpecificRuleOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAccountSpecificRuleOp.toXdr(stream);
  }
}

class OperationBodyCancelChangeRoleRequest extends OperationBody {
  OperationBodyCancelChangeRoleRequest(this.cancelChangeRoleRequestOp) : super(OperationType(OperationType.CANCEL_CHANGE_ROLE_REQUEST));
  late CancelChangeRoleRequestOp cancelChangeRoleRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelChangeRoleRequestOp.toXdr(stream);
  }
}

class OperationBodyRemoveAssetPair extends OperationBody {
  OperationBodyRemoveAssetPair(this.removeAssetPairOp) : super(OperationType(OperationType.REMOVE_ASSET_PAIR));
  late RemoveAssetPairOp removeAssetPairOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeAssetPairOp.toXdr(stream);
  }
}

class OperationBodyInitiateKycRecovery extends OperationBody {
  OperationBodyInitiateKycRecovery(this.initiateKYCRecoveryOp) : super(OperationType(OperationType.INITIATE_KYC_RECOVERY));
  late InitiateKYCRecoveryOp initiateKYCRecoveryOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    initiateKYCRecoveryOp.toXdr(stream);
  }
}

class OperationBodyCreateKycRecoveryRequest extends OperationBody {
  OperationBodyCreateKycRecoveryRequest(this.createKYCRecoveryRequestOp) : super(OperationType(OperationType.CREATE_KYC_RECOVERY_REQUEST));
  late CreateKYCRecoveryRequestOp createKYCRecoveryRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createKYCRecoveryRequestOp.toXdr(stream);
  }
}

class OperationBodyCreateManageOfferRequest extends OperationBody {
  OperationBodyCreateManageOfferRequest(this.createManageOfferRequestOp) : super(OperationType(OperationType.CREATE_MANAGE_OFFER_REQUEST));
  late CreateManageOfferRequestOp createManageOfferRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createManageOfferRequestOp.toXdr(stream);
  }
}

class OperationBodyCreatePaymentRequest extends OperationBody {
  OperationBodyCreatePaymentRequest(this.createPaymentRequestOp) : super(OperationType(OperationType.CREATE_PAYMENT_REQUEST));
  late CreatePaymentRequestOp createPaymentRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPaymentRequestOp.toXdr(stream);
  }
}

class OperationBodyRemoveAsset extends OperationBody {
  OperationBodyRemoveAsset(this.removeAssetOp) : super(OperationType(OperationType.REMOVE_ASSET));
  late RemoveAssetOp removeAssetOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeAssetOp.toXdr(stream);
  }
}

class OperationBodyOpenSwap extends OperationBody {
  OperationBodyOpenSwap(this.openSwapOp) : super(OperationType(OperationType.OPEN_SWAP));
  late OpenSwapOp openSwapOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    openSwapOp.toXdr(stream);
  }
}

class OperationBodyCloseSwap extends OperationBody {
  OperationBodyCloseSwap(this.closeSwapOp) : super(OperationType(OperationType.CLOSE_SWAP));
  late CloseSwapOp closeSwapOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    closeSwapOp.toXdr(stream);
  }
}

class OperationBodyCreateRedemptionRequest extends OperationBody {
  OperationBodyCreateRedemptionRequest(this.createRedemptionRequestOp) : super(OperationType(OperationType.CREATE_REDEMPTION_REQUEST));
  late CreateRedemptionRequestOp createRedemptionRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createRedemptionRequestOp.toXdr(stream);
  }
}

class OperationBodyCreateData extends OperationBody {
  OperationBodyCreateData(this.createDataOp) : super(OperationType(OperationType.CREATE_DATA));
  late CreateDataOp createDataOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataOp.toXdr(stream);
  }
}

class OperationBodyUpdateData extends OperationBody {
  OperationBodyUpdateData(this.updateDataOp) : super(OperationType(OperationType.UPDATE_DATA));
  late UpdateDataOp updateDataOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateDataOp.toXdr(stream);
  }
}

class OperationBodyRemoveData extends OperationBody {
  OperationBodyRemoveData(this.removeDataOp) : super(OperationType(OperationType.REMOVE_DATA));
  late RemoveDataOp removeDataOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeDataOp.toXdr(stream);
  }
}

class OperationBodyCreateDataCreationRequest extends OperationBody {
  OperationBodyCreateDataCreationRequest(this.createDataCreationRequestOp) : super(OperationType(OperationType.CREATE_DATA_CREATION_REQUEST));
  late CreateDataCreationRequestOp createDataCreationRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataCreationRequestOp.toXdr(stream);
  }
}

class OperationBodyCancelDataCreationRequest extends OperationBody {
  OperationBodyCancelDataCreationRequest(this.cancelDataCreationRequestOp) : super(OperationType(OperationType.CANCEL_DATA_CREATION_REQUEST));
  late CancelDataCreationRequestOp cancelDataCreationRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDataCreationRequestOp.toXdr(stream);
  }
}

class OperationBodyCreateDataUpdateRequest extends OperationBody {
  OperationBodyCreateDataUpdateRequest(this.createDataUpdateRequestOp) : super(OperationType(OperationType.CREATE_DATA_UPDATE_REQUEST));
  late CreateDataUpdateRequestOp createDataUpdateRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataUpdateRequestOp.toXdr(stream);
  }
}

class OperationBodyCreateDataRemoveRequest extends OperationBody {
  OperationBodyCreateDataRemoveRequest(this.createDataRemoveRequestOp) : super(OperationType(OperationType.CREATE_DATA_REMOVE_REQUEST));
  late CreateDataRemoveRequestOp createDataRemoveRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataRemoveRequestOp.toXdr(stream);
  }
}

class OperationBodyCancelDataUpdateRequest extends OperationBody {
  OperationBodyCancelDataUpdateRequest(this.cancelDataUpdateRequestOp) : super(OperationType(OperationType.CANCEL_DATA_UPDATE_REQUEST));
  late CancelDataUpdateRequestOp cancelDataUpdateRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDataUpdateRequestOp.toXdr(stream);
  }
}

class OperationBodyCancelDataRemoveRequest extends OperationBody {
  OperationBodyCancelDataRemoveRequest(this.cancelDataRemoveRequestOp) : super(OperationType(OperationType.CANCEL_DATA_REMOVE_REQUEST));
  late CancelDataRemoveRequestOp cancelDataRemoveRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDataRemoveRequestOp.toXdr(stream);
  }
}

class OperationBodyCreateDeferredPaymentCreationRequest extends OperationBody {
  OperationBodyCreateDeferredPaymentCreationRequest(this.createDeferredPaymentCreationRequestOp) : super(OperationType(OperationType.CREATE_DEFERRED_PAYMENT_CREATION_REQUEST));
  late CreateDeferredPaymentCreationRequestOp createDeferredPaymentCreationRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDeferredPaymentCreationRequestOp.toXdr(stream);
  }
}

class OperationBodyCancelDeferredPaymentCreationRequest extends OperationBody {
  OperationBodyCancelDeferredPaymentCreationRequest(this.cancelDeferredPaymentCreationRequestOp) : super(OperationType(OperationType.CANCEL_DEFERRED_PAYMENT_CREATION_REQUEST));
  late CancelDeferredPaymentCreationRequestOp cancelDeferredPaymentCreationRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDeferredPaymentCreationRequestOp.toXdr(stream);
  }
}

class OperationBodyCreateCloseDeferredPaymentRequest extends OperationBody {
  OperationBodyCreateCloseDeferredPaymentRequest(this.createCloseDeferredPaymentRequestOp) : super(OperationType(OperationType.CREATE_CLOSE_DEFERRED_PAYMENT_REQUEST));
  late CreateCloseDeferredPaymentRequestOp createCloseDeferredPaymentRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createCloseDeferredPaymentRequestOp.toXdr(stream);
  }
}

class OperationBodyCancelCloseDeferredPaymentRequest extends OperationBody {
  OperationBodyCancelCloseDeferredPaymentRequest(this.cancelCloseDeferredPaymentRequestOp) : super(OperationType(OperationType.CANCEL_CLOSE_DEFERRED_PAYMENT_REQUEST));
  late CancelCloseDeferredPaymentRequestOp cancelCloseDeferredPaymentRequestOp;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelCloseDeferredPaymentRequestOp.toXdr(stream);
  }
}
class MemoType extends XdrEncodable {
  static const MEMO_NONE = 0;
  static const MEMO_TEXT = 1;
  static const MEMO_ID = 2;
  static const MEMO_HASH = 3;
  static const MEMO_RETURN = 4;
  int value;
  MemoType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class Memo extends XdrEncodable {
  MemoType discriminant;
  Memo(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class MemoMemoNone extends Memo {
  MemoMemoNone() : super(MemoType(MemoType.MEMO_NONE));
}

class MemoMemoText extends Memo {
  MemoMemoText(this.text) : super(MemoType(MemoType.MEMO_TEXT));
  late String text;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    text.toXdr(stream);
  }
}

class MemoMemoId extends Memo {
  MemoMemoId(this.id) : super(MemoType(MemoType.MEMO_ID));
  late UINT64 id;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    id.toXdr(stream);
  }
}

class MemoMemoHash extends Memo {
  MemoMemoHash(this.hash) : super(MemoType(MemoType.MEMO_HASH));
  late HASH hash;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    hash.toXdr(stream);
  }
}

class MemoMemoReturn extends Memo {
  MemoMemoReturn(this.retHash) : super(MemoType(MemoType.MEMO_RETURN));
  late HASH retHash;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    retHash.toXdr(stream);
  }
}

// === xdr source ============================================================

//  struct TimeBounds
//  {
//      //: specifies inclusive min ledger close time after which transaction is valid
//      uint64 minTime;
//      //: specifies inclusive max ledger close time before which transaction is valid.
//      //: note: transaction will be rejected if max time exceeds close time of current ledger on more then [`tx_expiration_period`](https://tokend.gitlab.io/horizon/#operation/info)
//      uint64 maxTime; // 0 here means no maxTime
//  };

//  ===========================================================================
class TimeBounds extends XdrEncodable  {
  UINT64 minTime;
  UINT64 maxTime;

  TimeBounds(
      this.minTime,
      this.maxTime,
      );

  @override toXdr(XdrDataOutputStream stream) {
    minTime.toXdr(stream);
    maxTime.toXdr(stream);
  }
}
// === xdr source ============================================================

//  //: Transaction is a container for a set of operations
//  //:    - is executed by an account
//  //:    - operations are executed in order as one ACID transaction
//  //: (either all operations are applied or none are if any returns a failing code)
//  struct Transaction
//  {
//      //: account used to run the transaction
//      AccountID sourceAccount;
//
//      //: random number used to ensure there is no hash collisions
//      Salt salt;
//
//      //: validity range (inclusive) for the last ledger close time
//      TimeBounds timeBounds;
//
//      //: allows to attach additional data to the transactions
//      Memo memo;
//
//      //: list of operations to be applied. Max size is 100
//      Operation operations<100>;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class Transaction extends XdrEncodable  {
  ACCOUNTID sourceAccount;
  SALT salt;
  TimeBounds timeBounds;
  Memo memo;
  List<Operation> operations;
  TransactionExt ext;

  Transaction(
      this.sourceAccount,
      this.salt,
      this.timeBounds,
      this.memo,
      this.operations,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    sourceAccount.toXdr(stream);
    salt.toXdr(stream);
    timeBounds.toXdr(stream);
    memo.toXdr(stream);
    operations.length.toXdr(stream);
    operations.forEach ((element) {
      element.toXdr(stream);
    });
    ext.toXdr(stream);
  }
}
abstract class TransactionExt extends XdrEncodable {
  LedgerVersion discriminant;
  TransactionExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class TransactionExtEmptyVersion extends TransactionExt {
  TransactionExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct TransactionEnvelope
//  {
//      Transaction tx;
//      //: list of signatures used to authorize transaction
//      DecoratedSignature signatures<20>;
//  };

//  ===========================================================================
class TransactionEnvelope extends XdrEncodable  {
  Transaction tx;
  List<DecoratedSignature> signatures;

  TransactionEnvelope(
      this.tx,
      this.signatures,
      );

  @override toXdr(XdrDataOutputStream stream) {
    tx.toXdr(stream);
    signatures.length.toXdr(stream);
    signatures.forEach ((element) {
      element.toXdr(stream);
    });
  }
}
class OperationResultCode extends XdrEncodable {
  static const opINNER = 0;
  static const opBAD_AUTH = -1;
  static const opNO_ACCOUNT = -2;
  static const opNOT_ALLOWED = -3;
  static const opACCOUNT_BLOCKED = -4;
  static const opNO_COUNTERPARTY = -5;
  static const opCOUNTERPARTY_BLOCKED = -6;
  static const opCOUNTERPARTY_WRONG_TYPE = -7;
  static const opBAD_AUTH_EXTRA = -8;
  static const opNO_ROLE_PERMISSION = -9;
  static const opNO_ENTRY = -10;
  static const opNOT_SUPPORTED = -11;
  static const opLICENSE_VIOLATION = -12;
  static const opSKIPPED = -13;
  int value;
  OperationResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  //: Defines requirements for tx or operation which were not fulfilled
//  struct AccountRuleRequirement
//  {
//  	//: defines resources to which access was denied
//      AccountRuleResource resource;
//  	//: defines action which was denied
//      AccountRuleAction action;
//  	//: defines account for which requirements were not met
//  	AccountID account;
//
//  	//: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
class AccountRuleRequirement extends XdrEncodable  {
  AccountRuleResource resource;
  AccountRuleAction action;
  ACCOUNTID account;
  EmptyExt ext;

  AccountRuleRequirement(
      this.resource,
      this.action,
      this.account,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    resource.toXdr(stream);
    action.toXdr(stream);
    account.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class OperationResult extends XdrEncodable {
  OperationResultCode discriminant;
  OperationResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class OperationResultOpinner extends OperationResult {
  OperationResultOpinner(this.tr) : super(OperationResultCode(OperationResultCode.opINNER));
  late OperationResultTr tr;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    tr.toXdr(stream);
  }
}

class OperationResultOpnoEntry extends OperationResult {
  OperationResultOpnoEntry(this.entryType) : super(OperationResultCode(OperationResultCode.opNO_ENTRY));
  late LedgerEntryType entryType;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    entryType.toXdr(stream);
  }
}

class OperationResultOpnoRolePermission extends OperationResult {
  OperationResultOpnoRolePermission(this.requirement) : super(OperationResultCode(OperationResultCode.opNO_ROLE_PERMISSION));
  late AccountRuleRequirement requirement;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    requirement.toXdr(stream);
  }
}
abstract class OperationResultTr extends XdrEncodable {
  OperationType discriminant;
  OperationResultTr(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class OperationResultTrCreateAccount extends OperationResultTr {
  OperationResultTrCreateAccount(this.createAccountResult) : super(OperationType(OperationType.CREATE_ACCOUNT));
  late CreateAccountResult createAccountResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAccountResult.toXdr(stream);
  }
}

class OperationResultTrCreateIssuanceRequest extends OperationResultTr {
  OperationResultTrCreateIssuanceRequest(this.createIssuanceRequestResult) : super(OperationType(OperationType.CREATE_ISSUANCE_REQUEST));
  late CreateIssuanceRequestResult createIssuanceRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createIssuanceRequestResult.toXdr(stream);
  }
}

class OperationResultTrSetFees extends OperationResultTr {
  OperationResultTrSetFees(this.setFeesResult) : super(OperationType(OperationType.SET_FEES));
  late SetFeesResult setFeesResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    setFeesResult.toXdr(stream);
  }
}

class OperationResultTrCreateWithdrawalRequest extends OperationResultTr {
  OperationResultTrCreateWithdrawalRequest(this.createWithdrawalRequestResult) : super(OperationType(OperationType.CREATE_WITHDRAWAL_REQUEST));
  late CreateWithdrawalRequestResult createWithdrawalRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createWithdrawalRequestResult.toXdr(stream);
  }
}

class OperationResultTrManageBalance extends OperationResultTr {
  OperationResultTrManageBalance(this.manageBalanceResult) : super(OperationType(OperationType.MANAGE_BALANCE));
  late ManageBalanceResult manageBalanceResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageBalanceResult.toXdr(stream);
  }
}

class OperationResultTrManageAsset extends OperationResultTr {
  OperationResultTrManageAsset(this.manageAssetResult) : super(OperationType(OperationType.MANAGE_ASSET));
  late ManageAssetResult manageAssetResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAssetResult.toXdr(stream);
  }
}

class OperationResultTrCreatePreissuanceRequest extends OperationResultTr {
  OperationResultTrCreatePreissuanceRequest(this.createPreIssuanceRequestResult) : super(OperationType(OperationType.CREATE_PREISSUANCE_REQUEST));
  late CreatePreIssuanceRequestResult createPreIssuanceRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPreIssuanceRequestResult.toXdr(stream);
  }
}

class OperationResultTrManageLimits extends OperationResultTr {
  OperationResultTrManageLimits(this.manageLimitsResult) : super(OperationType(OperationType.MANAGE_LIMITS));
  late ManageLimitsResult manageLimitsResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageLimitsResult.toXdr(stream);
  }
}

class OperationResultTrManageAssetPair extends OperationResultTr {
  OperationResultTrManageAssetPair(this.manageAssetPairResult) : super(OperationType(OperationType.MANAGE_ASSET_PAIR));
  late ManageAssetPairResult manageAssetPairResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAssetPairResult.toXdr(stream);
  }
}

class OperationResultTrManageOffer extends OperationResultTr {
  OperationResultTrManageOffer(this.manageOfferResult) : super(OperationType(OperationType.MANAGE_OFFER));
  late ManageOfferResult manageOfferResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageOfferResult.toXdr(stream);
  }
}

class OperationResultTrManageInvoiceRequest extends OperationResultTr {
  OperationResultTrManageInvoiceRequest(this.manageInvoiceRequestResult) : super(OperationType(OperationType.MANAGE_INVOICE_REQUEST));
  late ManageInvoiceRequestResult manageInvoiceRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageInvoiceRequestResult.toXdr(stream);
  }
}

class OperationResultTrReviewRequest extends OperationResultTr {
  OperationResultTrReviewRequest(this.reviewRequestResult) : super(OperationType(OperationType.REVIEW_REQUEST));
  late ReviewRequestResult reviewRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    reviewRequestResult.toXdr(stream);
  }
}

class OperationResultTrCreateSaleRequest extends OperationResultTr {
  OperationResultTrCreateSaleRequest(this.createSaleCreationRequestResult) : super(OperationType(OperationType.CREATE_SALE_REQUEST));
  late CreateSaleCreationRequestResult createSaleCreationRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createSaleCreationRequestResult.toXdr(stream);
  }
}

class OperationResultTrCheckSaleState extends OperationResultTr {
  OperationResultTrCheckSaleState(this.checkSaleStateResult) : super(OperationType(OperationType.CHECK_SALE_STATE));
  late CheckSaleStateResult checkSaleStateResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    checkSaleStateResult.toXdr(stream);
  }
}

class OperationResultTrPayout extends OperationResultTr {
  OperationResultTrPayout(this.payoutResult) : super(OperationType(OperationType.PAYOUT));
  late PayoutResult payoutResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    payoutResult.toXdr(stream);
  }
}

class OperationResultTrCreateAmlAlert extends OperationResultTr {
  OperationResultTrCreateAmlAlert(this.createAMLAlertRequestResult) : super(OperationType(OperationType.CREATE_AML_ALERT));
  late CreateAMLAlertRequestResult createAMLAlertRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAMLAlertRequestResult.toXdr(stream);
  }
}

class OperationResultTrManageKeyValue extends OperationResultTr {
  OperationResultTrManageKeyValue(this.manageKeyValueResult) : super(OperationType(OperationType.MANAGE_KEY_VALUE));
  late ManageKeyValueResult manageKeyValueResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageKeyValueResult.toXdr(stream);
  }
}

class OperationResultTrCreateChangeRoleRequest extends OperationResultTr {
  OperationResultTrCreateChangeRoleRequest(this.createChangeRoleRequestResult) : super(OperationType(OperationType.CREATE_CHANGE_ROLE_REQUEST));
  late CreateChangeRoleRequestResult createChangeRoleRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createChangeRoleRequestResult.toXdr(stream);
  }
}

class OperationResultTrManageExternalSystemAccountIdPoolEntry extends OperationResultTr {
  OperationResultTrManageExternalSystemAccountIdPoolEntry(this.manageExternalSystemAccountIdPoolEntryResult) : super(OperationType(OperationType.MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY));
  late ManageExternalSystemAccountIdPoolEntryResult manageExternalSystemAccountIdPoolEntryResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageExternalSystemAccountIdPoolEntryResult.toXdr(stream);
  }
}

class OperationResultTrBindExternalSystemAccountId extends OperationResultTr {
  OperationResultTrBindExternalSystemAccountId(this.bindExternalSystemAccountIdResult) : super(OperationType(OperationType.BIND_EXTERNAL_SYSTEM_ACCOUNT_ID));
  late BindExternalSystemAccountIdResult bindExternalSystemAccountIdResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    bindExternalSystemAccountIdResult.toXdr(stream);
  }
}

class OperationResultTrPayment extends OperationResultTr {
  OperationResultTrPayment(this.paymentResult) : super(OperationType(OperationType.PAYMENT));
  late PaymentResult paymentResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    paymentResult.toXdr(stream);
  }
}

class OperationResultTrManageSale extends OperationResultTr {
  OperationResultTrManageSale(this.manageSaleResult) : super(OperationType(OperationType.MANAGE_SALE));
  late ManageSaleResult manageSaleResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSaleResult.toXdr(stream);
  }
}

class OperationResultTrCreateManageLimitsRequest extends OperationResultTr {
  OperationResultTrCreateManageLimitsRequest(this.createManageLimitsRequestResult) : super(OperationType(OperationType.CREATE_MANAGE_LIMITS_REQUEST));
  late CreateManageLimitsRequestResult createManageLimitsRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createManageLimitsRequestResult.toXdr(stream);
  }
}

class OperationResultTrManageContractRequest extends OperationResultTr {
  OperationResultTrManageContractRequest(this.manageContractRequestResult) : super(OperationType(OperationType.MANAGE_CONTRACT_REQUEST));
  late ManageContractRequestResult manageContractRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageContractRequestResult.toXdr(stream);
  }
}

class OperationResultTrManageContract extends OperationResultTr {
  OperationResultTrManageContract(this.manageContractResult) : super(OperationType(OperationType.MANAGE_CONTRACT));
  late ManageContractResult manageContractResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageContractResult.toXdr(stream);
  }
}

class OperationResultTrCancelSaleRequest extends OperationResultTr {
  OperationResultTrCancelSaleRequest(this.cancelSaleCreationRequestResult) : super(OperationType(OperationType.CANCEL_SALE_REQUEST));
  late CancelSaleCreationRequestResult cancelSaleCreationRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelSaleCreationRequestResult.toXdr(stream);
  }
}

class OperationResultTrCreateAtomicSwapAskRequest extends OperationResultTr {
  OperationResultTrCreateAtomicSwapAskRequest(this.createAtomicSwapAskRequestResult) : super(OperationType(OperationType.CREATE_ATOMIC_SWAP_ASK_REQUEST));
  late CreateAtomicSwapAskRequestResult createAtomicSwapAskRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapAskRequestResult.toXdr(stream);
  }
}

class OperationResultTrCancelAtomicSwapAsk extends OperationResultTr {
  OperationResultTrCancelAtomicSwapAsk(this.cancelAtomicSwapAskResult) : super(OperationType(OperationType.CANCEL_ATOMIC_SWAP_ASK));
  late CancelAtomicSwapAskResult cancelAtomicSwapAskResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelAtomicSwapAskResult.toXdr(stream);
  }
}

class OperationResultTrCreateAtomicSwapBidRequest extends OperationResultTr {
  OperationResultTrCreateAtomicSwapBidRequest(this.createAtomicSwapBidRequestResult) : super(OperationType(OperationType.CREATE_ATOMIC_SWAP_BID_REQUEST));
  late CreateAtomicSwapBidRequestResult createAtomicSwapBidRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createAtomicSwapBidRequestResult.toXdr(stream);
  }
}

class OperationResultTrManageAccountRole extends OperationResultTr {
  OperationResultTrManageAccountRole(this.manageAccountRoleResult) : super(OperationType(OperationType.MANAGE_ACCOUNT_ROLE));
  late ManageAccountRoleResult manageAccountRoleResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAccountRoleResult.toXdr(stream);
  }
}

class OperationResultTrManageAccountRule extends OperationResultTr {
  OperationResultTrManageAccountRule(this.manageAccountRuleResult) : super(OperationType(OperationType.MANAGE_ACCOUNT_RULE));
  late ManageAccountRuleResult manageAccountRuleResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAccountRuleResult.toXdr(stream);
  }
}

class OperationResultTrManageSigner extends OperationResultTr {
  OperationResultTrManageSigner(this.manageSignerResult) : super(OperationType(OperationType.MANAGE_SIGNER));
  late ManageSignerResult manageSignerResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSignerResult.toXdr(stream);
  }
}

class OperationResultTrManageSignerRole extends OperationResultTr {
  OperationResultTrManageSignerRole(this.manageSignerRoleResult) : super(OperationType(OperationType.MANAGE_SIGNER_ROLE));
  late ManageSignerRoleResult manageSignerRoleResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSignerRoleResult.toXdr(stream);
  }
}

class OperationResultTrManageSignerRule extends OperationResultTr {
  OperationResultTrManageSignerRule(this.manageSignerRuleResult) : super(OperationType(OperationType.MANAGE_SIGNER_RULE));
  late ManageSignerRuleResult manageSignerRuleResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageSignerRuleResult.toXdr(stream);
  }
}

class OperationResultTrStamp extends OperationResultTr {
  OperationResultTrStamp(this.stampResult) : super(OperationType(OperationType.STAMP));
  late StampResult stampResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    stampResult.toXdr(stream);
  }
}

class OperationResultTrLicense extends OperationResultTr {
  OperationResultTrLicense(this.licenseResult) : super(OperationType(OperationType.LICENSE));
  late LicenseResult licenseResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    licenseResult.toXdr(stream);
  }
}

class OperationResultTrManagePoll extends OperationResultTr {
  OperationResultTrManagePoll(this.managePollResult) : super(OperationType(OperationType.MANAGE_POLL));
  late ManagePollResult managePollResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    managePollResult.toXdr(stream);
  }
}

class OperationResultTrManageCreatePollRequest extends OperationResultTr {
  OperationResultTrManageCreatePollRequest(this.manageCreatePollRequestResult) : super(OperationType(OperationType.MANAGE_CREATE_POLL_REQUEST));
  late ManageCreatePollRequestResult manageCreatePollRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageCreatePollRequestResult.toXdr(stream);
  }
}

class OperationResultTrManageVote extends OperationResultTr {
  OperationResultTrManageVote(this.manageVoteResult) : super(OperationType(OperationType.MANAGE_VOTE));
  late ManageVoteResult manageVoteResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageVoteResult.toXdr(stream);
  }
}

class OperationResultTrManageAccountSpecificRule extends OperationResultTr {
  OperationResultTrManageAccountSpecificRule(this.manageAccountSpecificRuleResult) : super(OperationType(OperationType.MANAGE_ACCOUNT_SPECIFIC_RULE));
  late ManageAccountSpecificRuleResult manageAccountSpecificRuleResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    manageAccountSpecificRuleResult.toXdr(stream);
  }
}

class OperationResultTrCancelChangeRoleRequest extends OperationResultTr {
  OperationResultTrCancelChangeRoleRequest(this.cancelChangeRoleRequestResult) : super(OperationType(OperationType.CANCEL_CHANGE_ROLE_REQUEST));
  late CancelChangeRoleRequestResult cancelChangeRoleRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelChangeRoleRequestResult.toXdr(stream);
  }
}

class OperationResultTrRemoveAssetPair extends OperationResultTr {
  OperationResultTrRemoveAssetPair(this.removeAssetPairResult) : super(OperationType(OperationType.REMOVE_ASSET_PAIR));
  late RemoveAssetPairResult removeAssetPairResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeAssetPairResult.toXdr(stream);
  }
}

class OperationResultTrCreateKycRecoveryRequest extends OperationResultTr {
  OperationResultTrCreateKycRecoveryRequest(this.createKYCRecoveryRequestResult) : super(OperationType(OperationType.CREATE_KYC_RECOVERY_REQUEST));
  late CreateKYCRecoveryRequestResult createKYCRecoveryRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createKYCRecoveryRequestResult.toXdr(stream);
  }
}

class OperationResultTrInitiateKycRecovery extends OperationResultTr {
  OperationResultTrInitiateKycRecovery(this.initiateKYCRecoveryResult) : super(OperationType(OperationType.INITIATE_KYC_RECOVERY));
  late InitiateKYCRecoveryResult initiateKYCRecoveryResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    initiateKYCRecoveryResult.toXdr(stream);
  }
}

class OperationResultTrCreateManageOfferRequest extends OperationResultTr {
  OperationResultTrCreateManageOfferRequest(this.createManageOfferRequestResult) : super(OperationType(OperationType.CREATE_MANAGE_OFFER_REQUEST));
  late CreateManageOfferRequestResult createManageOfferRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createManageOfferRequestResult.toXdr(stream);
  }
}

class OperationResultTrCreatePaymentRequest extends OperationResultTr {
  OperationResultTrCreatePaymentRequest(this.createPaymentRequestResult) : super(OperationType(OperationType.CREATE_PAYMENT_REQUEST));
  late CreatePaymentRequestResult createPaymentRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createPaymentRequestResult.toXdr(stream);
  }
}

class OperationResultTrRemoveAsset extends OperationResultTr {
  OperationResultTrRemoveAsset(this.removeAssetResult) : super(OperationType(OperationType.REMOVE_ASSET));
  late RemoveAssetResult removeAssetResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeAssetResult.toXdr(stream);
  }
}

class OperationResultTrOpenSwap extends OperationResultTr {
  OperationResultTrOpenSwap(this.openSwapResult) : super(OperationType(OperationType.OPEN_SWAP));
  late OpenSwapResult openSwapResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    openSwapResult.toXdr(stream);
  }
}

class OperationResultTrCloseSwap extends OperationResultTr {
  OperationResultTrCloseSwap(this.closeSwapResult) : super(OperationType(OperationType.CLOSE_SWAP));
  late CloseSwapResult closeSwapResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    closeSwapResult.toXdr(stream);
  }
}

class OperationResultTrCreateRedemptionRequest extends OperationResultTr {
  OperationResultTrCreateRedemptionRequest(this.createRedemptionRequestResult) : super(OperationType(OperationType.CREATE_REDEMPTION_REQUEST));
  late CreateRedemptionRequestResult createRedemptionRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createRedemptionRequestResult.toXdr(stream);
  }
}

class OperationResultTrCreateData extends OperationResultTr {
  OperationResultTrCreateData(this.createDataResult) : super(OperationType(OperationType.CREATE_DATA));
  late CreateDataResult createDataResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataResult.toXdr(stream);
  }
}

class OperationResultTrUpdateData extends OperationResultTr {
  OperationResultTrUpdateData(this.updateDataResult) : super(OperationType(OperationType.UPDATE_DATA));
  late UpdateDataResult updateDataResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    updateDataResult.toXdr(stream);
  }
}

class OperationResultTrRemoveData extends OperationResultTr {
  OperationResultTrRemoveData(this.removeDataResult) : super(OperationType(OperationType.REMOVE_DATA));
  late RemoveDataResult removeDataResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    removeDataResult.toXdr(stream);
  }
}

class OperationResultTrCreateDataCreationRequest extends OperationResultTr {
  OperationResultTrCreateDataCreationRequest(this.createDataCreationRequestResult) : super(OperationType(OperationType.CREATE_DATA_CREATION_REQUEST));
  late CreateDataCreationRequestResult createDataCreationRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataCreationRequestResult.toXdr(stream);
  }
}

class OperationResultTrCancelDataCreationRequest extends OperationResultTr {
  OperationResultTrCancelDataCreationRequest(this.cancelDataCreationRequestResult) : super(OperationType(OperationType.CANCEL_DATA_CREATION_REQUEST));
  late CancelDataCreationRequestResult cancelDataCreationRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDataCreationRequestResult.toXdr(stream);
  }
}

class OperationResultTrCreateDataUpdateRequest extends OperationResultTr {
  OperationResultTrCreateDataUpdateRequest(this.createDataUpdateRequestResult) : super(OperationType(OperationType.CREATE_DATA_UPDATE_REQUEST));
  late CreateDataUpdateRequestResult createDataUpdateRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataUpdateRequestResult.toXdr(stream);
  }
}

class OperationResultTrCreateDataRemoveRequest extends OperationResultTr {
  OperationResultTrCreateDataRemoveRequest(this.createDataRemoveRequestResult) : super(OperationType(OperationType.CREATE_DATA_REMOVE_REQUEST));
  late CreateDataRemoveRequestResult createDataRemoveRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDataRemoveRequestResult.toXdr(stream);
  }
}

class OperationResultTrCancelDataUpdateRequest extends OperationResultTr {
  OperationResultTrCancelDataUpdateRequest(this.cancelDataUpdateRequestResult) : super(OperationType(OperationType.CANCEL_DATA_UPDATE_REQUEST));
  late CancelDataUpdateRequestResult cancelDataUpdateRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDataUpdateRequestResult.toXdr(stream);
  }
}

class OperationResultTrCancelDataRemoveRequest extends OperationResultTr {
  OperationResultTrCancelDataRemoveRequest(this.cancelDataRemoveRequestResult) : super(OperationType(OperationType.CANCEL_DATA_REMOVE_REQUEST));
  late CancelDataRemoveRequestResult cancelDataRemoveRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDataRemoveRequestResult.toXdr(stream);
  }
}

class OperationResultTrCreateDeferredPaymentCreationRequest extends OperationResultTr {
  OperationResultTrCreateDeferredPaymentCreationRequest(this.createDeferredPaymentCreationRequestResult) : super(OperationType(OperationType.CREATE_DEFERRED_PAYMENT_CREATION_REQUEST));
  late CreateDeferredPaymentCreationRequestResult createDeferredPaymentCreationRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createDeferredPaymentCreationRequestResult.toXdr(stream);
  }
}

class OperationResultTrCancelDeferredPaymentCreationRequest extends OperationResultTr {
  OperationResultTrCancelDeferredPaymentCreationRequest(this.cancelDeferredPaymentCreationRequestResult) : super(OperationType(OperationType.CANCEL_DEFERRED_PAYMENT_CREATION_REQUEST));
  late CancelDeferredPaymentCreationRequestResult cancelDeferredPaymentCreationRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelDeferredPaymentCreationRequestResult.toXdr(stream);
  }
}

class OperationResultTrCreateCloseDeferredPaymentRequest extends OperationResultTr {
  OperationResultTrCreateCloseDeferredPaymentRequest(this.createCloseDeferredPaymentRequestResult) : super(OperationType(OperationType.CREATE_CLOSE_DEFERRED_PAYMENT_REQUEST));
  late CreateCloseDeferredPaymentRequestResult createCloseDeferredPaymentRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    createCloseDeferredPaymentRequestResult.toXdr(stream);
  }
}

class OperationResultTrCancelCloseDeferredPaymentRequest extends OperationResultTr {
  OperationResultTrCancelCloseDeferredPaymentRequest(this.cancelCloseDeferredPaymentRequestResult) : super(OperationType(OperationType.CANCEL_CLOSE_DEFERRED_PAYMENT_REQUEST));
  late CancelCloseDeferredPaymentRequestResult cancelCloseDeferredPaymentRequestResult;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    cancelCloseDeferredPaymentRequestResult.toXdr(stream);
  }
}

class TransactionResultCode extends XdrEncodable {
  static const txSUCCESS = 0;
  static const txFAILED = -1;
  static const txTOO_EARLY = -2;
  static const txTOO_LATE = -3;
  static const txMISSING_OPERATION = -4;
  static const txBAD_AUTH = -5;
  static const txNO_ACCOUNT = -6;
  static const txBAD_AUTH_EXTRA = -7;
  static const txINTERNAL_ERROR = -8;
  static const txACCOUNT_BLOCKED = -9;
  static const txDUPLICATION = -10;
  static const txINSUFFICIENT_FEE = -11;
  static const txSOURCE_UNDERFUNDED = -12;
  static const txCOMMISSION_LINE_FULL = -13;
  static const txFEE_INCORRECT_PRECISION = -14;
  static const txNO_ROLE_PERMISSION = -15;
  int value;
  TransactionResultCode(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct OperationFee
//  {
//      OperationType operationType;
//      uint64 amount;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class OperationFee extends XdrEncodable  {
  OperationType operationType;
  UINT64 amount;
  OperationFeeExt ext;

  OperationFee(
      this.operationType,
      this.amount,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    operationType.toXdr(stream);
    amount.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class OperationFeeExt extends XdrEncodable {
  LedgerVersion discriminant;
  OperationFeeExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class OperationFeeExtEmptyVersion extends OperationFeeExt {
  OperationFeeExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
// === xdr source ============================================================

//  struct TransactionResult
//  {
//      int64 feeCharged; // actual fee charged for the transaction
//
//      union switch (TransactionResultCode code)
//      {
//      case txSUCCESS:
//      case txFAILED:
//          OperationResult results<>;
//      case txNO_ROLE_PERMISSION:
//          AccountRuleRequirement requirement;
//      default:
//          void;
//      }
//      result;
//
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
class TransactionResult extends XdrEncodable  {
  INT64 feeCharged;
  TransactionResultResult result;
  TransactionResultExt ext;

  TransactionResult(
      this.feeCharged,
      this.result,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    feeCharged.toXdr(stream);
    result.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class TransactionResultResult extends XdrEncodable {
  TransactionResultCode discriminant;
  TransactionResultResult(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class TransactionResultResultTxsuccess extends TransactionResultResult {
  TransactionResultResultTxsuccess(this.results) : super(TransactionResultCode(TransactionResultCode.txSUCCESS));
  late List<OperationResult> results;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    results.length.toXdr(stream);
    results.forEach ((element) {
      element.toXdr(stream);
    });
  }
}

class TransactionResultResultTxfailed extends TransactionResultResult {
  TransactionResultResultTxfailed(this.results) : super(TransactionResultCode(TransactionResultCode.txFAILED));
  late List<OperationResult> results;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    results.length.toXdr(stream);
    results.forEach ((element) {
      element.toXdr(stream);
    });
  }
}

class TransactionResultResultTxnoRolePermission extends TransactionResultResult {
  TransactionResultResultTxnoRolePermission(this.requirement) : super(TransactionResultCode(TransactionResultCode.txNO_ROLE_PERMISSION));
  late AccountRuleRequirement requirement;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    requirement.toXdr(stream);
  }
}

abstract class TransactionResultExt extends XdrEncodable {
  LedgerVersion discriminant;
  TransactionResultExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class TransactionResultExtEmptyVersion extends TransactionResultExt {
  TransactionResultExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class LedgerVersion extends XdrEncodable {
  static const EMPTY_VERSION = 0;
  static const CHECK_SET_FEE_ACCOUNT_EXISTING = 1;
  static const FIX_PAYMENT_STATS = 2;
  static const ADD_INVEST_FEE = 3;
  static const ADD_SALE_WHITELISTS = 4;
  static const ASSET_PAIR_RESTRICTIONS = 5;
  static const FIX_CHANGE_TO_NON_EXISTING_ROLE = 6;
  static const FIX_REVERSE_SALE_PAIR = 7;
  static const FIX_NOT_CHECKING_SET_TASKS_PERMISSIONS = 8;
  static const UNLIMITED_ADMIN_COUNT = 9;
  static const FIX_AML_ALERT_ERROR_CODES = 10;
  static const FIX_EXT_SYS_ACC_EXPIRATION_TIME = 11;
  static const FIX_CHANGE_ROLE_REJECT_TASKS = 12;
  static const FIX_SAME_ASSET_PAIR = 13;
  static const ATOMIC_SWAP_RETURNING = 14;
  static const FIX_INVEST_FEE = 15;
  static const ADD_ACC_SPECIFIC_RULE_RESOURCE = 16;
  static const FIX_SIGNER_CHANGES_REMOVE = 17;
  static const FIX_DEPOSIT_STATS = 18;
  static const FIX_CREATE_KYC_RECOVERY_PERMISSIONS = 19;
  static const CLEAR_DATABASE_CACHE = 20;
  static const FIX_ISSUANCE_REVIEWER = 21;
  static const MARK_ASSET_AS_DELETED = 22;
  static const FIX_MAX_SUBJECT_SIZE = 23;
  static const FIX_MOVEMENT_REVIEW = 24;
  static const FIX_SIGNATURE_CHECK = 25;
  static const FIX_AUTOREVIEW = 26;
  static const MOVEMENT_REQUESTS_DETAILS = 27;
  static const FIX_CRASH_CORE_WITH_PAYMENT = 28;
  static const FIX_INVEST_TO_IMMEDIATE_SALE = 29;
  static const FIX_PAYMENT_TASKS_WILDCARD_VALUE = 30;
  static const FIX_CHANGE_ROLE_REQUEST_REQUESTOR = 31;
  int value;
  LedgerVersion(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class EmptyExt extends XdrEncodable {
  LedgerVersion discriminant;
  EmptyExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class EmptyExtEmptyVersion extends EmptyExt {
  EmptyExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}

typedef HASH = XdrByteArrayFixed32;
typedef UINT256 = XdrByteArrayFixed32;
typedef UINT32 = int;
typedef INT32 = int;
typedef UINT64 = Int64;
typedef INT64 = Int64;
class CryptoKeyType extends XdrEncodable {
  static const KEY_TYPE_ED25519 = 0;
  int value;
  CryptoKeyType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
class PublicKeyType extends XdrEncodable {
  static const PUBLIC_KEY_TYPE_ED25519 = 0;
  int value;
  PublicKeyType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
abstract class PublicKey extends XdrEncodable {
  CryptoKeyType discriminant;
  PublicKey(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class PublicKeyKeyTypeEd25519 extends PublicKey {
  PublicKeyKeyTypeEd25519(this.ed25519) : super(CryptoKeyType(CryptoKeyType.KEY_TYPE_ED25519));
  late UINT256 ed25519;
  @override toXdr(XdrDataOutputStream stream) {
    super.toXdr(stream);
    ed25519.toXdr(stream);
  }
}

class LedgerEntryType extends XdrEncodable {
  static const ANY = 1;
  static const ACCOUNT = 2;
  static const SIGNER = 3;
  static const FEE = 4;
  static const BALANCE = 5;
  static const PAYMENT_REQUEST = 6;
  static const ASSET = 7;
  static const REFERENCE_ENTRY = 8;
  static const STATISTICS = 9;
  static const TRUST = 10;
  static const ACCOUNT_LIMITS = 11;
  static const ASSET_PAIR = 12;
  static const OFFER_ENTRY = 13;
  static const REVIEWABLE_REQUEST = 15;
  static const EXTERNAL_SYSTEM_ACCOUNT_ID = 16;
  static const SALE = 17;
  static const ACCOUNT_KYC = 18;
  static const EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY = 19;
  static const KEY_VALUE = 20;
  static const LIMITS_V2 = 22;
  static const STATISTICS_V2 = 23;
  static const PENDING_STATISTICS = 24;
  static const CONTRACT = 25;
  static const ACCOUNT_ROLE = 26;
  static const ACCOUNT_RULE = 27;
  static const ATOMIC_SWAP_ASK = 28;
  static const TRANSACTION = 29;
  static const SIGNER_RULE = 30;
  static const SIGNER_ROLE = 31;
  static const STAMP = 32;
  static const LICENSE = 33;
  static const POLL = 34;
  static const VOTE = 35;
  static const ACCOUNT_SPECIFIC_RULE = 36;
  static const INITIATE_KYC_RECOVERY = 37;
  static const SWAP = 38;
  static const DATA = 39;
  static const CUSTOM = 40;
  static const DEFERRED_PAYMENT = 41;
  int value;
  LedgerEntryType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
typedef SIGNATURE = Uint8List;
typedef SIGNATUREHINT = XdrByteArrayFixed4;
typedef NODEID = PublicKey;
// === xdr source ============================================================

//  struct Curve25519Secret
//  {
//          opaque key[32];
//  };

//  ===========================================================================
class Curve25519Secret extends XdrEncodable  {
  XdrByteArrayFixed32 key;

  Curve25519Secret(
      this.key,
      );

  @override toXdr(XdrDataOutputStream stream) {
    key.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct Curve25519Public
//  {
//          opaque key[32];
//  };

//  ===========================================================================
class Curve25519Public extends XdrEncodable  {
  XdrByteArrayFixed32 key;

  Curve25519Public(
      this.key,
      );

  @override toXdr(XdrDataOutputStream stream) {
    key.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct HmacSha256Key
//  {
//          opaque key[32];
//  };

//  ===========================================================================
class HmacSha256Key extends XdrEncodable  {
  XdrByteArrayFixed32 key;

  HmacSha256Key(
      this.key,
      );

  @override toXdr(XdrDataOutputStream stream) {
    key.toXdr(stream);
  }
}
// === xdr source ============================================================

//  struct HmacSha256Mac
//  {
//          opaque mac[32];
//  };

//  ===========================================================================
class HmacSha256Mac extends XdrEncodable  {
  XdrByteArrayFixed32 mac;

  HmacSha256Mac(
      this.mac,
      );

  @override toXdr(XdrDataOutputStream stream) {
    mac.toXdr(stream);
  }
}
typedef ACCOUNTID = PublicKey;
typedef BALANCEID = PublicKey;
typedef THRESHOLDS = XdrByteArrayFixed4;
typedef STRING32 = String;
typedef STRING64 = String;
typedef STRING256 = String;
typedef LONGSTRING = String;
typedef ASSETCODE = String;
typedef SALT = UINT64;
typedef DATAVALUE = Uint8List;
// === xdr source ============================================================

//  //: `Fee` is used to unite fixed and percent fee amounts
//  struct Fee {
//      //: Fixed amount to pay for the operation
//  	uint64 fixed;
//  	//: Part of the managed amount in percents
//  	uint64 percent;
//
//      //: reserved for future use
//      union switch(LedgerVersion v)
//      {
//          case EMPTY_VERSION:
//              void;
//      }
//      ext;
//  };

//  ===========================================================================
class Fee extends XdrEncodable  {
  UINT64 fixed;
  UINT64 percent;
  FeeExt ext;

  Fee(
      this.fixed,
      this.percent,
      this.ext,
      );

  @override toXdr(XdrDataOutputStream stream) {
    fixed.toXdr(stream);
    percent.toXdr(stream);
    ext.toXdr(stream);
  }
}
abstract class FeeExt extends XdrEncodable {
  LedgerVersion discriminant;
  FeeExt(this.discriminant);
  @override toXdr(XdrDataOutputStream stream) {
    discriminant.toXdr(stream);
  }
}

class FeeExtEmptyVersion extends FeeExt {
  FeeExtEmptyVersion() : super(LedgerVersion(LedgerVersion.EMPTY_VERSION));
}
class OperationType extends XdrEncodable {
  static const CREATE_ACCOUNT = 1;
  static const CREATE_ISSUANCE_REQUEST = 3;
  static const SET_FEES = 5;
  static const CREATE_WITHDRAWAL_REQUEST = 7;
  static const MANAGE_BALANCE = 9;
  static const MANAGE_ASSET = 11;
  static const CREATE_PREISSUANCE_REQUEST = 12;
  static const MANAGE_LIMITS = 13;
  static const MANAGE_ASSET_PAIR = 15;
  static const MANAGE_OFFER = 16;
  static const MANAGE_INVOICE_REQUEST = 17;
  static const REVIEW_REQUEST = 18;
  static const CREATE_SALE_REQUEST = 19;
  static const CHECK_SALE_STATE = 20;
  static const CREATE_AML_ALERT = 21;
  static const CREATE_CHANGE_ROLE_REQUEST = 22;
  static const PAYMENT = 23;
  static const MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY = 24;
  static const BIND_EXTERNAL_SYSTEM_ACCOUNT_ID = 25;
  static const MANAGE_SALE = 26;
  static const MANAGE_KEY_VALUE = 27;
  static const CREATE_MANAGE_LIMITS_REQUEST = 28;
  static const MANAGE_CONTRACT_REQUEST = 29;
  static const MANAGE_CONTRACT = 30;
  static const CANCEL_SALE_REQUEST = 31;
  static const PAYOUT = 32;
  static const MANAGE_ACCOUNT_ROLE = 33;
  static const MANAGE_ACCOUNT_RULE = 34;
  static const CREATE_ATOMIC_SWAP_ASK_REQUEST = 35;
  static const CANCEL_ATOMIC_SWAP_ASK = 36;
  static const CREATE_ATOMIC_SWAP_BID_REQUEST = 37;
  static const MANAGE_SIGNER = 38;
  static const MANAGE_SIGNER_ROLE = 39;
  static const MANAGE_SIGNER_RULE = 40;
  static const STAMP = 41;
  static const LICENSE = 42;
  static const MANAGE_CREATE_POLL_REQUEST = 43;
  static const MANAGE_POLL = 44;
  static const MANAGE_VOTE = 45;
  static const MANAGE_ACCOUNT_SPECIFIC_RULE = 46;
  static const CANCEL_CHANGE_ROLE_REQUEST = 47;
  static const INITIATE_KYC_RECOVERY = 48;
  static const CREATE_KYC_RECOVERY_REQUEST = 49;
  static const REMOVE_ASSET_PAIR = 50;
  static const CREATE_MANAGE_OFFER_REQUEST = 51;
  static const CREATE_PAYMENT_REQUEST = 52;
  static const REMOVE_ASSET = 53;
  static const OPEN_SWAP = 54;
  static const CLOSE_SWAP = 55;
  static const CREATE_REDEMPTION_REQUEST = 56;
  static const CREATE_DATA = 57;
  static const UPDATE_DATA = 58;
  static const REMOVE_DATA = 59;
  static const CREATE_DATA_CREATION_REQUEST = 60;
  static const CANCEL_DATA_CREATION_REQUEST = 61;
  static const CREATE_DATA_UPDATE_REQUEST = 62;
  static const CREATE_DATA_REMOVE_REQUEST = 63;
  static const CANCEL_DATA_UPDATE_REQUEST = 64;
  static const CANCEL_DATA_REMOVE_REQUEST = 65;
  static const CREATE_DEFERRED_PAYMENT_CREATION_REQUEST = 66;
  static const CANCEL_DEFERRED_PAYMENT_CREATION_REQUEST = 67;
  static const CREATE_CLOSE_DEFERRED_PAYMENT_REQUEST = 68;
  static const CANCEL_CLOSE_DEFERRED_PAYMENT_REQUEST = 69;
  int value;
  OperationType(this.value);
  @override toXdr(XdrDataOutputStream stream) {
    value.toXdr(stream);
  }

}
// === xdr source ============================================================

//  struct DecoratedSignature
//  {
//      SignatureHint hint;  // last 4 bytes of the public key, used as a hint
//      Signature signature; // actual signature
//  };

//  ===========================================================================
class DecoratedSignature extends XdrEncodable  {
  SIGNATUREHINT hint;
  SIGNATURE signature;

  DecoratedSignature(
      this.hint,
      this.signature,
      );

  @override toXdr(XdrDataOutputStream stream) {
    hint.toXdr(stream);
    signature.toXdr(stream);
  }
}